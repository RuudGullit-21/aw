////////////////////////////////////////////////////////////////////////////////
// Общий модуль взаимодействия с мобильным приложением водителя УАТ.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет установку значения констант, используемых при работе с мобильным приложением
//
// Параметры:
//  стрНастроек   - структура - структура, содержащая устанавливаемые настройки работы мобильного приложения 
//  стрПараметров - структура - структура, содержащая устанавливаемые параметры работы мобильного приложения
//  ЛогированиеWS - булево    - признак ведения лога работы web-сервиса "uatDriverAppService"
//
Процедура СохранитьНастройкиМобильногоПриложения(Знач стрНастроек=Неопределено, Знач стрПараметров=Неопределено, 
		Знач ЛогированиеWS=Неопределено, Знач стрНастройкиХраненияИсторииМестоположения=Неопределено, 
		Знач ИнтервалНеактивностиДляСнятияСЛинии=Неопределено) Экспорт 
	
	Если Не стрНастроек = Неопределено Тогда 
		БазаНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.НастройкиМобильногоПриложенияПоУмолчанию();
		
		Для Каждого ТекНастройка Из БазаНастроек Цикл 
			Если стрНастроек.Свойство(ТекНастройка.Ключ) Тогда
				БазаНастроек.Вставить(ТекНастройка.Ключ, стрНастроек[ТекНастройка.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Константы.уатНастройкиМобильногоПриложенияВодителя.Установить(Новый ХранилищеЗначения(БазаНастроек, Новый СжатиеДанных(9)));
	КонецЕсли;
	
	Если Не стрПараметров = Неопределено Тогда 
		БазаПараметров = уатМобильноеПриложениеВодителяСерверПовтИсп.ПараметрыМобильногоПриложенияПоУмолчанию();
		
		Для Каждого ТекПараметр Из БазаПараметров Цикл 
			Если стрПараметров.Свойство(ТекПараметр.Ключ) Тогда
				БазаПараметров.Вставить(ТекПараметр.Ключ, стрПараметров[ТекПараметр.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Константы.уатПараметрыМобильногоПриложенияВодителя.Установить(Новый ХранилищеЗначения(БазаПараметров, Новый СжатиеДанных(9)));
	КонецЕсли;
	
	Если Не ЛогированиеWS = Неопределено Тогда 
		Константы.уатВестиЛогWSМПВУАТ.Установить(ЛогированиеWS);
	КонецЕсли;
	
	Если Не стрНастройкиХраненияИсторииМестоположения = Неопределено Тогда 
		БазаНастроекХраненияИстории = уатМобильноеПриложениеВодителяСерверПовтИсп.ПараметрыХраненияИсторииМестоположенияПоУмолчанию();
		
		Для Каждого ТекНастрока Из БазаНастроекХраненияИстории Цикл 
			Если стрНастройкиХраненияИсторииМестоположения.Свойство(ТекНастрока.Ключ) Тогда
				БазаНастроекХраненияИстории.Вставить(ТекНастрока.Ключ, стрНастройкиХраненияИсторииМестоположения[ТекНастрока.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Константы.уатНастройкиХраненияИсторииМестоположения.Установить(Новый ХранилищеЗначения(БазаНастроекХраненияИстории, Новый СжатиеДанных(9)));
	КонецЕсли;
	
	Если Не ИнтервалНеактивностиДляСнятияСЛинии = Неопределено Тогда 
		Константы.уатИнтервалНеактивностиДляСнятияСЛинии.Установить(ИнтервалНеактивностиДляСнятияСЛинии);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // СохранитьНастройкиМобильногоПриложения()

// Функция получения ключа служебного обсуждения
//
Функция КлючСлужебногоОбсуждения() Экспорт
	Возврат "НовыеСообщенияМобильногоПриложения_ВодительУАТ";
КонецФункции

// Функция выполняет создание служебного обсуждения
//
Функция СоздатьСлужебноеОбсуждение() Экспорт
	
	Обсуждение = Неопределено; 
	Если НЕ Обсуждения.ОбсужденияДоступны() Тогда
		Возврат Обсуждение;
	Конецесли;
	
	КлючСлужебногоОбсуждения = уатМобильноеПриложениеВодителяСервер.КлючСлужебногоОбсуждения();
	Если НЕ ЗначениеЗаполнено(КлючСлужебногоОбсуждения) Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючСлужебногоОбсуждения);
		Если СистемаВзаимодействия.ПолучитьОбсуждение(КлючСлужебногоОбсуждения) = Неопределено Тогда
			Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Групповое    = Истина;
			Обсуждение.Отображаемое = Ложь;
			Обсуждение.Ключ         = КлючСлужебногоОбсуждения;
			Обсуждение.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя()); 
			Обсуждение.Записать();
		ИначеЕсли НЕ Обсуждение.Участники.Содержит(СистемаВзаимодействия.ИдентификаторТекущегоПользователя()) Тогда
			Обсуждение.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
			Обсуждение.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Обсуждение;

КонецФункции

// Процедура выполняет отправку служебного сообщения
//
Процедура ОтправитьСообщениеВСлужебноеОбсуждение() Экспорт
	
	СлужебноеОбсуждение = СоздатьСлужебноеОбсуждение();

	Если СлужебноеОбсуждение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НовоеСообщение", Истина);
	
	Сообщение = СистемаВзаимодействия.СоздатьСообщение(СлужебноеОбсуждение.Идентификатор);
	Сообщение.Данные = СтруктураДанных;
	Сообщение.Записать();
	
	ОчиститьУстаревшиеСообщения(СлужебноеОбсуждение.Идентификатор);
	
КонецПроцедуры

// Функция обработки операции "Execute command" web-сервиса "Driver app service (UAT)"
//
// Параметры:
//  loginData         - строка - строка XML, содержащая структуру логина пользователя мобильного приложения
//  commandName       - строка - имя выполняемой команды
//  requestData       - строка - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число  - код результата выполнения
//  resultDescription - строка - строковое описание результата выполнения
//
// Возвращаемое значение:
//   Булево           - истина - метод выполен успешно;
//                    - ложь   - при выполнении метода возникли ошибки.
//
Функция ОбработатьМетодExecuteCommand(loginData, commandName, requestData, responseData, resultCode, resultDescription) Экспорт 
	
	Результат = Ложь;
	ДопПараметрыРезультат = Новый Структура();
	
	Если Не уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением() Тогда 
		ТекстНСТР = НСтр("en='Use of subsystem ""Driver mobile app"" is disabled.';ru='Использование подсистемы ""Мобильное приложение водителя"" отключено.'");
		ЗаписатьСообщениеОбОшибке("ExecuteCommand", ТекстНСТР);
		resultCode = 3;
		resultDescription = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьОписаниеКодаОшибки(resultCode, "ru");
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьЛогExecuteCommandВходнойНаборДанных(loginData, commandName, requestData);
	
	
	Если НРег(commandName) = НРег("getUsers") Тогда 
		
		Результат = ОбработатьМетодGetUsers(responseData, resultCode);
		
	ИначеЕсли НРег(commandName) = НРег("get1CInfo") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации,, Истина);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGet1CInfo(responseData, resultCode);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 10;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("login") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации, requestData,,Истина);

		
		Если Результат Тогда 
			Результат = ОбработатьМетодLogin(resultCode, ДанныеАвторизации, requestData, ДопПараметрыРезультат);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 15;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getSettings") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetSettings(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда  
				resultCode = 30;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли НРег(commandName) = НРег("getChats") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetChats(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда  
				resultCode = 130;
			КонецЕсли;
		КонецЕсли;
		

	ИначеЕсли НРег(commandName) = НРег("setVehiclePositions") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSetVehiclePositions(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 35;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("logout") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодLogout(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 40;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendMessages") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendMessages(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 50;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getMessages") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetMessages(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 55;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("updateMessageStatus") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодUpdateMessageStatus(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 135;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		

	ИначеЕсли НРег(commandName) = НРег("getRouteList") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetRouteList(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 60;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendAcceptStatus") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendAcceptStatus(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 60;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("updateOrders") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодUpdateOrders(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 65;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendLateArrival") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendLateArrival(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 75;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("setPushID") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSetPushID(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 80;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendImage") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendImage(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 85;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendImageRepair") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendImageRepair(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 85;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("deleteImages") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодDeleteImages(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 90;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getQRcode") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetQRcode(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 145;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getOrderResults") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetOrderResults(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("sendAppStatus") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодSendAppStatus(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getRepairTypes") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetRepairTypes(responseData, resultCode);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getStatus") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetStatus(responseData, resultCode);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	

	ИначеЕсли НРег(commandName) = НРег("getVehicles") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetVehicles(loginData, responseData, requestData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getOrdersForRepair") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetOrdersForRepair(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("addOrderForRepair") Тогда
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодAddOrderForRepair(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 130;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("updateOrderForRepair") Тогда
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодUpdateOrderForRepair(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 130;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("getFuellingTypes") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetFuellingTypes(responseData, resultCode);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("getFuels") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetFuels(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("getAllFuels") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetAllFuels(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;

	ИначеЕсли НРег(commandName) = НРег("getFuelCards") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetFuelCards(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;   
		
	ИначеЕсли НРег(commandName) = НРег("getAllFuelCards") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetAllFuelCards(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;

	ИначеЕсли НРег(commandName) = НРег("getGasStations") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetGasStations(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("getWaybills") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetWaybills(responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("updateWaybill") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодUpdateWaybill(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("addWaybill") Тогда
		
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодAddWaybill(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
	ИначеЕсли НРег(commandName) = НРег("getMileageConsumptionMonitoring") Тогда
	
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации);
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetMileageConsumptionMonitoring(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;
		
	ИначеЕсли НРег(commandName) = НРег("GetWaybillPDF") Тогда
	
		ДанныеАвторизации = Неопределено;
		Результат = АвторизоватьПользователя(loginData, responseData, resultCode, ДанныеАвторизации); 
		
		Если Результат Тогда 
			Результат = ОбработатьМетодGetWaybillPDF(requestData, responseData, resultCode, ДанныеАвторизации);
		Иначе 
			Если resultCode = -1 Тогда 
				resultCode = 120;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат И resultCode = 0 Тогда 
			ОбновитьВремяПоследнегоСобытия(ДанныеАвторизации);
		КонецЕсли;

	Иначе 
		// нет вызываемого метода
		responseData = "<response/>";
		resultCode   = 29998;
		
		Результат = Ложь;
	КонецЕсли;
	
	resultDescription = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьОписаниеКодаОшибки(resultCode, "ru");
	
	Если ДопПараметрыРезультат.Количество() Тогда 
		ПодставитьДопПараметрыВОтветСервиса(resultCode, resultDescription, ДопПараметрыРезультат);
	КонецЕсли;
	
	ЗаписатьЛогExecuteCommandВыходнойНаборДанных(responseData, resultCode, resultDescription);
	
	Возврат Результат;
	
КонецФункции // ОбработатьМетодExecuteCommand()

// Функция предназначена для получения списка всех пользователей мобильного приложения водителя УАТ
//
Процедура ОбновитьПользователейМобильногоПриложения()
	
	стрНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  стрНастроек.АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   стрНастроек.ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  стрНастроек.ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", стрНастроек.ПарольСервераМП);
	
	ТекстОшибки = "";
	стрДанныеОтвета = Неопределено;
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "updateUsers",, стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("resultCode") И стрДанныеОтвета.resultCode = "0" Тогда 
			ТекстНСТР = НСтр("en='List of users updated successfully.';ru='Список пользователей обновлен успешно.'");
		ИначеЕсли стрДанныеОтвета.Свойство("resultDescription") Тогда
			ТекстНСТР = НСтр("en = 'When updating the user list the error occurred.""Description of the error:'; ru = 'При обновлении списка пользователей возникла ошибка. Описание ошибки:'")
			+ " " + стрДанныеОтвета.resultDescription;
			ЗаписатьСообщениеОбОшибке(НСтр("ru='Обновление пользователей Мобильного приложенияи'"), ТекстНСТР);
		Иначе 
			ТекстНСТР = НСтр("en='When updating the user list the error occurred.';ru='При обновлении списка пользователей возникла ошибка.'");
			ЗаписатьСообщениеОбОшибке(НСтр("ru='Обновление пользователей Мобильного приложенияи'"), стрДанныеОтвета);
		КонецЕсли;
	Иначе 
		ЗаписатьСообщениеОбОшибке(НСтр("ru='Обновление пользователей Мобильного приложенияи'"), ТекстОшибки);
	КонецЕсли;

	
КонецПроцедуры

// Процедура снятия неактивных водителей с линии.
//
Процедура СнятьНеактивныхВодителейСЛинии() Экспорт
	
	ИнтервалНеактивности = Константы.уатИнтервалНеактивностиДляСнятияСЛинии.Получить();
	
	Если ИнтервалНеактивности = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаСнятияПоНеактивности", ТекущаяДата()-ИнтервалНеактивности*60);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо,
	|	уатВодителиНаЛинии.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.ДатаПоследнегоСобытия <= &ДатаСнятияПоНеактивности";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);

		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстНСТР = НСтр("en='Removing drivers from the line';ru='Снятие водителей с линии'");
			ЗаписатьСообщениеОбОшибке(ТекстНСТР, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обмен данными с промежуточным сервером мобильного приложения.
//
Функция ВыполнитьМетодСервераМП(Знач стрПараметрыПодключения, Знач ИмяМетода, Знач ДанныеДляОтправки="", СтруктураОтвета, ТекстОшибки) Экспорт
	
	СтруктураОтвета = Новый Структура();
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(
			стрПараметрыПодключения.АдресСервераМП, 
			стрПараметрыПодключения.ПортСервераМП, 
			стрПараметрыПодключения.ЛогинСервераМП,
			стрПараметрыПодключения.ПарольСервераМП,
			,
			15);
	Исключение
		ТекстОшибки = НСтр("en='Could not connect to the mobile app server.';ru='Не удалось установить соединение с сервером мобильного приложения.'");
		HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос("/");
	HTTPЗапрос.УстановитьТелоИзСтроки(
		"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:w3=""http://www.w3.org/"">
		|	<soapenv:Header/>
		|	<soapenv:Body>
		|		<w3:ExecuteCommand>
		|		<w3:loginData><![CDATA[<loginStr><login></login><pass></pass><trackerID></trackerID><carID></carID></loginStr>]]></w3:loginData>
		|		<w3:commandName>" + ИмяМетода + "</w3:commandName>
		|		<w3:requestData>" + ДанныеДляОтправки + "</w3:requestData>
		|		</w3:ExecuteCommand>
		|	</soapenv:Body>
		|</soapenv:Envelope>",
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = НСтр("en='Failed to send data to mobile application server.';ru='Не удалось отправить данные на сервер мобильного приложения.'");
		HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	Если Не HTTPОтвет.КодСостояния = 200 Тогда 
		ТекстОшибки = НСтр("en='Error occurred while sending data to mobile application server.';ru='Возникла ошибка при отправке данных на сервер мобильного приложения.'");
		HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЧтениеXMLДанных = Новый ЧтениеXML;
		ЧтениеXMLДанных.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Пока ЧтениеXMLДанных.Прочитать() Цикл 
			Если ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXMLДанных.ЛокальноеИмя = "ExecuteCommandResponse" Тогда 
				Пока ЧтениеXMLДанных.Прочитать() Цикл 
					Если ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXMLДанных.ЛокальноеИмя = "ExecuteCommandResponse" Тогда 
						Прервать;
					ИначеЕсли ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
						ИмяТега = ЧтениеXMLДанных.ЛокальноеИмя;
						ЧтениеXMLДанных.Прочитать();
						СтруктураОтвета.Вставить(ИмяТега, ЧтениеXMLДанных.Значение);
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXMLДанных.Закрыть();
	Исключение
		ТекстОшибки = НСтр("en='Error occurred when processing the server response of mobile app.';ru='Возникла ошибка при обработке ответа сервера мобильного приложения.'");
		HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	HTTPСоединение = Неопределено;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьМетодСервераМП()

#Область ЛогированиеИЗаписьОшибок

// Процедура выполняет запись ошибки в журнал регистрации
//
// Параметры:
//  ИмяСобытия             - строка            - имя события, в котором возникла ошибка
//  Комментарий            - строка            - описание ошибки
//  Объект                 - объект метаданных - объект метаданных конфигурации, в котором возникла ошибка
//  СтруктураДопПараметров - структура         - дополнительные параметры
//
Процедура ЗаписатьСообщениеОбОшибке(ИмяСобытия="", Комментарий="", Объект=Неопределено, 
	                                СтруктураДопПараметров=Неопределено) Экспорт
	
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	
	Если Объект = Неопределено Тогда 
		Объект = Метаданные.ОбщиеМодули.уатМобильноеПриложениеВодителяСервер;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='WS mobile app of the driver.';ru='WS мобильное приложение водителя.'") + " " + ИмяСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
		Уровень,
		Объект,
		,
		Комментарий);
	
КонецПроцедуры // ЗаписатьСообщениеОбОшибке()

// Процедура выполняет запись лога в журнал регистрации в случае, когда включено ведение лога работы web-сервиса
//
// Параметры:
//  ИмяСобытия             - строка                    - имя логируемого события
//  Комментарий            - строка                    - логируемые данные
//  Уровень                - УровеньЖурналаРегистрации - уровень важности события
//  Объект                 - объект метаданных         - логируемый объект метаданных конфигурации
//  СтруктураДопПараметров - структура                 - дополнительные параметры
//
Процедура ЗаписатьСообщениеЛога(ИмяСобытия="", Комментарий="", Уровень=Неопределено, Объект=Неопределено, 
	                            СтруктураДопПараметров=Неопределено) Экспорт
	
	Если уатМобильноеПриложениеВодителяСерверПовтИсп.ВестиЛогWSМПВУАТ() Тогда
		Если Уровень = Неопределено Тогда
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		Если Объект = Неопределено Тогда 
			Объект = Метаданные.ОбщиеМодули.уатМобильноеПриложениеВодителяСервер;
		КонецЕсли;
		
		ИмяСобытияВЖурналеРегистрации = НСтр("en='WS mobile app of the driver.';ru='WS мобильное приложение водителя.'") + ИмяСобытия;
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
			Уровень,
			Объект,
			,
			Комментарий);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьСообщениеЛога()

Процедура РассчитатьСпидометр(СтруктураПараметров, СтруктураРезультат) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаВыезда)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаВозвращения) Тогда 
		Возврат;
	КонецЕсли; 
	
	ДатаС  = СтруктураПараметров.ДатаВыезда;
	ДатаПо = СтруктураПараметров.ДатаВозвращения;
	
	врДатаС   = Дата(Год(ДатаС), Месяц(ДатаС), День(ДатаС), 0, 0, 0);
	врДатаПо  = Дата(Год(ДатаПо), Месяц(ДатаПо), День(ДатаПо), 0, 0, 0);
	врВремяС  = Дата(1, 1, 1, Час(ДатаС), Минута(ДатаС), Секунда(ДатаС));
	врВремяПо = Дата(1, 1, 1, Час(ДатаПо), Минута(ДатаПо), Секунда(ДатаПо));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",      СтруктураПараметров.ТранспортноеСредство);
	Запрос.УстановитьПараметр("ДатаС",   врДатаС);
	Запрос.УстановитьПараметр("ДатаПо",  врДатаПо);
	Запрос.УстановитьПараметр("ВремяС",  врВремяС);
	Запрос.УстановитьПараметр("ВремяПо", врВремяПо);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИсторияКоординатМП.Дата КАК Дата,
	|	уатИсторияКоординатМП.Время КАК Время,
	|	уатИсторияКоординатМП.Лат КАК Лат,
	|	уатИсторияКоординатМП.Лон КАК Лон,
	|	уатИсторияКоординатМП.Скорость КАК Скорость
	|ИЗ
	|	РегистрСведений.уатИсторияКоординатМП КАК уатИсторияКоординатМП
	|ГДЕ
	|	уатИсторияКоординатМП.ТС = &ТС
	|	И уатИсторияКоординатМП.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И уатИсторияКоординатМП.Скорость > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Время";
	
	Расстояние = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураКоординат = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если (Выборка.Дата = врДатаС И Выборка.Время < врВремяС)
			ИЛИ (Выборка.Дата = врДатаПо И Выборка.Время > врВремяПо) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтруктураКоординат = Неопределено Тогда
			СтруктураКоординат = Новый Структура("Лат, Лон", Выборка.Лат, Выборка.Лон);
			Продолжить;
		КонецЕсли;
		
		Дистанция = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(СтруктураКоординат.Лат, СтруктураКоординат.Лон,
		Выборка.Лат, Выборка.Лон);
		Расстояние = Расстояние + Дистанция;	
		СтруктураКоординат = Новый Структура("Лат, Лон", Выборка.Лат, Выборка.Лон);
	КонецЦикла;
	Расстояние = Расстояние / 1000;
	
	СтруктураРезультат = Новый Структура("СчетчикПоGPS", Расстояние);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданийИПодписокНаСобытия

Процедура ПередЗаписьюОтправкаPUSH(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Отказ Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьВодителей = Новый Массив();
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
		ПередЗаписьюМаршрутногоЛистаОтправкаPUSH(Источник, ЗарегистрироватьВодителей);
		ЗарегистрироватьНеобходимостьОбновленияМаршрутныхЛистов(ЗарегистрироватьВодителей, Источник.ТС);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатЗаявкаНаРемонт") Тогда
		ПередЗаписьюЗаявкиНаРемонтОтправкаPUSH(Источник, ЗарегистрироватьВодителей);
		ЗарегистрироватьНеобходимостьОбновленияЗаявокНаРемонт(ЗарегистрироватьВодителей, Источник.ТС);
	КонецЕсли;
	
	ПроверитьВыполнитьОтправкуPUSH();
	
КонецПроцедуры

Процедура ЗарегистрироватьНеобходимостьОбновленияСообщений(ВодителиКРегистрации) Экспорт
	
	Для Каждого ВодительЗарегистрировать Из ВодителиКРегистрации Цикл 
		НаборЗаписей = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВодительЗарегистрировать);
		
		НаборЗаписей.Прочитать();
		
		ЗаписатьНабор = Ложь;
		Для Каждого ТекСтрока Из НаборЗаписей Цикл
			Если НЕ ТекСтрока.ОбновитьСообщения Тогда 
				ТекСтрока.ОбновитьСообщения = Истина;
				ЗаписатьНабор = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаписатьНабор Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	ОтправитьСообщениеВСлужебноеОбсуждение();
	
КонецПроцедуры

Процедура ПроверитьВыполнитьОтправкуPUSH() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСбораСообщений", ТекущаяДата());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.pushID КАК pushID,
	|	уатВодителиНаЛинии.ОбновитьМаршрутныеЛисты КАК ОбновитьМаршрутныеЛисты,
	|	уатВодителиНаЛинии.ОбновитьЗаявкиНаРемонт КАК ОбновитьЗаявкиНаРемонт,
	|	уатВодителиНаЛинии.ОбновитьСообщения КАК ОбновитьСообщения
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.pushID <> """"
	|	И уатВодителиНаЛинии.ДатаПоследнейОтправки <= &ДатаСбораСообщений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТолькоМЛ        = Новый Массив();
	мсвТолькоСообщения = Новый Массив();
	мсвВсе             = Новый Массив();
	мсвТолькоЗР        = Новый Массив();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ОбновитьМаршрутныеЛисты И Выборка.ОбновитьСообщения И Выборка.ОбновитьЗаявкиНаРемонт И мсвВсе.Найти(Выборка.pushID) = Неопределено Тогда 
			мсвВсе.Добавить(Выборка.pushID);
		ИначеЕсли Выборка.ОбновитьМаршрутныеЛисты И мсвТолькоМЛ.Найти(Выборка.pushID) = Неопределено Тогда 
			мсвТолькоМЛ.Добавить(Выборка.pushID);
		ИначеЕсли Выборка.ОбновитьСообщения И мсвТолькоСообщения.Найти(Выборка.pushID) = Неопределено Тогда 
			мсвТолькоСообщения.Добавить(Выборка.pushID);
		ИначеЕсли Выборка.ОбновитьЗаявкиНаРемонт И мсвТолькоСообщения.Найти(Выборка.pushID) = Неопределено Тогда
			мсвТолькоЗР.Добавить(Выборка.pushID);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвТолькоМЛ.Количество() Тогда 
		GoogleGCM_SendMessage(мсвТолькоМЛ, Истина, Ложь, Ложь);
		УстановитьПризнакОтправлено(мсвТолькоМЛ, Истина, Ложь, Ложь);
	КонецЕсли;
	
	Если мсвТолькоЗР.Количество() Тогда 
		GoogleGCM_SendMessage(мсвТолькоЗР, Ложь, Ложь, Истина);
		УстановитьПризнакОтправлено(мсвТолькоЗР, Ложь, Ложь, Истина);
	КонецЕсли;
	
	Если мсвТолькоСообщения.Количество() Тогда 
		GoogleGCM_SendMessage(мсвТолькоСообщения, Ложь, Истина, Ложь);
		УстановитьПризнакОтправлено(мсвТолькоСообщения, Ложь, Истина, Ложь);
	КонецЕсли;
	
	Если мсвВсе.Количество() Тогда 
		GoogleGCM_SendMessage(мсвВсе, Истина, Истина, Истина);
		УстановитьПризнакОтправлено(мсвВсе, Истина, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Процедура обработчик регламентного задания "Контроль срока действия лицензий мобильного приложения".
//
Процедура уатКонтрольСрокаДействияЛицензийМобильногоПриложения() Экспорт
	
	Если НЕ уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением()
		ИЛИ НЕ Обсуждения.СистемаВзаимодействийПодключена() Тогда 
		Возврат;
	КонецЕсли;

	стрНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	АдресСервераМП  = стрНастроек.АдресСервераМП;
	ПортСервераМП   = стрНастроек.ПортСервераМП;
	ЛогинСервераМП  = стрНастроек.ЛогинСервераМП;
	ПарольСервераМП = стрНастроек.ПарольСервераМП;
	
	ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий = стрНастроек.ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий;
	Если НЕ ЗначениеЗаполнено(ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий) 
		ИЛИ НЕ ЗначениеЗаполнено(ЛогинСервераМП) Тогда
		Возврат;
	КонецЕсли;

	ИмяСобытияВЖурналеРегистрации = НСтр("ru='Информирование о сроке действия лицензий Мобильного приложенияи'");
	
	ТекстНСТР = НСтр("en='beginning of operation';ru='Начало операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
		УровеньЖурналаРегистрации.Информация,
		,
		,
		КомментарийВЖурналеРегистрации);
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ТекстОшибки     = "";
	стрДанныеОтвета = Неопределено;
	МассивЛицензий  = Новый Массив();
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "getDounglesList",, стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("responseData") Тогда
			Попытка
				ЧтениеXMLДанных = Новый ЧтениеXML;
				ЧтениеXMLДанных.УстановитьСтроку(стрДанныеОтвета.responseData);
				
				Пока ЧтениеXMLДанных.Прочитать() Цикл 
					Если ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXMLДанных.ЛокальноеИмя = "keys" Тогда 
						Пока ЧтениеXMLДанных.Прочитать() Цикл 
							Если ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXMLДанных.ЛокальноеИмя = "keys" Тогда 
								Прервать;
							ИначеЕсли ЧтениеXMLДанных.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
								ИмяТега = ЧтениеXMLДанных.ЛокальноеИмя;
								
								СтруктураСвойств = Новый Структура;
								Для Счетчик = 0 По ЧтениеXMLДанных.КоличествоАтрибутов() - 1 Цикл
									ИмяАтрибута = ЧтениеXMLДанных.ИмяАтрибута(Счетчик);
									СтруктураСвойств.Вставить(ИмяАтрибута, ЧтениеXMLДанных.ЗначениеАтрибута(Счетчик));
								КонецЦикла;
								МассивЛицензий.Добавить(СтруктураСвойств);
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ЧтениеXMLДанных.Закрыть();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	ТекущаяДата            = НачалоДня(ТекущаяДатаСеанса());
	ДниДоОкончанияДействия = 30 * 86400;
	
	НаименованиеСообщения = НСтр("ru='Мобильное приложение Водитель УАТ:'");
	ТекстСообщения        = "";
	Для Каждого ТекСтрока Из МассивЛицензий Цикл
		Если ТекСтрока.Свойство("exp_str") 
			И ТекСтрока.Свойство("sn") Тогда
			флОшибка      = Ложь;
			ДатаОкончания = ДесериализоватьДатаВремя(ТекСтрока.exp_str, флОшибка);
			Если НЕ флОшибка 
				И ЗначениеЗаполнено(ДатаОкончания)
				И НачалоДня(ДатаОкончания) <= ТекущаяДата + ДниДоОкончанияДействия 
				И НачалоДня(ДатаОкончания) >= ТекущаяДата Тогда
				
				КолВоДней = (НачалоДня(ДатаОкончания) - ТекущаяДата) / 86400;
				ТекСообщение = СтрШаблон(НСтр("ru='Срок действия лицензии №%1 истекает через %2 дней (%3).'"),
					ТекСтрока.sn, КолВоДней, Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));

				ТекстСообщения = Новый ФорматированнаяСтрока(
				ТекстСообщения + Символы.ПС + ТекСообщение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пользователь1С = Справочники.Пользователи.НайтиПоНаименованию(ЛогинСервераМП, Истина);
	Если ЗначениеЗаполнено(ТекСообщение)
		И ЗначениеЗаполнено(Пользователь1С) Тогда
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
		НаименованиеСообщения + ТекстСообщения);
		Справочники.уатГруппыДиспетчеров.ОтправитьСообщениеВСлужебноеОбсуждение(ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий, ТекстСообщения, Пользователь1С);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ГруппаДиспетчеров", ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЧаты.ГруппаДиспетчеров КАК ГруппаДиспетчеров,
	               |	уатЧаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатЧаты КАК уатЧаты
	               |ГДЕ
	               |	уатЧаты.ГруппаДиспетчеров = &ГруппаДиспетчеров
	               |	И НЕ уатЧаты.ПометкаУдаления";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеСоздано = РегистрыСведений.уатЧатыСВодителями.СоздатьСообщениеМобильногоПриложения(
			Выборка.Ссылка,
			ТекстСообщения,
			Выборка.Ссылка,
			Пользователь1С,
			Перечисления.уатВидыСообщенийМобильногоПриложения.Опоздание,
			ТекущаяДатаСеанса(),
			Истина,
			Истина,
			ТекущаяДатаСеанса(),
			,,
			,
			""
			);
		КонецЦикла;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОтправитьСообщениеВСлужебноеОбсуждение();
		КонецЕсли;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='End of operation';ru='Окончание операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
		УровеньЖурналаРегистрации.Информация,
		,
		,
		КомментарийВЖурналеРегистрации);

КонецПроцедуры

// Процедура обработчик регламентного задания "Автоматическое снятие неактивных водителей с линии".
// Выполняет удаление записей в регистре сведений "Водители на линии"
//
Процедура АвтоматическоеСнятиеНеактивныхВодителейСЛинии() Экспорт
	
	Если Не уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Automatic removal of inactive drivers from line';ru='Автоматическое снятие неактивных водителей с линии'");
	
	ТекстНСТР = НСтр("en='beginning of operation';ru='Начало операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
	СнятьНеактивныхВодителейСЛинии();
	
	ТекстНСТР = НСтр("en='End of operation';ru='Окончание операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
КонецПроцедуры

// Процедура обработчик регламентного задания "Обновление пользователей Мобильного приложения".
//
Процедура ОбновлениеПользователейМобильногоПриложения() Экспорт
	
	Если НЕ уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru='Обновление пользователей Мобильного приложенияи'");
	
	ТекстНСТР = НСтр("en='beginning of operation';ru='Начало операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
	ОбновитьПользователейМобильногоПриложения();
	
	ТекстНСТР = НСтр("en='End of operation';ru='Окончание операции'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
КонецПроцедуры

// Процедура обработчик регламентного задания "Очистка сообщений водителей".
// Выполняет удаление записей в регистре сведений "Сообщения водителям", помеченных как отправленные
// и регистре сведений "Cообщения от водителей", устаревших на 1 календарный месяц
//
Процедура РегламентноеУдалениеСообщенийВодителей() Экспорт 
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Clearing messages to drivers.';ru='Очистка сообщений водителей.'");
	
	ТекстНСТР = НСтр("en='Beginning of operation.';ru='Начало операции.'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(), -1));

	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЧатыСВодителями.Отправитель КАК Отправитель,
	|	уатЧатыСВодителями.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.уатЧатыСВодителями КАК уатЧатыСВодителями
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатЧатыСВодителями.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	|					И уатЧатыСВодителями.Отправлено = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатЧатыСВодителями.Дата <= &Дата
	|		КОНЕЦ";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Пока мВыборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.уатЧатыСВодителями.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(мВыборка.Отправитель);
		НаборЗаписей.Отбор.Идентификатор.Установить(мВыборка.Идентификатор);
		
		НаборЗаписейСтатусов = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьНаборЗаписей();
		НаборЗаписейСтатусов.Отбор.Идентификатор.Установить(мВыборка.Идентификатор);

		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки());
				
			ТекстНСТР = НСтр("en='The end of the operation.';ru='Конец операции.'");
			КомментарийВЖурналеРегистрации = ТекстНСТР;
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									КомментарийВЖурналеРегистрации);
			Возврат;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Идентификатор.Установить(мВыборка.Идентификатор);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки());
				
			ТекстНСТР = НСтр("en='The end of the operation.';ru='Конец операции.'");
			КомментарийВЖурналеРегистрации = ТекстНСТР;
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									КомментарийВЖурналеРегистрации);
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the operation.';ru='Конец операции.'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	ОтправитьСообщениеВСлужебноеОбсуждение();
	
КонецПроцедуры // РегламентноеУдалениеСообщенийВодителей()

// Процедура обработчик регламентного задания "Отправка PUSH".
//
Процедура ВыполнитьРегламентнуюОтправкуPUSH() Экспорт
	
	Если Не уатМобильноеПриложениеВодителяСерверПовтИсп.РазрешенаРаботаСМобильнымПриложением() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Sending PUSH';ru='Отправка PUSH'");
	
	ТекстНСТР = НСтр("en='Start of sending';ru='Начало отправки'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
	ПроверитьВыполнитьОтправкуPUSH();
	
	ТекстНСТР = НСтр("en='End of sending';ru='Окончание отправки'");
	КомментарийВЖурналеРегистрации = ТекстНСТР;
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							КомментарийВЖурналеРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ЛогированиеИЗаписьОшибок

// Процедура выполняет запись входного набора данных метода "Execute command" web-сервиса "Driver app service (UAT)"
//
// Параметры:
//  loginData   - строка - строка XML, содержащая структуру логина пользователя мобильного приложения
//  commandName - строка - имя выполняемой команды
//  requestData - строка - строка XML, входные данные метода, содержимое определяется контекстом выполняемого метода
//
Процедура ЗаписатьЛогExecuteCommandВходнойНаборДанных(loginData, commandName, requestData)
	
	ТекстЛога = "IN
	|loginData="   + loginData   + "
	|commandName=" + commandName + "
	|requestData=" + requestData;
	
	ЗаписатьСообщениеЛога("ExecuteCommand", ТекстЛога);
	
КонецПроцедуры // ЗаписатьЛогExecuteCommandВходнойНаборДанных()

// Процедура выполняет запись выходного набора данных метода "Execute command" web-сервиса "Driver app service (UAT)"
//
// Параметры:
//  responseData      - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число  - код результата выполнения
//  resultDescription - строка - строковое описание результата выполнения
//
Процедура ЗаписатьЛогExecuteCommandВыходнойНаборДанных(responseData, resultCode, resultDescription)
	
	ТекстЛога = "OUT
	|responseData="      + responseData + "
	|resultCode="        + resultCode   + "
	|resultDescription=" + resultDescription;
	
	ЗаписатьСообщениеЛога("ExecuteCommand", ТекстЛога);
	
КонецПроцедуры

Процедура ПодставитьДопПараметрыВОтветСервиса(resultCode, resultDescription, ДопПараметрыРезультат)
	
	Если resultCode = 101 Тогда 
		resultDescription = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			resultDescription,
			ДопПараметрыРезультат.ТС,
			Формат(ДопПараметрыРезультат.ВремяВыхода, "ДФ='dd.MM.yy HH:mm'"),
			ДопПараметрыРезультат.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаМетодовВебСервиса_uatDriverAppService

// Функция предназначена для получения списка всех пользователей мобильного приложения водителя УАТ
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetUsers(responseData, resultCode)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПользователиМобильногоПриложения.Логин КАК Логин,
	|	уатПользователиМобильногоПриложения.Пароль КАК Пароль,
	|	уатПользователиМобильногоПриложения.РаботаРазрешена КАК РаботаРазрешена
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения КАК уатПользователиМобильногоПриложения";
	
	Попытка
		responseData = СериализоватьUsers(мЗапрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetUsers", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGetUsers()

// Функция предназначена для получения информации о версии конфигурации и параметров работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGet1CInfo(responseData, resultCode)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "baseInfo"
	ЗаписьXML.ЗаписатьНачалоЭлемента("baseInfo");
	
	// Заполним версию ИБ
	ОписаниеУАТ = Новый Структура("Имя, Версия, ТребуемыеПодсистемы", "", "", Новый Массив);
	
	// заполение данных по подсистеме УАТ
	уатОбновлениеИнформационнойБазы.ПриДобавленииПодсистемы(ОписаниеУАТ);
	
	ЗаписьXML.ЗаписатьАтрибут("ver", ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеУАТ.Имя));
	
	// Заполним хранимые параметры МП
	стрПараметрыМобильногоПриложения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьПараметрыДляМобильногоПриложения();
	
	Для Каждого ТекПараметр Из стрПараметрыМобильногоПриложения Цикл 
		Если ТипЗнч(ТекПараметр.Значение) = Тип("Булево") Тогда 
			ЗаписьXML.ЗаписатьАтрибут(ТекПараметр.Ключ, ?(ТекПараметр.Значение, "true", "false"));
		Иначе 
			ЗаписьXML.ЗаписатьАтрибут(ТекПараметр.Ключ, Строка(ТекПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	// Конец "baseInfo"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	responseData = ЗаписьXML.Закрыть();
	
	resultCode = 0;
	resultDescription = "Ок";
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGet1CInfo()

Функция ПолучитьТерминалПоID(IDУстройства)
	
	ЗапросТерминал = Новый Запрос();
	ЗапросТерминал.УстановитьПараметр("IDУстройства", IDУстройства);
	ЗапросТерминал.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатМобильныеУстройства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМобильныеУстройства КАК уатМобильныеУстройства
	|ГДЕ
	|	уатМобильныеУстройства.IDУстройства = &IDУстройства";
	
	Выборка = ЗапросТерминал.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.уатМобильныеУстройства.ПустаяСсылка();
	
КонецФункции

// Функция предназначена для вывода водителя на линию
//
// Параметры:
//  resultCode        - число     - код результата выполнения метода
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодLogin(resultCode, Знач ДанныеАвторизации, requestData, ДопПараметрыОтвета=Неопределено)
	
	pushID = "";
	
	Если Не requestData = "" Тогда 
		ЧтениеXML = Новый ЧтениеXML;
		
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			
			Пока ЧтениеXML.Прочитать() Цикл 
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("pushID") Тогда
					ЧтениеXML.Прочитать();
					pushID = ЧтениеXML.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing ""request"" structure.';ru='Возникла ошибка при разборе структуры ""request"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьPushID';ru='ДесериализоватьPushID'"), ТекстНСТР);
		КонецПопытки;
	КонецЕсли;
	
	// Проверим, что данный водитель или ТС не на линии
	// Если ТС и/или водитель уже на линии, тогда возможны такие ситуации:
	// 1. ТС на линии с другим водителем - идем в отказ (код 101)
	// 3. Водитель и ТС идентичны тем, что сейчас на линии - всё ок (код 0)
	
	ЗапросВодителиНаЛинии = Новый Запрос();
	ЗапросВодителиНаЛинии.УстановитьПараметр("ФизическоеЛицо", ДанныеАвторизации.ФизическоеЛицо);
	ЗапросВодителиНаЛинии.УстановитьПараметр("ТС",             ДанныеАвторизации.ТС);
	
	ЗапросВодителиНаЛинии.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо,
	|	уатВодителиНаЛинии.ТС КАК ТС,
	|	уатВодителиНаЛинии.ВремяВыхода КАК ВремяВыхода
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо <> &ФизическоеЛицо
	|	И уатВодителиНаЛинии.ТС = &ТС";
	
	ВыборкаВодителиНаЛинии = ЗапросВодителиНаЛинии.Выполнить().Выбрать();
	Если ВыборкаВодителиНаЛинии.Следующий() Тогда 
		Если Не ДопПараметрыОтвета = Неопределено Тогда 
			ДопПараметрыОтвета.Вставить("ФизическоеЛицо", ВыборкаВодителиНаЛинии.ФизическоеЛицо);
			ДопПараметрыОтвета.Вставить("ТС",             ВыборкаВодителиНаЛинии.ТС);
			ДопПараметрыОтвета.Вставить("ВремяВыхода",    ВыборкаВодителиНаЛинии.ВремяВыхода);
			ДопПараметрыОтвета.Вставить("trackerID",      ДанныеАвторизации.trackerID);
		КонецЕсли;
		
		resultCode = 101;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		МенЗаписи = РегистрыСведений.уатВодителиНаЛинии.СоздатьМенеджерЗаписи();
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 15;
		
		Возврат Ложь;
	КонецПопытки;
	
	МобильноеУстройство = ПолучитьТерминалПоID(ДанныеАвторизации.trackerID);
	
	МенЗаписи.ФизическоеЛицо        = ДанныеАвторизации.ФизическоеЛицо;
	МенЗаписи.ТС                    = ДанныеАвторизации.ТС;
	МенЗаписи.МобильноеУстройство   = МобильноеУстройство;
	МенЗаписи.ВремяВыхода           = ТекущаяДата();
	МенЗаписи.pushID                = pushID;
	МенЗаписи.ДатаПоследнегоСобытия = ТекущаяДата();
	
	мсвВодителей = ПолучитьВсехВодителейНаЛинии();
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.МобильноеПриложениеВодительУАТ.ВыходВодителяНаЛинию";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, мсвВодителей.Количество());

	Попытка
		МенЗаписи.Записать(Истина);
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 15;
		
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		НаборЗаписи = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ФизическоеЛицо.Установить(ДанныеАвторизации.ФизическоеЛицо);
		НаборЗаписи.Прочитать();
		
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 40;
		
		Возврат Ложь;
	КонецПопытки;
	
	МассивДляУдаления = Новый Массив();
	Для Каждого ТекСтрока Из НаборЗаписи Цикл
		Если ТекСтрока.ТС = ДанныеАвторизации.ТС 
			И ТекСтрока.МобильноеУстройство = МобильноеУстройство Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДляУдаления.Добавить(ТекСтрока);
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		Попытка
			НаборЗаписи.Удалить(ТекСтрока);
		Исключение
			ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
			resultCode = 40;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		НаборЗаписи.Записать(Истина);
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 15;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодLogin()

// Функция предназначена для получения настроек для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetSettings(responseData, resultCode, ДанныеАвторизации)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "settings"
	ЗаписьXML.ЗаписатьНачалоЭлемента("settings");
	
	// Заполним время сервера
	ЗаписьXML.ЗаписатьАтрибут("serverTime", СериализоватьДатаВремя(ТекущаяДата()));
	
	// Заполним хранимые настройки МП
	стрНастройкиМобильногоПриложения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	
	
	ЗапросФизическоеЛицо = Новый Запрос;
	ЗапросФизическоеЛицо.УстановитьПараметр("Логин",        ДанныеАвторизации.Логин);
	ЗапросФизическоеЛицо.УстановитьПараметр("Пользователь", ДанныеАвторизации.ФизическоеЛицо);
	
	ЗапросФизическоеЛицо.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА уатПользователиМобильногоПриложения.ИспользоватьПутевыеЛисты
	|				И НЕ уатПользователиМобильногоПриложения_ТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПутевыеЛисты,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА уатПользователиМобильногоПриложения.ИспользоватьМаршрутныеЛисты
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьМаршрутныеЛисты,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА уатПользователиМобильногоПриложения.ИспользоватьЗаявкиНаРемонт
	|					И НЕ уатПользователиМобильногоПриложения_ТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьЗаявкиНаРемонт,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА уатПользователиМобильногоПриложения.ИспользоватьЧат
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьЧат
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения КАК уатПользователиМобильногоПриложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПользователиМобильногоПриложения_ТС КАК уатПользователиМобильногоПриложения_ТС
	|		ПО уатПользователиМобильногоПриложения.Пользователь = уатПользователиМобильногоПриложения_ТС.Пользователь
	|ГДЕ
	|	уатПользователиМобильногоПриложения.Логин = &Логин
	|	И уатПользователиМобильногоПриложения.Пользователь = &Пользователь";
	Выборка = ЗапросФизическоеЛицо.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		стрНастройкиМобильногоПриложения.useRouteLists      = ?(стрНастройкиМобильногоПриложения.useRouteLists, 
			Выборка.ИспользоватьМаршрутныеЛисты, 0);
		стрНастройкиМобильногоПриложения.useWaybills        = ?(стрНастройкиМобильногоПриложения.useWaybills, 
			Выборка.ИспользоватьПутевыеЛисты, 0);
		стрНастройкиМобильногоПриложения.useOrdersForRepair = ?(стрНастройкиМобильногоПриложения.useOrdersForRepair, 
			Выборка.ИспользоватьЗаявкиНаРемонт, 0);
		стрНастройкиМобильногоПриложения.useChat            = ?(стрНастройкиМобильногоПриложения.useChat, 
			Выборка.ИспользоватьЧат, 0);
	КонецЕсли;
	
	Если стрНастройкиМобильногоПриложения.useRouteLists = 0
		И стрНастройкиМобильногоПриложения.useWaybills = 0
		И стрНастройкиМобильногоПриложения.useOrdersForRepair = 0
		И стрНастройкиМобильногоПриложения.useChat = 0 Тогда
		стрНастройкиМобильногоПриложения.useChat = 1;
	КонецЕсли;
	
	// Определим организацию
	Если стрНастройкиМобильногоПриложения.useRouteLists = 1 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатМаршрутныйЛист.Организация.Представление КАК Организация,
		|	КОЛИЧЕСТВО(1) КАК КолВоОрганизаций
		|ИЗ
		|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|ГДЕ
		|	уатМаршрутныйЛист.ТС = &ТС
		|	И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.Сотрудники)
		|					ТОГДА уатМаршрутныйЛист.Водитель1.ФизическоеЛицо = &Водитель
		|				ИНАЧЕ уатМаршрутныйЛист.Водитель1 = &Водитель
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.Сотрудники)
		|					ТОГДА уатМаршрутныйЛист.Водитель2.ФизическоеЛицо = &Водитель
		|				ИНАЧЕ уатМаршрутныйЛист.Водитель2 = &Водитель
		|			КОНЕЦ)
		|	И уатМаршрутныйЛист.Выполнен = ЛОЖЬ
		|	И уатМаршрутныйЛист.ЗакрытВодителем = ЛОЖЬ
		|	И уатМаршрутныйЛист.Проведен = ИСТИНА
		|	И уатМаршрутныйЛист.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	уатМаршрутныйЛист.Организация.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	КолВоОрганизаций УБЫВ");
		Запрос.УстановитьПараметр("ТС", ДанныеАвторизации.ТС);
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.Организация КАК Организация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &Водитель");
	КонецЕсли;
	Запрос.УстановитьПараметр("Водитель", ДанныеАвторизации.ФизическоеЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		стрНастройкиМобильногоПриложения.Company = Выборка.Организация;
	КонецЕсли;

	Для Каждого ТекНастройка Из стрНастройкиМобильногоПриложения Цикл 
		Если ТипЗнч(ТекНастройка.Значение) = Тип("Булево") Тогда 
			ЗаписьXML.ЗаписатьАтрибут(ТекНастройка.Ключ, ?(ТекНастройка.Значение, "true", "false")); 
		ИначеЕсли ТипЗнч(ТекНастройка.Значение) = Тип("Число") Тогда
			ЗаписьXML.ЗаписатьАтрибут(ТекНастройка.Ключ, Формат(ТекНастройка.Значение, "ЧН=; ЧГ=0"));
		Иначе 
			ЗаписьXML.ЗаписатьАтрибут(ТекНастройка.Ключ, Строка(ТекНастройка.Значение));
		КонецЕсли;
	КонецЦикла;
	
	navigatorkey      = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Навигация_Ключ");
	navigatorClientId = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Навигация_ИдентификаторКлиента");
	ЗаписьXML.ЗаписатьАтрибут("navigatorkey",      Строка(navigatorkey));
	ЗаписьXML.ЗаписатьАтрибут("navigatorClientId", Строка(navigatorClientId));

	// Заполним настройки видов контактной информации
	стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииТелефонКонтрагента", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтрагента));
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииEmailКонтрагента", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтрагента));
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииТелефонКонтактногоЛица", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтактногоЛица));
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииEmailКонтактногоЛица", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтактногоЛица));
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииТелефонОтветственного", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонПользователя));
	ЗаписьXML.ЗаписатьАтрибут("ВидКонтактнойИнформацииEmailОтветственного", Строка(стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailПользователя));
	
	// Конец "settings"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	responseData = ЗаписьXML.Закрыть();
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGetSettings()

// Функция предназначена для отправки списка чатов, доступных водителю, и их участников
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetChats(responseData, resultCode, ДанныеАвторизации)
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Водитель", ДанныеАвторизации.ФизическоеЛицо);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	уатЧатыВодители.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатЧаты.Водители КАК уатЧатыВодители
	               |ГДЕ
	               |	уатЧатыВодители.Водитель = &Водитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЧатВодителя = Выборка.Ссылка;
	Иначе
		ЧатВодителя = Справочники.уатЧаты.ОбщийЧат;
	КонецЕсли;
	
	МассивКонтактов = Новый Массив();
	Для Каждого ТекСтрока Из ЧатВодителя.Водители Цикл
		МассивКонтактов.Добавить(ТекСтрока.Водитель);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ЧатВодителя.ГруппаДиспетчеров.Диспетчеры Цикл
		МассивКонтактов.Добавить(ТекСтрока.Диспетчер);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
		ЗаписьXML.ЗаписатьНачалоЭлемента("chats");
			ЗаписьXML.ЗаписатьНачалоЭлемента("chat");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("chatName");
			ЗаписьXML.ЗаписатьТекст(ЧатВодителя.Наименование);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("chatID");
			ЗаписьXML.ЗаписатьТекст(Строка(ЧатВодителя.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("contacts");
				Для Каждого ТекКонтакт Из МассивКонтактов Цикл
					ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("contactName");
					ЗаписьXML.ЗаписатьТекст(ТекКонтакт.Наименование);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("contactID");
					ЗаписьXML.ЗаписатьТекст(Строка(ТекКонтакт.УникальныйИдентификатор()));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КОнецЦикла;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	responseData = ЗаписьXML.Закрыть();
	
	resultCode = 0; 
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGetSettings()

// Функция предназначена для сохранения данных о местоположении мобильного устройства
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSetVehiclePositions(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ТабКоординат = ДесериализоватьVehiclePositions(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 35;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ТабКоординат.Количество() = 0 Тогда 
		resultCode = 0;
		
		Возврат Истина;
	КонецЕсли;
	
	// вилочка по записи истории координат
	стрНастройкиХраненияИсторииМестоположения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиХраненияИсторииМестоположения();
	
	РежимХраненияИсторииМестоположения = стрНастройкиХраненияИсторииМестоположения.РежимСохранения;
	
	Если РежимХраненияИсторииМестоположения = 1 Тогда 
		Если Не ЗаписатьКоординатыВоВнешнююБазу(ДанныеАвторизации, ТабКоординат, стрНастройкиХраненияИсторииМестоположения, resultCode) Тогда 
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли РежимХраненияИсторииМестоположения = 2 Тогда
		Если Не ЗаписатьКоординатыВРегистрИсторииМестоположения(ДанныеАвторизации, ТабКоординат, resultCode) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаписатьКоординатыВРегистрТекущегоМестоположения(ДанныеАвторизации, ТабКоординат, resultCode) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSetVehiclePositions()

// Функция предназначена для снятия водителя с линии
//
// Параметры:
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодLogout(responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	Попытка
		НаборЗаписи = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ФизическоеЛицо.Установить(ДанныеАвторизации.ФизическоеЛицо);
		НаборЗаписи.Отбор.ТС.Установить(ДанныеАвторизации.ТС);
		НаборЗаписи.Прочитать();
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 40;
		
		Возврат Ложь;
	КонецПопытки;
	
	МассивДляУдаления = Новый Массив();
	Для Каждого ТекСтрока Из НаборЗаписи Цикл
		МассивДляУдаления.Добавить(ТекСтрока);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		Попытка
			НаборЗаписи.Удалить(ТекСтрока);
			
		Исключение
			ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
			resultCode = 40;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		НаборЗаписи.Записать(Истина);
		resultCode = 0;
		
		Возврат Истина;
		
	Исключение
		ЗаписатьСообщениеОбОшибке("Login", ОписаниеОшибки());
		resultCode = 40;
		
		Возврат Ложь;
	КонецПопытки;

КонецФункции // ОбработатьМетодLogout()

// Функция предназначена для создания обычного сообщения от водителя
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSendMessages(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ТабСообщений = ДесериализоватьMessages(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 50;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ТабСообщений.Количество() = 0 Тогда 
		resultCode = 0;
		
		Возврат Истина;
	КонецЕсли;
	
	ДатаДоставки = ТекущаяДатаСеанса();
	Для Каждого ТекСообщение Из ТабСообщений Цикл 
		
		ТекстОшибки = "";
		СообщениеСоздано = РегистрыСведений.уатЧатыСВодителями.СоздатьСообщениеМобильногоПриложения(
			ТекСообщение.Чат,
			ТекСообщение.Текст,
			ТекСообщение.Чат,
			ДанныеАвторизации.ФизическоеЛицо,
			Перечисления.уатВидыСообщенийМобильногоПриложения.Входящее,
			ТекСообщение.Дата,
			Истина,
			Истина,
			ТекущаяДатаСеанса(),
			,,
			ТекСообщение.ИдентификаторСообщения,
			ТекстОшибки
			);
			
		НаименованиеСообщения = НСтр("en='Message from driver';ru='Сообщение от водителя'")
		+ " " + ДанныеАвторизации.ФизическоеЛицо.Наименование + ", " + НСтр("en='Vehicle';ru='ТС'") + " " + ДанныеАвторизации.ТС.Наименование;
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
				НаименованиеСообщения + Символы.ПС + ТекСообщение.Текст,
				Символы.ПС,
				Новый ФорматированнаяСтрока("Ответить",,,, "e1cib/command/Обработка.уатСообщенияМобильногоПриложения.Команда.СообщенияМобильногоПриложения"));
		ГруппаДиспетчеров = ТекСообщение.Чат.ГруппаДиспетчеров;
		Справочники.уатГруппыДиспетчеров.ОтправитьСообщениеВСлужебноеОбсуждение(ГруппаДиспетчеров, ТекстСообщения);
		ОтправитьСообщениеВСлужебноеОбсуждение();

	КонецЦикла;
		
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendMessages()

// Функция предназначена для создания обычного сообщения от водителя
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSendAcceptStatus(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеМодификацииМЛ = ДесериализоватьAcceptStatus(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 50;
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеМодификацииМЛ.МЛ)
		ИЛИ НЕ ТипЗнч(ДанныеМодификацииМЛ.МЛ) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		МаршЛистОб = ДанныеМодификацииМЛ.МЛ.ПолучитьОбъект();
		МаршЛистОб.ПринятВодителем       = ДанныеМодификацииМЛ.Статус;
		МаршЛистОб.ДатаПринятияВодителем = ДанныеМодификацииМЛ.Дата;
		МаршЛистОб.Записать();
	Исключение
		ЗаписатьСообщениеОбОшибке("SendAcceptStatus", ОписаниеОшибки());
		resultCode = 125;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendMessages()

// Функция предназначена для отправки сообщений водителям
//
// Параметры:
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetMessages(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ПараметрыОтбора = ДесериализоватьGetMessages(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 55;
		
		Возврат Ложь;
	КонецЕсли;
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("ФизическоеЛицо", ДанныеАвторизации.ФизическоеЛицо);
	мЗапрос.УстановитьПараметр("НачалоПериода",  ПараметрыОтбора.НачалоПериода);
	мЗапрос.УстановитьПараметр("КонецПериода",   ПараметрыОтбора.КонецПериода);
	мЗапрос.УстановитьПараметр("Чат",            ?(НЕ ЗначениеЗаполнено(ПараметрыОтбора.Чат),
		Справочники.уатЧаты.ОбщийЧат,
		ПараметрыОтбора.Чат));
	
	мЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(ПараметрыОтбора.КоличествоСообщений=Неопределено, "", "ПЕРВЫЕ " + Формат(ПараметрыОтбора.КоличествоСообщений, "ЧН=0; ЧГ=0")) + "
	                |	уатЧатыСВодителями.ТекстСообщения КАК ТекстСообщения,
	                |	уатЧатыСВодителями.Отправитель КАК Отправитель,
	                |	уатСтатусыСообщенийМобильногоПриложения.Получатель КАК Получатель,
	                |	уатЧатыСВодителями.Дата КАК ДатаСоздания,
	                |	уатЧатыСВодителями.Отправлено КАК Отправлено,
	                |	уатЧатыСВодителями.ВидСообщения КАК ВидСообщения,
	                |	уатЧатыСВодителями.Чат КАК Чат,
	                |	уатСтатусыСообщенийМобильногоПриложения.Прочитано КАК Прочитано,
	                |	уатСтатусыСообщенийМобильногоПриложения.Доставлено КАК Доставлено,
	                |	уатСтатусыСообщенийМобильногоПриложения.ДатаДоставки КАК ДатаДоставки,
	                |	уатСтатусыСообщенийМобильногоПриложения.ДатаПрочтения КАК ДатаПрочтения,
	                |	ВЫБОР
	                |		КОГДА уатЧатыСВодителями.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Входящее)
	                |			ТОГДА 0
	                |		ИНАЧЕ ВЫБОР
	                |				КОГДА уатЧатыСВодителями.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	                |					ТОГДА 1
	                |				ИНАЧЕ 2
	                |			КОНЕЦ
	                |	КОНЕЦ КАК ИндексКартинки,
	                |	ВЫБОР
	                |		КОГДА ТИПЗНАЧЕНИЯ(уатСтатусыСообщенийМобильногоПриложения.Получатель) = ТИП(Справочник.уатЧаты)
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ПолучательЧат,
	                |	уатЧатыСВодителями.Идентификатор КАК ИдентификаторСообщения,
	                |	ВЫБОР
	                |		КОГДА уатЧатыСВодителями.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	                |			ТОГДА ""1С""
	                |		ИНАЧЕ ""user""
	                |	КОНЕЦ КАК Источник
	                |ИЗ
	                |	РегистрСведений.уатЧатыСВодителями КАК уатЧатыСВодителями
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыСообщенийМобильногоПриложения КАК уатСтатусыСообщенийМобильногоПриложения
	                |		ПО уатЧатыСВодителями.Идентификатор = уатСтатусыСообщенийМобильногоПриложения.Идентификатор
	                |ГДЕ
	                |	уатЧатыСВодителями.Чат = &Чат
	                |	И ВЫБОР
	                |			КОГДА уатЧатыСВодителями.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	                |				ТОГДА уатСтатусыСообщенийМобильногоПриложения.Получатель = &ФизическоеЛицо
	                |			ИНАЧЕ уатЧатыСВодителями.Отправитель = &ФизическоеЛицо
	                |		КОНЕЦ
	                |	И ВЫБОР
	                |			КОГДА &НачалоПериода = НЕОПРЕДЕЛЕНО
	                |				ТОГДА ИСТИНА
	                |			ИНАЧЕ уатЧатыСВодителями.Дата >= &НачалоПериода
	                |		КОНЕЦ
	                |	И ВЫБОР
	                |			КОГДА &КонецПериода = НЕОПРЕДЕЛЕНО
	                |				ТОГДА ИСТИНА
	                |			ИНАЧЕ уатЧатыСВодителями.Дата <= &КонецПериода
	                |		КОНЕЦ";
	
	Попытка
		ТабСообщений = мЗапрос.Выполнить().Выгрузить();
		
		responseData = СериализоватьMessages(ТабСообщений);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetMessages", ОписаниеОшибки());
		resultCode = 55;
		
		responseData = "<response/>";
		
		Возврат Ложь;
	КонецПопытки;
	
	// Проставим признак "отправлено" 
	ТребуетсяОбновление = Ложь;
	Для Каждого ТекСообщение Из ТабСообщений Цикл 
		Если ТекСообщение.ВидСообщения <> Перечисления.уатВидыСообщенийМобильногоПриложения.Исходящее
			ИЛИ (ТекСообщение.Доставлено
			И ТекСообщение.Отправлено) Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.уатЧатыСВодителями.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(ТекСообщение.Отправитель);
		НаборЗаписей.Отбор.Идентификатор.Установить(ТекСообщение.ИдентификаторСообщения);
		
		Попытка
			НаборЗаписей.Прочитать();
		Исключение
			ЗаписатьСообщениеОбОшибке("GetMessages", ОписаниеОшибки());
		КонецПопытки;
		
		Если НаборЗаписей.Выбран() 
			И НЕ НаборЗаписей.Количество() = 0 
			И НЕ НаборЗаписей[0].Отправлено Тогда 
			НаборЗаписей[0].Отправлено = Истина;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ЗаписатьСообщениеОбОшибке("GetMessages", ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(ТекСообщение.Получатель);
		НаборЗаписей.Отбор.Идентификатор.Установить(ТекСообщение.ИдентификаторСообщения);
		
		Попытка
			НаборЗаписей.Прочитать();
		Исключение
			ЗаписатьСообщениеОбОшибке("GetMessages", ОписаниеОшибки());
		КонецПопытки;
		
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.Доставлено Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.Доставлено   = Истина;
			Запись.ДатаДоставки = ТекущаяДатаСеанса();
			
			ЕстьИзменения = Истина;
		КонецЦикла;
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.Получатель    = ТекСообщение.Получатель;
			Запись.Идентификатор = ТекСообщение.ИдентификаторСообщения;
			Запись.ДатаДоставки  = ТекущаяДатаСеанса();
			Запись.Доставлено    = Истина;
			
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ТребуетсяОбновление = Истина;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				ЗаписатьСообщениеОбОшибке("GetMessages", ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТребуетсяОбновление Тогда
		ОтправитьСообщениеВСлужебноеОбсуждение();
	КонецЕсли; 
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGetMessages()

// Функция предназначена для установки статуса “Прочитано” для сообщений, которые водитель прочитал в чате
//
// Параметры:
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодUpdateMessageStatus(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ТабСообщений = ДесериализоватьStatusMessages(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 135;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ТабСообщений.Количество() = 0 Тогда 
		resultCode = 0;
		
		Возврат Истина;
	КонецЕсли;
	
	Получатель = ДанныеАвторизации.ФизическоеЛицо;
	Для Каждого ТекСообщение Из ТабСообщений Цикл
		НаборЗаписей = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(Получатель);
		НаборЗаписей.Отбор.Идентификатор.Установить(ТекСообщение.ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.ДатаПрочтения = ТекСообщение.ДатаПрочтения;
			Запись.Прочитано     = ТекСообщение.Прочитано;
		КонецЦикла;
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.Получатель    = Получатель;
			Запись.Идентификатор = ТекСообщение.ИдентификаторСообщения;
			Запись.ДатаПрочтения = ТекСообщение.ДатаПрочтения;
			Запись.Прочитано     = ТекСообщение.Прочитано;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ЗаписатьСообщениеОбОшибке("UpdateMessageStatus", ОписаниеОшибки());
			resultCode = 135;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	ОтправитьСообщениеВСлужебноеОбсуждение();
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодUpdateMessageStatus()

// Функция предназначена для формирования списка маршрутных листов водителя
//
// Параметры:
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetRouteList(responseData, resultCode, Знач ДанныеАвторизации)
	
	//стрНастройкиМобильногоПриложения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
	стрНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	ИспользоватьСкладскиеАкты = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");

	ОграничениеЧислаМЛДнейВперед = стрНастроек.ОграничениеЧислаМЛДнейВперед;
	ОграничениеЧислаМЛДнейНазад  = стрНастроек.ОграничениеЧислаМЛДнейНазад;

	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ДатаОт = НачалоДня(ТекущаяДатаСеанса) - ОграничениеЧислаМЛДнейНазад * (60 * 60 * 24);
	ДатаПо = КонецДня(ТекущаяДатаСеанса) + ОграничениеЧислаМЛДнейВперед * (60 * 60 * 24);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("ТС",           ДанныеАвторизации.ТС);
	мЗапрос.УстановитьПараметр("Водитель",     ДанныеАвторизации.ФизическоеЛицо);
	
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефонКонтрагента",     стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтрагента);
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииEmailКонтрагента",       стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтрагента);
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефонКонтактногоЛица", стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтактногоЛица);
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииEmailКонтактногоЛица",   стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтактногоЛица);
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефонОтветственного",  стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонПользователя);
	мЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииEmailОтветственного",    стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailПользователя);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛистСсылка,
	|	уатМаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
	|	уатМаршрутныйЛист.ТС КАК МаршрутныйЛистТС,
	|	уатМаршрутныйЛист.ДатаИВремяОтправленияПлан КАК МаршрутныйЛистДатаОтправленияПлан,
	|	уатМаршрутныйЛист.ДатаИВремяВыполненияПлан КАК МаршрутныйЛистДатаВыполненияПлан,
	|	ВЫРАЗИТЬ(уатМаршрутныйЛист.Комментарий КАК СТРОКА(200)) КАК МаршрутныйЛистКомментарий,
	|	уатМаршрутныйЛистЗаказы.GUIDСтроки КАК ГУИДСтроки,
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
	|	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Номер, """") КАК ЗаказНомер,
	|	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ВидДоставки, ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ДверьДверь)
	|		ИЛИ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ВидДоставки, ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.СкладДверь) КАК ПриемкаИзРейсаВПункте,
	|	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ВидДоставки, ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ДверьДверь)
	|		ИЛИ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ВидДоставки, ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ДверьСклад) КАК ОтгрузкаВРейсВПункте,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|						ТОГДА """"
	|					ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Контрагент.Наименование, """")
	|				КОНЕЦ
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|				КОНЕЦ
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Контрагент
	|	КОНЕЦ КАК КонтрагентСсылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ КАК ГрузоотправительСсылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Грузополучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ КАК ГрузополучательСсылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|				ИЛИ НЕ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя) = ТИП(Справочник.КонтактныеЛица)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя, ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|	КОНЕЦ КАК КонтактноеЛицоГрузоотправителяСсылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|				ИЛИ НЕ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя) = ТИП(Справочник.КонтактныеЛица)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя, ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|	КОНЕЦ КАК КонтактноеЛицоГрузополучателяСсылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	КОНЕЦ КАК ОтветственныйПоЗаказу,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Комментарий, """")
	|	КОНЕЦ КАК КомментарийПоЗаказу,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения, """") КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	|	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Пункт ЕСТЬ NULL
	|				ИЛИ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.Пункт) = ТИП(СТРОКА)
	|			ТОГДА """"
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Пункт.Наименование
	|	КОНЕЦ КАК ПунктНаименование,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Пункт ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.Пункт) = ТИП(СТРОКА)
	|					ТОГДА уатМаршрутныйЛистЗаказы.Пункт
	|				ИНАЧЕ уатМаршрутныйЛистЗаказы.Пункт.Адрес
	|			КОНЕЦ
	|	КОНЕЦ КАК ПунктАдрес,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Пункт ЕСТЬ NULL
	|				ИЛИ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.Пункт) = ТИП(СТРОКА)
	|			ТОГДА 0
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Пункт.Лат
	|	КОНЕЦ КАК ПунктШирота,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Пункт ЕСТЬ NULL
	|				ИЛИ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.Пункт) = ТИП(СТРОКА)
	|			ТОГДА 0
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Пункт.Лон
	|	КОНЕЦ КАК ПунктДолгота,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Пункт ЕСТЬ NULL
	|				ИЛИ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.Пункт) = ТИП(СТРОКА)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ уатМаршрутныйЛистЗаказы.Пункт.Гараж
	|	КОНЕЦ КАК ПунктЭтоГараж,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК ВремяСтоянки,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК ПунктСсылка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Пункт.РадиусПоиска КАК ПунктРадиусПоиска,
	|	уатМаршрутныйЛист.ПринятВодителем КАК ПринятВодителем,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказСсылка,
	|	уатМаршрутныйЛистЗаказы.Выработка1 КАК Выработка1,
	|	уатМаршрутныйЛистЗаказы.Выработка2 КАК Выработка2,
	|	уатМаршрутныйЛистЗаказы.Выработка3 КАК Выработка3,
	|	уатМаршрутныйЛистЗаказы.Выработка4 КАК Выработка4,
	|	уатМаршрутныйЛистЗаказы.Выработка5 КАК Выработка5,
	|	уатМаршрутныйЛистЗаказы.ПараметрВыработки1 КАК ПараметрВыработки1,
	|	уатМаршрутныйЛистЗаказы.ПараметрВыработки2 КАК ПараметрВыработки2,
	|	уатМаршрутныйЛистЗаказы.ПараметрВыработки3 КАК ПараметрВыработки3,
	|	уатМаршрутныйЛистЗаказы.ПараметрВыработки4 КАК ПараметрВыработки4,
	|	уатМаршрутныйЛистЗаказы.ПараметрВыработки5 КАК ПараметрВыработки5,
	|	уатМаршрутныйЛист.СсылкаMultiGo КАК СсылкаMultiGo,
	|	уатМаршрутныйЛистЗаказы.ОтветMultiGo КАК ОтветMultiGo,
	|	уатМаршрутныйЛистЗаказы.Пункт.ТипПункта.Служебный КАК СлужебныйТипПункта,
	|	уатМаршрутныйЛистЗаказы.ОценкаСервиса КАК ОценкаСервиса,
	|	уатМаршрутныйЛистЗаказы.Подпись КАК Подпись
	|ПОМЕСТИТЬ ВТ_МаршрутныеЛисты
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ПО (уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка)
	|ГДЕ
	|	уатМаршрутныйЛист.ТС = &ТС
	|	И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатМаршрутныйЛист.Водитель1.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатМаршрутныйЛист.Водитель1 = &Водитель
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатМаршрутныйЛист.Водитель2.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатМаршрутныйЛист.Водитель2 = &Водитель
	|			КОНЕЦ)
	|	И уатМаршрутныйЛист.Выполнен = ЛОЖЬ
	|	И уатМаршрутныйЛист.ЗакрытВодителем = ЛОЖЬ
	|	И уатМаршрутныйЛист.Проведен = ИСТИНА
	|	И уатМаршрутныйЛист.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистСсылка КАК МаршрутныйЛистСсылка,
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистНомер КАК МаршрутныйЛистНомер,
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистТС КАК МаршрутныйЛистТС,
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистДатаОтправленияПлан КАК МаршрутныйЛистДатаОтправленияПлан,
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистДатаВыполненияПлан КАК МаршрутныйЛистДатаВыполненияПлан,
	|	ВТ_МаршрутныеЛисты.МаршрутныйЛистКомментарий КАК МаршрутныйЛистКомментарий,
	|	ВТ_МаршрутныеЛисты.ГУИДСтроки КАК ГУИДСтроки,
	|	ВТ_МаршрутныеЛисты.НомерСтроки КАК НомерСтроки,
	|	ВТ_МаршрутныеЛисты.Выполнен КАК Выполнен,
	|	ВТ_МаршрутныеЛисты.ЗаказНомер КАК ЗаказНомер,
	|	ВТ_МаршрутныеЛисты.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ВТ_МаршрутныеЛисты.КонтрагентСсылка КАК КонтрагентСсылка,
	|	ВТ_МаршрутныеЛисты.ГрузоотправительСсылка КАК ГрузоотправительСсылка,
	|	ВТ_МаршрутныеЛисты.ГрузополучательСсылка КАК ГрузополучательСсылка,
	|	ВТ_МаршрутныеЛисты.КонтактноеЛицоГрузоотправителяСсылка КАК КонтактноеЛицоГрузоотправителяСсылка,
	|	ВТ_МаршрутныеЛисты.КонтактноеЛицоГрузополучателяСсылка КАК КонтактноеЛицоГрузополучателяСсылка,
	|	ВТ_МаршрутныеЛисты.Номенклатура КАК Номенклатура,
	|	ВТ_МаршрутныеЛисты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_МаршрутныеЛисты.Количество КАК Количество,
	|	ВТ_МаршрутныеЛисты.КоличествоМест КАК КоличествоМест,
	|	ВТ_МаршрутныеЛисты.ВесБрутто КАК ВесБрутто,
	|	ВТ_МаршрутныеЛисты.Объем КАК Объем,
	|	ВТ_МаршрутныеЛисты.ПунктНаименование КАК ПунктНаименование,
	|	ВТ_МаршрутныеЛисты.ПунктАдрес КАК ПунктАдрес,
	|	ВТ_МаршрутныеЛисты.ПунктШирота КАК ПунктШирота,
	|	ВТ_МаршрутныеЛисты.ПунктДолгота КАК ПунктДолгота,
	|	ВТ_МаршрутныеЛисты.ПунктЭтоГараж КАК ПунктЭтоГараж,
	|	ВТ_МаршрутныеЛисты.ВремяСтоянки КАК ВремяСтоянки,
	|	ВТ_МаршрутныеЛисты.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	ВТ_МаршрутныеЛисты.ПрибытиеПлан КАК ПрибытиеПлан,
	|	ВТ_МаршрутныеЛисты.ПрибытиеФакт КАК ПрибытиеФакт,
	|	ВТ_МаршрутныеЛисты.УбытиеПлан КАК УбытиеПлан,
	|	ВТ_МаршрутныеЛисты.УбытиеФакт КАК УбытиеФакт,
	|	ВТ_МаршрутныеЛисты.ОтветственныйПоЗаказу КАК ОтветственныйПоЗаказу,
	|	ВТ_МаршрутныеЛисты.КомментарийПоЗаказу КАК КомментарийПоЗаказу,
	|	ВТ_МаршрутныеЛисты.ПунктСсылка КАК ПунктСсылка,
	|	ВТ_МаршрутныеЛисты.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	ВТ_МаршрутныеЛисты.ПунктРадиусПоиска КАК ПунктРадиусПоиска,
	|	ВТ_МаршрутныеЛисты.ПринятВодителем КАК ПринятВодителем,
	|	ВТ_МаршрутныеЛисты.ОтгрузкаВРейсВПункте КАК ОтгрузкаВРейсВПункте,
	|	ВТ_МаршрутныеЛисты.ПриемкаИзРейсаВПункте КАК ПриемкаИзРейсаВПункте,
	|	ВТ_МаршрутныеЛисты.ЗаказСсылка КАК ЗаказСсылка,
	|	ВТ_МаршрутныеЛисты.КонтрагентСсылка.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоКонтрагента,
	|	ВТ_МаршрутныеЛисты.ГрузополучательСсылка.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоГрузополучателя,
	|	ВТ_МаршрутныеЛисты.ГрузоотправительСсылка.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоГрузоотправителя,
	|	ВТ_МаршрутныеЛисты.ПараметрВыработки1 КАК ПараметрВыработки1,
	|	ВТ_МаршрутныеЛисты.ПараметрВыработки2 КАК ПараметрВыработки2,
	|	ВТ_МаршрутныеЛисты.ПараметрВыработки3 КАК ПараметрВыработки3,
	|	ВТ_МаршрутныеЛисты.ПараметрВыработки4 КАК ПараметрВыработки4,
	|	ВТ_МаршрутныеЛисты.ПараметрВыработки5 КАК ПараметрВыработки5,
	|	ВТ_МаршрутныеЛисты.Выработка1 КАК Выработка1,
	|	ВТ_МаршрутныеЛисты.Выработка2 КАК Выработка2,
	|	ВТ_МаршрутныеЛисты.Выработка3 КАК Выработка3,
	|	ВТ_МаршрутныеЛисты.Выработка4 КАК Выработка4,
	|	ВТ_МаршрутныеЛисты.Выработка5 КАК Выработка5,
	|	ВТ_МаршрутныеЛисты.СсылкаMultiGo КАК СсылкаMultiGo,
	|	ВТ_МаршрутныеЛисты.ОтветMultiGo КАК ОтветMultiGo,
	|	ВТ_МаршрутныеЛисты.СлужебныйТипПункта КАК СлужебныйТипПункта,
	|	ВТ_МаршрутныеЛисты.ОценкаСервиса КАК ОценкаСервиса,
	|	ВТ_МаршрутныеЛисты.Подпись КАК Подпись
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйЛистНомер,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.КонтрагентСсылка КАК Контакт,
	|	""Контрагент"" КАК ТипКонтакта,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ вт_Контакты
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.КонтрагентСсылка.ОсновноеКонтактноеЛицо,
	|	""Контрагент"",
	|	1
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|ГДЕ
	|	ВТ_МаршрутныеЛисты.КонтрагентСсылка.ОсновноеКонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_МаршрутныеЛисты.КонтактноеЛицоГрузоотправителяСсылка,
	|	""Грузоотправитель"",
	|	1
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.КонтактноеЛицоГрузополучателяСсылка,
	|	""Грузополучатель"",
	|	1
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.ГрузоотправительСсылка.ОсновноеКонтактноеЛицо,
	|	""Грузоотправитель"",
	|	2
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.ГрузополучательСсылка.ОсновноеКонтактноеЛицо,
	|	""Грузополучатель"",
	|	2
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.ГрузоотправительСсылка,
	|	""Грузоотправитель"",
	|	3
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.ГрузополучательСсылка,
	|	""Грузополучатель"",
	|	3
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_МаршрутныеЛисты.ОтветственныйПоЗаказу,
	|	""Ответственный"",
	|	1
	|ИЗ
	|	ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_Контакты.Контакт КАК Контакт,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_Контакты.Контакт) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ЕСТЬNULL(КонтрагентыПочта.Представление, """")
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(вт_Контакты.Контакт) = ТИП(Справочник.КонтактныеЛица)
	|					ТОГДА ЕСТЬNULL(КонтактныеЛицаПочта.Представление, """")
	|				ИНАЧЕ ЕСТЬNULL(ПользователиПочта.Представление, """")
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеКИ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) КАК ТипКИ,
	|	вт_Контакты.ТипКонтакта КАК ТипКонтакта,
	|	вт_Контакты.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ вт_Контакты_КИ
	|ИЗ
	|	вт_Контакты КАК вт_Контакты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаПочта
	|		ПО вт_Контакты.Контакт = КонтактныеЛицаПочта.Ссылка
	|			И (КонтактныеЛицаПочта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КонтактныеЛицаПочта.Вид = &ВидКонтактнойИнформацииEmailКонтактногоЛица)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиПочта
	|		ПО вт_Контакты.Контакт = ПользователиПочта.Ссылка
	|			И (ПользователиПочта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПользователиПочта.Вид = &ВидКонтактнойИнформацииEmailОтветственного)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыПочта
	|		ПО вт_Контакты.Контакт = КонтрагентыПочта.Ссылка
	|			И (КонтрагентыПочта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КонтрагентыПочта.Вид = &ВидКонтактнойИнформацииEmailКонтрагента)
	|ГДЕ
	|	вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
	|	И вт_Контакты.Контакт <> НЕОПРЕДЕЛЕНО
	|	И вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_Контакты.Контакт,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_Контакты.Контакт) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ЕСТЬNULL(КонтрагентыТелефон.Представление, """")
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(вт_Контакты.Контакт) = ТИП(Справочник.КонтактныеЛица)
	|					ТОГДА ЕСТЬNULL(КонтактныеЛицаТелефон.Представление, """")
	|				ИНАЧЕ ЕСТЬNULL(ПользователиТелефон.Представление, """")
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон),
	|	вт_Контакты.ТипКонтакта,
	|	вт_Контакты.Приоритет
	|ИЗ
	|	вт_Контакты КАК вт_Контакты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаТелефон
	|		ПО вт_Контакты.Контакт = КонтактныеЛицаТелефон.Ссылка
	|			И (КонтактныеЛицаТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтактныеЛицаТелефон.Вид = &ВидКонтактнойИнформацииТелефонКонтактногоЛица)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиТелефон
	|		ПО вт_Контакты.Контакт = ПользователиТелефон.Ссылка
	|			И (ПользователиТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ПользователиТелефон.Вид = &ВидКонтактнойИнформацииТелефонОтветственного)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
	|		ПО вт_Контакты.Контакт = КонтрагентыТелефон.Ссылка
	|			И (КонтрагентыТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтрагентыТелефон.Вид = &ВидКонтактнойИнформацииТелефонКонтрагента)
	|ГДЕ
	|	вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
	|	И вт_Контакты.Контакт <> НЕОПРЕДЕЛЕНО
	|	И вт_Контакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Контакты_КИ.Контакт КАК Контакт,
	|	вт_Контакты_КИ.ПредставлениеКИ КАК ПредставлениеКИ,
	|	вт_Контакты_КИ.ТипКИ КАК ТипКИ,
	|	вт_Контакты_КИ.ТипКонтакта КАК ТипКонтакта,
	|	вт_Контакты_КИ.Приоритет КАК Приоритет
	|ИЗ
	|	вт_Контакты_КИ КАК вт_Контакты_КИ
	|ГДЕ
	|	вт_Контакты_КИ.ПредставлениеКИ <> """"";
	
	Попытка
		РезультатЗапроса = мЗапрос.ВыполнитьПакет();
		Выборка          = РезультатЗапроса[1].Выбрать();
		ВыборкаКИ        = РезультатЗапроса[4].Выгрузить();
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetRouteList", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode   = 60;
		
		Возврат Ложь;
	КонецПопытки;
	
	ДеревоЗаказов = Новый ДеревоЗначений;
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистСсылка",                 Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистНомер",                  Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистТС",                     Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистДатаОтправленияПлан",    Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистДатаВыполненияПлан",     Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("МаршрутныйЛистКомментарий",            Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ЗаказНомер",                           Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("КонтрагентНаименование",               Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("КонтрагентСсылка",                     Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДеревоЗаказов.Колонки.Добавить("ГрузоотправительСсылка",               Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДеревоЗаказов.Колонки.Добавить("ГрузополучательСсылка",                Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДеревоЗаказов.Колонки.Добавить("КонтактноеЛицоГрузоотправителяСсылка", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
	ДеревоЗаказов.Колонки.Добавить("КонтактноеЛицоГрузополучателяСсылка",  Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
	ДеревоЗаказов.Колонки.Добавить("ТипТочкиМаршрута",                     Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ДеревоЗаказов.Колонки.Добавить("ПунктНаименование",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПунктАдрес",                           Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПунктСсылка",                          Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	ДеревоЗаказов.Колонки.Добавить("ПунктРадиусПоиска",                    Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ПунктШирота",                          Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ПунктДолгота",                         Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ПунктЭтоГараж",                        Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("ВремяСтоянки",                         Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",                         Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеФакт",                         Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",                           Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("УбытиеФакт",                           Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("ГУИДСтроки",                           Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("НомерСтроки",                          Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Номенклатура",                         Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ЕдиницаИзмерения",                     Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("Количество",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("КоличествоМест",                       Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ВесБрутто",                            Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Объем",                                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выполнен",                             Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("ТелефонКонтрагента",                   Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПочтаКонтрагента",                     Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ТелефонГрузоотправителя",              Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПочтаГрузоотправителя",                Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ТелефонГрузополучателя",               Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПочтаГрузополучателя",                 Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ОтветственныйПоЗаказу",                Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоЗаказов.Колонки.Добавить("ТелефонОтветственного",                Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПочтаОтветственного",                  Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("КомментарийПоЗаказу",                  Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПринятВодителем",                      Новый ОписаниеТипов("ПеречислениеСсылка.уатСтатусыПринятияМЛВодителем"));
	ДеревоЗаказов.Колонки.Добавить("СоздаватьСкладскойАкт",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ЗаказСсылка",                          Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ДеревоЗаказов.Колонки.Добавить("ПараметрВыработки1",                   Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ДеревоЗаказов.Колонки.Добавить("ПараметрВыработки2",                   Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ДеревоЗаказов.Колонки.Добавить("ПараметрВыработки3",                   Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ДеревоЗаказов.Колонки.Добавить("ПараметрВыработки4",                   Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ДеревоЗаказов.Колонки.Добавить("ПараметрВыработки5",                   Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ДеревоЗаказов.Колонки.Добавить("Выработка1",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выработка2",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выработка3",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выработка4",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выработка5",                           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СсылкаMultiGo",                        Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ОтветMultiGo",                         Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("СлужебныйТипПункта",                   Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("ОценкаСервиса",                        Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Подпись",                              Новый ОписаниеТипов("Строка"));
	
	ТабПлановогоВремени = Новый ТаблицаЗначений;
	ТабПлановогоВремени.Колонки.Добавить("МаршрутныйЛист",    Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
	ТабПлановогоВремени.Колонки.Добавить("ТипТочкиМаршрута",  Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ТабПлановогоВремени.Колонки.Добавить("ПунктНаименование", Новый ОписаниеТипов("Строка"));
	ТабПлановогоВремени.Колонки.Добавить("ПунктАдрес",        Новый ОписаниеТипов("Строка"));
	ТабПлановогоВремени.Колонки.Добавить("ПунктСсылка",       Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	ТабПлановогоВремени.Колонки.Добавить("ЗаказНомер",        Новый ОписаниеТипов("Строка"));
	ТабПлановогоВремени.Колонки.Добавить("ЗаказСсылка",       Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабПлановогоВремени.Колонки.Добавить("ВремяСтоянкиСек",   Новый ОписаниеТипов("Число"));
	
	МассивУдаляемыхМЛ = Новый Массив();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.НомерСтроки = 1
			И (Выборка.ПрибытиеПлан < ДатаОт
			ИЛИ Выборка.ПрибытиеПлан > ДатаПо) 
			ИЛИ Выборка.ПринятВодителем = Перечисления.уатСтатусыПринятияМЛВодителем.Отклонен Тогда
			МассивУдаляемыхМЛ.Добавить(Выборка.МаршрутныйЛистСсылка);
		КонецЕсли;
		стрОтборСтрок = Новый Структура("МаршрутныйЛист, ТипТочкиМаршрута, ПунктНаименование, ПунктАдрес, ЗаказНомер",
				Выборка.МаршрутныйЛистСсылка, 
				Выборка.ТипТочкиМаршрута, 
				Выборка.ПунктНаименование,
				Выборка.ПунктАдрес,
				Выборка.ЗаказНомер);
		НайдСтроки = ТабПлановогоВремени.НайтиСтроки(стрОтборСтрок);
		Если НайдСтроки.Количество() = 0 Тогда 
			РедСтр = ТабПлановогоВремени.Добавить();
			РедСтр.МаршрутныйЛист    = Выборка.МаршрутныйЛистСсылка;
			РедСтр.ТипТочкиМаршрута  = Выборка.ТипТочкиМаршрута;
			РедСтр.ПунктНаименование = Выборка.ПунктНаименование;
			РедСтр.ПунктАдрес        = Выборка.ПунктАдрес;
			РедСтр.ЗаказНомер        = Выборка.ЗаказНомер;
			РедСтр.ЗаказСсылка       = Выборка.ЗаказСсылка;
			РедСтр.ВремяСтоянкиСек   = ((Выборка.ВремяСтоянки - Цел(Выборка.ВремяСтоянки))*6000 + Цел(Выборка.ВремяСтоянки)*3600);
		Иначе 
			РедСтр = НайдСтроки.Получить(0);
			Если РедСтр.ЗаказНомер = Выборка.ЗаказНомер Тогда 
				Продолжить;
			КонецЕсли;
			РедСтр.ВремяСтоянкиСек = РедСтр.ВремяСтоянкиСек + ((Выборка.ВремяСтоянки - Цел(Выборка.ВремяСтоянки))*6000 + Цел(Выборка.ВремяСтоянки)*3600);
		КонецЕсли;
	КонецЦикла;
	
	ТабПлановогоВремени.Колонки.Удалить("ЗаказНомер");
	ТабПлановогоВремени.Свернуть("МаршрутныйЛист, ТипТочкиМаршрута, ПунктНаименование, ПунктАдрес", "ВремяСтоянкиСек");
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл 
		СтруктураКИ = ЗаполнитьКИМЛ(ВыборкаКИ, Выборка);
		
		СтрокаМЛ = ДеревоЗаказов.Строки.Найти(Выборка.МаршрутныйЛистСсылка, "МаршрутныйЛистСсылка", Ложь);
		Если СтрокаМЛ = Неопределено Тогда 
			Если МассивУдаляемыхМЛ.Найти(Выборка.МаршрутныйЛистСсылка) <> Неопределено Тогда
				Продолжить;
			КОнецЕсли;
			СтрокаМЛ = ДеревоЗаказов.Строки.Добавить();
			СтрокаМЛ.МаршрутныйЛистСсылка              = Выборка.МаршрутныйЛистСсылка;
			СтрокаМЛ.МаршрутныйЛистНомер               = Выборка.МаршрутныйЛистНомер;
			СтрокаМЛ.МаршрутныйЛистТС                  = Выборка.МаршрутныйЛистТС;
			СтрокаМЛ.МаршрутныйЛистДатаОтправленияПлан = Выборка.МаршрутныйЛистДатаОтправленияПлан;
			СтрокаМЛ.МаршрутныйЛистДатаВыполненияПлан  = Выборка.МаршрутныйЛистДатаВыполненияПлан;
			СтрокаМЛ.МаршрутныйЛистКомментарий         = Выборка.МаршрутныйЛистКомментарий;
			СтрокаМЛ.ПринятВодителем                   = Выборка.ПринятВодителем;
			СтрокаМЛ.СсылкаMultiGo                     = Выборка.СсылкаMultiGo;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.УбытиеПлан) Тогда
			УбытиеПлан = Выборка.УбытиеПлан;
		Иначе
			стрОтборСтрок = Новый Структура("МаршрутныйЛист, ТипТочкиМаршрута, ПунктНаименование, ПунктАдрес",
			Выборка.МаршрутныйЛистСсылка, 
			Выборка.ТипТочкиМаршрута, 
			Выборка.ПунктНаименование,
			Выборка.ПунктАдрес);
			
			НайдСтр = ТабПлановогоВремени.НайтиСтроки(стрОтборСтрок);
			
			Если ТипЗнч(Выборка.ПунктСсылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				СтоянкаДоп = Выборка.СтоянкаИзПункта;
				СтоянкаДоп = ((СтоянкаДоп - Цел(СтоянкаДоп))*6000 + Цел(СтоянкаДоп)*3600);
			Иначе
				СтоянкаДоп = 0;
			КонецЕсли;
			
			Если НайдСтр.Количество() Тогда 
				УбытиеПлан = Выборка.ПрибытиеПлан + НайдСтр[0].ВремяСтоянкиСек + СтоянкаДоп;
			Иначе 
				УбытиеПлан = Выборка.ПрибытиеПлан + СтоянкаДоп;
			КонецЕсли;
		КонецЕсли;
		
		стрПараметрыОтбора = Новый Структура();
		стрПараметрыОтбора.Вставить("МаршрутныйЛистСсылка",                 Выборка.МаршрутныйЛистСсылка); 
		стрПараметрыОтбора.Вставить("ЗаказНомер",                           Выборка.ЗаказНомер);
		стрПараметрыОтбора.Вставить("КонтрагентНаименование",               Выборка.КонтрагентНаименование);
		стрПараметрыОтбора.Вставить("КонтрагентСсылка",                     Выборка.КонтрагентСсылка);
		стрПараметрыОтбора.Вставить("ГрузоотправительСсылка",               Выборка.ГрузоотправительСсылка);
		стрПараметрыОтбора.Вставить("ГрузополучательСсылка",                Выборка.ГрузополучательСсылка);
		стрПараметрыОтбора.Вставить("КонтактноеЛицоГрузоотправителяСсылка", Выборка.КонтактноеЛицоГрузоотправителяСсылка);
		стрПараметрыОтбора.Вставить("КонтактноеЛицоГрузополучателяСсылка",  Выборка.КонтактноеЛицоГрузополучателяСсылка);
		стрПараметрыОтбора.Вставить("ТипТочкиМаршрута",                     Выборка.ТипТочкиМаршрута); 
		стрПараметрыОтбора.Вставить("ПунктНаименование",                    Выборка.ПунктНаименование); 
		стрПараметрыОтбора.Вставить("ПунктАдрес",                           Выборка.ПунктАдрес);
		стрПараметрыОтбора.Вставить("ВремяСтоянки",                         Выборка.ВремяСтоянки); 
		стрПараметрыОтбора.Вставить("ПрибытиеПлан",                         Выборка.ПрибытиеПлан); 
		стрПараметрыОтбора.Вставить("ПрибытиеФакт",                         Выборка.ПрибытиеФакт); 
		стрПараметрыОтбора.Вставить("УбытиеПлан",                           УбытиеПлан);
		стрПараметрыОтбора.Вставить("УбытиеФакт",                           Выборка.УбытиеФакт);
		
		СтрокиЗаказа = СтрокаМЛ.Строки.НайтиСтроки(стрПараметрыОтбора, Ложь);
		
		Если СтрокиЗаказа.Количество() = 0 Тогда 
			СтрокаЗаказа = СтрокаМЛ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка);
			
			СтрокаЗаказа.МаршрутныйЛистСсылка                 = Выборка.МаршрутныйЛистСсылка;
			СтрокаЗаказа.МаршрутныйЛистНомер                  = Выборка.МаршрутныйЛистНомер;
			СтрокаЗаказа.МаршрутныйЛистТС                     = Выборка.МаршрутныйЛистТС;
			СтрокаЗаказа.МаршрутныйЛистДатаОтправленияПлан    = Выборка.МаршрутныйЛистДатаОтправленияПлан;
			СтрокаЗаказа.МаршрутныйЛистДатаВыполненияПлан     = Выборка.МаршрутныйЛистДатаВыполненияПлан;
			СтрокаЗаказа.МаршрутныйЛистКомментарий            = Выборка.МаршрутныйЛистКомментарий;
			СтрокаЗаказа.ЗаказНомер                           = Выборка.ЗаказНомер;
			СтрокаЗаказа.ЗаказСсылка                          = Выборка.ЗаказСсылка;
			СтрокаЗаказа.КонтрагентНаименование               = Выборка.КонтрагентНаименование; 
			СтрокаЗаказа.КонтрагентСсылка                     = Выборка.КонтрагентСсылка;
			СтрокаЗаказа.ГрузоотправительСсылка               = Выборка.ГрузоотправительСсылка;
			СтрокаЗаказа.ГрузополучательСсылка                = Выборка.ГрузополучательСсылка;
			СтрокаЗаказа.КонтактноеЛицоГрузоотправителяСсылка = Выборка.КонтактноеЛицоГрузоотправителяСсылка;
			СтрокаЗаказа.КонтактноеЛицоГрузополучателяСсылка  = Выборка.КонтактноеЛицоГрузополучателяСсылка;
			СтрокаЗаказа.ТипТочкиМаршрута                     = Выборка.ТипТочкиМаршрута; 
			СтрокаЗаказа.ПунктНаименование                    = Выборка.ПунктНаименование; 
			СтрокаЗаказа.ПунктАдрес                           = Выборка.ПунктАдрес;
			СтрокаЗаказа.ПунктСсылка                          = Выборка.ПунктСсылка;
			СтрокаЗаказа.ПунктШирота                          = Выборка.ПунктШирота;
			СтрокаЗаказа.ПунктРадиусПоиска                    = Выборка.ПунктРадиусПоиска;
			СтрокаЗаказа.ПунктДолгота                         = Выборка.ПунктДолгота;
			СтрокаЗаказа.ПунктЭтоГараж                        = Выборка.ПунктЭтоГараж;
			СтрокаЗаказа.ВремяСтоянки                         = Выборка.ВремяСтоянки; 
			СтрокаЗаказа.ПрибытиеПлан                         = Выборка.ПрибытиеПлан; 
			СтрокаЗаказа.ПрибытиеФакт                         = Выборка.ПрибытиеФакт; 
			СтрокаЗаказа.УбытиеПлан                           = УбытиеПлан;
			СтрокаЗаказа.УбытиеФакт                           = Выборка.УбытиеФакт;
			СтрокаЗаказа.ТелефонКонтрагента                   = СтруктураКИ.ТелефонКонтрагента;
			СтрокаЗаказа.ПочтаКонтрагента                     = СтруктураКИ.ПочтаКонтрагента;
			СтрокаЗаказа.ТелефонГрузоотправителя              = СтруктураКИ.ТелефонГрузоотправителя;
			СтрокаЗаказа.ПочтаГрузоотправителя                = СтруктураКИ.ПочтаГрузоотправителя;
			СтрокаЗаказа.ТелефонГрузополучателя               = СтруктураКИ.ТелефонГрузополучателя;
			СтрокаЗаказа.ПочтаГрузополучателя                 = СтруктураКИ.ПочтаГрузополучателя;
			СтрокаЗаказа.ОтветственныйПоЗаказу                = Выборка.ОтветственныйПоЗаказу;
			СтрокаЗаказа.ТелефонОтветственного                = СтруктураКИ.ТелефонОтветственного;
			СтрокаЗаказа.ПочтаОтветственного                  = СтруктураКИ.ПочтаОтветственного;
			СтрокаЗаказа.КомментарийПоЗаказу                  = Выборка.КомментарийПоЗаказу;
			Если ИспользоватьСкладскиеАкты 
				И Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
				И Выборка.ОтгрузкаВРейсВПункте
				И стрНастроек.СоздаватьАктОтгрузкиВРейсПриПогрузке Тогда
				СтрокаЗаказа.СоздаватьСкладскойАкт = 1;
			ИначеЕсли ИспользоватьСкладскиеАкты 
				И Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
				И Выборка.ПриемкаИзРейсаВПункте
				И стрНастроек.СоздаватьАктПриемкиИзРейсаПриРазгрузке Тогда
				СтрокаЗаказа.СоздаватьСкладскойАкт = 1;
			Иначе
				СтрокаЗаказа.СоздаватьСкладскойАкт = 0;
			КонецЕсли;
			
		Иначе 
			СтрокаЗаказа = СтрокиЗаказа.Получить(0);
		КонецЕсли;
		
		СтрокаНоменклатуры = СтрокаЗаказа.Строки.Найти(Строка(Выборка.ГУИДСтроки), "ГУИДСтроки", Ложь);
		Если СтрокаНоменклатуры = Неопределено Тогда 
			СтрокаНоменклатуры = СтрокаЗаказа.Строки.Добавить();
			СтрокаНоменклатуры.МаршрутныйЛистСсылка                 = Выборка.МаршрутныйЛистСсылка;
			СтрокаНоменклатуры.МаршрутныйЛистНомер                  = Выборка.МаршрутныйЛистНомер;
			СтрокаНоменклатуры.МаршрутныйЛистТС                     = Выборка.МаршрутныйЛистТС;
			СтрокаНоменклатуры.МаршрутныйЛистДатаОтправленияПлан    = Выборка.МаршрутныйЛистДатаОтправленияПлан;
			СтрокаНоменклатуры.МаршрутныйЛистДатаВыполненияПлан     = Выборка.МаршрутныйЛистДатаВыполненияПлан;
			СтрокаНоменклатуры.МаршрутныйЛистКомментарий            = Выборка.МаршрутныйЛистКомментарий;
			СтрокаНоменклатуры.ЗаказНомер                           = Выборка.ЗаказНомер; 
			СтрокаНоменклатуры.ЗаказСсылка                          = Выборка.ЗаказСсылка; 
			СтрокаНоменклатуры.КонтрагентНаименование               = Выборка.КонтрагентНаименование; 
			СтрокаНоменклатуры.КонтрагентСсылка                     = Выборка.КонтрагентСсылка;
			СтрокаНоменклатуры.ГрузоотправительСсылка               = Выборка.ГрузоотправительСсылка;
			СтрокаНоменклатуры.ГрузополучательСсылка                = Выборка.ГрузополучательСсылка;
			СтрокаНоменклатуры.КонтактноеЛицоГрузоотправителяСсылка = Выборка.КонтактноеЛицоГрузоотправителяСсылка;
			СтрокаНоменклатуры.КонтактноеЛицоГрузополучателяСсылка  = Выборка.КонтактноеЛицоГрузополучателяСсылка;
			СтрокаНоменклатуры.ТипТочкиМаршрута                     = Выборка.ТипТочкиМаршрута; 
			СтрокаНоменклатуры.ПунктНаименование                    = Выборка.ПунктНаименование; 
			СтрокаНоменклатуры.ПунктАдрес                           = Выборка.ПунктАдрес;
			СтрокаНоменклатуры.ПунктСсылка                          = Выборка.ПунктСсылка;
			СтрокаНоменклатуры.ПунктШирота                          = Выборка.ПунктШирота;
			СтрокаНоменклатуры.ПунктРадиусПоиска                    = Выборка.ПунктРадиусПоиска;
			СтрокаНоменклатуры.ПунктДолгота                         = Выборка.ПунктДолгота;
			СтрокаНоменклатуры.ПунктЭтоГараж                        = Выборка.ПунктЭтоГараж;
			СтрокаНоменклатуры.ВремяСтоянки                         = Выборка.ВремяСтоянки; 
			СтрокаНоменклатуры.ПрибытиеПлан                         = Выборка.ПрибытиеПлан; 
			СтрокаНоменклатуры.ПрибытиеФакт                         = Выборка.ПрибытиеФакт; 
			СтрокаНоменклатуры.УбытиеПлан                           = УбытиеПлан;
			СтрокаНоменклатуры.УбытиеФакт                           = Выборка.УбытиеФакт;
			СтрокаНоменклатуры.ТелефонКонтрагента                   = СтруктураКИ.ТелефонКонтрагента;
			СтрокаНоменклатуры.ПочтаКонтрагента                     = СтруктураКИ.ПочтаКонтрагента;
			СтрокаНоменклатуры.ТелефонГрузоотправителя              = СтруктураКИ.ТелефонГрузоотправителя;
			СтрокаНоменклатуры.ПочтаГрузоотправителя                = СтруктураКИ.ПочтаГрузоотправителя;
			СтрокаНоменклатуры.ТелефонГрузополучателя               = СтруктураКИ.ТелефонГрузополучателя;
			СтрокаНоменклатуры.ПочтаГрузополучателя                 = СтруктураКИ.ПочтаГрузополучателя;
			СтрокаНоменклатуры.ОтветственныйПоЗаказу                = Выборка.ОтветственныйПоЗаказу;
			СтрокаНоменклатуры.ТелефонОтветственного                = СтруктураКИ.ТелефонОтветственного;
			СтрокаНоменклатуры.ПочтаОтветственного                  = СтруктураКИ.ПочтаОтветственного;
			СтрокаНоменклатуры.КомментарийПоЗаказу                  = Выборка.КомментарийПоЗаказу;
			Если ИспользоватьСкладскиеАкты 
				И Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
				И Выборка.ОтгрузкаВРейсВПункте
				И стрНастроек.СоздаватьАктОтгрузкиВРейсПриПогрузке Тогда
				СтрокаНоменклатуры.СоздаватьСкладскойАкт = 1;
			ИначеЕсли ИспользоватьСкладскиеАкты 
				И Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
				И Выборка.ПриемкаИзРейсаВПункте
				И стрНастроек.СоздаватьАктПриемкиИзРейсаПриРазгрузке Тогда
				СтрокаНоменклатуры.СоздаватьСкладскойАкт = 1;
			Иначе
				СтрокаНоменклатуры.СоздаватьСкладскойАкт = 0;
			КонецЕсли;
			СтрокаНоменклатуры.ГУИДСтроки                           = Строка(Выборка.ГУИДСтроки);
			СтрокаНоменклатуры.НомерСтроки                          = Выборка.НомерСтроки;
			СтрокаНоменклатуры.Номенклатура                         = Выборка.Номенклатура;
			СтрокаНоменклатуры.ЕдиницаИзмерения                     = Выборка.ЕдиницаИзмерения;
			СтрокаНоменклатуры.Количество                           = Выборка.Количество;
			СтрокаНоменклатуры.КоличествоМест                       = Выборка.КоличествоМест;
			СтрокаНоменклатуры.ВесБрутто                            = Выборка.ВесБрутто;
			СтрокаНоменклатуры.Объем                                = Выборка.Объем;
			СтрокаНоменклатуры.Выполнен                             = Выборка.Выполнен;
		КонецЕсли;
	КонецЦикла;
	
	responseData = СериализоватьRouteList(ДеревоЗаказов);
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодGetRouteList()

Функция ЗаполнитьКИМЛ(тчКонтакты, Выборка)
	
	РезультатСтруктура = Новый Структура();
	РезультатСтруктура.Вставить("ТелефонКонтрагента",     "");
	РезультатСтруктура.Вставить("ПочтаКонтрагента",       "");
	РезультатСтруктура.Вставить("ТелефонГрузоотправителя","");
	РезультатСтруктура.Вставить("ПочтаГрузоотправителя",  "");
	РезультатСтруктура.Вставить("ТелефонГрузополучателя", "");
	РезультатСтруктура.Вставить("ПочтаГрузополучателя",   "");
	РезультатСтруктура.Вставить("ТелефонОтветственного",  "");
	РезультатСтруктура.Вставить("ПочтаОтветственного",    "");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("тчКонтакты",                             тчКонтакты);
	Запрос.УстановитьПараметр("КонтрагентСсылка",                       Выборка.КонтрагентСсылка);
	Запрос.УстановитьПараметр("КонтактноеЛицоГрузоотправителяСсылка",   Выборка.КонтактноеЛицоГрузоотправителяСсылка);
	Запрос.УстановитьПараметр("ГрузоотправительСсылка",                 Выборка.ГрузоотправительСсылка);
	Запрос.УстановитьПараметр("КонтактноеЛицоГрузополучателяСсылка",    Выборка.КонтактноеЛицоГрузополучателяСсылка);
	Запрос.УстановитьПараметр("ГрузополучательСсылка",                  Выборка.ГрузополучательСсылка);
	Запрос.УстановитьПараметр("ОтветственныйПоЗаказу",                  Выборка.ОтветственныйПоЗаказу);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицоКонтрагента",      Выборка.ОсновноеКонтактноеЛицоКонтрагента);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицоГрузоотправителя", Выборка.ОсновноеКонтактноеЛицоГрузоотправителя);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицоГрузополучателя",  Выборка.ОсновноеКонтактноеЛицоГрузополучателя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформаци.Контакт КАК Контакт,
	               |	КонтактнаяИнформаци.ПредставлениеКИ КАК ПредставлениеКИ,
	               |	КонтактнаяИнформаци.ТипКИ КАК ТипКИ,
	               |	КонтактнаяИнформаци.ТипКонтакта КАК ТипКонтакта,
	               |	КонтактнаяИнформаци.Приоритет КАК Приоритет
	               |ПОМЕСТИТЬ втКонтактнаяИнформаци
	               |ИЗ
	               |	&тчКонтакты КАК КонтактнаяИнформаци
	               |ГДЕ
	               |	(КонтактнаяИнформаци.ТипКонтакта = ""Контрагент""
	               |				И (КонтактнаяИнформаци.Контакт = &КонтрагентСсылка
	               |					ИЛИ КонтактнаяИнформаци.Контакт = &ОсновноеКонтактноеЛицоКонтрагента)
	               |			ИЛИ КонтактнаяИнформаци.ТипКонтакта = ""Грузоотправитель""
	               |				И (КонтактнаяИнформаци.Контакт = &КонтактноеЛицоГрузоотправителяСсылка
	               |					ИЛИ КонтактнаяИнформаци.Контакт = &ГрузоотправительСсылка
	               |					ИЛИ КонтактнаяИнформаци.Контакт = &ОсновноеКонтактноеЛицоГрузоотправителя)
	               |			ИЛИ КонтактнаяИнформаци.ТипКонтакта = ""Грузополучатель""
	               |				И (КонтактнаяИнформаци.Контакт = &КонтактноеЛицоГрузополучателяСсылка
	               |					ИЛИ КонтактнаяИнформаци.Контакт = &ГрузополучательСсылка
	               |					ИЛИ КонтактнаяИнформаци.Контакт = &ОсновноеКонтактноеЛицоГрузополучателя)
	               |			ИЛИ КонтактнаяИнформаци.ТипКонтакта = ""Ответственный""
	               |				И КонтактнаяИнформаци.Контакт = &ОтветственныйПоЗаказу)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКонтактнаяИнформаци.ТипКИ КАК ТипКИ,
	               |	втКонтактнаяИнформаци.ТипКонтакта КАК ТипКонтакта,
	               |	МИНИМУМ(втКонтактнаяИнформаци.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ втМинимальныйПриоритет
	               |ИЗ
	               |	втКонтактнаяИнформаци КАК втКонтактнаяИнформаци
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втКонтактнаяИнформаци.ТипКИ,
	               |	втКонтактнаяИнформаци.ТипКонтакта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКонтактнаяИнформаци.Контакт КАК Контакт,
	               |	втКонтактнаяИнформаци.ПредставлениеКИ КАК ПредставлениеКИ,
	               |	втКонтактнаяИнформаци.ТипКИ КАК ТипКИ,
	               |	втКонтактнаяИнформаци.ТипКонтакта КАК ТипКонтакта
	               |ИЗ
	               |	втКонтактнаяИнформаци КАК втКонтактнаяИнформаци
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныйПриоритет КАК втМинимальныйПриоритет
	               |		ПО втКонтактнаяИнформаци.ТипКИ = втМинимальныйПриоритет.ТипКИ
	               |			И втКонтактнаяИнформаци.ТипКонтакта = втМинимальныйПриоритет.ТипКонтакта
	               |			И втКонтактнаяИнформаци.Приоритет = втМинимальныйПриоритет.Приоритет";
	ВыборкаКИ = Запрос.Выполнить().Выбрать();
	СоответсвиеКИ = Новый Соответствие();
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВыборкаКИ.ТипКонтакта = "Контрагент" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ЗаполнитьВидКИМЛ("ТелефонКонтрагента", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Контрагент" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ЗаполнитьВидКИМЛ("ПочтаКонтрагента", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Грузоотправитель" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ЗаполнитьВидКИМЛ("ТелефонГрузоотправителя", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Грузоотправитель" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ЗаполнитьВидКИМЛ("ПочтаГрузоотправителя", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Грузополучатель" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ЗаполнитьВидКИМЛ("ТелефонГрузополучателя", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Грузополучатель" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ЗаполнитьВидКИМЛ("ПочтаГрузополучателя", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Ответственный" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ЗаполнитьВидКИМЛ("ТелефонОтветственного", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		ИначеЕсли ВыборкаКИ.ТипКонтакта = "Ответственный" 
			И ВыборкаКИ.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ЗаполнитьВидКИМЛ("ПочтаОтветственного", ВыборкаКИ.ПредставлениеКИ, СоответсвиеКИ);
		КонецЕсли;
	КонецЦикла;
	
	МассивКИ = СоответсвиеКИ.Получить("ТелефонКонтрагента");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			 РезультатСтруктура.ТелефонКонтрагента  = РезультатСтруктура.ТелефонКонтрагента + 
			 	?(ЗначениеЗаполнено(РезультатСтруктура.ТелефонКонтрагента), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ПочтаКонтрагента");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			 РезультатСтруктура.ПочтаКонтрагента  = РезультатСтруктура.ПочтаКонтрагента + 
			 	?(ЗначениеЗаполнено(РезультатСтруктура.ПочтаКонтрагента), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ТелефонГрузоотправителя");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ТелефонГрузоотправителя  = РезультатСтруктура.ТелефонГрузоотправителя +
				?(ЗначениеЗаполнено(РезультатСтруктура.ТелефонГрузоотправителя), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ПочтаГрузоотправителя");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ПочтаГрузоотправителя  = РезультатСтруктура.ПочтаГрузоотправителя + 
				?(ЗначениеЗаполнено(РезультатСтруктура.ПочтаГрузоотправителя), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;

	МассивКИ = СоответсвиеКИ.Получить("ТелефонГрузополучателя");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ТелефонГрузополучателя  = РезультатСтруктура.ТелефонГрузополучателя + 
				?(ЗначениеЗаполнено(РезультатСтруктура.ТелефонГрузополучателя), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ПочтаГрузополучателя");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ПочтаГрузополучателя  = РезультатСтруктура.ПочтаГрузополучателя + 
			?(ЗначениеЗаполнено(РезультатСтруктура.ПочтаГрузополучателя), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ТелефонОтветственного");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ТелефонОтветственного  = РезультатСтруктура.ТелефонОтветственного + 
				?(ЗначениеЗаполнено(РезультатСтруктура.ТелефонОтветственного), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ПочтаОтветственного");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			РезультатСтруктура.ПочтаОтветственного  = РезультатСтруктура.ПочтаОтветственного + 
				?(ЗначениеЗаполнено(РезультатСтруктура.ПочтаОтветственного), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;

	Возврат РезультатСтруктура;

КонецФункции

Функция ЗаполнитьКИМЛFTL(ВыборкаКИ, Выборка)
	
	РезультатСтруктура = Новый Структура();
	РезультатСтруктура.Вставить("ТелефонКонтрагента",     "");
	РезультатСтруктура.Вставить("ПочтаКонтрагента",       "");
		
	СтрокиКИ = ВыборкаКИ.НайтиСтроки(Новый Структура("КонтрагентСсылка,КонтактноеЛицоСсылка,НомерСтроки",
	Выборка.КонтрагентСсылка, Выборка.КонтактноеЛицоСсылка, Выборка.НомерСтроки));
	
	СоответсвиеКИ = Новый Соответствие();
	Для Каждого ТекСтрокаКИ Из СтрокиКИ Цикл
		ЗаполнитьВидКИМЛ("ТелефонКонтрагента", ТекСтрокаКИ.ТелефонКонтрагента, СоответсвиеКИ);
		ЗаполнитьВидКИМЛ("ПочтаКонтрагента", ТекСтрокаКИ.ПочтаКонтрагента, СоответсвиеКИ);
	КонецЦикла;
	
	МассивКИ = СоответсвиеКИ.Получить("ТелефонКонтрагента");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			 РезультатСтруктура.ТелефонКонтрагента  = РезультатСтруктура.ТелефонКонтрагента + 
			 	?(ЗначениеЗаполнено(РезультатСтруктура.ТелефонКонтрагента), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;
	
	МассивКИ = СоответсвиеКИ.Получить("ПочтаКонтрагента");
	Если ТипЗнч(МассивКИ) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаКИ Из МассивКИ Цикл
			 РезультатСтруктура.ПочтаКонтрагента  = РезультатСтруктура.ПочтаКонтрагента + 
			 	?(ЗначениеЗаполнено(РезультатСтруктура.ПочтаКонтрагента), "; ", "") + ТекСтрокаКИ;
		КонецЦикла;
	КонецЕсли;

	Возврат РезультатСтруктура;

КонецФункции

Процедура ЗаполнитьВидКИМЛ(ВидКИ, ДанныеСтроки, СоответсвиеКИ)
	
	МассивКИ = СоответсвиеКИ.Получить(ВидКИ);
	Если МассивКИ = Неопределено Тогда
		МассивКИ = Новый Массив();
		МассивКИ.Добавить(ДанныеСтроки);
	ИначеЕсли МассивКИ.Найти(ДанныеСтроки) = Неопределено Тогда
		МассивКИ.Добавить(ДанныеСтроки);
	КонецЕсли;
	СоответсвиеКИ.Вставить(ВидКИ, МассивКИ);
	
КонецПроцедуры

// Функция предназначена для отражения изменений по заказам маршрутных листов с мобильного приложения
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодUpdateOrders(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеМодификацииМЛ = ДесериализоватьUpdateOrders(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 65;
		
		Возврат Ложь;
	КонецЕсли;
	
	стрНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	
	ВидыГрузов = Новый Массив;
	ВидыГрузов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ВидыГрузов.Добавить(Тип("СправочникСсылка.уатГрузовыеМеста_уэ"));
	ВидыЕдиницИзмерения = Новый Массив;
	ВидыЕдиницИзмерения.Добавить(Тип("СправочникСсылка.уатВидыУпаковки_уэ"));
	ВидыЕдиницИзмерения.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Тип("ПеречислениеСсылка.уатВидыОперацийАктОтгрузки_уэ"));
	ВидыОпераций.Добавить(Тип("ПеречислениеСсылка.уатВидыОперацийАктПриемки_уэ"));

	тблСкладскиеДанные = Новый ТаблицаЗначений;
	тблСкладскиеДанные.Колонки.Добавить("Количество",         Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("КоличествоПлан",     Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("КоличествоМест",     Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("КоличествоМестПлан", Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("ВесБрутто",          Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("ВесБруттоПлан",      Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("Объем",              Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("ОбъемПлан",          Новый ОписаниеТипов("Число"));
	тблСкладскиеДанные.Колонки.Добавить("ЕстьРасхождения",    Новый ОписаниеТипов("Булево"));
	тблСкладскиеДанные.Колонки.Добавить("Состояние",          Новый ОписаниеТипов("Строка"));
	тблСкладскиеДанные.Колонки.Добавить("НачалоОперации",     Новый ОписаниеТипов("Дата"));
	тблСкладскиеДанные.Колонки.Добавить("ОкончаниеОперации",  Новый ОписаниеТипов("Дата"));
	тблСкладскиеДанные.Колонки.Добавить("Пункт",              Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	тблСкладскиеДанные.Колонки.Добавить("Статус",             Новый ОписаниеТипов("СправочникСсылка.уатСтатусы_уэ"));
	тблСкладскиеДанные.Колонки.Добавить("Заказ",              Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблСкладскиеДанные.Колонки.Добавить("МаршрутныйЛист",     Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
	тблСкладскиеДанные.Колонки.Добавить("ГрузовоеМесто",      Новый ОписаниеТипов(ВидыГрузов));
	тблСкладскиеДанные.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов(ВидыЕдиницИзмерения));
	тблСкладскиеДанные.Колонки.Добавить("ВидОперации",        Новый ОписаниеТипов(ВидыОпераций));
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("ИзмененныеМЛ", ДанныеМодификацииМЛ);
	мЗапрос.УстановитьПараметр("Водитель",     ДанныеАвторизации.ФизическоеЛицо);
	мЗапрос.УстановитьПараметр("ТС",           ДанныеАвторизации.ТС);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзмененныеМЛ.routeListRef КАК МаршрутныйЛист,
	|	ИзмененныеМЛ.lineID КАК GUIDСтроки,
	|	ИзмененныеМЛ.isDone КАК Выполнен,
	|	ИзмененныеМЛ.arrivalFact КАК ПрибытиеФакт,
	|	ИзмененныеМЛ.departureFact КАК УбытиеФакт,
	|	ИзмененныеМЛ.fact_accepted КАК ГрузОбработан,
	|	ИзмененныеМЛ.fact_amount КАК КоличествоФакт,
	|	ИзмененныеМЛ.fact_amountPlace КАК КоличествоМестФакт,
	|	ИзмененныеМЛ.fact_weight КАК ВесФакт,
	|	ИзмененныеМЛ.fact_volume КАК ОбъемФакт,
	|	ИзмененныеМЛ.fact_reason КАК ПричинаРасхожденийФакт,
	|	ИзмененныеМЛ.signature КАК Подпись,
	|	ИзмененныеМЛ.mark КАК ОценкаСервиса
	|ПОМЕСТИТЬ ИзмененныеМЛ
	|ИЗ
	|	&ИзмененныеМЛ КАК ИзмененныеМЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВложенныйЗапрос.GUIDСтроки КАК GUIDСтроки,
	|	ВложенныйЗапрос.Выполнен КАК Выполнен,
	|	ВложенныйЗапрос.ПрибытиеФакт КАК ПрибытиеФакт,
	|	ВложенныйЗапрос.УбытиеФакт КАК УбытиеФакт,
	|	ВЫБОР
	|		КОГДА (ВложенныйЗапрос.Водитель1 = &Водитель
	|				ИЛИ ВложенныйЗапрос.Водитель2 = &Водитель)
	|				И ВложенныйЗапрос.ТС = &ТС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Валидирован,
	|	ВложенныйЗапрос.ГрузОбработан КАК ГрузОбработан,
	|	ВложенныйЗапрос.КоличествоФакт КАК КоличествоФакт,
	|	ВложенныйЗапрос.КоличествоМестФакт КАК КоличествоМестФакт,
	|	ВложенныйЗапрос.ВесФакт КАК ВесФакт,
	|	ВложенныйЗапрос.ОбъемФакт КАК ОбъемФакт,
	|	ВложенныйЗапрос.ПричинаРасхожденийФакт КАК ПричинаРасхожденийФакт,
	|	ВложенныйЗапрос.ОценкаСервиса КАК ОценкаСервиса,
	|	ВложенныйЗапрос.Подпись КАК Подпись
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИзмененныеМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|		ИзмененныеМЛ.GUIDСтроки КАК GUIDСтроки,
	|		ИзмененныеМЛ.Выполнен КАК Выполнен,
	|		ИзмененныеМЛ.ПрибытиеФакт КАК ПрибытиеФакт,
	|		ИзмененныеМЛ.УбытиеФакт КАК УбытиеФакт,
	|		ИзмененныеМЛ.ГрузОбработан КАК ГрузОбработан,
	|		ИзмененныеМЛ.КоличествоФакт КАК КоличествоФакт,
	|		ИзмененныеМЛ.КоличествоМестФакт КАК КоличествоМестФакт,
	|		ИзмененныеМЛ.ВесФакт КАК ВесФакт,
	|		ИзмененныеМЛ.ОбъемФакт КАК ОбъемФакт,
	|		ИзмененныеМЛ.ПричинаРасхожденийФакт КАК ПричинаРасхожденийФакт,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.Сотрудники)
	|				ТОГДА уатМаршрутныйЛист.Водитель1.ФизическоеЛицо
	|			ИНАЧЕ уатМаршрутныйЛист.Водитель1
	|		КОНЕЦ КАК Водитель1,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.Сотрудники)
	|				ТОГДА уатМаршрутныйЛист.Водитель2.ФизическоеЛицо
	|			ИНАЧЕ уатМаршрутныйЛист.Водитель2
	|		КОНЕЦ КАК Водитель2,
	|		уатМаршрутныйЛист.ТС КАК ТС,
	|		ИзмененныеМЛ.ОценкаСервиса КАК ОценкаСервиса,
	|		ИзмененныеМЛ.Подпись КАК Подпись
	|	ИЗ
	|		ИзмененныеМЛ КАК ИзмененныеМЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|			ПО ИзмененныеМЛ.МаршрутныйЛист = уатМаршрутныйЛист.Ссылка
	|				И (уатМаршрутныйЛист.Ссылка В
	|					(ВЫБРАТЬ
	|						ИзмененныеМЛ.МаршрутныйЛист
	|					ИЗ
	|						ИзмененныеМЛ КАК ИзмененныеМЛ))) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валидирован
	|ИТОГИ ПО
	|	Валидирован,
	|	МаршрутныйЛист";
	
	Попытка
		мВыборкаВалидность = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Исключение
		ЗаписатьСообщениеОбОшибке("UpdateOrders", ОписаниеОшибки());
		resultCode = 65;
		
		Возврат Ложь;
	КонецПопытки;
	
	ЗаказыСРасхождениями = Новый Массив;
	
	Пока мВыборкаВалидность.Следующий() Цикл 
		Если мВыборкаВалидность.Валидирован = Ложь Тогда 
			ТекстНСТР = НСтр("en='Routing list assigned to another driver or vehicle.';ru='Маршрутный лист назначен другому водителю или ТС.'");
			ЗаписатьСообщениеОбОшибке("UpdateOrders", ТекстНСТР);
			resultCode = 66;
			
			Возврат Ложь;
		КонецЕсли;
		
		мВыборкаМЛ = мВыборкаВалидность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока мВыборкаМЛ.Следующий() Цикл 
			МаршЛистОб = мВыборкаМЛ.МаршрутныйЛист.ПолучитьОбъект();
			
			флДокументМодифицирован = Ложь;
			ЕстьРасхожденияПоМаршрутномуЛисту = Ложь;
			
			мВыборкаЗаказы = мВыборкаМЛ.Выбрать();
			
			Пока мВыборкаЗаказы.Следующий() Цикл 
				НайдСтр = МаршЛистОб.Заказы.Найти(Новый УникальныйИдентификатор(мВыборкаЗаказы.GUIDСтроки), "GUIDСтроки");
				Если НайдСтр = Неопределено Тогда 
					ТекстНСТР = НСтр("en='Order is not found in specified routing list.';ru='Заказ не найден в указанном маршрутном листе.'");
					ЗаписатьСообщениеОбОшибке("UpdateOrders", ТекстНСТР);
					resultCode = 67;
					
					Возврат Ложь;
				КонецЕсли;
				НайдСтр.ОценкаСервиса = мВыборкаЗаказы.ОценкаСервиса;
					
				ЕстьРасхожденияПоГрузу = НайдСтр.Количество <> мВыборкаЗаказы.КоличествоФакт
					Или НайдСтр.КоличествоМест <> мВыборкаЗаказы.КоличествоМестФакт
					Или НайдСтр.Объем <> мВыборкаЗаказы.ОбъемФакт
					Или НайдСтр.ВесБрутто <> мВыборкаЗаказы.ВесФакт;
				ЕстьРасхожденияПоГрузу = ЕстьРасхожденияПоГрузу И мВыборкаЗаказы.ГрузОбработан = 1;
					
				ЕстьРасхожденияПоМаршрутномуЛисту = ЕстьРасхожденияПоМаршрутномуЛисту Или ЕстьРасхожденияПоГрузу;
				Если ЕстьРасхожденияПоГрузу Тогда
					ЗаказыСРасхождениями.Добавить(НайдСтр.ЗаказГрузоотправителя);
				КонецЕсли;
				
				НайдСтр.ПрибытиеФакт = ?(мВыборкаЗаказы.ПрибытиеФакт='19700101', '00010101', мВыборкаЗаказы.ПрибытиеФакт);
				НайдСтр.УбытиеФакт   = ?(мВыборкаЗаказы.УбытиеФакт='19700101', '00010101', мВыборкаЗаказы.УбытиеФакт);
				
				ПредПричинаЗакрытия = НайдСтр.ПричинаЗакрытияЗаказа;
				
				УстановитьПараметрыТЛЭ(МаршЛистОб, НайдСтр, мВыборкаЗаказы, ДанныеМодификацииМЛ);
				
				флВыполнен = Ложь;
				
				Если ЗначениеЗаполнено(НайдСтр.ПрибытиеФакт) И ЗначениеЗаполнено(НайдСтр.УбытиеФакт) Тогда 
					флВыполнен = Истина;
				ИначеЕсли ЗначениеЗаполнено(НайдСтр.ПричинаЗакрытияЗаказа) И НайдСтр.ПричинаЗакрытияЗаказа.ЗакрытУспешно Тогда 
					флВыполнен = Истина;
				КонецЕсли;
				
				Если Не НайдСтр.Выполнен И флВыполнен Тогда 
					НайдСтр.Выполнен = Истина;
					флДокументМодифицирован = Истина;
				КонецЕсли;
				
				Если ПредПричинаЗакрытия <> НайдСтр.ПричинаЗакрытияЗаказа
					Или (МаршЛистОб.ЕстьРасхождения = Ложь И ЕстьРасхожденияПоМаршрутномуЛисту = Истина) Тогда 
				КонецЕсли;
				
				// Запись плановых и фактических данных о грузах для складских актов
				// Складские акты создаются автоматически только у клиента, на складах не создаются
				// Также учитываются флаги создания актов из настроек мобильного приложения
				Если НайдСтр.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
					И стрНастроек.СоздаватьАктОтгрузкиВРейсПриПогрузке 
					И НайдСтр.ЗаказГрузоотправителя.ВидДоставки <> Перечисления.уатВидыДоставки_уэ.СкладСклад
					И НайдСтр.ЗаказГрузоотправителя.ВидДоставки <> Перечисления.уатВидыДоставки_уэ.СкладДверь Тогда
					ВидСкладскойОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейсВПункте;
					СтатусГруза = Справочники.уатСтатусы_уэ.ВыданВРейс;
				ИначеЕсли НайдСтр.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					И стрНастроек.СоздаватьАктПриемкиИзРейсаПриРазгрузке 
					И НайдСтр.ЗаказГрузоотправителя.ВидДоставки <> Перечисления.уатВидыДоставки_уэ.СкладСклад
					И НайдСтр.ЗаказГрузоотправителя.ВидДоставки <> Перечисления.уатВидыДоставки_уэ.ДверьСклад Тогда
					ВидСкладскойОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте;
					СтатусГруза = Справочники.уатСтатусы_уэ.ПринятИзРейса;
				Иначе
					ВидСкладскойОперации = Неопределено;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВидСкладскойОперации) И мВыборкаЗаказы.ГрузОбработан Тогда
					НоваяСтрока = тблСкладскиеДанные.Добавить();
					НоваяСтрока.КоличествоПлан     = НайдСтр.Количество;
					НоваяСтрока.КоличествоМестПлан = НайдСтр.КоличествоМест;
					НоваяСтрока.ВесБруттоПлан      = НайдСтр.ВесБрутто;
					НоваяСтрока.ОбъемПлан          = НайдСтр.Объем;
					НоваяСтрока.ЕстьРасхождения    = ЕстьРасхожденияПоГрузу;
					НоваяСтрока.Количество         = мВыборкаЗаказы.КоличествоФакт;
					НоваяСтрока.КоличествоМест     = мВыборкаЗаказы.КоличествоМестФакт;
					НоваяСтрока.ВесБрутто          = мВыборкаЗаказы.ВесФакт;
					НоваяСтрока.Объем              = мВыборкаЗаказы.ОбъемФакт;
					НоваяСтрока.Состояние          = мВыборкаЗаказы.ПричинаРасхожденийФакт;
					НоваяСтрока.Пункт              = НайдСтр.Пункт;
					НоваяСтрока.Заказ              = НайдСтр.ЗаказГрузоотправителя;
					НоваяСтрока.МаршрутныйЛист     = мВыборкаЗаказы.МаршрутныйЛист;
					НоваяСтрока.ГрузовоеМесто      = НайдСтр.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения   = НайдСтр.ЕдиницаИзмерения;
					НоваяСтрока.ВидОперации        = ВидСкладскойОперации;
					НоваяСтрока.Статус             = СтатусГруза;
					НоваяСтрока.НачалоОперации     = НайдСтр.ПрибытиеФакт;
					НоваяСтрока.ОкончаниеОперации  = НайдСтр.УбытиеФакт;
				КонецЕсли;
				
				
				Если ЗначениеЗаполнено(мВыборкаЗаказы.Подпись) 
					И СтрЗаменить(мВыборкаЗаказы.Подпись, Символы.ПС, "") <> СтрЗаменить(НайдСтр.Подпись, Символы.ПС, "") Тогда 
					ДанныеФайла = Base64Значение(мВыборкаЗаказы.Подпись);
					
					НайдСтр.Подпись = мВыборкаЗаказы.Подпись;
					
					ТекДата      = ТекущаяДата();
					ТекУниврДата = ТекущаяУниверсальнаяДата();
					GUIDКартинки = Новый УникальныйИдентификатор();
					ИмяФайла     = "Строка " + Формат(НайдСтр.НомерСтроки, "ЧГ=0") + " - "
					+ Формат(ТекДата, "ДФ='dd.MM.yyyy HH-mm-ss'; ДП='Нет даты'")
					+ " " + "Подпись";
					
					СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
					СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
					СведенияОФайле.РасширениеБезТочки             = "jpg";
					СведенияОФайле.ВремяИзменения                 = ТекДата;
					СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
					СведенияОФайле.Размер                         = ДанныеФайла.Размер();
					СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла);
					СведенияОФайле.АдресВременногоХранилищаТекста = "";
					
					Попытка
						ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(мВыборкаМЛ.МаршрутныйЛист, СведенияОФайле);
					Исключение
						ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
						ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
						resultCode = 85;
						Возврат Ложь;
					КонецПопытки;
					
					НовПрисоедФайл = МаршЛистОб.ПрисоединенныеФайлы.Добавить();
					НовПрисоедФайл.GUIDФайла          = GUIDКартинки;
					НовПрисоедФайл.GUIDСтрокиЗаказа   = Новый УникальныйИдентификатор(мВыборкаЗаказы.GUIDСтроки);
					НовПрисоедФайл.ПрисоединенныйФайл = ФайлСсылка;
				КонецЕсли;
			КонецЦикла;
			
			Если флДокументМодифицирован Тогда 
				счВсего = 0;
				счВыполнено = 0;
				
				Для Каждого ТекСтрока Из МаршЛистОб.Заказы Цикл 
					Если ТекСтрока.Выполнен
						ИЛИ ЗначениеЗаполнено(ТекСтрока.ПричинаЗакрытияЗаказа)
						ИЛИ (НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
						И ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
						И ТекСтрока.Пункт.ТипПункта.Служебный) Тогда
						счВыполнено = счВыполнено + 1;
					КонецЕсли;
					счВсего = счВсего + 1;
				КонецЦикла;
				
				Если счВсего <> 0 И счВсего = счВыполнено Тогда 
					МаршЛистОб.ЗакрытВодителем = Истина;
				КонецЕсли;
				МаршЛистОб.ЕстьРасхождения = МаршЛистОб.ЕстьРасхождения Или ЕстьРасхожденияПоМаршрутномуЛисту;
				
				СоздатьСкладскиеАкты(тблСкладскиеДанные, МаршЛистОб);
			КонецЕсли;
			
			ОшибкаПриПроведении = Ложь;
			Попытка
				МаршЛистОб.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОшибкаПриПроведении = Истина;
			КонецПопытки;

			Если ОшибкаПриПроведении Тогда
				Попытка
					МаршЛистОб.Записать();
				Исключение
					ЗаписатьСообщениеОбОшибке("UpdateOrders", ОписаниеОшибки());
					resultCode = 125;
					
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	уатОбщегоНазначения_уэ.УстановитьФлагЕстьРасхожденияВЗаказахНаТС(ЗаказыСРасхождениями);
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодUpdateOrders()

// Функция предназначена для создания сообщения об опоздании от водителя
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSendLateArrival(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	стрДанныеОбОпоздании = ДесериализоватьLateArrival(requestData, флОшибка); //pointName, lateArrival, comment
	
	Если флОшибка Тогда 
		resultCode = 75;
		
		Возврат Ложь;
	КонецЕсли;
	
	// время опоздания.
	тСодержание = "" + НСтр("en='time of lateness:';ru='время опоздания:'") +" " + стрДанныеОбОпоздании.lateArrival + " " + НСтр("en='min.';ru='мин.'") + ";";
	// пункт опоздания.
	тСодержание = тСодержание + Символы.ПС + НСтр("en='point:';ru='пункт:'") +" " + стрДанныеОбОпоздании.pointName;
	// причина опоздания, если указана.
	Если Не стрДанныеОбОпоздании.comment = "" Тогда 
		тСодержание = тСодержание + ";" + Символы.ПС + НСтр("en='reason:';ru='причина:'") +" " + стрДанныеОбОпоздании.comment;
	КонецЕсли;
	
		
	ТекстОшибки = "";
	Чат = Справочники.уатЧаты.ПолучитьТекущийЧатВодителя(ДанныеАвторизации.ФизическоеЛицо);

	СообщениеСоздано = РегистрыСведений.уатЧатыСВодителями.СоздатьСообщениеМобильногоПриложения(
			Чат,
			тСодержание,
			Чат,
			ДанныеАвторизации.ФизическоеЛицо,
			Перечисления.уатВидыСообщенийМобильногоПриложения.Опоздание,
			ТекущаяДатаСеанса(),
			Истина,
			Истина,
			ТекущаяДатаСеанса(),
			,,
			,
			ТекстОшибки
			);

	Если НЕ СообщениеСоздано Тогда
		ЗаписатьСообщениеОбОшибке("SendLateArrival", ТекстОшибки);
		resultCode = 75;
		
		Возврат Ложь;
	КонецЕсли;

	Попытка
		НаименованиеСообщения = НСтр("en='Message about late from driver';ru='Сообщение об опоздании от водителя'")
		+ " " + ДанныеАвторизации.ФизическоеЛицо.Наименование + ", " + НСтр("en='Vehicle';ru='ТС'") + " " + ДанныеАвторизации.ТС.Наименование;
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
		НаименованиеСообщения + Символы.ПС + тСодержание,
		Символы.ПС,
		Новый ФорматированнаяСтрока("Ответить",,,, "e1cib/command/Обработка.уатСообщенияМобильногоПриложения.Команда.СообщенияМобильногоПриложения"));
		
		
		ГруппаДиспетчеров = Чат.ГруппаДиспетчеров;
		Справочники.уатГруппыДиспетчеров.ОтправитьСообщениеВСлужебноеОбсуждение(ГруппаДиспетчеров, ТекстСообщения);
		ОтправитьСообщениеВСлужебноеОбсуждение();
	Исключение
	КонецПопытки;
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendLateArrival()

// Функция предназначена для обновления идентификатора "push ID" мобильного устройства.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSetPushID(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	стрДанныеОбИдентификаторе = ДесериализоватьSetPushID(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 80;
		
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НаборЗаписи = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ФизическоеЛицо.Установить(ДанныеАвторизации.ФизическоеЛицо);
		НаборЗаписи.Отбор.ТС.Установить(ДанныеАвторизации.ТС);

		НаборЗаписи.Прочитать();
	Исключение
		ЗаписатьСообщениеОбОшибке("SetPushID", ОписаниеОшибки());
		resultCode = 80;
		
		Возврат Ложь;
	КонецПопытки;
	
	Если НаборЗаписи.Количество() Тогда 
		НаборЗаписи[0].pushID = стрДанныеОбИдентификаторе.PushID;
		
		Попытка
			НаборЗаписи.Записать(Истина);
		Исключение
			ЗаписатьСообщениеОбОшибке("SetPushID", ОписаниеОшибки());
			resultCode = 80;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendLateArrival()

// Функция предназначена для сохранения картинки по маршрутному листу, полученной с мобильного устройства.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSendImage(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response><image>00000000-0000-0000-0000-000000000000</image></response>"; // Значение по-умолчанию в случае ошибки.
	
	флОшибка = Ложь;
	
	ТабФайлов = ДесериализоватьImage(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 85;
		
		Возврат Ложь;
	КонецЕсли;
	
	СозданныеФайлы = Новый Массив();
	
	Для Каждого ТекФайл Из ТабФайлов Цикл
		ТекДата      = ТекущаяДата();
		ТекУниврДата = ТекущаяУниверсальнаяДата();
		GUIDКартинки = Новый УникальныйИдентификатор();
		
		Если ТипЗнч(ТекФайл.ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ДокументОбъект = ТекФайл.ДокументСсылка.ПолучитьОбъект(); 
			Если ДокументОбъект = Неопределено Тогда 
				ТекстНСТР = НСтр("en='Document is not in database.';ru='Документ отсутствует в базе.'");
				ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
				resultCode = 85;
				Возврат Ложь;
			КонецЕсли;
			
			СтрокиТЧ = ДокументОбъект.Заказы.НайтиСтроки(Новый Структура("GUIDСтроки", ТекФайл.GUIDСтроки));
			Если СтрокиТЧ.Количество() = 0 Тогда 
				ТекстНСТР = НСтр("en='Required line of document is not in database.';ru='Требуемая строка документа отсутствует в базе.'");
				ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
				resultCode = 85;
				Возврат Ложь;
			КонецЕсли;
			
			ИмяФайла = "Строка " + Формат(СтрокиТЧ[0].НомерСтроки, "ЧГ=0") + " - " + Формат(ТекДата, "ДФ='dd.MM.yyyy HH-mm-ss'; ДП='Нет даты'");
		ИначеЕсли ЗначениеЗаполнено(ТекФайл.ДокументСсылка) Тогда
			ИмяФайла = "Изображение" + " - " + Формат(ТекДата, "ДФ='dd.MM.yyyy HH-mm-ss'; ДП='Нет даты'");
		Иначе
			ТекстНСТР = НСтр("en='Document is not in database.';ru='Документ отсутствует в базе.'");
			ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
			resultCode = 85;
			Возврат Ложь;
		КонецЕсли;
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
		СведенияОФайле.РасширениеБезТочки             = ТекФайл.РасширениеФайла;
		СведенияОФайле.ВремяИзменения                 = ТекДата;
		СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
		СведенияОФайле.Размер                         = ТекФайл.ДанныеФайла.Размер();
		СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ТекФайл.ДанныеФайла);
		СведенияОФайле.АдресВременногоХранилищаТекста = "";
		
		Попытка
			ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ТекФайл.ДокументСсылка, СведенияОФайле);
		Исключение
			ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
			ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
			resultCode = 85;
			Возврат Ложь;
		КонецПопытки;
		СозданныеФайлы.Добавить(GUIDКартинки);
		
		Если ТипЗнч(ТекФайл.ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			НовПрисоедФайл = ДокументОбъект.ПрисоединенныеФайлы.Добавить();
			НовПрисоедФайл.GUIDФайла          = GUIDКартинки;
			НовПрисоедФайл.GUIDСтрокиЗаказа   = Новый УникальныйИдентификатор(ТекФайл.GUIDСтроки);
			НовПрисоедФайл.ПрисоединенныйФайл = ФайлСсылка;
			
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	responseData = СериализоватьSendImage(СозданныеФайлы);
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendLateArrival()

// Функция предназначена для сохранения картинки по маршрутному листу, полученной с мобильного устройства.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодsendImageRepair(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response><image>00000000-0000-0000-0000-000000000000</image></response>"; // Значение по-умолчанию в случае ошибки.
	
	флОшибка = Ложь;
	
	ТабФайлов = ДесериализоватьImageRepair(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 85;
		
		Возврат Ложь;
	КонецЕсли;
	
	СозданныеФайлы = Новый Массив();
	
	Для Каждого ТекФайл Из ТабФайлов Цикл 
		ДокументОбъект = ТекФайл.ЗаявкаНаРемонт.ПолучитьОбъект();
		
		Если ДокументОбъект = Неопределено Тогда 
			ТекстНСТР = НСтр("en='Document is not in database.';ru='Документ отсутствует в базе.'");
			ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
			resultCode = 85;
			Возврат Ложь;
		КонецЕсли;
		

		ТекДата      = ТекущаяДата();
		ТекУниврДата = ТекущаяУниверсальнаяДата();
		GUIDКартинки = Новый УникальныйИдентификатор();
		ИмяФайла     = "Изображение" + " - " + Формат(ТекДата, "ДФ='dd.MM.yyyy HH-mm-ss'; ДП='Нет даты'");
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
		СведенияОФайле.РасширениеБезТочки             = ТекФайл.РасширениеФайла;
		СведенияОФайле.ВремяИзменения                 = ТекДата;
		СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
		СведенияОФайле.Размер                         = ТекФайл.ДанныеФайла.Размер();
		СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ТекФайл.ДанныеФайла);
		СведенияОФайле.АдресВременногоХранилищаТекста = "";
		
		Попытка
			ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ТекФайл.ЗаявкаНаРемонт, СведенияОФайле);
		Исключение
			ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
			ЗаписатьСообщениеОбОшибке("SendImage", ТекстНСТР);
			resultCode = 85;
			Возврат Ложь;
		КонецПопытки;
		
		СозданныеФайлы.Добавить(GUIDКартинки);
	КонецЦикла;
	
	responseData = СериализоватьSendImage(СозданныеФайлы);
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendLateArrival()

// Функция предназначена для удаления картинки по маршрутному листу, полученной с мобильного устройства.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодDeleteImages(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	мсвУдаляемыхФайлов = ДесериализоватьDeleteImages(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 90;
		
		Возврат Ложь;
	КонецЕсли;
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("ФизическоеЛицо",     ДанныеАвторизации.ФизическоеЛицо);
	мЗапрос.УстановитьПараметр("ТС",                 ДанныеАвторизации.ТС);
	мЗапрос.УстановитьПараметр("мсвУдаляемыхФайлов", мсвУдаляемыхФайлов);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛистПрисоединенныеФайлы.GUIDФайла КАК GUIDФайла,
	|	уатМаршрутныйЛистПрисоединенныеФайлы.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	|ИЗ
	|	Документ.уатМаршрутныйЛист.ПрисоединенныеФайлы КАК уатМаршрутныйЛистПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистПрисоединенныеФайлы.Ссылка = уатМаршрутныйЛист.Ссылка
	|			И (ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.Сотрудники)
	|						ТОГДА уатМаршрутныйЛист.Водитель1.ФизическоеЛицо = &ФизическоеЛицо
	|					ИНАЧЕ уатМаршрутныйЛист.Водитель1 = &ФизическоеЛицо
	|				КОНЕЦ
	|				ИЛИ ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.Сотрудники)
	|						ТОГДА уатМаршрутныйЛист.Водитель2.ФизическоеЛицо = &ФизическоеЛицо
	|					ИНАЧЕ уатМаршрутныйЛист.Водитель2 = &ФизическоеЛицо
	|				КОНЕЦ)
	|			И (уатМаршрутныйЛист.ТС = &ТС)
	|ГДЕ
	|	уатМаршрутныйЛистПрисоединенныеФайлы.GUIDФайла В(&мсвУдаляемыхФайлов)
	|ИТОГИ ПО
	|	Ссылка";
	
	мВыборкаМЛ = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока мВыборкаМЛ.Следующий() Цикл 
		ДокМЛ = мВыборкаМЛ.Ссылка.ПолучитьОбъект(); 
		
		мВыборкаДетально = мВыборкаМЛ.Выбрать();
		Пока мВыборкаДетально.Следующий() Цикл 
			НайдСтроки = ДокМЛ.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDФайла", мВыборкаДетально.GUIDФайла));
			Если НайдСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			ДокМЛ.ПрисоединенныеФайлы.Удалить(НайдСтроки[0]);
			
			СпрФайлОбъект = мВыборкаДетально.ПрисоединенныйФайл.ПолучитьОбъект();
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				СпрФайлОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ЗаписатьСообщениеОбОшибке("DeleteImages", ОписаниеОшибки());
				resultCode = 90;
				Возврат Ложь;
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		
		ДокМЛ.Записать();
	КонецЦикла;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ОбработатьМетодSendLateArrival()

// Функция предназначена для получения QR кода.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetQRcode(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	ДокументСсылка = Документы.уатПутевойЛист.ПустаяСсылка();
	ЧтениеXML = Новый ЧтениеXML; 
	
	флОшибка = Ложь;
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("docID") Тогда
				ЧтениеXML.Прочитать();
				
				ТекущийGUIDПЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing the GUID in the routeList field.';ru='Ошибка разбора GUID в поле docID.'");
				КонецЕсли;
				
				ДокументСсылка = Документы.уатПутевойЛист.ПолучитьСсылку(ТекущийGUIDПЛ);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing the structure ""requestData"". Description of error:';ru='Возникла ошибка при разборе структуры ""requestData"". Описание ошибки:'") + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьQR';ru='ДесериализоватьQR'"), ТекстНСТР); 
		resultCode = 145;
		Возврат Ложь;
	КонецПопытки;

	СостоянияПодписейПЛ = Новый Соответствие();
	СоответвиеПЛЭД      = Новый Соответствие();
	
	мсвПутевыеЛисты     = Новый Массив();
	мсвПутевыеЛисты.Добавить(ДокументСсылка);
	уатОбменСГИСЭПД.ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД);
	
	ТекЭПЛ = СоответвиеПЛЭД.Получить(ДокументСсылка);
	Если ТекЭПЛ <> Неопределено Тогда
		ЭПЛ  = ТекЭПЛ.ЭПЛ;
		ЭПЛ_Титул4Подписан = ТекЭПЛ.Титул4Подписан; 
	Иначе
		resultCode = 146;
		Возврат Ложь; 
	КонецЕсли;

	Картинка = "";
	Если ЭПЛ_Титул4Подписан Тогда
		Картинка = уатОбменСГИСЭПД.ПолучитьQRЭПЛ(ЭПЛ, ЭПЛ.ИдентификаторОформителя, ЭПЛ.УИДМинтранс);
	КонецЕсли; 
	
	Если Картинка = "" Тогда 
		resultCode = 146;
		Возврат Ложь; 
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	ЗаписьXML.ЗаписатьНачалоЭлемента("image");
	ЗаписьXML.ЗаписатьТекст(СтрЗаменить(Картинка, Символы.ПС, ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	responseData = ЗаписьXML.Закрыть();

	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции

// Функция предназначена для получения списка возможных вариантов закрытия заказов.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetOrderResults(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПричиныЗакрытияЗаказов.Ссылка,
	|	уатПричиныЗакрытияЗаказов.Наименование
	|ИЗ
	|	Справочник.уатПричиныЗакрытияЗаказов КАК уатПричиныЗакрытияЗаказов
	|ГДЕ
	|	НЕ уатПричиныЗакрытияЗаказов.ПометкаУдаления
	|	И уатПричиныЗакрытияЗаказов.ИспользоватьВМобильномПриложении";
	
	Попытка
		ТабПричинЗакрытия = мЗапрос.Выполнить().Выгрузить();
		
		responseData = СериализоватьGetOrderResults(ТабПричинЗакрытия);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetOrderResults", ОписаниеОшибки());
		resultCode = 120;
		
		responseData = "<response/>";
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции

// Функция предназначена для получения статуса активности приложения.
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодSendAppStatus(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	ЗапросТерминал = Новый Запрос();
	
	Если ЗначениеЗаполнено(ДанныеАвторизации.trackerID) Тогда 
		ЗапросТерминал.УстановитьПараметр("IDУстройства", ДанныеАвторизации.trackerID);
	Иначе 
		responseData = "<response/>";
		resultCode   = 4;
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросТерминал.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМобильныеУстройства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМобильныеУстройства КАК уатМобильныеУстройства
	|ГДЕ
	|	уатМобильныеУстройства.IDУстройства = &IDУстройства";
	
	РезультатЗапросаПоТерминалам = ЗапросТерминал.Выполнить();
	ВыборкаТерминал = РезультатЗапросаПоТерминалам.Выбрать();
	
	Если ВыборкаТерминал.Следующий() Тогда 
		
		Терминал = ВыборкаТерминал.Ссылка;
		
	Иначе 
		responseData = "<response/>";
		resultCode   = 6;
		
		Возврат Ложь;
	КонецЕсли;
	
	флОшибка = Ложь;
	
	ТабСообщений = ДесериализоватьMessages(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 50;
		
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Для Каждого ТекСтрока Из ТабСообщений Цикл
			resultDescription	 = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьОписаниеСтатусаМобильногоПриложения(ТекСтрока.Текст, "ru");
			НаборЗаписей  = РегистрыСведений.уатСтатусыМобильногоПриложения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Водитель.Установить(ДанныеАвторизации.ФизическоеЛицо);
			НаборЗаписей.Отбор.ТС.Установить(ДанныеАвторизации.ТС);
			НаборЗаписей.Отбор.МобильноеУстройство.Установить(Терминал);
			НаборЗаписей.Отбор.Дата.Установить(ТекСтрока.Дата);
			НаборЗаписей.Отбор.Статус.Установить(resultDescription);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Водитель = ДанныеАвторизации.ФизическоеЛицо;
			НоваяЗапись.ТС					 = ДанныеАвторизации.ТС;
			НоваяЗапись.МобильноеУстройство	 = Терминал;
			НоваяЗапись.Дата				 = ТекСтрока.Дата;
			НоваяЗапись.Статус				 = resultDescription;
			
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	Исключение
		ЗаписатьСообщениеОбОшибке("SendAppStatus", ОписаниеОшибки());
		resultCode = 120;
		
		responseData = "<response/>";
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции

#Область ЗаявкиНаРемонт

// Функция предназначена для получения видов ремонтов для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetRepairTypes(responseData, resultCode)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВидыОбслуживанияТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатВидыОбслуживанияТС КАК уатВидыОбслуживанияТС
	|ГДЕ
	|	НЕ уатВидыОбслуживанияТС.ПометкаУдаления
	|	И уатВидыОбслуживанияТС.ДоступенДляВыбораВМобильномПриложении";
	
	Попытка
		responseData = СериализоватьRepairTypes(мЗапрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetRepairTypes", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения видов ремонтов для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetStatus(responseData, resultCode)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка КАК Ссылка,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	уатСтатусы_уэ.ДоступенДляВыбораВМобильномПриложении = ИСТИНА
	|	И НЕ уатСтатусы_уэ.ПометкаУдаления";
	
	Попытка
		responseData = СериализоватьGetStatus(мЗапрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetStatus", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения заявок на ремонт по ТС для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetOrdersForRepair(responseData, resultCode, Знач ДанныеАвторизации)
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("ТС", ДанныеАвторизации.ТС);
	мЗапрос.УстановитьПараметр("ТекВодитель", ДанныеАвторизации.ФизическоеЛицо);
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаявкаНаРемонт.Ссылка КАК Ссылка,
	|	уатЗаявкаНаРемонт.Представление КАК Представление,
	|	уатЗаявкаНаРемонт.СтатусВыполнения КАК СтатусВыполнения,
	|	уатЗаявкаНаРемонт.СтатусВыполнения.ИмяПредопределенныхДанных КАК СтатусВыполненияИмяПредопределенныхДанных,
	|	уатЗаявкаНаРемонт.Номер КАК Номер,
	|	уатЗаявкаНаРемонт.ДатаНачала КАК ДатаНачала,
	|	уатЗаявкаНаРемонт.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА уатЗаявкаНаРемонт.ТС.ГосударственныйНомер <> """"
	|			ТОГДА уатЗаявкаНаРемонт.ТС.ГосударственныйНомер
	|		ИНАЧЕ уатЗаявкаНаРемонт.ТС.Наименование
	|	КОНЕЦ КАК ТСНаименование,
	|	уатЗаявкаНаРемонт.СпособРемонта КАК СпособРемонта,
	|	уатЗаявкаНаРемонт.Контрагент КАК Контрагент,
	|	уатЗаявкаНаРемонт.МестоРемонта КАК МестоРемонта,
	|	уатЗаявкаНаРемонт.ПричинаОбращения КАК ПричинаОбращения,
	|	уатЗаявкаНаРемонт.ВидОбслуживания КАК ВидОбслуживания,
	|	уатЗаявкаНаРемонт.Работы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Неисправность КАК Неисправность,
	|		Работа КАК Работа,
	|		Количество КАК Количество
	|	) КАК Работы,
	|	уатЗаявкаНаРемонт.Материалы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК Материалы,
	|	уатЗаявкаНаРемонт.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатЗаявкаНаРемонт.Водитель <> &ТекВодитель
	|				И уатЗаявкаНаРемонт.Водитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДругойВодитель,
	|	уатЗаявкаНаРемонт.Водитель КАК Водитель,
	|	уатЗаявкаНаРемонт.КомментарийВодителя КАК КомментарийВодителя,
	|	уатЗаявкаНаРемонт.СтатусПодтвержденияВодителем КАК СтатусПодтвержденияВодителем
	|ИЗ
	|	Документ.уатЗаявкаНаРемонт КАК уатЗаявкаНаРемонт
	|ГДЕ
	|	НЕ уатЗаявкаНаРемонт.ПометкаУдаления
	|	И уатЗаявкаНаРемонт.ТС = &ТС";
	
	Попытка
		responseData = СериализоватьOrdersForRepair(мЗапрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetOrdersForRepair", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

Функция ОбработатьМетодGetVehicles(Знач loginData, responseData, requestData, resultCode, ДанныеАвторизации)
	
	// Оставлено для совместимости
	ЭтоПЛ = Ложь;
	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		флОшибка   = Ложь;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("Waybills") Тогда 
					ЧтениеXML.Прочитать();
					ЭтоПЛ = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
					Если флОшибка Тогда 
						ВызватьИсключение НСтр("en='Error deserializing a Date field';ru='Ошибка десериализации поля Waybills'");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetVehicles';ru='GetVehicles'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;

	стрДанныеАвторизации = Неопределено;
	
	Если Не ДесериализоватьLoginData(loginData, resultCode, стрДанныеАвторизации) Тогда 
		responseData = "<response/>";
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаТерминал = ПолучитьGetVehicles(ДанныеАвторизации.ФизическоеЛицо, НЕ ЭтоПЛ);
	
	Попытка
		responseData = СериализоватьVehicles(ВыборкаТерминал);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetVehicles", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьGetVehicles(Пользователь, ПолучатьПрицепы = Истина)
	ЗапросТерминал = Новый Запрос();
	ЗапросТерминал.УстановитьПараметр("Пользователь", Пользователь);
	
	ЗапросТерминал.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПользователиМобильногоПриложения_ТС.ТС КАК ТС,
	|	ЛОЖЬ КАК Прицеп,
	|	уатПользователиМобильногоПриложения_ТС.ТС.Модель.НаличиеТопливногоБака КАК НаличиеТопливногоБака,
	|	уатПользователиМобильногоПриложения_ТС.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ втТС
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения_ТС КАК уатПользователиМобильногоПриложения_ТС
	|ГДЕ
	|	уатПользователиМобильногоПриложения_ТС.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТС.ТС КАК ТС,
	|	ЛОЖЬ КАК Прицеп,
	|	втТС.ТС.Модель.НаличиеТопливногоБака КАК НаличиеТопливногоБака,
	|	ВЫБОР
	|		КОГДА втТС.ТС.ГосударственныйНомер <> """"
	|			ТОГДА втТС.ТС.ГосударственныйНомер
	|		ИНАЧЕ втТС.ТС.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Неопределено КАК ТСРодитель
	|ИЗ
	|	втТС КАК втТС";

	Если ПолучатьПрицепы Тогда
		ЗапросТерминал.Текст = ЗапросТерминал.Текст +"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатСоставТС.ТС,
		|	ИСТИНА КАК Прицеп,
		|	уатСоставТС.ТС.Модель.НаличиеТопливногоБака,
		|	ВЫБОР
		|		КОГДА уатСоставТС.ТС.ГосударственныйНомер <> """"
		|			ТОГДА уатСоставТС.ТС.ГосударственныйНомер
		|		ИНАЧЕ уатСоставТС.ТС.Наименование
		|	КОНЕЦ,
		|	втТС.ТС
		|ИЗ
		|	втТС КАК втТС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
		|		ПО втТС.ТС = уатСоставТС.ВСоставе
		|			И (НЕ уатСоставТС.ТС.ПометкаУдаления)
		|ГДЕ
		|	(уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
		|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
		|	И ВЫБОР
		|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					И НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		КОНЕЦ";
	КонецЕсли;

	ВыборкаТерминал = ЗапросТерминал.Выполнить().Выгрузить();
	Возврат ВыборкаТерминал;
КонецФункции

// Функция предназначена для отражения изменений по закявкам на ремонт с мобильного приложения
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодUpdateOrderForRepair(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеЗР = ДесериализоватьUpdateOrderForRepair(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 130;
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		НовыйДокумент              = ДанныеЗР.Ссылка.ПолучитьОбъект();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateOrderForRepair';ru='ОбработатьМетодUpdateOrderForRepair'"), ОписаниеОшибки());
		resultCode = 130;
		Возврат Ложь;
	КонецПопытки;
	
	НовыйДокумент.ДатаНачала       = ДанныеЗР.ДатаНачала;
	НовыйДокумент.ДатаОкончания    = ДанныеЗР.ДатаОкончания;
	НовыйДокумент.ПричинаОбращения = ДанныеЗР.ПричинаОбращения;
	НовыйДокумент.ТС               = ДанныеЗР.ТС;
	НовыйДокумент.ВидОбслуживания  = ДанныеЗР.ВидРемонта;
	НовыйДокумент.СтатусПодтвержденияВодителем = ДанныеЗР.СтатусПодтвержденияВодителем;
	НовыйДокумент.КомментарийВодителя          = ДанныеЗР.КомментарийВодителя;
	
	Попытка
		НовыйДокумент.Записать();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateOrderForRepair';ru='ОбработатьМетодUpdateOrderForRepair'"), ОписаниеОшибки());
		resultCode = 130;
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	resultCode = 0;
	Возврат Истина;
	
КонецФункции // ОбработатьМетодUpdateOrderForRepair()

// Функция предназначена для отражения изменений по закявкам на ремонт с мобильного приложения
//
// Параметры:
//  requestData       - строка    - строка XML, входные данные, содержимое определяется контекстом выполняемого метода
//  responseData      - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode        - число     - код результата выполнения
//  ДанныеАвторизации - структура - данные об авторизованном пользователе (ФизическоеЛицо и ТС)
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодAddOrderForRepair(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеЗР = ДесериализоватьAddOrderForRepair(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 130;
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НовыйДокумент  = Документы.уатЗаявкаНаРемонт.СоздатьДокумент();
	НовыйДокумент.Дата             = ДанныеЗР.Дата;
	НовыйДокумент.ДатаНачала       = ДанныеЗР.ДатаНачала;
	НовыйДокумент.ДатаОкончания    = ДанныеЗР.ДатаОкончания;
	НовыйДокумент.ПричинаОбращения = ДанныеЗР.ПричинаОбращения;
	НовыйДокумент.ТС               = ДанныеЗР.ТС;
	НовыйДокумент.ВидОбслуживания  = ДанныеЗР.ВидРемонта;
	НовыйДокумент.СтатусПодтвержденияВодителем  = ДанныеЗР.СтатусПодтвержденияВодителем;
	НовыйДокумент.КомментарийВодителя           = ДанныеЗР.КомментарийВодителя;
	
	МестоТС      = уатОбщегоНазначения.МестонахождениеТС(НовыйДокумент.ТС, НовыйДокумент.Дата);
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(МестоТС.Организация) Тогда
		ОсновнаяОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
		"ОсновнаяОрганизация");
	Иначе
		ОсновнаяОрганизация = МестоТС.Организация;
	КонецЕсли;
	
	НовыйДокумент.Организация      = ОсновнаяОрганизация;
	НовыйДокумент.Ответственный    = Пользователь;
	НовыйДокумент.СпособРемонта    = Перечисления.уатСпособыРемонта.Автосервис;
	НовыйДокумент.СозданВодителем  = Истина;
	НовыйДокумент.Водитель         = ДанныеАвторизации.ФизическоеЛицо;
	НовыйДокумент.СтатусВыполнения = Справочники.уатСтатусы_уэ.Новый;
		
	Попытка
		НовыйДокумент.Записать();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодAddOrderForRepair';ru='ОбработатьМетодAddOrderForRepair'"), ОписаниеОшибки());
		resultCode = 125;
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	resultCode = 0;
	Возврат Истина;
	
КонецФункции // ОбработатьМетодUpdateOrderForRepair()

#КонецОбласти

#Область ПутевыеЛисты

// Функция предназначена для получения типов заправок для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetFuellingTypes(responseData, resultCode)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВидыДвиженияГСМ.Ссылка КАК Ссылка
	|ИЗ
	|	Перечисление.уатВидыДвиженияГСМ КАК уатВидыДвиженияГСМ
	|ГДЕ
	|	(уатВидыДвиженияГСМ.Ссылка = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные)
	|			ИЛИ уатВидыДвиженияГСМ.Ссылка = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта)
	|			ИЛИ уатВидыДвиженияГСМ.Ссылка = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад))";
	
	Попытка
		responseData = СериализоватьFuellingTypes(мЗапрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetFuellingTypes", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения ГСМ для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetFuels(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	ВидДвиженияГСМ = "";
	
	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingTypeID") Тогда 
					ЧтениеXML.Прочитать();
					ВидДвиженияГСМ = Строка(ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetFuels';ru='GetFuels'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	мсвГруппДляОтбора = Новый Массив;
	Если ВидДвиженияГСМ = "ЗаправкаТалоны" Тогда
		ТекГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
		мУчитыватьТЖ = Ложь;
	Иначе	
		ТекГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	
	тблВыборка = Новый ТаблицаЗначений;
	тблВыборка.Колонки.Добавить("Номенклатура");
	тблВыборка.Колонки.Добавить("Наименование");
	тблВыборка.Колонки.Добавить("ОсновноеТопливо");
	ТекмсвГСМ = уатЗащищенныеФункцииСервер.СписокГСМдляТССервер(Неопределено, ДанныеАвторизации.ТС, ТекГруппаГСМ, Истина);
	Для Каждого ТекГСМ Из ТекмсвГСМ Цикл
		НоваяСтрока = тблВыборка.Добавить();
		НоваяСтрока.Номенклатура = ТекГСМ.ГСМ;
		НоваяСтрока.Наименование = НоваяСтрока.Номенклатура.Наименование;
		Если ДанныеАвторизации.ТС.Модель.ОсновноеТопливо = НоваяСтрока.Номенклатура Тогда
			НоваяСтрока.ОсновноеТопливо = Истина;
		Иначе
			НоваяСтрока.ОсновноеТопливо = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если мУчитыватьТЖ Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатНоменклатураГСМ.Номенклатура
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|ГДЕ
		|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ");
		тблТЖ = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекСтрока Из тблТЖ Цикл
			Если тблВыборка.Найти(ТекСтрока.Номенклатура, "Номенклатура") = Неопределено Тогда
				НоваяСтрока = тблВыборка.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Наименование = ТекСтрока.Номенклатура.Наименование;
				НоваяСтрока.ОсновноеТопливо = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		responseData = СериализоватьFuels(тблВыборка);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetFuels", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения ГСМ для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetAllFuels(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТС",            ДанныеАвторизации.ТС);
	Запрос.УстановитьПараметр("ТСМодель",      ДанныеАвторизации.ТС.Модель);
	Запрос.УстановитьПараметр("Водитель",      ДанныеАвторизации.ФизическоеЛицо); 
	Запрос.УстановитьПараметр("ГруппаТалон",   ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"));
	Запрос.УстановитьПараметр("ГруппаТопливо", ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПользователиМобильногоПриложения_ТС.ТС КАК ТС
	|ПОМЕСТИТЬ втОсновныеТС
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения_ТС КАК уатПользователиМобильногоПриложения_ТС
	|ГДЕ
	|	уатПользователиМобильногоПриложения_ТС.Пользователь = &Водитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрицепы.ТС.Модель КАК ТСМодель,
	|	уатПутевойЛистПрицепы.ТС КАК ТС
	|ПОМЕСТИТЬ втТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка.ТранспортноеСредство = &ТС
	|	И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель1) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель1.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель1 = &Водитель
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель2) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель2.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель2 = &Водитель
	|			КОНЕЦ)
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления
	|	И уатПутевойЛистПрицепы.Ссылка.Проведен
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.Рассчитан
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОсновныеТС.ТС.Модель,
	|	втОсновныеТС.ТС
	|ИЗ
	|	втОсновныеТС КАК втОсновныеТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНоменклатураГСМ.Номенклатура КАК ГСМ,
	|	уатНоменклатураГСМ.ГСМТалона КАК ГСМТалона,
	|	уатНоменклатураГСМ.ЛитровыйТалон КАК Литровый,
	|	уатНоменклатураГСМ.НоминалТалона КАК Номинал,
	|	&ГруппаТалон КАК Группа,
	|	ВсеГСММоделиТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатМоделиТС.ОсновноеТопливо КАК МодельОсновноеТопливо,
	|			уатМоделиТС.ДополнительноеТопливо КАК МодельДополнительноеТопливо,
	|			уатАналогиГСМ.Аналог КАК Аналог,
	|			втТС.ТС КАК ТС
	|		ИЗ
	|			втТС КАК втТС
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
	|					ПО (уатМоделиТС.ОсновноеТопливо = уатАналогиГСМ.ГСМ.Ссылка
	|							ИЛИ уатМоделиТС.ДополнительноеТопливо = уатАналогиГСМ.ГСМ.Ссылка)
	|				ПО втТС.ТСМодель = уатМоделиТС.Ссылка) КАК ВсеГСММоделиТС
	|		ПО (уатНоменклатураГСМ.ГСМТалона = ВсеГСММоделиТС.МодельОсновноеТопливо
	|				ИЛИ уатНоменклатураГСМ.ГСМТалона = ВсеГСММоделиТС.МодельДополнительноеТопливо
	|				ИЛИ уатНоменклатураГСМ.ГСМТалона = ВсеГСММоделиТС.Аналог)
	|ГДЕ
	|	уатНоменклатураГСМ.ГруппаГСМ = &ГруппаТалон
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатНоменклатураГСМ.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	&ГруппаТопливо,
	|	ВложенныйЗапрос.ТС
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатМоделиТС.ОсновноеТопливо КАК МодельОсновноеТопливо,
	|			уатМоделиТС.ДополнительноеТопливо КАК МодельДополнительноеТопливо,
	|			втТС.ТС КАК ТС
	|		ИЗ
	|			втТС КАК втТС
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|				ПО втТС.ТСМодель = уатМоделиТС.Ссылка) КАК ВложенныйЗапрос
	|		ПО (уатНоменклатураГСМ.Номенклатура = ВложенныйЗапрос.МодельОсновноеТопливо
	|				ИЛИ уатНоменклатураГСМ.Номенклатура = ВложенныйЗапрос.МодельДополнительноеТопливо)
	|ГДЕ
	|	уатНоменклатураГСМ.ГруппаГСМ = &ГруппаТопливо";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	ТабАналогов = уатОбщегоНазначения.уатПолучитьАналогиГСМ(РезультатТаблица, ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	
	Для Каждого ТекСтрока Из ТабАналогов Цикл
		Если РезультатТаблица.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекСтрока.ТС, ТекСтрока.Аналог)).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РезультатТаблица.Добавить();
		НоваяСтрока.ГСМ       = ТекСтрока.Аналог;
		НоваяСтрока.ТС        = ТекСтрока.ТС;
	КонецЦикла;

	тблВыборка = Новый ТаблицаЗначений;
	тблВыборка.Колонки.Добавить("ТипЗаправки");
	тблВыборка.Колонки.Добавить("ТС");
	тблВыборка.Колонки.Добавить("Номенклатура");
	тблВыборка.Колонки.Добавить("Наименование");
	тблВыборка.Колонки.Добавить("ОсновноеТопливо");

	Для Каждого ТекГСМ Из РезультатТаблица Цикл
		НоваяСтрока = тблВыборка.Добавить();
		НоваяСтрока.ТС           = ТекГСМ.ТС;
		НоваяСтрока.ТипЗаправки  = ?(ТекГСМ.Группа = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"),
			Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны, Перечисления.уатВидыДвиженияГСМ.ПустаяСсылка());
		НоваяСтрока.Номенклатура = ТекГСМ.ГСМ;
		НоваяСтрока.Наименование = НоваяСтрока.Номенклатура.Наименование;
		Если ТекГСМ.ТС.Модель.ОсновноеТопливо = НоваяСтрока.Номенклатура Тогда
			НоваяСтрока.ОсновноеТопливо = Истина;
		Иначе
			НоваяСтрока.ОсновноеТопливо = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		responseData = СериализоватьAllFuels(тблВыборка);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetAllFuels", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения ГСМ для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetFuelCards(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	КемВыдана = Неопределено;
	Дата      = Неопределено;
	
	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		флОшибка   = Ложь;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("IssuedBy") Тогда 
					ЧтениеXML.Прочитать();
					КемВыдана = Строка(ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("Date") Тогда 
					ЧтениеXML.Прочитать();
					Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
					Если флОшибка Тогда 
						ВызватьИсключение НСтр("en='Error deserializing a Date field';ru='Ошибка десериализации поля Date'");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetFuels';ru='GetFuels'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ВладельцыКарт = Новый Массив();
	ВладельцыКарт.Добавить(ДанныеАвторизации.ТС);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	               |	И НЕ Сотрудники.ПометкаУдаления";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеАвторизации.ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВладельцыКарт.Добавить(Выборка.Ссылка);
	КонецЦикла;

	КемВыданаСсылка = Неопределено;
	Попытка
		КемВыданаСсылка = Справочники.уатАЗС.ПолучитьСсылку(КемВыдана);
	Исключение
		Попытка
			КемВыданаСсылка = Справочники.Контрагенты.ПолучитьСсылку(КемВыдана);
		Исключение
			КемВыданаСсылка = Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	СписокТК = уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт,Дата, КемВыданаСсылка);
	Попытка
		responseData = СериализоватьFuelCards(СписокТК);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetFuelCards", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения ГСМ для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetAllFuelCards(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТС",            ДанныеАвторизации.ТС);
	Запрос.УстановитьПараметр("Водитель",      ДанныеАвторизации.ФизическоеЛицо); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПользователиМобильногоПриложения_ТС.ТС КАК ТС
	|ПОМЕСТИТЬ втОсновныеТС
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения_ТС КАК уатПользователиМобильногоПриложения_ТС
	|ГДЕ
	|	уатПользователиМобильногоПриложения_ТС.Пользователь = &Водитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрицепы.ТС КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка.ТранспортноеСредство = &ТС
	|	И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель1) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель1.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель1 = &Водитель
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель2) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель2.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель2 = &Водитель
	|			КОНЕЦ)
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления
	|	И уатПутевойЛистПрицепы.Ссылка.Проведен
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.Рассчитан
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОсновныеТС.ТС
	|ИЗ
	|	втОсновныеТС КАК втОсновныеТС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСоставТС.ТС
	|ИЗ
	|	втОсновныеТС КАК втОсновныеТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|		ПО (втОсновныеТС.ТС = уатСоставТС.ВСоставе
	|				И НЕ уатСоставТС.ТС.ПометкаУдаления)
	|ГДЕ
	|	(уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ";
	
	ВладельцыКарт = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТС");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	               |	И НЕ Сотрудники.ПометкаУдаления";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеАвторизации.ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВладельцыКарт.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СписокТК = уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт);
	Попытка
		responseData = СериализоватьAllFuelCards(СписокТК, ДанныеАвторизации.ТС);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetAllFuelCards", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения АЗС для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetGasStations(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	ВидДвиженияГСМ = "";
	
	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingTypeID") Тогда 
					ЧтениеXML.Прочитать();
					ВидДвиженияГСМ = Строка(ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetGasStations';ru='GetGasStations'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ВидДвиженияГСМ = "ЗаправкаСклад"
		ИЛИ ВидДвиженияГСМ = "ЗаправкаПластиковаяКартаСклад"
		ИЛИ ВидДвиженияГСМ = "ЗаправкаТалоны" Тогда
		ЭтоАЗССклад = Истина;
	Иначе
		ЭтоАЗССклад = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭтоАЗССклад", ЭтоАЗССклад);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатАЗС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатАЗС КАК уатАЗС
	               |ГДЕ
	               |	уатАЗС.ЭтоАЗССклад = &ЭтоАЗССклад
	               |	И НЕ уатАЗС.ПометкаУдаления";
	
	Попытка
		responseData = СериализоватьGasStations(Запрос.Выполнить().Выгрузить());
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetGasStations", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения путевых листов для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetWaybills(responseData, resultCode, Знач ДанныеАвторизации)
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("ТС",       ДанныеАвторизации.ТС);
	мЗапрос.УстановитьПараметр("Водитель", ДанныеАвторизации.ФизическоеЛицо);
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.ЗакрытВодителем КАК ЗакрытВодителем,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер <> """"
	|			ТОГДА уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер
	|		ИНАЧЕ уатПутевойЛист.ТранспортноеСредство.Наименование
	|	КОНЕЦ КАК ТСНаименование,
	|	уатПутевойЛист.ВидПЛ КАК ВидПЛ,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения,
	|	уатПутевойЛист.ТранспортноеСредство.Модель КАК ТранспортноеСредствоМодель,
	|	уатПутевойЛист.ТранспортноеСредство.Модель.ОсновноеТопливо КАК ТранспортноеСредствоМодельОсновноеТопливо,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Ссылка, ЗНАЧЕНИЕ(Документ.уатЗаправкаГСМ.ПустаяСсылка)) КАК Заправка,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) КАК ЗаправкаТС,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ТС.ГосударственныйНомер <> """"
	|			ТОГДА уатЗаправкаГСМЗаправки.ТС.ГосударственныйНомер
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.ТС.Наименование
	|	КОНЕЦ КАК ЗаправкаТСНаименование,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Ссылка.АЗС, ЗНАЧЕНИЕ(Справочник.уатАЗС.ПустаяСсылка)) КАК АЗС,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ, """") КАК ВидДвиженияГСМ,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.ГСМ, """") КАК ГСМ,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗаправки,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.ПластиковаяКарта, """") КАК ПластиковаяКарта,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.СтавкаНДС, 0) КАК СтавкаНДС,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.СуммаНДС, 0) КАК СуммаНДС,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС, ЛОЖЬ) КАК УчитыватьНДС,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
	|	&Водитель КАК Водитель,
	|	ЕСТЬNULL(уатЗаправкаГСМЗаправки.НомерСтроки, 0) КАК НомерСтроки,
	|	уатПутевойЛист.ВыдатьКоличествоГорючего КАК ВыдатьКоличествоГорючего,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ПО уатПутевойЛист.Ссылка = уатЗаправкаГСМЗаправки.ПутевойЛист
	|			И (НЕ уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	уатПутевойЛист.ТранспортноеСредство = &ТС
	|	И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛист.Водитель1) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛист.Водитель1.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛист.Водитель1 = &Водитель
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛист.Водитель2) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛист.Водитель2.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛист.Водитель2 = &Водитель
	|			КОНЕЦ)
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|	И уатПутевойЛист.Проведен
	|	И НЕ уатПутевойЛист.Рассчитан
	|ИТОГИ
	|	МАКСИМУМ(ЗакрытВодителем),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ДатаВыезда),
	|	МАКСИМУМ(ДатаВозвращения),
	|	МАКСИМУМ(ВидПЛ),
	|	МАКСИМУМ(СпидометрВыезда),
	|	МАКСИМУМ(СпидометрВозвращения),
	|	МАКСИМУМ(ТранспортноеСредствоМодель),
	|	МАКСИМУМ(Водитель),
	|	МАКСИМУМ(ВыдатьКоличествоГорючего)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрицепы.Ссылка КАК Ссылка,
	|	уатПутевойЛистПрицепы.ТС КАК ТС,
	|	уатПутевойЛистПрицепы.ТС.Модель.НаличиеТопливногоБака КАК НаличиеТопливногоБака,
	|	ВЫБОР
	|		КОГДА уатПутевойЛистПрицепы.ТС.ГосударственныйНомер <> """"
	|			ТОГДА уатПутевойЛистПрицепы.ТС.ГосударственныйНомер
	|		ИНАЧЕ уатПутевойЛистПрицепы.ТС.Наименование
	|	КОНЕЦ КАК ТСНаименование
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка.ТранспортноеСредство = &ТС
	|	И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель1) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель1.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель1 = &Водитель
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатПутевойЛистПрицепы.Ссылка.Водитель2) = ТИП(Справочник.Сотрудники)
	|					ТОГДА уатПутевойЛистПрицепы.Ссылка.Водитель2.ФизическоеЛицо = &Водитель
	|				ИНАЧЕ уатПутевойЛистПрицепы.Ссылка.Водитель2 = &Водитель
	|			КОНЕЦ)
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления
	|	И уатПутевойЛистПрицепы.Ссылка.Проведен
	|	И НЕ уатПутевойЛистПрицепы.Ссылка.Рассчитан";
	
	Попытка 
		МассивРезультатов  = мЗапрос.ВыполнитьПакет();
		ВыборкаПрицепов    = МассивРезультатов[1].Выбрать();
		СоответвиеПрицепов = Новый Соответствие();
		Пока ВыборкаПрицепов.Следующий() Цикл 
			МассивПрицепов  = Новый Массив();
			СтруктураДанных = Новый Структура("ТС, ТСНаименование, НаличиеТопливногоБака");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаПрицепов);
			МассивПрицепов.Добавить(СтруктураДанных);
			
			ТекМассивПрицепов = СоответвиеПрицепов.Получить(ВыборкаПрицепов.Ссылка);
			Если ТекМассивПрицепов = Неопределено Тогда
				СоответвиеПрицепов.Вставить(ВыборкаПрицепов.Ссылка, МассивПрицепов);
			Иначе
				ТекМассивПрицепов.Добавить(СтруктураДанных);  
				СоответвиеПрицепов.Вставить(ВыборкаПрицепов.Ссылка, ТекМассивПрицепов);
			КонецЕсли;
			
		КонецЦикла;
		
		responseData = СериализоватьWaybills(МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СоответвиеПрицепов);
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetWaybills", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
КонецФункции

// Функция предназначена для получения путевых листов для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодUpdateWaybill(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеПЛ = ДесериализоватьUpdateWaybill(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 130;
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ДокОбъект              = ДанныеПЛ.Ссылка.ПолучитьОбъект();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
		resultCode = 130;
		Возврат Ложь;
	КонецПопытки;
	
	Если ДокОбъект.ЗакрытВодителем Тогда
		resultCode = 0;
		Возврат Истина;
	КонецЕсли;

	ДокОбъект.ДатаВыезда           = ДанныеПЛ.ДатаВыезда;
	ДокОбъект.ДатаВозвращения      = ДанныеПЛ.ДатаВозвращения;
	ДокОбъект.СпидометрВозвращения = ДанныеПЛ.СпидометрВозвращения;
	ДокОбъект.ЗакрытВодителем      = ДанныеПЛ.ЗакрытВодителем;
	
	ДокОбъект.ДатаЗакрытия = ?(ДокОбъект.ДатаВозвращения > ДокОбъект.ДатаВыезда, ДокОбъект.ДатаВозвращения - 1, ДокОбъект.ДатаВозвращения);
	
	ОснТопливо = ДокОбъект.ТранспортноеСредство.Модель.ОсновноеТопливо;
	Для Каждого ТекСтрока Из ДокОбъект.РасходГСМ Цикл
		Если ДокОбъект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении	 = ДанныеПЛ.ОстатокТопливаВозврат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерПрицепа = 0;
	Для Каждого ТекПрицеп Из ДанныеПЛ.Прицепы Цикл
		Если ДокОбъект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.vehicle)).Количество() <> 0 Тогда
			НомерПрицепа = НомерПрицепа + 1;
			Продолжить;
		КонецЕсли;
		НоваяСтрока    = ДокОбъект.Прицепы.Добавить();
		НоваяСтрока.ТС = ТекПрицеп.vehicle;  
		
		ИнициализацияДанныхПрицепа(ДокОбъект, НоваяСтрока.ТС, НомерПрицепа);
        НомерПрицепа = НомерПрицепа + 1;
	КонецЦикла;
	
	Для Каждого ТекЗаправка Из ДанныеПЛ.Заправки Цикл
		Если НЕ ЗначениеЗаполнено(ТекЗаправка.fuellingID) Тогда
			Заправка = Документы.уатЗаправкаГСМ.СоздатьДокумент();
			Заправка.Дата = ТекЗаправка.fuellingDate;
		Иначе
			Попытка
				Заправка = ТекЗаправка.fuellingID.ПолучитьОбъект();
			Исключение
				ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
				resultCode = 130;
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Заправка.АЗС = ТекЗаправка.gasStationID;
		
		Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Заправка.АЗС, "Контрагент_Склад");
		Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Заправка.ДоговорКонтрагента.Владелец <> Контрагент_Склад Тогда
				Заправка.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком", ДокОбъект.Организация);
			КонецЕсли;
		КонецЕсли;
		
		Заправка.ВидДвиженияГСМ	 = ТекЗаправка.fuellingTypeID;
		Заправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
		Заправка.ПризнакРедактированияИзПутевогоЛистаСсылка = ДокОбъект.Ссылка;
		Заправка.Организация = ДокОбъект.Организация;
		Если ЗначениеЗаполнено(ДокОбъект.ТранспортноеСредство) Тогда
			Колонна = уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТранспортноеСредство, ДокОбъект.ДатаВыезда).Колонна;
		КонецЕсли;
		Заправка.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Заправка.ПодразделениеОрганизации = ДокОбъект.Подразделение;
			
		Заправка.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Заправка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Заправка.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Заправка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
		Если ЗначениеЗаполнено(Заправка.Ссылка) Тогда
			НайдЗаправки = Заправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, НомерСтроки", ДокОбъект.Ссылка, ТекЗаправка.lineNumber));
			Если НайдЗаправки.Количество() <> 0 Тогда
				НайдЗаправки[0].ТС				 = ДокОбъект.ТранспортноеСредство;
				Если ДокОбъект.Водитель1.ФизическоеЛицо = ДанныеАвторизации.ФизическоеЛицо Тогда
					НайдЗаправки[0].Водитель = ДокОбъект.Водитель1;
				Иначе
					НайдЗаправки[0].Водитель = ДокОбъект.Водитель2;
				КонецЕсли;
				НайдЗаправки[0].ТС				 = ?(ЗначениеЗаполнено(ТекЗаправка.vehicle),
					ТекЗаправка.vehicle, ДокОбъект.ТранспортноеСредство);
				НайдЗаправки[0].Дата			 = ТекЗаправка.fuellingDate;
				НайдЗаправки[0].ГСМ				 = ТекЗаправка.fuelsID;
				НайдЗаправки[0].ПластиковаяКарта = ТекЗаправка.fuelCardID;
				НайдЗаправки[0].Количество		 = ТекЗаправка.quantity;
				НайдЗаправки[0].Сумма			 = ТекЗаправка.sum;
				Если НайдЗаправки[0].Количество = 0 Тогда
					НайдЗаправки[0].Цена = 0;
				Иначе	
					НайдЗаправки[0].Цена = НайдЗаправки[0].Сумма / НайдЗаправки[0].Количество;
				КонецЕсли;
				НайдЗаправки[0].Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				НайдЗаправки[0].СтавкаНДС =НайдЗаправки[0].ГСМ.СтавкаНДС;
				НайдЗаправки[0].СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НайдЗаправки[0].Сумма,
				Заправка.УчитыватьНДС, Заправка.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НайдЗаправки[0].СтавкаНДС));
			КонецЕсли;
		Иначе
			НоваяСтрока = Заправка.Заправки.Добавить();
			НоваяСтрока.ПутевойЛист	 = ДокОбъект.Ссылка;
			НоваяСтрока.ТС				 = ?(ЗначениеЗаполнено(ТекЗаправка.vehicle),
				ТекЗаправка.vehicle, ДокОбъект.ТранспортноеСредство);
			Если ДокОбъект.Водитель1.ФизическоеЛицо = ДанныеАвторизации.ФизическоеЛицо Тогда
				НоваяСтрока.Водитель	 = ДокОбъект.Водитель1;
			Иначе
				НоваяСтрока.Водитель	 = ДокОбъект.Водитель2;
			КонецЕсли;
			
			НоваяСтрока.Дата			 = ТекЗаправка.fuellingDate;
			НоваяСтрока.ГСМ				 = ТекЗаправка.fuelsID;
			НоваяСтрока.ПластиковаяКарта = ТекЗаправка.fuelCardID;
			НоваяСтрока.Количество		 = ТекЗаправка.quantity;
			НоваяСтрока.Сумма			 = ТекЗаправка.sum;
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе	
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			НоваяСтрока.СтавкаНДС =НоваяСтрока.ГСМ.СтавкаНДС;
			НоваяСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяСтрока.Сумма,
			Заправка.УчитыватьНДС, Заправка.СуммаВключаетНДС,
			уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		КонецЕсли;
		
		Заправка.ПометкаУдаления = ТекЗаправка.ПометкаНаУдаление;
		Попытка
			Заправка.Записать();
		Исключение
			ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
			resultCode = 125;
			Возврат Ложь; 
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
		resultCode = 125;
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	resultCode = 0;
	Возврат Истина;

КонецФункции

// Функция предназначена для получения путевых листов для работы мобильного приложения
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодAddWaybill(Знач requestData, responseData, resultCode, Знач ДанныеАвторизации)
	
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ДанныеПЛ = ДесериализоватьAddWaybill(requestData, флОшибка);
	
	Если флОшибка Тогда 
		resultCode = 130;
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокОбъект = Документы.уатПутевойЛист.СоздатьДокумент();
	ДокОбъект.Дата                  = ДанныеПЛ.Дата;
	ДокОбъект.ДатаВыезда            = ДанныеПЛ.ДатаВыезда;
	ДокОбъект.ДатаВозвращения       = ДанныеПЛ.ДатаВозвращения;
	ДокОбъект.ЗакрытВодителем       = ДанныеПЛ.ЗакрытВодителем;
	ДокОбъект.ВидПЛ                 = ДанныеПЛ.ВидПЛ;
	
	ДокОбъект.ДатаЗакрытия = ?(ДокОбъект.ДатаВозвращения > ДокОбъект.ДатаВыезда, ДокОбъект.ДатаВозвращения - 1, ДокОбъект.ДатаВозвращения);
	
	ДокОбъект.ТранспортноеСредство  = ?(ЗначениеЗаполнено(ДанныеПЛ.ТранспортноеСредство), ДанныеПЛ.ТранспортноеСредство, ДанныеАвторизации.ТС);
	Сотрудники = СотрудникиФормы.СотрудникиФизическогоЛица(ДанныеАвторизации.ФизическоеЛицо);
	Если Сотрудники.Количество() <> 0 Тогда
		ДокОбъект.Водитель1          = Сотрудники[0].Сотрудник;
	КонецЕсли;
	
	МестоТС      = уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТранспортноеСредство, ДокОбъект.Дата);
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(МестоТС.Организация) Тогда
		ОсновнаяОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
		"ОсновнаяОрганизация");
	Иначе
		ОсновнаяОрганизация = МестоТС.Организация;
	КонецЕсли;
	
	ДокОбъект.Организация      = ОсновнаяОрганизация;
	ПодразделениеТС = ДокОбъект.ТранспортноеСредство.Подразделение;
	ДокОбъект.Подразделение = ПодразделениеТС;

	ДокОбъект.Ответственный    = Пользователь;
	
	ДокОбъект.ИнициализацияДанныхАвтомобиля(0, Новый Массив, Ложь);
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
		ПланЗатратНайден = уатОбщегоНазначения.уатНайтиПланЗатрат(ДокОбъект.ПланЗатрат, ДокОбъект.Организация, ДокОбъект.ТранспортноеСредство,
			ДокОбъект.ТранспортноеСредство.Колонна);
	КонецЕсли;
		
	ДокОбъект.ВидСообщения = ДокОбъект.ТранспортноеСредство.ОсновнойВидСообщения;
	ДокОбъект.ВидПеревозки = ДокОбъект.ТранспортноеСредство.ОсновнойВидПеревозки;
	ДокОбъект.Гараж        = ДокОбъект.ТранспортноеСредство.Гараж;

	ДокОбъект.СпидометрВозвращения  = ДанныеПЛ.СпидометрВозвращения;
	ДокОбъект.СпидометрВыезда       = ДанныеПЛ.СпидометрВыезда;
	
	ОснРежРаботыТС = ДокОбъект.ТранспортноеСредство.ОсновнойРежимРаботы;
	Если ЗначениеЗаполнено(ОснРежРаботыТС) Тогда
		ДокОбъект.РежимРаботыТС = ОснРежРаботыТС;
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", ОсновнаяОрганизация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТранспортноеСредство).Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", Пользователь);
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", ДокОбъект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТранспортноеСредство).Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", Пользователь);
	
	ОтветствЛица = уатПутевыеЛисты.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, ДокОбъект.Дата);
	ЗаполнитьЗначенияСвойств(ДокОбъект, ОтветствЛица);
	
	ДокОбъект.РежимРасчетаВыработки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойРежимРасчетаВыработкиПЛ");
	ДокОбъект.РасчетФактРасходаГСМ  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");
	ДокОбъект.Смена                 = 1;

	Если НЕ ЗначениеЗаполнено(ДокОбъект.ВидПЛ) Тогда
		ОсновнойВидПЛТС = ДокОбъект.ТранспортноеСредство.ОсновнойВидПЛ;
		Если ЗначениеЗаполнено(ОсновнойВидПЛТС) Тогда
			ДокОбъект.ВидПЛ = ОсновнойВидПЛТС;
		Иначе
			ДокОбъект.ВидПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
		КонецЕсли;
	КонецЕсли; 
	
	НомерПрицепа = 0;
	Для Каждого ТекПрицеп Из ДанныеПЛ.Прицепы Цикл 
		НоваяСтрока    = ДокОбъект.Прицепы.Добавить();
		НоваяСтрока.ТС = ТекПрицеп.vehicle;   
		ИнициализацияДанныхПрицепа(ДокОбъект, НоваяСтрока.ТС, НомерПрицепа);
        НомерПрицепа = НомерПрицепа + 1;
	КонецЦикла;
	
	ОснТопливо = ДокОбъект.ТранспортноеСредство.Модель.ОсновноеТопливо;
	Для Каждого ТекСтрока Из ДокОбъект.РасходГСМ Цикл
		Если ДокОбъект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении	 = ДанныеПЛ.ОстатокТопливаВозврат;
			ТекСтрока.ОстатокПриВыезде		 = ДанныеПЛ.ОстатокТопливаВыезд;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
		ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
		resultCode = 125;
		Возврат Ложь;
	КонецПопытки;

	Для Каждого ТекЗаправка Из ДанныеПЛ.Заправки Цикл
		Если НЕ ЗначениеЗаполнено(ТекЗаправка.fuellingID) Тогда
			Заправка = Документы.уатЗаправкаГСМ.СоздатьДокумент();
			Заправка.Дата = ТекЗаправка.fuellingDate;
		Иначе
			Попытка
				Заправка = ТекЗаправка.fuellingID.ПолучитьОбъект();
			Исключение
				ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
				resultCode = 130;
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Заправка.АЗС = ТекЗаправка.gasStationID;
		
		Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Заправка.АЗС, "Контрагент_Склад");
		Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Заправка.ДоговорКонтрагента.Владелец <> Контрагент_Склад Тогда
				Заправка.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком", ДокОбъект.Организация);
			КонецЕсли;
		КонецЕсли;
		
		Заправка.ВидДвиженияГСМ	 = ТекЗаправка.fuellingTypeID;
		Заправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
		Заправка.ПризнакРедактированияИзПутевогоЛистаСсылка = ДокОбъект.Ссылка;
		Заправка.Организация = ДокОбъект.Организация;
		Если ЗначениеЗаполнено(ДокОбъект.ТранспортноеСредство) Тогда
			Колонна = уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТранспортноеСредство, ДокОбъект.ДатаВыезда).Колонна;
		КонецЕсли;
		Заправка.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Заправка.ПодразделениеОрганизации = ДокОбъект.Подразделение;
			
		Заправка.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Заправка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Заправка.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Заправка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
		Если ЗначениеЗаполнено(Заправка.Ссылка) Тогда
			НайдЗаправки = Заправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, НомерСтроки", ДокОбъект.Ссылка, ТекЗаправка.lineNumber));
			Если НайдЗаправки.Количество() <> 0 Тогда
				НайдЗаправки[0].ТС				 = ?(ЗначениеЗаполнено(ТекЗаправка.vehicle),
					ТекЗаправка.vehicle, ДокОбъект.ТранспортноеСредство);
				Если ДокОбъект.Водитель1.ФизическоеЛицо = ДанныеАвторизации.ФизическоеЛицо Тогда
					НайдЗаправки[0].Водитель = ДокОбъект.Водитель1;
				Иначе
					НайдЗаправки[0].Водитель = ДокОбъект.Водитель2;
				КонецЕсли;
				
				НайдЗаправки[0].Дата			 = ТекЗаправка.fuellingDate;
				НайдЗаправки[0].ГСМ				 = ТекЗаправка.fuelsID;
				НайдЗаправки[0].ПластиковаяКарта = ТекЗаправка.fuelCardID;
				НайдЗаправки[0].Количество		 = ТекЗаправка.quantity;
				НайдЗаправки[0].Сумма			 = ТекЗаправка.sum;
				Если НайдЗаправки[0].Количество = 0 Тогда
					НайдЗаправки[0].Цена = 0;
				Иначе	
					НайдЗаправки[0].Цена = НайдЗаправки[0].Сумма / НайдЗаправки[0].Количество;
				КонецЕсли;
				НайдЗаправки[0].Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				НайдЗаправки[0].СтавкаНДС =НайдЗаправки[0].ГСМ.СтавкаНДС;
				НайдЗаправки[0].СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НайдЗаправки[0].Сумма,
				Заправка.УчитыватьНДС, Заправка.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НайдЗаправки[0].СтавкаНДС));
			КонецЕсли;
		Иначе
			НоваяСтрока = Заправка.Заправки.Добавить();
			НоваяСтрока.ПутевойЛист	 = ДокОбъект.Ссылка;
			НоваяСтрока.ТС				 = ?(ЗначениеЗаполнено(ТекЗаправка.vehicle),
					ТекЗаправка.vehicle, ДокОбъект.ТранспортноеСредство);;
			Если ДокОбъект.Водитель1.ФизическоеЛицо = ДанныеАвторизации.ФизическоеЛицо Тогда
				НоваяСтрока.Водитель	 = ДокОбъект.Водитель1;
			Иначе
				НоваяСтрока.Водитель	 = ДокОбъект.Водитель2;
			КонецЕсли;
			
			НоваяСтрока.Дата			 = ТекЗаправка.fuellingDate;
			НоваяСтрока.ГСМ				 = ТекЗаправка.fuelsID;
			НоваяСтрока.ПластиковаяКарта = ТекЗаправка.fuelCardID;
			НоваяСтрока.Количество		 = ТекЗаправка.quantity;
			НоваяСтрока.Сумма			 = ТекЗаправка.sum;
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе	
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			НоваяСтрока.СтавкаНДС =НоваяСтрока.ГСМ.СтавкаНДС;
			НоваяСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяСтрока.Сумма,
			Заправка.УчитыватьНДС, Заправка.СуммаВключаетНДС,
			уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		КонецЕсли;
		
		Попытка
			Заправка.Записать();
		Исключение
			ЗаписатьСообщениеОбОшибке(НСтр("en='ОбработатьМетодUpdateWaybill';ru='ОбработатьМетодUpdateWaybill'"), ОписаниеОшибки());
			resultCode = 125;
			Возврат Ложь; 
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	resultCode = 0;
	Возврат Истина;

КонецФункции

// Функция предназначена для получения пробега и расхода по мониторингу
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetMileageConsumptionMonitoring(Знач requestData, responseData, resultCode , Знач ДанныеАвторизации)
	responseData = "<response/>";
	
	флОшибка = Ложь;
	
	ТС				 = ДанныеАвторизации.ТС;
	ДатаВыезда		 = Неопределено;
	ПЛ				 = Неопределено;
	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillStartDate") Тогда 
					ЧтениеXML.Прочитать();
					ДатаВыезда = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillID") Тогда 
					ЧтениеXML.Прочитать();
					ПЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
					ПЛ = Документы.уатПутевойЛист.ПолучитьСсылку(ПЛ);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetFuels';ru='GetFuels'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если флОшибка ИЛИ НЕ ЗначениеЗаполнено(ТС)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаВыезда) Тогда
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецЕсли;
	
	МодельТС = ТС.Модель;
	
	odometerDeparture		 = 0;
	remainOfFuelDeparture	 = 0;
	
	МестоТС      = уатОбщегоНазначения.МестонахождениеТС(ТС, ДатаВыезда);
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(МестоТС.Организация) Тогда
		ОсновнаяОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
		"ОсновнаяОрганизация");
	Иначе
		ОсновнаяОрганизация = МестоТС.Организация;
	КонецЕсли;
	
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОсновнаяОрганизация, "ЗапретПроведенияПЛеслиПредыдущийПЛнеРассчитан");
	
	ПредПЛ_номер = Неопределено;
	ПредПЛ_дата  = Неопределено;

	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать 
		ИЛИ НЕ ЗначениеЗаполнено(ПЛ) 
		ИЛИ (ЗначениеЗаполнено(ПЛ)
			И НЕ уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(ТС, ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, ПЛ)) Тогда
			
		remainOfFuelDeparture = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТС,
		МодельТС.ОсновноеТопливо);
		Если МодельТС.НаличиеСпидометра = Истина Тогда
			odometerDeparture = уатОбщегоНазначения.уатТекущийСпидометр(ТС, ДатаВыезда);
		Иначе
			odometerDeparture = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТС, ДатаВыезда);
		КонецЕсли;
	Иначе
		
		odometerDeparture     = 0;
		remainOfFuelDeparture = 0;
		
	КонецЕсли;
		
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		
		// Начало "response"
		ЗаписьXML.ЗаписатьНачалоЭлемента("response");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("odometerDeparture");
		ЗаписьXML.ЗаписатьТекст(Формат(odometerDeparture, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("remainOfFuelDeparture");
		ЗаписьXML.ЗаписатьТекст(Формат(remainOfFuelDeparture, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Конец "response"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		responseData = ЗаписьXML.Закрыть();
		
	Исключение
		ЗаписатьСообщениеОбОшибке("GetMileageConsumptionMonitoring", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;

КонецФункции

// Функция предназначена для получения печатной формы ПЛ
//
// Параметры:
//  responseData - строка - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода
//  resultCode   - число  - код результата выполнения
//
// Возвращаемое значение:
//   Булево      - истина - метод выполнен успешно;
//               - ложь   - при выполнении метода возникла ошибка
//
Функция ОбработатьМетодGetWaybillPDF(Знач requestData, responseData, resultCode , Знач ДанныеАвторизации)
	responseData = "<response/>";
		
	флОшибка = Ложь;

	Если ЗначениеЗаполнено(requestData) Тогда
		ЧтениеXML  = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.УстановитьСтроку(requestData);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillID") Тогда 
					ЧтениеXML.Прочитать();
					ПЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
					ПЛ = Документы.уатПутевойЛист.ПолучитьСсылку(ПЛ);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			ТекстНСТР = НСтр("en='Error occurred while parsing structures ""requestData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='GetWaybillPDF';ru='GetWaybillPDF'"), ТекстНСТР);
			responseData = "<response/>";
			resultCode = 25;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если флОшибка Тогда
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(ПЛ);
	ТабличныйДокумент = Документы.уатПутевойЛист.ПечатьВесьДокумент(МассивОбъектов, Новый СписокЗначений);
	ВремФайл = ПолучитьИмяВременногоФайла("pdf");
	
	ЗначениеБР = БезопасныйРежим();
	Если ТипЗнч(ЗначениеБР) = Тип("Булево")
		И ЗначениеБР = Истина тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
		
		ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;
		ТабличныйДокумент.Записать(ВремФайл,ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабличныйДокумент.Записать(ВремФайл,ТипФайлаТабличногоДокумента.PDF);
	КОнецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ФайлДляПередачи = Новый ДвоичныеДанные(ВремФайл);
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		
		// Начало "response"
		ЗаписьXML.ЗаписатьНачалоЭлемента("response");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("WaybillPDF");
		ЗаписьXML.ЗаписатьТекст(Base64Строка(ФайлДляПередачи));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Конец "response"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		responseData = ЗаписьXML.Закрыть();
	Исключение
		ЗаписатьСообщениеОбОшибке("GetMileageConsumptionMonitoring", ОписаниеОшибки());
		responseData = "<response/>";
		resultCode = 25;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область АвторизацияПользователя

// Функция предназначена для авторизации пользователя.
//
// Параметры:
//  loginData            - строка    - строка XML, содержащая структуру логина пользователя мобильного приложения.
//  responseData         - строка    - строка XML, выходные данные, содержимое определяется контекстом выполняемого метода.
//  resultCode           - число     - код результата выполнения.
//  РезультатАвторизации - структура - при успешной авторизации содержит физическое лицо и транспортное средство.
//  requestData          - строка    - строка XML, содержащая структуру (только для метода login).
//  БезОпределенияТС     - булево    - признак выполнения "быстрой" авторизации,
//                                     при этом сопоставление ТС выполнено не будет(при успешной авторизации
//                                     параметр "РезультатАвторизации" будет заполнен только физическим лицом).
//
// Возвращаемое значение:
//   Булево      - Истина - метод выполнен успешно;
//               - Ложь   - при выполнении метода возникла ошибка.
//
Функция АвторизоватьПользователя(Знач loginData, responseData, resultCode, РезультатАвторизации, requestData=Неопределено, БезОпределенияТС=Ложь, Авторизация = Ложь)
	
	стрДанныеАвторизации = Неопределено;
	
	РезультатАвторизации = Новый Структура("ФизическоеЛицо, ТС, trackerID, Логин", 
		Справочники.ФизическиеЛица.ПустаяСсылка(), 
		Справочники.уатТС.ПустаяСсылка(),
		"",
		""
	);
	
	Если Не ДесериализоватьLoginData(loginData, resultCode, стрДанныеАвторизации) Тогда 
		responseData = "<response/>";
		
		Возврат Ложь;
	КонецЕсли;

	стрДанныеrequestData = ДесериализоватьrequestData(requestData);
	
	флПользовательСуществует = Ложь;
	Попытка
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		Если Не ТекущийПользователь = Неопределено И (ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") 
			Или ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")) Тогда 
				флПользовательСуществует = Истина;
		Иначе 
			флПользовательСуществует = Ложь;
			ВызватьИсключение "";
		КонецЕсли;
	Исключение
		responseData = "<response/>";
		resultCode   = 8;
		
		Возврат Ложь;
	КонецПопытки;
	
	ЗапросФизическоеЛицо = Новый Запрос;
	ЗапросФизическоеЛицо.УстановитьПараметр("Логин",  стрДанныеАвторизации.login);
	ЗапросФизическоеЛицо.УстановитьПараметр("Пароль", стрДанныеАвторизации.pass); // нужно установить ХЭШ
	
	РезультатАвторизации.Логин = стрДанныеАвторизации.login;
	
	ЗапросФизическоеЛицо.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПользователиМобильногоПриложения.Пользователь КАК Пользователь,
	|	уатПользователиМобильногоПриложения.РаботаРазрешена КАК РаботаРазрешена
	|ИЗ
	|	РегистрСведений.уатПользователиМобильногоПриложения КАК уатПользователиМобильногоПриложения
	|ГДЕ
	|	уатПользователиМобильногоПриложения.Логин = &Логин
	|	И уатПользователиМобильногоПриложения.Пароль = &Пароль";
	
	ВыборкаФизическоеЛицо = ЗапросФизическоеЛицо.Выполнить().Выбрать();
	
	Если ВыборкаФизическоеЛицо.Следующий() Тогда 
		Если Не ВыборкаФизическоеЛицо.РаботаРазрешена Тогда 
			responseData = "<response/>";
			resultCode   = 2;
			
			Возврат Ложь;
		КонецЕсли;
		
		Если БезОпределенияТС Тогда 
			РезультатАвторизации.ФизическоеЛицо = ВыборкаФизическоеЛицо.Пользователь;
			
			resultCode = 0;
			
			Возврат Истина;
		КонецЕсли;
		
		ЗапросТерминал = Новый Запрос();
		
		Если ЗначениеЗаполнено(стрДанныеАвторизации.trackerID) Тогда 
			РезультатАвторизации.trackerID = стрДанныеАвторизации.trackerID;
			ЗапросТерминал.УстановитьПараметр("IDУстройства", стрДанныеАвторизации.trackerID);
		Иначе 
			responseData = "<response/>";
			resultCode   = 4;
			
			Возврат Ложь;
		КонецЕсли;
		
		ЗапросТерминал.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатМобильныеУстройства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатМобильныеУстройства КАК уатМобильныеУстройства
		|ГДЕ
		|	уатМобильныеУстройства.IDУстройства = &IDУстройства";
		
		РезультатЗапросаПоТерминалам = ЗапросТерминал.Выполнить();
		
		Если РезультатЗапросаПоТерминалам.Пустой() Тогда 
			// Создадим новый терминал
			Попытка
				НовыйТерминал = Справочники.уатМобильныеУстройства.СоздатьЭлемент();
			Исключение
				responseData = "<response/>";
				resultCode   = -1;
				
				ТекстНСТР = НСтр("en='AuthorizeUser';ru='АвторизоватьПользователя'");
				ЗаписатьСообщениеОбОшибке(ТекстНСТР, ОписаниеОшибки());
				
				Возврат Ложь;
			КонецПопытки;
			
			НовыйТерминал.Наименование = стрДанныеАвторизации.login;
			НовыйТерминал.IDУстройства = стрДанныеАвторизации.trackerID;
			
			Попытка
				НовыйТерминал.Записать();
			Исключение
				responseData = "<response/>";
				resultCode   = -1;
				
				ТекстНСТР = НСтр("en='AuthorizeUser';ru='АвторизоватьПользователя'");
				ЗаписатьСообщениеОбОшибке(ТекстНСТР, ОписаниеОшибки());
				
				Возврат Ложь;
			КонецПопытки;
			
			ТекТерминал = НовыйТерминал.Ссылка;
			ОбновитьМодельИВерсиюОСМобильногоУстройства(ТекТерминал, стрДанныеrequestData.DeviceModel, стрДанныеrequestData.OSVersion);
		Иначе
			ВыборкаТерминал = РезультатЗапросаПоТерминалам.Выбрать();
			ТекТерминал = ВыборкаТерминал.Ссылка; 
			ОбновитьМодельИВерсиюОСМобильногоУстройства(ТекТерминал, стрДанныеrequestData.DeviceModel, стрДанныеrequestData.OSVersion);
		КонецЕсли;
			
		ЗапросТС = Новый Запрос();
		ЗапросТС.УстановитьПараметр("Пользователь", ВыборкаФизическоеЛицо.Пользователь);
		ЗапросТС.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатПользователиМобильногоПриложения_ТС.ТС КАК ТС
		|ИЗ
		|	РегистрСведений.уатПользователиМобильногоПриложения_ТС КАК уатПользователиМобильногоПриложения_ТС
		|ГДЕ
		|	уатПользователиМобильногоПриложения_ТС.Пользователь = &Пользователь";
		
		ВыборкаТС = ЗапросТС.Выполнить().Выбрать();
		
		Если requestData = Неопределено Тогда 
			Если стрДанныеАвторизации.car = Справочники.уатТС.ПустаяСсылка() Тогда 
				responseData = "<response/>";
				resultCode   = 6;
				
				Возврат Ложь;
			КонецЕсли;
			
			стрОтборТС = Новый Структура("ТС", стрДанныеАвторизации.car);
			
			Если ВыборкаТС.НайтиСледующий(стрОтборТС) Тогда 
				РезультатАвторизации.ФизическоеЛицо = ВыборкаФизическоеЛицо.Пользователь;
				РезультатАвторизации.ТС             = ВыборкаТС.ТС;
				
				resultCode = 0;
				
			Иначе 
				responseData = "<response/>";
				resultCode   = 6;
				
				Возврат Ложь;
			КонецЕсли;
			
		Иначе 
			КоличествоТС = 0;
			мсвПодобранныхТС = Новый Массив;
			
			Если НЕ ЗначениеЗаполнено(стрДанныеrequestData.pushID) Тогда 
				// Все ТС трекера
				ВыборкаТС.Сбросить();
				
				Пока ВыборкаТС.Следующий() Цикл 
					мсвПодобранныхТС.Добавить(ВыборкаТС.ТС);
				КонецЦикла;
				
			Иначе 
				мсвЗапрошенныхТС = ДесериализоватьТСпоГосНомеру(стрДанныеrequestData.carNum);
				
				Для Каждого текЗапрошенноеТС Из мсвЗапрошенныхТС Цикл 
					ВыборкаТС.Сбросить();
					
					стрОтборТС = Новый Структура("ТС", текЗапрошенноеТС);
					
					Если ВыборкаТС.НайтиСледующий(стрОтборТС) Тогда
						мсвПодобранныхТС.Добавить(текЗапрошенноеТС);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
			КоличествоТС = мсвПодобранныхТС.Количество();
			
			Если КоличествоТС = 0 Тогда
				responseData = "<response/>";
				resultCode   = 7;
				
				Возврат Ложь;
				
			ИначеЕсли КоличествоТС = 1 Тогда 
				responseData = СериализоватьLoginResponse(, мсвПодобранныхТС[0]);
				
				РезультатАвторизации.ФизическоеЛицо = ВыборкаФизическоеЛицо.Пользователь;
				РезультатАвторизации.ТС             = мсвПодобранныхТС[0];
				
				resultCode = 0;
				
			Иначе 
				responseData = СериализоватьLoginResponse(мсвПодобранныхТС);
				resultCode   = 5;
				
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не resultCode = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ Авторизация Тогда
			
			ЗапросВодителиНаЛинии = Новый Запрос();
			ЗапросВодителиНаЛинии.УстановитьПараметр("ФизическоеЛицо",      РезультатАвторизации.ФизическоеЛицо);
			ЗапросВодителиНаЛинии.УстановитьПараметр("ТС",                  РезультатАвторизации.ТС);
			ЗапросВодителиНаЛинии.УстановитьПараметр("МобильноеУстройство", ПолучитьТерминалПоID(РезультатАвторизации.trackerID));
			
			ЗапросВодителиНаЛинии.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо,
			|	уатВодителиНаЛинии.ТС КАК ТС,
			|	уатВодителиНаЛинии.МобильноеУстройство КАК МобильноеУстройство,
			|	уатВодителиНаЛинии.ВремяВыхода КАК ВремяВыхода
			|ИЗ
			|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
			|ГДЕ
			|	уатВодителиНаЛинии.ФизическоеЛицо = &ФизическоеЛицо
			|	И уатВодителиНаЛинии.ТС = &ТС
			|	И уатВодителиНаЛинии.МобильноеУстройство = &МобильноеУстройство";
			
			ВыборкаВодителиНаЛинии = ЗапросВодителиНаЛинии.Выполнить();
			Если ВыборкаВодителиНаЛинии.Пустой() Тогда 
				responseData = "<response/>";
				resultCode   = 100;
				
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе 
		responseData = "<response/>";
		resultCode   = 1;
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // АвторизоватьПользователя()

#КонецОбласти

#Область Десериализаторы

// Функция предназначена для преобразования строки с уникальным идентификатором в тип "УникальныйИдентификатор"
//
// Параметры:
//  стрGUID  - строка - уникальный идентификатор в виде строки "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
//  флОшибка - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   УникальныйИдентификатор - уникальный идентификатор, сформированный по переданной строке
//
Функция ДесериализоватьGUID(Знач стрGUID, флОшибка)
	
	СтрокаGUID = СокрЛП(стрGUID);
	
	Если СтрДлина(СтрокаGUID) = 36 И СтрЧислоВхождений(СтрокаGUID, "-") = 4 Тогда 
		Попытка
			GUID = Новый УникальныйИдентификатор(СтрокаGUID);
			флОшибка = Ложь;
			
			Возврат GUID;
		Исключение
			флОшибка = Истина;
			ТекстНСТР = НСтр("en='Error occurred when creating unique identifier per line.';ru='Ошибка при создании уникального идентификатора по строке.'");
			ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьGUID';ru='ДесериализоватьGUID'"), ТекстНСТР);
			
			Возврат Неопределено;
		КонецПопытки;
	Иначе 
		флОшибка = Истина;
		ТекстНСТР = НСтр("en='Invalid format of GUID fields.';ru='Неверный формат поля GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьGUID';ru='ДесериализоватьGUID'"), ТекстНСТР);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ДесериализоватьGUID()

// Функция предназначена для преобразования строки true/false в тип булево 1С
//
// Параметры:
//  стрБулево - строка - сроковое значение булево "true" или "false"
//
// Возвращаемое значение:
//   Булево   - Истина - если передано "true"
//              Ложь   - если передано "false"
//
Функция ДесериализоватьБулево(Знач стрБулево, флОшибка)
	
	строкаБулево = СокрЛП(стрБулево);
	
	Если НРег(строкаБулево) = НРег("true") Тогда 
		флОшибка = Ложь;
		
		Возврат Истина;
		
	ИначеЕсли НРег(строкаБулево) = НРег("false") Тогда 
		флОшибка = Ложь;
		
		Возврат Ложь;
		
	Иначе 
		флОшибка = Истина;
		
		ТекстНСТР = НСтр("en='Error when converting to a boolean type.';ru='Ошибка при преобразовании типа булево.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьБулево';ru='ДесериализоватьБулево'"), ТекстНСТР);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ДесериализоватьБулево()

// Функция предназначена для преобразования даты в формате W3C в дату 1С
//
// Параметры:
//  ДатаВремяW3C - строка - дата в формате W3C (YYYY-MM-DDThh:mm:ss или YYYY-MM-DD)
//  флОшибка     - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Дата        - преобразованная во внутренний формат 1С дата W3C
//
Функция ДесериализоватьДатаВремя(Знач ДатаВремяW3C, флОшибка)
	
	флОшибка = Ложь;
	
	мГод    = "1";
	мМесяц  = "1";
	мДень   = "1";
	мЧас    = "0";
	мМинут  = "0";
	мСекунд = "0";
	
	Если СтрДлина(ДатаВремяW3C) > 18 И Не Найти(ДатаВремяW3C, "T") = 0 Тогда // дата + время
		мГод    = Лев(ДатаВремяW3C, 4);
		мМесяц  = Сред(ДатаВремяW3C, 6, 2);
		мДень   = Сред(ДатаВремяW3C, 9, 2);
		мЧас    = Сред(ДатаВремяW3C, 12, 2);
		мМинут  = Сред(ДатаВремяW3C, 15, 2);
		мСекунд = Сред(ДатаВремяW3C, 18, 2);
		
	ИначеЕсли СтрДлина(ДатаВремяW3C) > 9 И Найти(ДатаВремяW3C, "T") = 0 Тогда // только дата
		мГод    = Лев(ДатаВремяW3C, 4);
		мМесяц  = Сред(ДатаВремяW3C, 6, 2);
		мДень   = Сред(ДатаВремяW3C, 9, 2);
		
	Иначе // Ошибка формата
		флОшибка = Истина;
	КонецЕсли;
	
	Попытка
		Возврат Дата(Число(мГод), Число(мМесяц), Число(мДень), Число(мЧас), Число(мМинут), Число(мСекунд));
	Исключение
		флОшибка = Истина;
		Возврат '00010101000000';
	КонецПопытки;
	
КонецФункции // ДесериализоватьДатаВремя()

// Функция предназначена для разбора строки логина и формирования на её основе структуры
//
// Параметры:
//  loginData            - строка    - строка XML, содержащая структуру логина пользователя мобильного приложения
//  resultCode           - число     - код результата выполнения метода
//  стрДанныеАвторизации - структура - структура, полученная на основе параметра "loginData"
//
// Возвращаемое значение:
//   Булево - истина - метод выполнен успешно;
//          - ложь   - при выполнении метода возникла ошибка
//
Функция ДесериализоватьLoginData(Знач loginData, resultCode, стрДанныеАвторизации)
	
	стрДанныеАвторизации = Новый Структура(
		"login, pass, trackerID, carID, car, addData, carNum", 
		"", 
		"", 
		"", 
		"", 
		Справочники.уатТС.ПустаяСсылка(),
		Новый Структура()
	);
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(loginData);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("login") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеАвторизации.login = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("pass") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеАвторизации.pass = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("trackerID") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеАвторизации.trackerID = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("carID") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеАвторизации.carID = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("addData") Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
					стрДанныеАвторизации.addData.Вставить(НРег(СокрЛП(Строка(ЧтениеXML.Имя))), ЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='An error occurred while parsing structures ""loginData"".';ru='Возникла ошибка при разборе структуры ""loginData"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьLoginData';ru='ДесериализоватьLoginData'"), ТекстНСТР);
		resultCode = -1;
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(стрДанныеАвторизации.carID) Тогда
		строкаID = СокрЛП(стрДанныеАвторизации.carID);
		Если СтрДлина(строкаID) = 36 И СтрЧислоВхождений(строкаID, "-") = 4 Тогда 
			Попытка
				УникальныйИдентификаторТС = Новый УникальныйИдентификатор(строкаID);
				ТСОб = Справочники.уатТС.ПолучитьСсылку(УникальныйИдентификаторТС).ПолучитьОбъект();
			Исключение
				ТСОб = Неопределено;
			КонецПопытки;
			
			Если Не ТСОб = Неопределено Тогда 
				стрДанныеАвторизации.car = ТСОб.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ДесериализоватьLoginData()

Функция ДесериализоватьrequestData(requestData)
	
	стрДанныеrequestData = Новый Структура(
		"carNum, pushID, OSVersion, DeviceModel", 
		"",
		"",
		"",
		""
	);
	
	Если requestData = Неопределено Тогда
		Возврат стрДанныеrequestData;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("carNum") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеrequestData.carNum = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("pushID") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеrequestData.pushID = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("OSVersion") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеrequestData.OSVersion = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("DeviceModel") Тогда
				ЧтениеXML.Прочитать();
				стрДанныеrequestData.DeviceModel = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='An error occurred while parsing structures ""loginData"".';ru='Возникла ошибка при разборе структуры ""requestData"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьrequestData';ru='ДесериализоватьrequestData'"), ТекстНСТР);
		resultCode = -1;
		
		Возврат стрДанныеrequestData;
	КонецПопытки;
	
	Возврат стрДанныеrequestData;
	
КонецФункции

// Функция предназначена для преобразования xml-строки с координатами положения мобильного устройства
// в таблицу значений 1С
//
// Параметры:
//  VehiclePositions - строка - строка XML, содержащая данные о местоположении мобильного устройства
//  флОшибка         - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица местоположений, полученная на основе параметра "VehiclePositions"
//
Функция ДесериализоватьVehiclePositions(Знач VehiclePositions, флОшибка)
	
	ТабКоординат = Новый ТаблицаЗначений;
	
	ТабКоординат.Колонки.Добавить("Дата",        Новый ОписаниеТипов("Дата"));
	ТабКоординат.Колонки.Добавить("Лат",         Новый ОписаниеТипов("Число"));
	ТабКоординат.Колонки.Добавить("Лон",         Новый ОписаниеТипов("Число"));
	ТабКоординат.Колонки.Добавить("Алт",         Новый ОписаниеТипов("Число"));
	ТабКоординат.Колонки.Добавить("Скорость",    Новый ОписаниеТипов("Число"));
	ТабКоординат.Колонки.Добавить("Направление", Новый ОписаниеТипов("Строка"));
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(VehiclePositions);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("position") Тогда
				НовСтрока = ТабКоординат.Добавить();
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
					ИмяУзла = НРег(СокрЛП(Строка(ЧтениеXML.Имя)));
					
					Если ИмяУзла = НРег("datetime") Тогда 
						НовСтрока.Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
						Если флОшибка Тогда 
							ВызватьИсключение НСтр("en='Error deserializing a datetime field';ru='Ошибка десериализации поля datetime'");
						КонецЕсли;
						
					ИначеЕсли ИмяУзла = НРег("lat") Тогда
						НовСтрока.Лат = Число(ЧтениеXML.Значение);
						
					ИначеЕсли ИмяУзла = НРег("lon") Тогда
						НовСтрока.Лон = Число(ЧтениеXML.Значение);
						
					ИначеЕсли ИмяУзла = НРег("speed") Тогда
						НовСтрока.Скорость = Число(ЧтениеXML.Значение);
						
					ИначеЕсли ИмяУзла = НРег("alt") Тогда
						НовСтрока.Алт = Число(ЧтениеXML.Значение);
						
					ИначеЕсли ИмяУзла = НРег("direction") Тогда
						НовСтрока.Направление = СокрЛП(ЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='An error occurred while parsing the structure of ""positions"".';ru='Возникла ошибка при разборе структуры ""positions"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьVehiclePositions';ru='ДесериализоватьVehiclePositions'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат ТабКоординат;
	
КонецФункции // ДесериализоватьVehiclePositions()

// Функция предназначена для преобразования xml-строки с сообщениями водителя в таблицу значений 1С
//
// Параметры:
//  Messages - строка - строка XML, содержащая данные о сообщениях водителя с мобильного устройства
//  флОшибка - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица сообщений, полученная на основе параметра "Messages"
//
Функция ДесериализоватьMessages(Знач Messages, флОшибка)
	
	ТабСообщений = Новый ТаблицаЗначений;
	
	ТабСообщений.Колонки.Добавить("Дата",  Новый ОписаниеТипов("Дата"));
	ТабСообщений.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ТабСообщений.Колонки.Добавить("ИдентификаторЧата",       Новый ОписаниеТипов("Строка"));
	ТабСообщений.Колонки.Добавить("ИдентификаторСообщения",  Новый ОписаниеТипов("Строка"));
	ТабСообщений.Колонки.Добавить("Чат",  Новый ОписаниеТипов("СправочникСсылка.уатЧаты"));
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(Messages);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("message") Тогда
				ЧтениеXML.Прочитать();
				мТекстСообщения = ЧтениеXML.Значение;
				
				НовСтрока = ТабСообщений.Добавить();
				НовСтрока.Текст = мТекстСообщения;

				ЧтениеXML.Прочитать();
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
					ИмяУзла = НРег(СокрЛП(Строка(ЧтениеXML.Имя)));
					
					Если ИмяУзла = НРег("time") Тогда 
						НовСтрока.Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
						Если флОшибка Тогда 
							ВызватьИсключение НСтр("en='Error deserializing a dateRead time';ru='Ошибка десериализации поля time'");
						КонецЕсли;
						
					ИначеЕсли ИмяУзла = НРег("chatID") Тогда
						НовСтрока.ИдентификаторЧата = ЧтениеXML.Значение;
						Попытка
							НовСтрока.Чат = Справочники.уатЧаты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеXML.Значение));
						Исключение
							НовСтрока.Чат = Справочники.уатЧаты.ОбщийЧат;
						КонецПопытки;
					ИначеЕсли ИмяУзла = НРег("guid") Тогда
						НовСтрока.ИдентификаторСообщения = ЧтениеXML.Значение;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structure of ""messages"".';ru='Возникла ошибка при разборе структуры ""messages"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьMessages';ru='ДесериализоватьMessages'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	ТабСообщений.Сортировать("Дата");
	
	Возврат ТабСообщений;
	
КонецФункции // ДесериализоватьMessages()

// Функция предназначена для преобразования xml-строки с сообщениями водителя в таблицу значений 1С
//
// Параметры:
//  Messages - строка - строка XML, содержащая данные о сообщениях водителя с мобильного устройства
//  флОшибка - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица сообщений, полученная на основе параметра "Messages"
//
Функция ДесериализоватьStatusMessages(Знач Messages, флОшибка)
	
	ТабСообщений = Новый ТаблицаЗначений;
	
	ТабСообщений.Колонки.Добавить("ИдентификаторСообщения",  Новый ОписаниеТипов("Строка"));
	ТабСообщений.Колонки.Добавить("Прочитано",               Новый ОписаниеТипов("Булево"));
	ТабСообщений.Колонки.Добавить("ДатаПрочтения",           Новый ОписаниеТипов("Дата"));
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(Messages);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("message") Тогда

				НовСтрока = ТабСообщений.Добавить();
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("dateRead") Тогда
				ЧтениеXML.Прочитать();
				НовСтрока.ДатаПрочтения = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a dateRead field';ru='Ошибка десериализации поля dateRead'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
				ЧтениеXML.Прочитать();
				НовСтрока.ИдентификаторСообщения = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("read") Тогда
				ЧтениеXML.Прочитать();
				НовСтрока.Прочитано = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
				
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a read field';ru='Ошибка десериализации поля read'");
				КонецЕсли

			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structure of ""messages"".';ru='Возникла ошибка при разборе структуры ""messages"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьMessages';ru='ДесериализоватьMessages'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
		
	Возврат ТабСообщений;
	
КонецФункции // ДесериализоватьStatusMessages()

Функция ДесериализоватьAcceptStatus(Знач Messages, флОшибка)
	
	СтруктураРезультат = Новый Структура("МЛ, Дата, Статус");
		
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(Messages);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("ID") Тогда
				ЧтениеXML.Прочитать();
				ТекущийGUIDМЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				СтруктураРезультат.МЛ = Документы.уатМаршрутныйЛист.ПолучитьСсылку(ТекущийGUIDМЛ);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("Date") Тогда
				ЧтениеXML.Прочитать();
				СтруктураРезультат.Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("AcceptStatus") Тогда
				ЧтениеXML.Прочитать();
				Если ЧтениеXML.Значение = "accepted" Тогда
					Статус = Перечисления.уатСтатусыПринятияМЛВодителем.Принят;
				ИначеЕсли ЧтениеXML.Значение = "not accepted" Тогда
					Статус = Перечисления.уатСтатусыПринятияМЛВодителем.Отклонен;
				Иначе
					Статус = Перечисления.уатСтатусыПринятияМЛВодителем.НеУстановлено;
				КонецЕсли;
				
				СтруктураРезультат.Статус = Статус;
			КонецЕсли;
		КонецЦикла;		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structure of ""messages"".';ru='Возникла ошибка при разборе структуры ""messages"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьMessages';ru='ДесериализоватьMessages'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция предназначена для преобразования xml-строки с параметрами отбора сообщений водителей и диспетчеров.
//
// Параметры:
//  Filter   - строка - строка XML, содержащая данные для отбора сообщений
//  флОшибка - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Структура - параметры отбора, полученные на основе параметра "Filter"
//
Функция ДесериализоватьGetMessages(Знач Filter, флОшибка)
	
	ПараметрыОтбора = Новый Структура("НачалоПериода, КонецПериода, КоличествоСообщений, Чат");
	
	Если Не ЗначениеЗаполнено(Filter) Тогда 
		Возврат ПараметрыОтбора;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(Filter);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("startDate") Тогда
				ЧтениеXML.Прочитать();
				ПараметрыОтбора.НачалоПериода = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a startDate field';ru='Ошибка десериализации поля startDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("endDate") Тогда
				ЧтениеXML.Прочитать();
				ПараметрыОтбора.КонецПериода = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error while deserializing an endDate field';ru='Ошибка десериализации поля endDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("limit") Тогда
				ЧтениеXML.Прочитать();
				ПараметрыОтбора.КоличествоСообщений = Число(ЧтениеXML.Значение);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("chatID") Тогда
				ЧтениеXML.Прочитать();
				Попытка
					ПараметрыОтбора.Чат = Справочники.уатЧаты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеXML.Значение));
				Исключение
					ПараметрыОтбора.Чат = Справочники.уатЧаты.ОбщийЧат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structure of ""Filter"".';ru='Возникла ошибка при разборе структуры ""Filter"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьGetMessages';ru='ДесериализоватьGetMessages'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Функция предназначена для поиска транспортного (-ых) средства по государственному номеру
//
// Параметры:
//  carNum - строка - государственный номер или его часть, по которому необходимо получить массив транспортных средств
//
// Возвращаемое значение:
//   Массив - массив найденных транспортных средств
//
Функция ДесериализоватьТСпоГосНомеру(Знач carNum)
	
	НайденыеТС = Новый Массив;
	
	ГосНомер = carNum;
	
	ЗапросТС = Новый Запрос;
	
	// заменим спецсимволы
	ГосНомер = СтрЗаменить(ГосНомер, "~", "~~");
	ГосНомер = СтрЗаменить(ГосНомер, "%", "~%");
	ГосНомер = СтрЗаменить(ГосНомер, "_", "~_");
	ГосНомер = СтрЗаменить(ГосНомер, "[", "~[");
	ГосНомер = СтрЗаменить(ГосНомер, "-", "~-");
	ГосНомер = "%"+сокрЛП(ГосНомер)+"%";
	
	ЗапросТС.УстановитьПараметр("ГосударственныйНомер", ГосНомер);
	
	ЗапросТС.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ГосударственныйНомер ПОДОБНО &ГосударственныйНомер СПЕЦСИМВОЛ ""~""
	|	И НЕ уатТС.ПометкаУдаления";
	
	Попытка
		Возврат ЗапросТС.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Исключение
		ТекстНСТР = НСтр("en='ДесериализоватьТСпоГосНомеру';ru='ДесериализоватьТСпоГосНомеру'");
		ЗаписатьСообщениеОбОшибке(ТекстНСТР, ОписаниеОшибки());
		Возврат НайденыеТС;
	КонецПопытки;
	
КонецФункции // ДесериализоватьТСпоГосНомеру()

// Функция предназначена для преобразования xml-строки с данными о изменяемых строках заданий по 
// маршрутным листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о изменяемых заданиях
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных, содержащая ссылку на маршрутные листы, строки заданий и изменяемые данные
//
Функция ДесериализоватьUpdateOrders(Знач requestData, флОшибка)
	
	ТабМЛ = Новый ТаблицаЗначений;
	ТабМЛ.Колонки.Добавить("routeListRef",     Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
	ТабМЛ.Колонки.Добавить("routeListID",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабМЛ.Колонки.Добавить("arrivalFact",      Новый ОписаниеТипов("Дата"));
	ТабМЛ.Колонки.Добавить("departureFact",    Новый ОписаниеТипов("Дата"));
	ТабМЛ.Колонки.Добавить("isDone",           Новый ОписаниеТипов("Булево"));
	ТабМЛ.Колонки.Добавить("lineID",           Новый ОписаниеТипов("Строка"));
	ТабМЛ.Колонки.Добавить("orderResult",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабМЛ.Колонки.Добавить("orderResultRef",   Новый ОписаниеТипов("СправочникСсылка.уатПричиныЗакрытияЗаказов"));
	ТабМЛ.Колонки.Добавить("productivityID1",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабМЛ.Колонки.Добавить("productivityRef1", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ТабМЛ.Колонки.Добавить("productivityVal1", Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("productivityID2",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабМЛ.Колонки.Добавить("productivityRef2", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ТабМЛ.Колонки.Добавить("productivityVal2", Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_accepted",    Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_amount",      Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_amountPlace", Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_weight",      Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_volume",      Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("fact_reason",      Новый ОписаниеТипов("Строка")); 
	ТабМЛ.Колонки.Добавить("mark",             Новый ОписаниеТипов("Число"));
	ТабМЛ.Колонки.Добавить("signature",        Новый ОписаниеТипов("Строка"));
	
	ТабСтрок = Новый ТаблицаЗначений;
	ТабСтрок.Колонки.Добавить("lineID",           Новый ОписаниеТипов("Строка"));
	ТабСтрок.Колонки.Добавить("fact_accepted",    Новый ОписаниеТипов("Число"));
	ТабСтрок.Колонки.Добавить("fact_amount",      Новый ОписаниеТипов("Число"));
	ТабСтрок.Колонки.Добавить("fact_amountPlace", Новый ОписаниеТипов("Число"));
	ТабСтрок.Колонки.Добавить("fact_weight",      Новый ОписаниеТипов("Число"));
	ТабСтрок.Колонки.Добавить("fact_volume",      Новый ОписаниеТипов("Число"));
	ТабСтрок.Колонки.Добавить("fact_reason",      Новый ОписаниеТипов("Строка"));

	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		
		ТекущийGUIDМЛ       = Неопределено;
		ДатаПрибытияФакт    = Неопределено;
		ДатаУбытияФакт      = Неопределено;
		флВыполнен          = Неопределено; 
		Оценка              = Неопределено; 
		Подпись             = Неопределено;
		ТабСтрок.Очистить();
		РезультатВыполнения = Неопределено;
		Выработка1          = Неопределено;
		Выработка2          = Неопределено;
		ЗначВыработки1      = Неопределено;
		ЗначВыработки2      = Неопределено;
		
		Пока Не флОшибка И ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("routeList") Тогда
				ТекущийGUIDМЛ       = Неопределено;
				ДатаПрибытияФакт    = Неопределено;
				ДатаУбытияФакт      = Неопределено;
				флВыполнен          = Неопределено;
				Оценка              = Неопределено; 
				Подпись             = Неопределено;
				ТабСтрок.Очистить();
				РезультатВыполнения = Неопределено;
				Выработка1          = Неопределено;
				Выработка2          = Неопределено;
				ЗначВыработки1      = Неопределено;
				ЗначВыработки2      = Неопределено;
				
				Пока Не флОшибка И ЧтениеXML.ПрочитатьАтрибут() Цикл 
					Если НРег(ЧтениеXML.Имя) = НРег("ID") Тогда
						ТекущийGUIDМЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
						
						Если флОшибка Тогда 
							ВызватьИсключение НСтр("en='Error parsing GUID';ru='Ошибка разбора GUID'");
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("arrivalFact") Тогда 
				ЧтениеXML.Прочитать();
				ДатаПрибытияФакт = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field arrivalFact';ru='Ошибка разбора поля arrivalFact'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("departureFact") Тогда 
				ЧтениеXML.Прочитать();
				ДатаУбытияФакт = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field departureFact';ru='Ошибка разбора поля departureFact'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("isDone") Тогда 
				ЧтениеXML.Прочитать();
				флВыполнен = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field isDone';ru='Ошибка разбора поля isDone'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("signature") Тогда 
				ЧтениеXML.Прочитать();
				Подпись = ЧтениеXML.Значение;
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field signature';ru='Ошибка разбора поля signature'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("mark") Тогда 
				ЧтениеXML.Прочитать();
				Оценка = Число(ЧтениеXML.Значение);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field mark';ru='Ошибка разбора поля mark'");
				КонецЕсли;
		
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("orderResult") Тогда 
				ЧтениеXML.Прочитать();
				РезультатВыполнения = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Parse error orderResult';ru='Ошибка разбора orderResult'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("productivity") Тогда 
				Пока (Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("productivity"))) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("item") Тогда 
						ЧтениеXML.ПрочитатьАтрибут();
						Если Выработка1 = Неопределено Тогда 
							Выработка1 = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
						Иначе 
							Выработка2 = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
						КонецЕсли;
						Если флОшибка Тогда 
							ВызватьИсключение НСтр("en='Error parsing the productivity field';ru='Ошибка разбора поля productivity'");
						КонецЕсли;
						
						ЧтениеXML.Прочитать();
						Если ЗначВыработки1 = Неопределено Тогда 
							ЗначВыработки1 = Число(ЧтениеXML.Значение);
						Иначе 
							ЗначВыработки2 = Число(ЧтениеXML.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("items") Тогда 
				fact_accepted = Неопределено;
				КоличествоФакт = Неопределено;
				КоличествоМестФакт = Неопределено;
				ВесФакт = Неопределено;
				ОбъемФакт = Неопределено;
				ПричинаРасхожденияФакт = Неопределено;
				itemID = Неопределено;
				
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("items")) И ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("item") Тогда 
						Пока Не флОшибка И ЧтениеXML.ПрочитатьАтрибут() Цикл 
							Если НРег(ЧтениеXML.Имя) = НРег("ID") Тогда
								itemID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing GUID';ru='Ошибка разбора GUID'");
								КонецЕсли;
								
								fact_accepted = Неопределено;
								КоличествоФакт = Неопределено;
								КоличествоМестФакт = Неопределено;
								ВесФакт = Неопределено;
								ОбъемФакт = Неопределено;
								ПричинаРасхожденияФакт = Неопределено;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_accepted") Тогда
						ЧтениеXML.Прочитать();
						fact_accepted = Число(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_amount") Тогда
						ЧтениеXML.Прочитать();
						КоличествоФакт = Число(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_amountPlace") Тогда
						ЧтениеXML.Прочитать();
						КоличествоМестФакт = Число(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_weight") Тогда
						ЧтениеXML.Прочитать();
						ВесФакт = Число(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_volume") Тогда
						ЧтениеXML.Прочитать();
						ОбъемФакт = Число(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fact_reason") Тогда
						ЧтениеXML.Прочитать();
						ПричинаРасхожденияФакт = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("item")
						И Не itemID = Неопределено Тогда
						НоваяСтрока = табСтрок.Добавить();
						НоваяСтрока.lineID           = itemID;
						НоваяСтрока.fact_accepted    = fact_accepted;
						НоваяСтрока.fact_amount      = КоличествоФакт;
						НоваяСтрока.fact_amountPlace = КоличествоМестФакт;
						НоваяСтрока.fact_weight      = ВесФакт;
						НоваяСтрока.fact_volume      = ОбъемФакт;
						НоваяСтрока.fact_reason      = ПричинаРасхожденияФакт;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("order") Тогда
				Если НЕ ТекущийGUIDМЛ = Неопределено
					И НЕ ДатаПрибытияФакт = Неопределено
					И НЕ ДатаУбытияФакт = Неопределено
					И НЕ флВыполнен = Неопределено
					И НЕ табСтрок.Количество() = 0 Тогда 
					Для Каждого ТекСтрока Из табСтрок Цикл 
						НовСтр = ТабМЛ.Добавить();
						НовСтр.routeListID      = ТекущийGUIDМЛ;
						НовСтр.arrivalFact      = ДатаПрибытияФакт;
						НовСтр.departureFact    = ДатаУбытияФакт;
						НовСтр.isDone           = флВыполнен;
						НовСтр.orderResult      = РезультатВыполнения;
						НовСтр.productivityID1  = Выработка1;
						НовСтр.productivityVal1 = ЗначВыработки1;
						НовСтр.productivityID2  = Выработка2;
						НовСтр.productivityVal2 = ЗначВыработки2;
						НовСтр.lineID           = ТекСтрока.lineID;
						НовСтр.fact_accepted    = ТекСтрока.fact_accepted;
						НовСтр.fact_amount      = ТекСтрока.fact_amount;
						НовСтр.fact_amountPlace = ТекСтрока.fact_amountPlace;
						НовСтр.fact_weight      = ТекСтрока.fact_weight;
						НовСтр.fact_volume      = ТекСтрока.fact_volume;
						НовСтр.fact_reason      = ТекСтрока.fact_reason; 
						НовСтр.signature        = Подпись; 
						НовСтр.mark             = Оценка;
					КонецЦикла;
					
					ДатаПрибытияФакт    = Неопределено;
					ДатаУбытияФакт      = Неопределено;
					флВыполнен          = Неопределено;
					Оценка              = Неопределено; 
					Подпись             = Неопределено;
					ТабСтрок.Очистить();
					РезультатВыполнения = Неопределено;
					Выработка1          = Неопределено;
					Выработка2          = Неопределено;
					ЗначВыработки1      = Неопределено;
					ЗначВыработки2      = Неопределено;
					
				Иначе 
					ВызватьИсключение НСтр("en='Incorrect XML data structure:';ru='Неверная структура данных XML:'") + " " + ОписаниеОшибки();
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("routeList") Тогда 
				ТекущийGUIDМЛ       = Неопределено;
				ДатаПрибытияФакт    = Неопределено;
				ДатаУбытияФакт      = Неопределено;
				флВыполнен          = Неопределено;
				Оценка              = Неопределено; 
				Подпись             = Неопределено;
				ТабСтрок.Очистить();
				РезультатВыполнения = Неопределено;
				Выработка1          = Неопределено;
				Выработка2          = Неопределено;
				ЗначВыработки1      = Неопределено;
				ЗначВыработки2      = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structures ""routeLists"".';ru='Возникла ошибка при разборе структуры ""routeLists"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateOrders';ru='ДесериализоватьUpdateOrders'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат ТабМЛ;
	КонецПопытки;
	
	Попытка
		Для Каждого ТекСтр Из ТабМЛ Цикл 
			ТекСтр.routeListRef = Документы.уатМаршрутныйЛист.ПолучитьСсылку(ТекСтр.routeListID);
			
			Если ЗначениеЗаполнено(ТекСтр.orderResult) Тогда 
				ТекСтр.orderResultRef = Справочники.уатПричиныЗакрытияЗаказов.ПолучитьСсылку(ТекСтр.orderResult);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтр.productivityID1) Тогда 
				ТекСтр.productivityRef1 = Справочники.уатПараметрыВыработки.ПолучитьСсылку(ТекСтр.productivityID1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтр.productivityID2) Тогда 
				ТекСтр.productivityRef2 = Справочники.уатПараметрыВыработки.ПолучитьСсылку(ТекСтр.productivityID2);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while receiving document reference by GUID.';ru='Возникла ошибка при получении ссылки на документ по GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateOrders';ru='ДесериализоватьUpdateOrders'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат ТабМЛ;
	КонецПопытки;
	
	Возврат ТабМЛ;
	
КонецФункции // ДесериализоватьUpdateOrders()

// Функция предназначена для преобразования xml-строки с сообщениями об опоздании от водителя в структуру 1С
//
// Параметры:
//  LateArrival - строка - строка XML, содержащая данные о сообщениях об опоздании от водителя с мобильного устройства
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   структура - структура, полученная на основе параметра "LateArrival", содержащая ключи:
//               - pointName   - имя пункта;
//               - lateArrival - время опоздания, минут;
//               - comment     - текст пояснения.
//
Функция ДесериализоватьLateArrival(Знач LateArrival, флОшибка)
	
	стрРезультат = Новый Структура("pointName, lateArrival, comment", "", "", "");
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(LateArrival);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("pointName") Тогда
				ЧтениеXML.Прочитать();
				стрРезультат.pointName = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lateArrival") Тогда
				ЧтениеXML.Прочитать();
				стрРезультат.lateArrival = Число(ЧтениеXML.Значение);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("comment") Тогда
				ЧтениеXML.Прочитать();
				стрРезультат.comment = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='An error occurred while parsing structures ""LateArrival"".';ru='Возникла ошибка при разборе структуры ""LateArrival"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьLateArrival';ru='ДесериализоватьLateArrival'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат стрРезультат;
	
КонецФункции // ДесериализоватьLateArrival()

// Функция предназначена для преобразования xml-строки с полем pushID
//
// Параметры:
//  SetPushID - строка - строка XML, содержащая данные
//  флОшибка  - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   структура - структура, полученная на основе параметра "SetPushID", содержащая ключи:
//               - PushID   - новый идентификатор устройства
//
Функция ДесериализоватьSetPushID(Знач SetPushID, флОшибка)
	
	стрРезультат = Новый Структура("PushID", "");
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(SetPushID);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("pushID") Тогда
				ЧтениеXML.Прочитать();
				стрРезультат.PushID = ЧтениеXML.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		ТекстНСТР = НСтр("en='An error occurred while parsing structures ""SetPushID"".';ru='Возникла ошибка при разборе структуры ""SetPushID"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьSetPushID';ru='ДесериализоватьSetPushID'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат стрРезультат;
	
КонецФункции // ДесериализоватьLateArrival()

// Функция предназначена для преобразования xml-строки с данными о картинках по 
// маршрутным листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о картинках
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных
//
Функция ДесериализоватьImage(Знач requestData, флОшибка)
	
	ТабФайлов = Новый ТаблицаЗначений();
	
	ТабФайлов.Колонки.Добавить("ДокументСсылка",  Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист, ДокументСсылка.уатЗаявкаНаРемонт, ДокументСсылка.уатПутевойЛист"));

	ТабФайлов.Колонки.Добавить("GUIDСтроки",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабФайлов.Колонки.Добавить("ДанныеФайла",     Новый ОписаниеТипов("ДвоичныеДанные"));
	ТабФайлов.Колонки.Добавить("РасширениеФайла", Новый ОписаниеТипов("Строка"));
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		
		ТекСтрока = Неопределено;
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("image") Тогда
				ТекСтрока = ТабФайлов.Добавить();
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("routeList") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a routeList field.';ru='Ошибка десериализации поля docID.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекущийGUIDМЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing the GUID in the routeList field.';ru='Ошибка разбора GUID в поле docID.'");
				КонецЕсли;
				
				ТекСтрока.ДокументСсылка = Документы.уатМаршрутныйЛист.ПолучитьСсылку(ТекущийGUIDМЛ);

			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("docID") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a routeList field.';ru='Ошибка десериализации поля docID.'");
				КонецЕсли;
				ЧтениеXML.Прочитать(); 
				ТекущийGUIDДокумента = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				
				ТекСтрока.ДокументСсылка = Документы.уатМаршрутныйЛист.ПолучитьСсылку(ТекущийGUIDДокумента);
				Если ТекСтрока.ДокументСсылка.ПолучитьОбъект() = Неопределено Тогда
					ТекСтрока.ДокументСсылка = Документы.уатПутевойЛист.ПолучитьСсылку(ТекущийGUIDДокумента);
					Если ТекСтрока.ДокументСсылка.ПолучитьОбъект() = Неопределено Тогда
						ТекСтрока.ДокументСсылка = Документы.уатЗаявкаНаРемонт.ПолучитьСсылку(ТекущийGUIDДокумента);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("item") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a field item.';ru='Ошибка десериализации поля item.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.GUIDСтроки = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing GUID in the item.';ru='Ошибка разбора GUID в поле item.'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("imageSrc") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserialization of imageSrc field.';ru='Ошибка десериализации поля imageSrc.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.ДанныеФайла = Base64Значение(ЧтениеXML.Значение);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fileExt") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a field fileExt.';ru='Ошибка десериализации поля fileExt.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.РасширениеФайла = СокрЛП(НРег(ЧтениеXML.Значение));
				Если Лев(ТекСтрока.РасширениеФайла, 1) = "." Тогда 
					ТекСтрока.РасширениеФайла = Прав(ТекСтрока.РасширениеФайла, СтрДлина(ТекСтрока.РасширениеФайла)-1);
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("image") Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.РасширениеФайла) Тогда 
					ТекСтрока.РасширениеФайла = "jpg";
				КонецЕсли;
				ТекСтрока = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing the structure ""requestData"". Description of error:';ru='Возникла ошибка при разборе структуры ""requestData"". Описание ошибки:'") + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьImage';ru='ДесериализоватьImage'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат ТабФайлов;
	
КонецФункции

// Функция предназначена для преобразования xml-строки с данными о картинках по 
// маршрутным листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о картинках
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных
//
Функция ДесериализоватьImageRepair(Знач requestData, флОшибка)
	
	ТабФайлов = Новый ТаблицаЗначений();
	
	ТабФайлов.Колонки.Добавить("ЗаявкаНаРемонт",  Новый ОписаниеТипов("ДокументСсылка.уатЗаявкаНаРемонт"));

	ТабФайлов.Колонки.Добавить("GUIDСтроки",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабФайлов.Колонки.Добавить("ДанныеФайла",     Новый ОписаниеТипов("ДвоичныеДанные"));
	ТабФайлов.Колонки.Добавить("РасширениеФайла", Новый ОписаниеТипов("Строка"));
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		
		ТекСтрока = Неопределено;
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("image") Тогда
				ТекСтрока = ТабФайлов.Добавить();
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("docID") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a routeList field.';ru='Ошибка десериализации поля docID.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекущийGUIDМЛ = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing the GUID in the routeList field.';ru='Ошибка разбора GUID в поле docID.'");
				КонецЕсли;
				
				ТекСтрока.ЗаявкаНаРемонт = Документы.уатЗаявкаНаРемонт.ПолучитьСсылку(ТекущийGUIDМЛ);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("item") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a field item.';ru='Ошибка десериализации поля item.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.GUIDСтроки = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing GUID in the item.';ru='Ошибка разбора GUID в поле item.'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("imageSrc") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserialization of imageSrc field.';ru='Ошибка десериализации поля imageSrc.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.ДанныеФайла = Base64Значение(ЧтениеXML.Значение);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fileExt") Тогда
				Если ТекСтрока = Неопределено Тогда 
					ВызватьИсключение НСтр("en='Error deserializing a field fileExt.';ru='Ошибка десериализации поля fileExt.'");
				КонецЕсли;
				ЧтениеXML.Прочитать();
				
				ТекСтрока.РасширениеФайла = СокрЛП(НРег(ЧтениеXML.Значение));
				Если Лев(ТекСтрока.РасширениеФайла, 1) = "." Тогда 
					ТекСтрока.РасширениеФайла = Прав(ТекСтрока.РасширениеФайла, СтрДлина(ТекСтрока.РасширениеФайла)-1);
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("image") Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.РасширениеФайла) Тогда 
					ТекСтрока.РасширениеФайла = "jpg";
				КонецЕсли;
				ТекСтрока = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing the structure ""requestData"". Description of error:';ru='Возникла ошибка при разборе структуры ""requestData"". Описание ошибки:'") + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьImage';ru='ДесериализоватьImage'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат ТабФайлов;
	
КонецФункции

// Функция предназначена для преобразования xml-строки с данными о удаляемых картинках по 
// маршрутным листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о удаляемых картинках
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   массив - массив GUID удаляемых картинок
//
Функция ДесериализоватьDeleteImages(Знач requestData, флОшибка)
	
	УдаляемыеФайлы = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("image") Тогда
				ЧтениеXML.Прочитать();
				
				ТекущийGUID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error while parsing GUID in the image field.';ru='Ошибка разбора GUID в поле image.'");
				КонецЕсли;
				
				УдаляемыеФайлы.Добавить(ТекущийGUID);
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing the structure ""requestData"". Description of error:';ru='Возникла ошибка при разборе структуры ""requestData"". Описание ошибки:'") + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьDeleteImages';ru='ДесериализоватьDeleteImages'"), ТекстНСТР);
		флОшибка = Истина;
	КонецПопытки;
	
	Возврат УдаляемыеФайлы;
	
КонецФункции

// Функция предназначена для преобразования xml-строки с данными о изменяемых строках заданий по 
// заявкам на ремонт
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о изменяемых заданиях
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных, содержащая ссылку на маршрутные листы, строки заданий и изменяемые данные
//
Функция ДесериализоватьUpdateOrderForRepair(Знач requestData, флОшибка)
	
	СтрЗР = Новый Структура("Ссылка, ДатаНачала, ДатаОкончания, ТС, Контрагент, ПричинаОбращения, ВидРемонта, СтатусПодтвержденияВодителем, КомментарийВодителя");	
	ЧтениеXML  = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
				
		Пока Не флОшибка И ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("orderID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.Ссылка = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field orderID';ru='Ошибка разбора поля orderID'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("driverStatusID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.СтатусПодтвержденияВодителем = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field driverStatusID';ru='Ошибка разбора поля driverStatusID'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("driverComment") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.КомментарийВодителя = ЧтениеXML.Значение;
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field driverComment';ru='Ошибка разбора поля driverComment'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairStartDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ДатаНачала = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field repairStartDate';ru='Ошибка разбора поля repairStartDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairFinishDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ДатаОкончания = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field repairFinishDate';ru='Ошибка разбора поля repairFinishDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ТС = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("carServiceID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.Контрагент = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Parse error carServiceID';ru='Ошибка разбора carServiceID'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairReason") Тогда
				ЧтениеXML.Прочитать();
				СтрЗР.ПричинаОбращения = Строка(ЧтениеXML.Значение);
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairTypeID") Тогда
				ЧтениеXML.Прочитать();
				СтрЗР.ВидРемонта = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Parse error repairTypeID';ru='Ошибка разбора repairTypeID'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structures ""AddOrderForRepair"".';ru='Возникла ошибка при разборе структуры ""AddOrderForRepair"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateOrderForRepair';ru='ДесериализоватьUpdateOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрЗР;
	КонецПопытки;
	
	Попытка
		Если ЗначениеЗаполнено(СтрЗР.Ссылка) Тогда 
			СтрЗР.Ссылка = Документы.уатЗаявкаНаРемонт.ПолучитьСсылку(СтрЗР.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.СтатусПодтвержденияВодителем) Тогда 
			СтрЗР.СтатусПодтвержденияВодителем = Справочники.уатСтатусы_уэ.ПолучитьСсылку(СтрЗР.СтатусПодтвержденияВодителем);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.ТС) Тогда 
			СтрЗР.ТС = Справочники.уатТС.ПолучитьСсылку(СтрЗР.ТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.Контрагент) Тогда 
			СтрЗР.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтрЗР.Контрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.ВидРемонта) Тогда 
			СтрЗР.ВидРемонта = Справочники.уатВидыОбслуживанияТС.ПолучитьСсылку(СтрЗР.ВидРемонта);
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while receiving document reference by GUID.';ru='Возникла ошибка при получении ссылки на документ по GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьAddOrderForRepair';ru='ДесериализоватьAddOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрЗР;
	КонецПопытки;
	
	Возврат СтрЗР;
	
КонецФункции // ДесериализоватьUpdateOrders()

// Функция предназначена для преобразования xml-строки с данными о изменяемых строках заданий по 
// путевым листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о изменяемых заданиях
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных, содержащая ссылку на маршрутные листы, строки заданий и изменяемые данные
//
Функция ДесериализоватьUpdateWaybill(Знач requestData, флОшибка)
	
	СтрПЛ = Новый Структура("Ссылка, ЗакрытВодителем, ДатаВыезда, ДатаВозвращения, СпидометрВозвращения,
	|ОстатокТопливаВозврат, Прицепы, Заправки");
	СтрПЛ.Заправки = Новый Массив();
	СтрПЛ.Прицепы  = Новый Массив();
	
	ЧтениеXML      = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
				
		Пока Не флОшибка И ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("orderID") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.Ссылка = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field orderID';ru='Ошибка разбора поля orderID'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("closeWaybill") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ЗакрытВодителем = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field closeWaybill';ru='Ошибка разбора поля closeWaybill'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillStartDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ДатаВыезда = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field waybillStartDate';ru='Ошибка разбора поля waybillStartDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillFinishDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ДатаВозвращения = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field waybillFinishDate';ru='Ошибка разбора поля waybillFinishDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("odometerReturn") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.СпидометрВозвращения = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("remainOfFuelReturn") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.ОстатокТопливаВозврат = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling") Тогда
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling")) И ЧтениеXML.Прочитать() Цикл 
					СтруктураЗаправки = Новый Структура("fuellingID, gasStationID, vehicle, fuellingTypeID, fuelsID, fuellingDate,
						|fuelCardID, quantity, sum, lineNumber, ПометкаНаУдаление");
					Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling")) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuellingID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuellingID';ru='Ошибка разбора поля fuellingID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("gasStationID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.gasStationID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field gasStationID';ru='Ошибка разбора поля gasStationID'");
								КонецЕсли;
							КонецЕсли; 
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.vehicle = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingTypeID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								Попытка
									СтруктураЗаправки.fuellingTypeID = Перечисления.уатВидыДвиженияГСМ[ЧтениеXML.Значение];
								Исключение
									флОшибка = Истина;
								КонецПопытки;
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuellingTypeID';ru='Ошибка разбора поля fuellingTypeID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuelsID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuelsID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuelsID';ru='Ошибка разбора поля fuelsID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingDate") Тогда
							ЧтениеXML.Прочитать();
							СтруктураЗаправки.fuellingDate = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
							Если флОшибка Тогда 
								ВызватьИсключение НСтр("en='Error parsing field fuellingDate';ru='Ошибка разбора поля fuellingDate'");
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuelCardID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuelCardID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuelCardID';ru='Ошибка разбора поля fuelCardID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("quantity") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.quantity = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("sum") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.sum = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lineNumber") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.lineNumber = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("deleted") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.ПометкаНаУдаление = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда
									ВызватьИсключение НСтр("en='Error parsing field deleted';ru='Ошибка разбора поля deleted'");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						ЧтениеXML.Прочитать();
					КонецЦикла;
					СтрПЛ.Заправки.Добавить(СтруктураЗаправки);
					ЧтениеXML.Прочитать();
				КонецЦикла;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicles") Тогда
				Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicles")) И ЧтениеXML.Прочитать() Цикл 
					СтруктураПрицепов = Новый Структура("vehicle");
					Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicle")) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураПрицепов.vehicle = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						ЧтениеXML.Прочитать();
					КонецЦикла;
					СтрПЛ.Прицепы.Добавить(СтруктураПрицепов);
					ЧтениеXML.Прочитать();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structures ""AddOrderForRepair"".';ru='Возникла ошибка при разборе структуры ""AddOrderForRepair"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateOrderForRepair';ru='ДесериализоватьUpdateOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрПЛ;
	КонецПопытки;
	
	Попытка
		Если ЗначениеЗаполнено(СтрПЛ.Ссылка) Тогда 
			СтрПЛ.Ссылка = Документы.уатПутевойЛист.ПолучитьСсылку(СтрПЛ.Ссылка);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрПЛ.Заправки) Тогда
			Для Каждого ТекЗаправка Из СтрПЛ.Заправки Цикл
				СтруктураЗаправки = Новый Структура("fuellingID, gasStationID, vehicle, fuellingTypeID, fuelsID, fuellingDate,
						|fuelCardID, quantity, sum");
				Если ЗначениеЗаполнено(ТекЗаправка.fuellingID) Тогда 
					ТекЗаправка.fuellingID = Документы.уатЗаправкаГСМ.ПолучитьСсылку(ТекЗаправка.fuellingID);
				Иначе
					ТекЗаправка.fuellingID = Документы.уатЗаправкаГСМ.ПустаяСсылка();
				КонецЕсли; 
				Если ЗначениеЗаполнено(ТекЗаправка.vehicle) Тогда 
					ТекЗаправка.vehicle = Справочники.уатТС.ПолучитьСсылку(ТекЗаправка.vehicle);
				Иначе
					ТекЗаправка.vehicle = Справочники.уатТС.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.gasStationID) Тогда 
					ТекЗаправка.gasStationID = Справочники.уатАЗС.ПолучитьСсылку(ТекЗаправка.gasStationID);
				Иначе
					ТекЗаправка.gasStationID = Справочники.уатАЗС.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.fuelsID) Тогда 
					ТекЗаправка.fuelsID = Справочники.Номенклатура.ПолучитьСсылку(ТекЗаправка.fuelsID);
				Иначе
					ТекЗаправка.fuelsID = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.fuelCardID) Тогда 
					ТекЗаправка.fuelCardID = Справочники.уатПластиковыеКарты.ПолучитьСсылку(ТекЗаправка.fuelCardID);
				Иначе
					ТекЗаправка.fuelCardID = Справочники.уатПластиковыеКарты.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрПЛ.Прицепы) Тогда
			Для Каждого ТекПрицеп Из СтрПЛ.Прицепы Цикл
				СтруктураПрицепов = Новый Структура("vehicle");
				Если ЗначениеЗаполнено(ТекПрицеп.vehicle) Тогда 
					ТекПрицеп.vehicle = Справочники.уатТС.ПолучитьСсылку(ТекПрицеп.vehicle);
				Иначе
					ТекПрицеп.vehicle = Справочники.уатТС.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while receiving document reference by GUID.';ru='Возникла ошибка при получении ссылки на документ по GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateWaybill';ru='ДесериализоватьUpdateWaybill'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрПЛ;
	КонецПопытки;
	
	Возврат СтрПЛ;
	
КонецФункции // ДесериализоватьUpdateOrders()

// Функция предназначена для преобразования xml-строки с данными о изменяемых строках заданий по 
// путевым листам
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о изменяемых заданиях
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных, содержащая ссылку на маршрутные листы, строки заданий и изменяемые данные
//
Функция ДесериализоватьAddWaybill(Знач requestData, флОшибка)
	
	СтрПЛ = Новый Структура("Дата, ТранспортноеСредство, ВидПЛ, ЗакрытВодителем, ДатаВыезда, ДатаВозвращения,
	|СпидометрВозвращения, СпидометрВыезда, ОстатокТопливаВыезд, ОстатокТопливаВозврат, Прицепы, Заправки");
	СтрПЛ.Заправки = Новый Массив();
	СтрПЛ.Прицепы  = Новый Массив();
	ЧтениеXML      = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
				
		Пока Не флОшибка И ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ТранспортноеСредство = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("Date") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field closeWaybill';ru='Ошибка разбора поля closeWaybill'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillTypeID") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.ВидПЛ = Перечисления.уатВидыПЛ[ЧтениеXML.Значение];
				Исключение
					флОшибка = Истина;
				КонецПопытки;
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field waybillTypeID';ru='Ошибка разбора поля waybillTypeID'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("odometerDeparture") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.СпидометрВыезда = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("remainOfFuelDeparture") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.ОстатокТопливаВыезд = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("closeWaybill") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ЗакрытВодителем = ДесериализоватьБулево(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field closeWaybill';ru='Ошибка разбора поля closeWaybill'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillStartDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ДатаВыезда = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field waybillStartDate';ru='Ошибка разбора поля waybillStartDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("waybillFinishDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрПЛ.ДатаВозвращения = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field waybillFinishDate';ru='Ошибка разбора поля waybillFinishDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("odometerReturn") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.СпидометрВозвращения = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("remainOfFuelReturn") Тогда 
				ЧтениеXML.Прочитать();
				Попытка
					СтрПЛ.ОстатокТопливаВозврат = Число(ЧтениеXML.Значение);
				Исключение
				КонецПопытки;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling") Тогда
				СтрПЛ.Заправки = Новый Массив();
				Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling")) И ЧтениеXML.Прочитать() Цикл 
					СтруктураЗаправки = Новый Структура("fuellingID, gasStationID, vehicle, fuellingTypeID, fuelsID, fuellingDate,
						|fuelCardID, quantity, sum, lineNumber");
					Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("fueling")) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuellingID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuellingID';ru='Ошибка разбора поля fuellingID'");
								КонецЕсли;
							КонецЕсли; 
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.vehicle = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("gasStationID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.gasStationID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field gasStationID';ru='Ошибка разбора поля gasStationID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingTypeID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								Попытка
									СтруктураЗаправки.fuellingTypeID = Перечисления.уатВидыДвиженияГСМ[ЧтениеXML.Значение];
								Исключение
									флОшибка = Истина;
								КонецПопытки;
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuellingTypeID';ru='Ошибка разбора поля fuellingTypeID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuelsID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuelsID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuelsID';ru='Ошибка разбора поля fuelsID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuellingDate") Тогда
							ЧтениеXML.Прочитать();
							СтруктураЗаправки.fuellingDate = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
							Если флОшибка Тогда 
								ВызватьИсключение НСтр("en='Error parsing field fuellingDate';ru='Ошибка разбора поля fuellingDate'");
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("fuelCardID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураЗаправки.fuelCardID = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field fuelCardID';ru='Ошибка разбора поля fuelCardID'");
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("quantity") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.quantity = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("sum") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.sum = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lineNumber") Тогда
							ЧтениеXML.Прочитать();
							Попытка
								СтруктураЗаправки.lineNumber = Число(ЧтениеXML.Значение);
							Исключение
							КонецПопытки;
						КонецЕсли; 
						ЧтениеXML.Прочитать();
					КонецЦикла;
					СтрПЛ.Заправки.Добавить(СтруктураЗаправки);
					ЧтениеXML.Прочитать();
				КонецЦикла;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicles") Тогда
				Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicles")) И ЧтениеXML.Прочитать() Цикл 
					СтруктураПрицепов = Новый Структура("vehicle");
					Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicle")) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда
							ЧтениеXML.Прочитать();
							Если ЗначениеЗаполнено(ЧтениеXML.Значение) Тогда
								СтруктураПрицепов.vehicle = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
								Если флОшибка Тогда 
									ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						ЧтениеXML.Прочитать();
					КонецЦикла;
					СтрПЛ.Прицепы.Добавить(СтруктураПрицепов);
					ЧтениеXML.Прочитать();
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structures ""AddOrderForRepair"".';ru='Возникла ошибка при разборе структуры ""AddOrderForRepair"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьUpdateOrderForRepair';ru='ДесериализоватьUpdateOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрПЛ;
	КонецПопытки;
	
	Попытка
		Если ЗначениеЗаполнено(СтрПЛ.ТранспортноеСредство) Тогда 
			СтрПЛ.ТранспортноеСредство = Справочники.уатТС.ПолучитьСсылку(СтрПЛ.ТранспортноеСредство);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрПЛ.Заправки) Тогда
			Для Каждого ТекЗаправка Из СтрПЛ.Заправки Цикл
				СтруктураЗаправки = Новый Структура("fuellingID, gasStationID, vehicle, fuellingTypeID, fuelsID, fuellingDate,
						|fuelCardID, quantity, sum");
				Если ЗначениеЗаполнено(ТекЗаправка.fuellingID) Тогда 
					ТекЗаправка.fuellingID = Документы.уатЗаправкаГСМ.ПолучитьСсылку(ТекЗаправка.fuellingID);
				Иначе
					ТекЗаправка.fuellingID = Документы.уатЗаправкаГСМ.ПустаяСсылка();
				КонецЕсли;  
				Если ЗначениеЗаполнено(ТекЗаправка.vehicle) Тогда 
					ТекЗаправка.vehicle = Справочники.уатТС.ПолучитьСсылку(ТекЗаправка.vehicle);
				Иначе
					ТекЗаправка.vehicle = Справочники.уатТС.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.gasStationID) Тогда 
					ТекЗаправка.gasStationID = Справочники.уатАЗС.ПолучитьСсылку(ТекЗаправка.gasStationID);
				Иначе
					ТекЗаправка.gasStationID = Справочники.уатАЗС.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.fuelsID) Тогда 
					ТекЗаправка.fuelsID = Справочники.Номенклатура.ПолучитьСсылку(ТекЗаправка.fuelsID);
				Иначе
					ТекЗаправка.fuelsID = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаправка.fuelCardID) Тогда 
					ТекЗаправка.fuelCardID = Справочники.уатПластиковыеКарты.ПолучитьСсылку(ТекЗаправка.fuelCardID);
				Иначе
					ТекЗаправка.fuelCardID = Справочники.уатПластиковыеКарты.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрПЛ.Прицепы) Тогда
			Для Каждого ТекПрицеп Из СтрПЛ.Прицепы Цикл
				СтруктураПрицепов = Новый Структура("vehicle");
				Если ЗначениеЗаполнено(ТекПрицеп.vehicle) Тогда 
					ТекПрицеп.vehicle = Справочники.уатТС.ПолучитьСсылку(ТекПрицеп.vehicle);
				Иначе
					ТекПрицеп.vehicle = Справочники.уатТС.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while receiving document reference by GUID.';ru='Возникла ошибка при получении ссылки на документ по GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьAddWaybill';ru='ДесериализоватьAddWaybill'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрПЛ;
	КонецПопытки;
	
	Возврат СтрПЛ;
	
КонецФункции // ДесериализоватьAddWaybill()

// Функция предназначена для преобразования xml-строки с данными о изменяемых строках заданий по 
// заказам на ремонт
//
// Параметры:
//  requestData - строка - строка XML, содержащая данные о изменяемых заданиях
//  флОшибка    - булево - признак наличия ошибки при десериализации
//
// Возвращаемое значение:
//   Таблица значений - таблица данных, содержащая ссылку на маршрутные листы, строки заданий и изменяемые данные
//
Функция ДесериализоватьAddOrderForRepair(Знач requestData, флОшибка)
	
	СтрЗР = Новый Структура("Дата, ДатаНачала, ДатаОкончания, ТС, Контрагент, ПричинаОбращения, ВидРемонта, СтатусПодтвержденияВодителем, КомментарийВодителя");
	СтрЗР.Дата = ТекущаяДата();
	ЧтениеXML  = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(requestData);
				
		Пока Не флОшибка И ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("Date") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.Дата = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field Date';ru='Ошибка разбора поля Date'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairStartDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ДатаНачала = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field repairStartDate';ru='Ошибка разбора поля repairStartDate'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("driverStatusID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.СтатусПодтвержденияВодителем = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field driverStatusID';ru='Ошибка разбора поля driverStatusID'");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("driverComment") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.КомментарийВодителя = ЧтениеXML.Значение;
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field driverComment';ru='Ошибка разбора поля driverComment'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairFinishDate") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ДатаОкончания = ДесериализоватьДатаВремя(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field repairFinishDate';ru='Ошибка разбора поля repairFinishDate'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("vehicleID") Тогда 
				ЧтениеXML.Прочитать();
				СтрЗР.ТС = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Error parsing field vehicleID';ru='Ошибка разбора поля vehicleID'");
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairReason") Тогда
				ЧтениеXML.Прочитать();
				СтрЗР.ПричинаОбращения = Строка(ЧтениеXML.Значение);
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("repairTypeID") Тогда
				ЧтениеXML.Прочитать();
				СтрЗР.ВидРемонта = ДесериализоватьGUID(ЧтениеXML.Значение, флОшибка);
				
				Если флОшибка Тогда 
					ВызватьИсключение НСтр("en='Parse error repairTypeID';ru='Ошибка разбора repairTypeID'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while parsing structures ""AddOrderForRepair"".';ru='Возникла ошибка при разборе структуры ""AddOrderForRepair"".'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьAddOrderForRepair';ru='ДесериализоватьAddOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрЗР;
	КонецПопытки;
	
	Попытка
		Если ЗначениеЗаполнено(СтрЗР.ТС) Тогда 
			СтрЗР.ТС = Справочники.уатТС.ПолучитьСсылку(СтрЗР.ТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.СтатусПодтвержденияВодителем) Тогда 
			СтрЗР.СтатусПодтвержденияВодителем = Справочники.уатСтатусы_уэ.ПолучитьСсылку(СтрЗР.СтатусПодтвержденияВодителем);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.Контрагент) Тогда 
			СтрЗР.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтрЗР.Контрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрЗР.ВидРемонта) Тогда 
			СтрЗР.ВидРемонта = Справочники.уатВидыОбслуживанияТС.ПолучитьСсылку(СтрЗР.ВидРемонта);
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while receiving document reference by GUID.';ru='Возникла ошибка при получении ссылки на документ по GUID.'");
		ЗаписатьСообщениеОбОшибке(НСтр("en='ДесериализоватьAddOrderForRepair';ru='ДесериализоватьAddOrderForRepair'"), ТекстНСТР);
		флОшибка = Истина;
		
		Возврат СтрЗР;
	КонецПопытки;
	
	Возврат СтрЗР;
	
КонецФункции // ДесериализоватьAddOrderForRepair()

#КонецОбласти

#Область Сериализаторы

// Функция предназначена для преобразования даты 1С в строку даты по стандарту W3C
//
// Параметры:
//  ДатаВремя1С  - дата   - дата во внутреннем формате 1С
//  ТолькоДата   - булево - если истина, будет сформирована строка даты W3C в формате "YYYY-MM-DD" (только дата);
//                          если ложь - в формате "YYYY-MM-DDThh:mm:ss" (дата и время)
//
// Возвращаемое значение:
//   Строка      - дата в формате W3C, сформированная из даты 1С
//
Функция СериализоватьДатаВремя(Знач ДатаВремя1С, Знач ТолькоДата=Ложь)
	
	стрДатаВремяW3C = "";
	
	// Год
	стрДатаВремяW3C = стрДатаВремяW3C + Формат(ДатаВремя1С, "ДФ=yyyy; ДП=0001");
	
	// Месяц
	стрДатаВремяW3C = стрДатаВремяW3C + "-" + Формат(ДатаВремя1С, "ДФ=MM; ДП=01");
	
	// День
	стрДатаВремяW3C = стрДатаВремяW3C + "-" + Формат(ДатаВремя1С, "ДФ=dd; ДП=01");
	
	Если ТолькоДата Тогда 
		Возврат стрДатаВремяW3C;
	КонецЕсли;
	
	// Часы
	стрДатаВремяW3C = стрДатаВремяW3C + "T" + Формат(ДатаВремя1С, "ДФ=HH; ДП=00");
	
	// Минуты
	стрДатаВремяW3C = стрДатаВремяW3C + ":" + Формат(ДатаВремя1С, "ДФ=mm; ДП=00");
	
	// Секунды
	стрДатаВремяW3C = стрДатаВремяW3C + ":" + Формат(ДатаВремя1С, "ДФ=ss; ДП=00");
	
	Возврат стрДатаВремяW3C;
	
КонецФункции // СериализоватьДатаВремя()

// Функция предназначена для преобразования времени в числовом формате (где целая часть представляет собой количество 
// часов, а дробная - количество минут), используемого в конфигурации, в число секунд.
//
// Параметры:
//  ВремяЧЧММ - дата - дата во внутреннем формате 1С
//
// Возвращаемое значение:
//   Число    - количество секунд, сформированное из переданного времени
//
Функция СериализоватьВремяЧисломЧЧММ(Знач ВремяЧЧММ)
	
	Минуты = (ВремяЧЧММ - Цел(ВремяЧЧММ))*100;
	Часы   = Цел(ВремяЧЧММ);
	
	Секунд = Минуты*60 + Часы*3600;
	
	Возврат Формат(Секунд, "ЧН=0; ЧГ=0");
	
КонецФункции // СериализоватьВремяЧисломЧЧММ()

// Функция предназначена для преобразования типа булево 1С в строку true/false
//
// Параметры:
//  Булево1С  - булево - значение булево
//
// Возвращаемое значение:
//   Строка   - "true"  - если Булево1С = истина;
//              "false" - если Булево1С = ложь
//
Функция СериализоватьБулево(Знач Булево1С)
	
	Если Булево1С Тогда 
		Возврат "true";
	Иначе 
		Возврат "false";
	КонецЕсли;
	
КонецФункции // СериализоватьБулево()

// Функция предназначена для преобразования значения перечисления "Типы точек маршрута" в строковое значение
//
// Параметры:
//  ТипТочки  - ПеречислениеСсылка.уатТипыТочекМаршрута - тип точки маршрута
//
// Возвращаемое значение:
//   Строка   - "load"        - если ТипТочки = Погрузка
//              "unload"      - если ТипТочки = Разгрузка
//              "transit"     - если ТипТочки = ПромежуточныйПункт
//              пустая строка - если ТипТочки не указан
//
Функция СериализоватьТипТочкиМаршрута(Знач ТипТочки, Знач ЭтоГараж)
	
	Если ТипТочки = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
		Возврат "load";
		
	ИначеЕсли ТипТочки = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
		Возврат "unload";
		
	ИначеЕсли ТипТочки = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда  
		Если ЭтоГараж Тогда 
			Возврат "garage";
			
		Иначе 
			Возврат "transit";
		КонецЕсли;
		
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции // СериализоватьТипТочкиМаршрута()

// Функция предназначена для преобразования таблицы пользователей мобильного приложения в xml-структуру
//
// Параметры:
//  ТабUsers - таблица значений - таблица, содержащая данные о пользователях мобильного приложения
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабUsers"
//
Функция СериализоватьUsers(Знач ТабUsers)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "users"
	ЗаписьXML.ЗаписатьНачалоЭлемента("users");
	
	Для Каждого ТекСтр Из ТабUsers Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("user");
		
		ЗаписьXML.ЗаписатьАтрибут("login",  ТекСтр.Логин);
		ЗаписьXML.ЗаписатьАтрибут("pass",   ТекСтр.Пароль);
		ЗаписьXML.ЗаписатьАтрибут("active", СериализоватьБулево(ТекСтр.РаботаРазрешена));
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "users"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьUsers()

// Функция предназначена для преобразования таблицы с сообщениями водителям мобильного приложения в xml-структуру
//
// Параметры:
//  ТабСообщений - таблица значений - таблица, содержащая сообщения пользователю мобильного приложения
//
// Возвращаемое значение:
//   Строка      - xml-структура, сформированная на основе параметра "ТабСообщений"
//
Функция СериализоватьMessages(Знач ТабСообщений)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "messages"
	ЗаписьXML.ЗаписатьНачалоЭлемента("messages");
	
	Для Каждого ТекСтр Из ТабСообщений Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("message");
		
		ЗаписьXML.ЗаписатьАтрибут("time",		 СериализоватьДатаВремя(ТекСтр.ДатаСоздания));
		ЗаписьXML.ЗаписатьАтрибут("src",		 ТекСтр.Источник);
		ЗаписьXML.ЗаписатьАтрибут("guid",		 ТекСтр.ИдентификаторСообщения);
		ЗаписьXML.ЗаписатьАтрибут("read",		 СериализоватьБулево(ТекСтр.Прочитано));
		ЗаписьXML.ЗаписатьАтрибут("delivered",	 СериализоватьБулево(ТекСтр.Доставлено));

		ЗаписьXML.ЗаписатьТекст(ТекСтр.ТекстСообщения);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "messages"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьMessages()

// Функция предназначена для формирования ответа web-сервера на выполнение метода "login". Формирует xml-структуру,
// содержащую массив подходящих ТС и/или GUID подобранного (единственно возможного) ТС
//
// Параметры:
//  мсвТС       - массив                 - массив подобранных ТС
//  ВыбранноеТС - СправочникСсылка.уатТС - подобранное транспортное средство
//
// Возвращаемое значение:
//   Строка      - xml-структура, сформированная на основе параметров "мсвТС" и/или "ВыбранноеТС"
//
Функция СериализоватьLoginResponse(Знач мсвТС=Неопределено, Знач ВыбранноеТС=Неопределено)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	Если Не мсвТС = Неопределено Тогда 
		// Начало "cars"
		ЗаписьXML.ЗаписатьНачалоЭлемента("cars");
		
		Для Каждого ТекТС Из мсвТС Цикл 
			// Начало "car"
			ЗаписьXML.ЗаписатьНачалоЭлемента("car");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекТС.ГосударственныйНомер));
			// Конец "car"
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		// Конец "cars"
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если Не ВыбранноеТС = Неопределено Тогда 
		// Начало "carID"
		ЗаписьXML.ЗаписатьНачалоЭлемента("carID");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыбранноеТС.УникальныйИдентификатор()));
		// Конец "carID"
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьLoginResponse()

// Функция предназначена для формирования ответа web-сервера на выполнение метода "getRouteList". Формирует xml-структуру,
// содержащую данные о маршрутных листах и выполняемых по ним заданиям
//
// Параметры:
//  МаршрутныеЛисты - РезультатЗапроса - результат выполнения запроса, содержащий данные по отправляемым маршрутным листам
//
// Возвращаемое значение:
//   Строка      - xml-структура, сформированная на основе параметра "МаршрутныеЛисты"
//
Функция СериализоватьRouteList(Знач МаршрутныеЛисты)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "routeLists"
	ЗаписьXML.ЗаписатьНачалоЭлемента("routeLists");
	
	Для Каждого ТекМЛ Из МаршрутныеЛисты.Строки Цикл 
		// Начало "routeList"
		ЗаписьXML.ЗаписатьНачалоЭлемента("routeList");
		ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекМЛ.МаршрутныйЛистСсылка.УникальныйИдентификатор()));
		
		// Начало "routeNumber"
		ЗаписьXML.ЗаписатьНачалоЭлемента("routeNumber");
		ЗаписьXML.ЗаписатьТекст(ТекМЛ.МаршрутныйЛистНомер);
		// Конец "routeNumber"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "vehicle"
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicle");
		ЗаписьXML.ЗаписатьТекст(ТекМЛ.МаршрутныйЛистТС);
		// Конец "vehicle"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "departurePlanTime"
		ЗаписьXML.ЗаписатьНачалоЭлемента("departurePlanTime");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекМЛ.МаршрутныйЛистДатаОтправленияПлан));
		// Конец "departurePlanTime"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "arrivalPlanTime"
		ЗаписьXML.ЗаписатьНачалоЭлемента("arrivalPlanTime");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекМЛ.МаршрутныйЛистДатаВыполненияПлан));
		// Конец "arrivalPlanTime"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "comment"
		ЗаписьXML.ЗаписатьНачалоЭлемента("comment");
		ЗаписьXML.ЗаписатьТекст(ТекМЛ.МаршрутныйЛистКомментарий);
		// Конец "comment"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "acceptStatus"
		ЗаписьXML.ЗаписатьНачалоЭлемента("acceptStatus");
		ЗаписьXML.ЗаписатьТекст(?(ТекМЛ.ПринятВодителем = Перечисления.уатСтатусыПринятияМЛВодителем.Принят, "accepted", ""));
		// Конец "acceptStatus"
		ЗаписьXML.ЗаписатьКонецЭлемента();

		// Начало "multigoShortUrl"
		ЗаписьXML.ЗаписатьНачалоЭлемента("multigoShortUrl");
		ЗаписьXML.ЗаписатьТекст(ТекМЛ.СсылкаMultiGo);
		// Конец "multigoShortUrl"
		ЗаписьXML.ЗаписатьКонецЭлемента();

		// Начало "orders"
		ЗаписьXML.ЗаписатьНачалоЭлемента("orders");
		
		НомерПункта    = 0;
		ТекПунктСсылка = Неопределено;
		Для Каждого ТекЗаказ Из ТекМЛ.Строки Цикл 
			// Начало "order"
			ЗаписьXML.ЗаписатьНачалоЭлемента("order");
			
			// Начало "orderNumber"
			ЗаписьXML.ЗаписатьНачалоЭлемента("orderNumber");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ЗаказНомер);
			// Конец "orderNumber"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "partner"
			ЗаписьXML.ЗаписатьНачалоЭлемента("partner");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтрагентНаименование);
			// Конец "partner"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "consignor"
			ЗаписьXML.ЗаписатьНачалоЭлемента("consignor");
			Если ЗначениеЗаполнено(ТекЗаказ.ГрузоотправительСсылка) Тогда 
				ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузоотправительСсылка.Наименование);
			Иначе
				ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтрагентНаименование);
			КонецЕсли;
			// Конец "consignor"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "multigoDescription"
			ЗаписьXML.ЗаписатьНачалоЭлемента("multigoDescription");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ОтветMultiGo);
			// Конец "multigoDescription"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "signature"
			ЗаписьXML.ЗаписатьНачалоЭлемента("signature");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекЗаказ.Подпись));
			// Конец "signature"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "mark"
			ЗаписьXML.ЗаписатьНачалоЭлемента("mark");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекЗаказ.ОценкаСервиса));
			// Конец "mark"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "contacts"
			ЗаписьXML.ЗаписатьНачалоЭлемента("contacts");
			
			Если ЗначениеЗаполнено(ТекЗаказ.ТелефонКонтрагента) Или ЗначениеЗаполнено(ТекЗаказ.ПочтаКонтрагента) Тогда 
				// Начало "contact"
				ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
				ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекЗаказ.КонтрагентСсылка.УникальныйИдентификатор()));
				
				// Начало "name"
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				Если ЗначениеЗаполнено(ТекЗаказ.КонтрагентСсылка.ОсновноеКонтактноеЛицо) Тогда 
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтрагентСсылка.ОсновноеКонтактноеЛицо.Наименование);
				Иначе 
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтрагентСсылка.Наименование);
				КонецЕсли;
				// Конец "name"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗаполнено(ТекЗаказ.ТелефонКонтрагента) Тогда 
					// Начало "phone"
					ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ТелефонКонтрагента);
					// Конец "phone"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекЗаказ.ПочтаКонтрагента) Тогда 
					// Начало "email"
					ЗаписьXML.ЗаписатьНачалоЭлемента("email");
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПочтаКонтрагента);
					// Конец "email"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				// Начало "role"
				ЗаписьXML.ЗаписатьНачалоЭлемента("role");
				ЗаписьXML.ЗаписатьТекст("partner");
				// Конец "role"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Конец "contact"
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			КонтрагентСсылка = Неопределено;
			Если ТекЗаказ.ЗаказСсылка.FTL Тогда
				ЗаполнитьКонтИнформациюFTLЗаказа(ТекЗаказ.ЗаказСсылка, ТекЗаказ.ПунктСсылка, ЗаписьXML, КонтрагентСсылка);
				Если ЗначениеЗаполнено(ТекЗаказ.ТелефонОтветственного) Или ЗначениеЗаполнено(ТекЗаказ.ПочтаОтветственного) Тогда 
					// Начало "contact"
					ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
					ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекЗаказ.ОтветственныйПоЗаказу.УникальныйИдентификатор()));
					
					// Начало "name"
					ЗаписьXML.ЗаписатьНачалоЭлемента("name");
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ОтветственныйПоЗаказу.Наименование);
					// Конец "name"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(ТекЗаказ.ТелефонОтветственного) Тогда 
						// Начало "phone"
						ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ТелефонОтветственного);
						// Конец "phone"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекЗаказ.ПочтаОтветственного) Тогда 
						// Начало "email"
						ЗаписьXML.ЗаписатьНачалоЭлемента("email");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПочтаОтветственного);
						// Конец "email"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					// Начало "role"
					ЗаписьXML.ЗаписатьНачалоЭлемента("role");
					ЗаписьXML.ЗаписатьТекст("responsible");
					// Конец "role"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// Конец "contact"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ТекЗаказ.ТелефонГрузоотправителя) Или ЗначениеЗаполнено(ТекЗаказ.ПочтаГрузоотправителя) Тогда 
					// Начало "contact"
					ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
					ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекЗаказ.ГрузоотправительСсылка.УникальныйИдентификатор()));
					
					// Начало "name"
					ЗаписьXML.ЗаписатьНачалоЭлемента("name");
					Если ЗначениеЗаполнено(ТекЗаказ.КонтактноеЛицоГрузоотправителяСсылка) Тогда 
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтактноеЛицоГрузоотправителяСсылка.Наименование);
					ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.ГрузоотправительСсылка.ОсновноеКонтактноеЛицо) Тогда
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузоотправительСсылка.ОсновноеКонтактноеЛицо.Наименование);
					Иначе 
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузоотправительСсылка.Наименование);
					КонецЕсли;
					// Конец "name"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(ТекЗаказ.ТелефонГрузоотправителя) Тогда 
						// Начало "phone"
						ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ТелефонГрузоотправителя);
						// Конец "phone"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекЗаказ.ПочтаГрузоотправителя) Тогда 
						// Начало "email"
						ЗаписьXML.ЗаписатьНачалоЭлемента("email");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПочтаГрузоотправителя);
						// Конец "email"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					// Начало "role"
					ЗаписьXML.ЗаписатьНачалоЭлемента("role");
					ЗаписьXML.ЗаписатьТекст("sender");
					// Конец "role"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// Конец "contact"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекЗаказ.ТелефонГрузополучателя) Или ЗначениеЗаполнено(ТекЗаказ.ПочтаГрузополучателя) Тогда 
					// Начало "contact"
					ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
					ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекЗаказ.ГрузополучательСсылка.УникальныйИдентификатор()));
					
					// Начало "name"
					ЗаписьXML.ЗаписатьНачалоЭлемента("name");
					Если ЗначениеЗаполнено(ТекЗаказ.КонтактноеЛицоГрузополучателяСсылка) Тогда 
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтактноеЛицоГрузополучателяСсылка.Наименование);
					ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.ГрузополучательСсылка.ОсновноеКонтактноеЛицо) Тогда
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузополучательСсылка.ОсновноеКонтактноеЛицо.Наименование);
					Иначе 
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузополучательСсылка.Наименование);
					КонецЕсли;
					// Конец "name"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(ТекЗаказ.ТелефонГрузополучателя) Тогда 
						// Начало "phone"
						ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ТелефонГрузополучателя);
						// Конец "phone"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекЗаказ.ПочтаГрузополучателя) Тогда 
						// Начало "email"
						ЗаписьXML.ЗаписатьНачалоЭлемента("email");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПочтаГрузополучателя);
						// Конец "email"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					// Начало "role"
					ЗаписьXML.ЗаписатьНачалоЭлемента("role");
					ЗаписьXML.ЗаписатьТекст("receiver");
					// Конец "role"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// Конец "contact"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекЗаказ.ТелефонОтветственного) Или ЗначениеЗаполнено(ТекЗаказ.ПочтаОтветственного) Тогда 
					// Начало "contact"
					ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
					ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекЗаказ.ОтветственныйПоЗаказу.УникальныйИдентификатор()));
					
					// Начало "name"
					ЗаписьXML.ЗаписатьНачалоЭлемента("name");
					ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ОтветственныйПоЗаказу.Наименование);
					// Конец "name"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(ТекЗаказ.ТелефонОтветственного) Тогда 
						// Начало "phone"
						ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ТелефонОтветственного);
						// Конец "phone"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекЗаказ.ПочтаОтветственного) Тогда 
						// Начало "email"
						ЗаписьXML.ЗаписатьНачалоЭлемента("email");
						ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПочтаОтветственного);
						// Конец "email"
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					// Начало "role"
					ЗаписьXML.ЗаписатьНачалоЭлемента("role");
					ЗаписьXML.ЗаписатьТекст("responsible");
					// Конец "role"
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// Конец "contact"
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				
			КонецЕсли;
		
			// Конец "contacts"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "consignee"
			ЗаписьXML.ЗаписатьНачалоЭлемента("consignee");
			Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
				ЗаписьXML.ЗаписатьТекст(КонтрагентСсылка.Наименование);
			ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.ГрузополучательСсылка) Тогда 
				ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ГрузополучательСсылка.Наименование);
			Иначе
				ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КонтрагентНаименование);
			КонецЕсли;
			// Конец "consignee"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "operation"
			ЗаписьXML.ЗаписатьНачалоЭлемента("operation");
			ЗаписьXML.ЗаписатьТекст(СериализоватьТипТочкиМаршрута(ТекЗаказ.ТипТочкиМаршрута, ТекЗаказ.ПунктЭтоГараж));
			// Конец "operation"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "skipPoint"
			ЗаписьXML.ЗаписатьНачалоЭлемента("skipPoint");
			Если ТекЗаказ.Строки.Количество() > 0 Тогда  
				Если НЕ ЗначениеЗаполнено(ТекЗаказ.Строки[0].ЗаказНомер) Тогда
					ЗаписьXML.ЗаписатьТекст(Строка(?(ТекЗаказ.СлужебныйТипПункта, 1, 0)));
				Иначе
					ЗаписьXML.ЗаписатьТекст("0"); 
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьТекст(Строка(?(ТекЗаказ.СлужебныйТипПункта, 1, 0))); 
			КонецЕсли;
			// Конец "skipPoint"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "point"
			ЗаписьXML.ЗаписатьНачалоЭлемента("point");
			
			Если ТекПунктСсылка <> ТекЗаказ.ПунктСсылка Тогда
				НомерПункта    = НомерПункта + 1;
				ТекПунктСсылка = ТекЗаказ.ПунктСсылка ;
			КонецЕсли;
			
			// Начало "pointNumber"
			ЗаписьXML.ЗаписатьНачалоЭлемента("pointNumber");
			ЗаписьXML.ЗаписатьТекст(Формат(НомерПункта, "ЧН=0; ЧГ=0"));
			// Конец "pointNumber"
			ЗаписьXML.ЗаписатьКонецЭлемента();

			// Начало "pointName"
			ЗаписьXML.ЗаписатьНачалоЭлемента("pointName");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПунктНаименование);
			// Конец "pointName"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "address"
			ЗаписьXML.ЗаписатьНачалоЭлемента("address");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.ПунктАдрес);
			// Конец "address"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "lat"
			ЗаписьXML.ЗаписатьНачалоЭлемента("lat");
			ЗаписьXML.ЗаписатьТекст(Формат(ТекЗаказ.ПунктШирота, "ЧЦ=21; ЧДЦ=17; ЧРД=.; ЧН=0.00000000000000000; ЧГ=0"));
			// Конец "lat"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "lon"
			ЗаписьXML.ЗаписатьНачалоЭлемента("lon");
			ЗаписьXML.ЗаписатьТекст(Формат(ТекЗаказ.ПунктДолгота, "ЧЦ=21; ЧДЦ=17; ЧРД=.; ЧН=0.00000000000000000; ЧГ=0"));
			// Конец "lon"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "acceptance"
			ЗаписьXML.ЗаписатьНачалоЭлемента("acceptance");
			ЗаписьXML.ЗаписатьТекст(Формат(ТекЗаказ.СоздаватьСкладскойАкт, "ЧРД=.; ЧН=0; ЧГ=0"));
			// Конец "acceptance"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "searchRadius"
			ЗаписьXML.ЗаписатьНачалоЭлемента("searchRadius");
			ЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(ТекЗаказ.ПунктРадиусПоиска), Символы.НПП, ""));
			// Конец "searchRadius"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Конец "point"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если уатЗащищенныеФункцииСервер.ВариантПоставкиКОРП() Тогда 
				ЗаписатьБлокProductivity(ЗаписьXML, ТекЗаказ);
			КонецЕсли;
			
			// Начало "stayDuration"
			ЗаписьXML.ЗаписатьНачалоЭлемента("stayDuration");
			ЗаписьXML.ЗаписатьТекст(СериализоватьВремяЧисломЧЧММ(ТекЗаказ.ВремяСтоянки));
			// Конец "stayDuration"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "arrivalPlan"
			ЗаписьXML.ЗаписатьНачалоЭлемента("arrivalPlan");
			ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекЗаказ.ПрибытиеПлан));
			// Конец "arrivalPlan"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "arrivalFact"
			ЗаписьXML.ЗаписатьНачалоЭлемента("arrivalFact");
			ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекЗаказ.ПрибытиеФакт));
			// Конец "arrivalFact"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "departurePlan"
			ЗаписьXML.ЗаписатьНачалоЭлемента("departurePlan");
			ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекЗаказ.УбытиеПлан));
			// Конец "departurePlan"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "departureFact"
			ЗаписьXML.ЗаписатьНачалоЭлемента("departureFact");
			ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекЗаказ.УбытиеФакт));
			// Конец "departureFact"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "items"
			ЗаписьXML.ЗаписатьНачалоЭлемента("items");
			
			Для Каждого ТекНоменклатура Из ТекЗаказ.Строки Цикл 
				// Начало "item"
				ЗаписьXML.ЗаписатьНачалоЭлемента("item");
				ЗаписьXML.ЗаписатьАтрибут("ID", ТекНоменклатура.ГУИДСтроки);
				
				// Начало "line"
				ЗаписьXML.ЗаписатьНачалоЭлемента("line");
				ЗаписьXML.ЗаписатьТекст(Формат(ТекНоменклатура.НомерСтроки, "ЧН=0; ЧГ=0"));
				// Конец "line"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "name"
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(ТекНоменклатура.Номенклатура);
				// Конец "name"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "unit"
				ЗаписьXML.ЗаписатьНачалоЭлемента("unit");
				ЗаписьXML.ЗаписатьТекст(ТекНоменклатура.ЕдиницаИзмерения);
				// Конец "unit"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "amount"
				ЗаписьXML.ЗаписатьНачалоЭлемента("amount");
				ЗаписьXML.ЗаписатьТекст(Формат(ТекНоменклатура.Количество, "ЧРД=.; ЧН=0; ЧГ=0"));
				// Конец "amount"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "amountPlace"
				ЗаписьXML.ЗаписатьНачалоЭлемента("amountPlace");
				ЗаписьXML.ЗаписатьТекст(Формат(ТекНоменклатура.КоличествоМест, "ЧРД=.; ЧН=0; ЧГ=0"));
				// Конец "amountPlace"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "weight"
				ЗаписьXML.ЗаписатьНачалоЭлемента("weight");
				ЗаписьXML.ЗаписатьТекст(Формат(ТекНоменклатура.ВесБрутто, "ЧРД=.; ЧН=0; ЧГ=0"));
				// Конец "weight"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "volume"
				ЗаписьXML.ЗаписатьНачалоЭлемента("volume");
				ЗаписьXML.ЗаписатьТекст(Формат(ТекНоменклатура.Объем, "ЧРД=.; ЧН=0; ЧГ=0"));
				// Конец "volume"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Начало "isDone"
				ЗаписьXML.ЗаписатьНачалоЭлемента("isDone");
				ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекНоменклатура.Выполнен));
				// Конец "isDone"
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				// Конец "item"
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			// Конец "items"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Начало "orderComment"
			ЗаписьXML.ЗаписатьНачалоЭлемента("orderComment");
			ЗаписьXML.ЗаписатьТекст(ТекЗаказ.КомментарийПоЗаказу);
			// Конец "orderComment"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Конец "order"
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		// Конец "orders"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Конец "routeList"
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "routeLists"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьRouteList()

Процедура ЗаполнитьКонтИнформациюFTLЗаказа(ЗаказСсылка, ПунктСсылка, ЗаписьXML, КонтрагентСсылка = Неопределено)
	
	стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",        ЗаказСсылка);
	Запрос.УстановитьПараметр("ПунктСсылка",   ПунктСсылка);
	
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефонКонтрагента",     стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтрагента);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииEmailКонтрагента",       стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтрагента);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефонКонтактногоЛица", стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииEmailКонтактногоЛица",   стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтактногоЛица);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителяПромежуточныеПункты.ОтправительПолучатель КАК КонтрагентСсылка,
	               |	уатЗаказГрузоотправителяПромежуточныеПункты.КонтактноеЛицо КАК КонтактноеЛицоСсылка,
	               |	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки КАК НомерСтроки,
	               |	уатЗаказГрузоотправителяПромежуточныеПункты.ТипТочкиМаршрута КАК ТипТочкиМаршрута
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	               |ГДЕ
	               |	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка = &Ссылка
	               |	И уатЗаказГрузоотправителяПромежуточныеПункты.Пункт = &ПунктСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Заказ.КонтрагентСсылка КАК КонтрагентСсылка,
	               |	ВТ_Заказ.КонтактноеЛицоСсылка КАК КонтактноеЛицоСсылка,
	               |	ВТ_Заказ.НомерСтроки КАК НомерСтроки,
	               |	ВТ_Заказ.ТипТочкиМаршрута КАК ТипТочкиМаршрута
	               |ИЗ
	               |	ВТ_Заказ КАК ВТ_Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Заказ.КонтрагентСсылка КАК КонтрагентСсылка,
	               |	ВТ_Заказ.КонтактноеЛицоСсылка КАК КонтактноеЛицоСсылка,
	               |	ВЫБОР
	               |		КОГДА КИ_ТелефоныКонтЛицКонтрагентов.Представление ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА КИ_ТелефоныОснКонтЛицКонтрагентов.Представление ЕСТЬ NULL
	               |						ТОГДА ЕСТЬNULL(КИ_ТелефоныКонтрагентов.Представление, """")
	               |					ИНАЧЕ КИ_ТелефоныОснКонтЛицКонтрагентов.Представление
	               |				КОНЕЦ
	               |		ИНАЧЕ КИ_ТелефоныКонтЛицКонтрагентов.Представление
	               |	КОНЕЦ КАК ТелефонКонтрагента,
	               |	ВЫБОР
	               |		КОГДА КИ_ПочтаКонтЛицКонтрагентов.Представление ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА КИ_ПочтаОснКонтЛицКонтрагентов.Представление ЕСТЬ NULL
	               |						ТОГДА ЕСТЬNULL(КИ_ПочтаКонтрагентов.Представление, """")
	               |					ИНАЧЕ КИ_ПочтаОснКонтЛицКонтрагентов.Представление
	               |				КОНЕЦ
	               |		ИНАЧЕ КИ_ПочтаКонтЛицКонтрагентов.Представление
	               |	КОНЕЦ КАК ПочтаКонтрагента,
	               |	ВТ_Заказ.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ВТ_Заказ КАК ВТ_Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КИ_ТелефоныКонтЛицКонтрагентов
	               |		ПО ВТ_Заказ.КонтактноеЛицоСсылка = КИ_ТелефоныКонтЛицКонтрагентов.Ссылка
	               |			И (КИ_ТелефоныКонтЛицКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КИ_ТелефоныКонтЛицКонтрагентов.Вид = &ВидКонтактнойИнформацииТелефонКонтактногоЛица)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КИ_ПочтаКонтЛицКонтрагентов
	               |		ПО ВТ_Заказ.КонтактноеЛицоСсылка = КИ_ПочтаКонтЛицКонтрагентов.Ссылка
	               |			И (КИ_ПочтаКонтЛицКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	               |			И (КИ_ПочтаКонтЛицКонтрагентов.Вид = &ВидКонтактнойИнформацииEmailКонтактногоЛица)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КИ_ТелефоныОснКонтЛицКонтрагентов
	               |		ПО ВТ_Заказ.КонтрагентСсылка.ОсновноеКонтактноеЛицо = КИ_ТелефоныОснКонтЛицКонтрагентов.Ссылка
	               |			И (КИ_ТелефоныОснКонтЛицКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КИ_ТелефоныОснКонтЛицКонтрагентов.Вид = &ВидКонтактнойИнформацииТелефонКонтактногоЛица)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ТелефоныКонтрагентов
	               |		ПО ВТ_Заказ.КонтрагентСсылка = КИ_ТелефоныКонтрагентов.Ссылка
	               |			И (КИ_ТелефоныКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КИ_ТелефоныКонтрагентов.Вид = &ВидКонтактнойИнформацииТелефонКонтрагента)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КИ_ПочтаОснКонтЛицКонтрагентов
	               |		ПО ВТ_Заказ.КонтрагентСсылка.ОсновноеКонтактноеЛицо = КИ_ПочтаОснКонтЛицКонтрагентов.Ссылка
	               |			И (КИ_ПочтаОснКонтЛицКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	               |			И (КИ_ПочтаОснКонтЛицКонтрагентов.Вид = &ВидКонтактнойИнформацииEmailКонтактногоЛица)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ПочтаКонтрагентов
	               |		ПО ВТ_Заказ.КонтрагентСсылка = КИ_ПочтаКонтрагентов.Ссылка
	               |			И (КИ_ПочтаКонтрагентов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	               |			И (КИ_ПочтаКонтрагентов.Вид = &ВидКонтактнойИнформацииEmailКонтрагента)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка          = РезультатЗапроса[1].Выбрать();
	ВыборкаКИ        = РезультатЗапроса[2].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		СтруктураКИ = ЗаполнитьКИМЛFTL(ВыборкаКИ, Выборка);
		
		КонтрагентСсылка = Выборка.КонтрагентСсылка;
		Если ЗначениеЗаполнено(СтруктураКИ.ТелефонКонтрагента) Или ЗначениеЗаполнено(СтруктураКИ.ПочтаКонтрагента) Тогда 
			// Начало "contact"
			ЗаписьXML.ЗаписатьНачалоЭлемента("contact");
			Попытка
				ЗаписьXML.ЗаписатьАтрибут("ID", Строка(Выборка.КонтрагентСсылка.УникальныйИдентификатор()));
			Исключение
				ЗаписьXML.ЗаписатьАтрибут("ID", Строка(Новый УникальныйИдентификатор));
			КонецПопытки;
		
			// Начало "name"			
			ЗаписьXML.ЗаписатьНачалоЭлемента("name");
			Если ЗначениеЗаполнено(Выборка.КонтактноеЛицоСсылка) Тогда 
				ЗаписьXML.ЗаписатьТекст(Выборка.КонтактноеЛицоСсылка.Наименование);
			ИначеЕсли ЗначениеЗаполнено(Выборка.КонтрагентСсылка.ОсновноеКонтактноеЛицо) Тогда
				ЗаписьXML.ЗаписатьТекст(Выборка.КонтрагентСсылка.ОсновноеКонтактноеЛицо.Наименование);
			Иначе 
				ЗаписьXML.ЗаписатьТекст(Выборка.КонтрагентСсылка.Наименование);
			КонецЕсли;

			// Конец "name"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если ЗначениеЗаполнено(СтруктураКИ.ТелефонКонтрагента) Тогда 
				// Начало "phone"
				ЗаписьXML.ЗаписатьНачалоЭлемента("phone");
				ЗаписьXML.ЗаписатьТекст(СтруктураКИ.ТелефонКонтрагента);
				// Конец "phone"
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураКИ.ПочтаКонтрагента) Тогда 
				// Начало "email"
				ЗаписьXML.ЗаписатьНачалоЭлемента("email");
				ЗаписьXML.ЗаписатьТекст(СтруктураКИ.ПочтаКонтрагента);
				// Конец "email"
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			// Начало "role"
			ЗаписьXML.ЗаписатьНачалоЭлемента("role");
			
			Если Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				ЗаписьXML.ЗаписатьТекст("sender");
			ИначеЕсли Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				ЗаписьXML.ЗаписатьТекст("receiver");
			Иначе
				ЗаписьXML.ЗаписатьТекст("partner");
			КонецЕсли;
			// Конец "role"
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// Конец "contact"
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция предназначена для формирования ответа web-сервера на выполнение метода "SendImage". Формирует xml-структуру,
// содержащую данные о созданных картинках
//
// Параметры:
//  СозданныеФайлы - массив - массив уникальных идентификаторов
//
// Возвращаемое значение:
//   Строка      - xml-структура, сформированная на основе параметра "СозданныеФайлы"
//
Функция СериализоватьSendImage(Знач СозданныеФайлы)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	Для Каждого ТекФайл Из СозданныеФайлы Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("image");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекФайл));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция предназначена для преобразования таблицы с причинами закрытия заказов в xml-структуру
//
// Параметры:
//  ТабПричинЗакрытия - таблица значений - таблица, содержащая причины закрытия заказов
//
// Возвращаемое значение:
//   Строка      - xml-структура, сформированная на основе параметра "ТабПричинЗакрытия"
//
Функция СериализоватьGetOrderResults(Знач ТабПричинЗакрытия)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "results"
	ЗаписьXML.ЗаписатьНачалоЭлемента("results");
	
	Для Каждого ТекСтр Из ТабПричинЗакрытия Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("result");
		
		ЗаписьXML.ЗаписатьАтрибут("ID", Строка(ТекСтр.Ссылка.УникальныйИдентификатор()));
		
		ЗаписьXML.ЗаписатьТекст(ТекСтр.Наименование);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "results"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьGetOrderResults()

// Функция предназначена для получение списка закрепленных ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьVehicles(Знач ТабVehicles)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "CarServices"
	ЗаписьXML.ЗаписатьНачалоЭлемента("vehicles");
	
	Для Каждого ТекСтр Из ТабVehicles Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Vehicle");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("VehicleID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ТС.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("VehicleName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Наименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("trailer");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекСтр.Прицеп));
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		Если ЗначениеЗаполнено(ТекСтр.ТСРодитель) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("parentVehicleID");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ТСРодитель.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelTank");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекСтр.НаличиеТопливногоБака));
		ЗаписьXML.ЗаписатьКонецЭлемента();
				
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "Vehicles"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение списка закрепленных ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьRepairTypes(Знач ТабRepairTypes)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "CarServices"
	ЗаписьXML.ЗаписатьНачалоЭлемента("RepairTypes");
	
	Для Каждого ТекСтр Из ТабRepairTypes Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("RepairType");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("RepairTypeID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("RepairTypeName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "RepairTypes"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение списка закрепленных ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьGetStatus(Знач ТабStatus)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "CarServices"
	ЗаписьXML.ЗаписатьНачалоЭлемента("Statuses");
	
	Для Каждого ТекСтр Из ТабStatus Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Status");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("StatusID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("StatusName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ХранилищеЦветФона = ТекСтр.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				StatusColor = ПолучитьЦвет(ДанныеЦветФона.Красный, ДанныеЦветФона.Зеленый, ДанныеЦветФона.Синий);
			КонецЕсли;
		Иначе
			StatusColor = "#00000000";
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("StatusColor");
		ЗаписьXML.ЗаписатьТекст(Строка(StatusColor));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("NeedComment");
		ЗаписьXML.ЗаписатьТекст(?(ТекСтр.Ссылка = Справочники.уатСтатусы_уэ.Подтвержден, "false", "true"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "RepairTypes"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение заявок на ремонт по ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьOrdersForRepair(Знач OrdersForRepair)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");

	// Начало "OrdersForRepairs"
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrdersForRepairs");
		
	Для Каждого ТекСтр Из OrdersForRepair Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OrderForRepair");
		ЗаписьXML.ЗаписатьНачалоЭлемента("orderID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("status");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.СтатусВыполненияИмяПредопределенныхДанных));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("driverStatusID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.СтатусПодтвержденияВодителем.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("driverStatusName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.СтатусПодтвержденияВодителем));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("driverComment");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.КомментарийВодителя));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("statusName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.СтатусВыполнения));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("editable");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(?(ТекСтр.СтатусВыполнения = Справочники.уатСтатусы_уэ.Новый
			И НЕ ТекСтр.ДругойВодитель, Истина, Ложь)));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("orderNumber");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Номер));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		// Начало "repairStartDate"
		ЗаписьXML.ЗаписатьНачалоЭлемента("repairStartDate");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекСтр.ДатаНачала));
		// Конец "repairStartDate"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "repairFinishDate"
		ЗаписьXML.ЗаписатьНачалоЭлемента("repairFinishDate");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(ТекСтр.ДатаОкончания));
		// Конец "repairFinishDate"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ТС.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ТСНаименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("driver");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Водитель));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("repairTypeID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ВидОбслуживания.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("repairTypeName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ВидОбслуживания));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("RepairMethod");
		ЗаписьXML.ЗаписатьТекст(Строка(?(ТекСтр.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис, "0", "1")));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("carServiceID");
		Если НЕ ЗначениеЗаполнено(ТекСтр.Контрагент) Тогда
			ЗаписьXML.ЗаписатьТекст("00000000-0000-0000-0000-000000000000");
		Иначе
			ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Контрагент.УникальныйИдентификатор()));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("carServiceName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Контрагент));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("carServiceAddress");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.МестоРемонта));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "repairReason"
		ЗаписьXML.ЗаписатьНачалоЭлемента("repairReason");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ПричинаОбращения));
		// Конец "repairReason"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("works");
		Для Каждого ТекСтрРаботы Из ТекСтр.Работы Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("work");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекСтрРаботы.Работа));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("carParts");
		Для Каждого ТекСтрРаботы Из ТекСтр.Материалы Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("carPart");
			ЗаписьXML.ЗаписатьТекст(Строка(ТекСтрРаботы.Номенклатура));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "OrdersForRepair"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение списка закрепленных ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьFuellingTypes(Знач ТабFuellingTypes)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "FuellingTypes"
	ЗаписьXML.ЗаписатьНачалоЭлемента("FuellingTypes");
	
	Для Каждого ТекСтр Из ТабFuellingTypes Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FuellingType");
		
		ИмяПеречисления = ТекСтр.Ссылка.Метаданные().Имя;
		
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ТекСтр.Ссылка);
		
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

		ЗаписьXML.ЗаписатьНачалоЭлемента("FuellingTypeID");
		ЗаписьXML.ЗаписатьТекст(Строка(ИмяЗначенияПеречисления));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FuellingTypeName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "FuellingTypes"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение списка топливных карт
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьFuelCards(Знач FuelCards)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "FuelCards"
	ЗаписьXML.ЗаписатьНачалоЭлемента("FuelCards");
	
	Для Каждого ТекСтр Из FuelCards Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FuelCard");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCardID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Значение.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCardName");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(Строка(ТекСтр.Значение)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "FuelCards"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение списка топливных карт
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьAllFuelCards(Знач FuelCards, ТС)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "FuelCards"
	ЗаписьXML.ЗаписатьНачалоЭлемента("FuelCards");
	
	Для Каждого ТекСтр Из FuelCards Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FuelCard");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
		ЗаписьXML.ЗаписатьТекст(Строка(?(ТипЗнч(ТекСтр.Значение.КомуВыдана) = Тип("СправочникСсылка.уатТС"),
			ТекСтр.Значение.КомуВыдана.УникальныйИдентификатор(), ТС.УникальныйИдентификатор())));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("issuedBy");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Значение.КемВыдана.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCardID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Значение.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCardName");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(Строка(ТекСтр.Значение)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "FuelCards"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

// Функция предназначена для получение АЗС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьGasStations(Знач GasStations)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "GasStations"
	ЗаписьXML.ЗаписатьНачалоЭлемента("GasStations");
	
	Для Каждого ТекСтр Из GasStations Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("GasStation");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("GasStationID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Ссылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("GasStationName");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(Строка(ТекСтр.Ссылка)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "GasStations"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция предназначена для получение списка закрепленных ТС
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьFuels(Знач Fuels)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "Fuels"
	ЗаписьXML.ЗаписатьНачалоЭлемента("Fuels");
	
	Для Каждого ТекСтр Из Fuels Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Fuel");

		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Наименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mainFuel");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекСтр.ОсновноеТопливо));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "Fuels"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

Функция СериализоватьAllFuels(Знач Fuels)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");
	
	// Начало "Fuels"
	ЗаписьXML.ЗаписатьНачалоЭлемента("Fuels");
	
	Для Каждого ТекСтр Из Fuels Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Fuel");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.ТС.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.ТипЗаправки) Тогда
			ИмяЗначенияПеречисления = "Топливо";
		Иначе
			ИндексЗначенияПеречисления = Перечисления.уатВидыДвиженияГСМ.Индекс(ТекСтр.ТипЗаправки);
			
			ИмяЗначенияПеречисления = Метаданные.Перечисления.уатВидыДвиженияГСМ.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		КонецЕсли;
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuellingTypeID");
		ЗаписьXML.ЗаписатьТекст(Строка(ИмяЗначенияПеречисления));
		ЗаписьXML.ЗаписатьКонецЭлемента();
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelID");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelName");
		ЗаписьXML.ЗаписатьТекст(Строка(ТекСтр.Наименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mainFuel");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекСтр.ОсновноеТопливо));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	// Конец "Fuels"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()


// Функция предназначена для получение путевых листов
//
// Параметры:
//  ТабVehicles - таблица значений - таблица, содержащая данные об автосервисах
//
// Возвращаемое значение:
//   Строка  - xml-структура, сформированная на основе параметра "ТабVehicles"
//
Функция СериализоватьWaybills(Знач Waybill, СоответвиеПрицепов)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	// Начало "response"
	ЗаписьXML.ЗаписатьНачалоЭлемента("response");

	// Начало "OrdersForRepairs"
	ЗаписьXML.ЗаписатьНачалоЭлемента("Waybills");
		
	Пока Waybill.Следующий() Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Waybill");
		ЗаписьXML.ЗаписатьНачалоЭлемента("orderID");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.Ссылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		флЭД  = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("QR");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(?(НЕ флЭД, Ложь, Истина)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("status");
		ЗаписьXML.ЗаписатьТекст(Строка(?(Waybill.ЗакрытВодителем, Нстр("en = 'Closed'; ru = 'Закрыт'"), Нстр("en = 'Open'; ru = 'Открыт'"))));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("editable");
		ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(?(Waybill.ЗакрытВодителем, Ложь, Истина)));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("orderNumber");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.Номер));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		// Начало "waybillStartDate"
		ЗаписьXML.ЗаписатьНачалоЭлемента("waybillStartDate");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(Waybill.ДатаВыезда));
		// Конец "waybillStartDate"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Начало "waybillFinishDate"
		ЗаписьXML.ЗаписатьНачалоЭлемента("waybillFinishDate");
		ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(Waybill.ДатаВозвращения));
		// Конец "waybillFinishDate"
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.ТС.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleName");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.ТСНаименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("waybillType");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.ВидПЛ));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("driver");
		ЗаписьXML.ЗаписатьТекст(Строка(Waybill.Водитель));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Установленные прицепы (оборудование), кроме основного ТС
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("vehicles");
		
		МассивПрицепов = СоответвиеПрицепов.Получить(Waybill.Ссылка);
		Если МассивПрицепов <> Неопределено Тогда
			Для Каждого ТекПрицеп Из МассивПрицепов Цикл  
				ЗаписьXML.ЗаписатьНачалоЭлемента("vehicle");
				ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
				ЗаписьXML.ЗаписатьТекст(Строка(ТекПрицеп.ТС.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьКонецЭлемента(); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleName");
				ЗаписьXML.ЗаписатьТекст(Строка(ТекПрицеп.ТСНаименование));
				ЗаписьXML.ЗаписатьКонецЭлемента(); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("trailer");
				ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(Истина));
				ЗаписьXML.ЗаписатьКонецЭлемента(); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("fuelTank");
				ЗаписьXML.ЗаписатьТекст(СериализоватьБулево(ТекПрицеп.НаличиеТопливногоБака));
				ЗаписьXML.ЗаписатьКонецЭлемента(); 
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла; 
		КонецЕсли;
	
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("odometerDeparture");
		ЗаписьXML.ЗаписатьТекст(Формат(Waybill.СпидометрВыезда, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("odometerReturn");
		ЗаписьXML.ЗаписатьТекст(Формат(Waybill.СпидометрВозвращения, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ОстатокТопливаВыезд   = 0;
		ОстатокТопливаВозврат = 0;
		ВыдатьКоличествоГорючего = 0;
		Для Каждого ТекРасход Из Waybill.Ссылка.РасходГСМ Цикл
			Если Waybill.ТС = ТекРасход.ТС И Waybill.ТранспортноеСредствоМодельОсновноеТопливо = ТекРасход.ГСМ Тогда
				ОстатокТопливаВыезд   = ТекРасход.ОстатокПриВыезде;
				ОстатокТопливаВозврат = ТекРасход.ОстатокПриВозвращении;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("remainOfFuelDeparture");
		ЗаписьXML.ЗаписатьТекст(Формат(ОстатокТопливаВыезд, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьНачалоЭлемента("remainOfFuelReturn");
		ЗаписьXML.ЗаписатьТекст(Формат(ОстатокТопливаВозврат, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Заправки = Waybill.Выбрать();
		ЗаписьXML.ЗаписатьНачалоЭлемента("fueling");
		Пока Заправки.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Заправки.Заправка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fueling");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fuellingID");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.Заправка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("lineNumber");
			ЗаписьXML.ЗаписатьТекст(Формат(Заправки.НомерСтроки, "ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("gasStationID");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.АЗС.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("gasStation");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.АЗС));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleID");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ЗаправкаТС.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("vehicleName");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ЗаправкаТСНаименование));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ИмяПеречисления = Заправки.ВидДвиженияГСМ.Метаданные().Имя;
			
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(Заправки.ВидДвиженияГСМ);
			
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fuellingTypeID");
			ЗаписьXML.ЗаписатьТекст(Строка(ИмяЗначенияПеречисления));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ЗаписьXML.ЗаписатьНачалоЭлемента("fuellingType");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ВидДвиженияГСМ));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fuelID");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ГСМ.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ЗаписьXML.ЗаписатьНачалоЭлемента("fuel");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ГСМ));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fuellingDate");
			ЗаписьXML.ЗаписатьТекст(СериализоватьДатаВремя(Заправки.ДатаЗаправки));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCardID");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ПластиковаяКарта.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ЗаписьXML.ЗаписатьНачалоЭлемента("fuelCard");
			ЗаписьXML.ЗаписатьТекст(Строка(Заправки.ПластиковаяКарта));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("quantity");
			ЗаписьXML.ЗаписатьТекст(Формат(Заправки.Количество, "ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ВыдатьКоличествоГорючего = ВыдатьКоличествоГорючего + Заправки.Количество;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("sum");
			ЗаписьXML.ЗаписатьТекст(Формат(Заправки.Сумма, "ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("fuelQuantity");
		ЗаписьXML.ЗаписатьТекст(Формат(ВыдатьКоличествоГорючего, "ЧРД=.; ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Конец "Waybills"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Конец "response"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьCarServices()

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданийИПодписокНаСобытия

Процедура ПередЗаписьюМаршрутногоЛистаОтправкаPUSH(Источник, ЗарегистрироватьВодителей)
	
	Если ТипЗнч(Источник.Водитель1) = Тип("СправочникСсылка.Сотрудники") Тогда 
		ЗарегистрироватьВодителей.Добавить(Источник.Водитель1.ФизическоеЛицо);
	Иначе 
		ЗарегистрироватьВодителей.Добавить(Источник.Водитель1);
	КонецЕсли;
	
	Если ТипЗнч(Источник.Водитель2) = Тип("СправочникСсылка.Сотрудники") Тогда 
		ЗарегистрироватьВодителей.Добавить(Источник.Водитель2.ФизическоеЛицо);
	Иначе 
		ЗарегистрироватьВодителей.Добавить(Источник.Водитель2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюЗаявкиНаРемонтОтправкаPUSH(Источник, ЗарегистрироватьВодителей)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.ТС = &ТС
	|	И НЕ уатВодителиНаЛинии.ОбновитьЗаявкиНаРемонт";
	Запрос.УстановитьПараметр("ТС", Источник.ТС);
	
	ЗарегистрироватьВодителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецПроцедуры

Процедура ЗарегистрироватьНеобходимостьОбновленияМаршрутныхЛистов(ВодителиКРегистрации, ТС)
	
	Для Каждого ВодительЗарегистрировать Из ВодителиКРегистрации Цикл 
		НаборЗаписей = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВодительЗарегистрировать);
		НаборЗаписей.Отбор.ТС.Установить(ТС);

		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() И Не НаборЗаписей[0].ОбновитьМаршрутныеЛисты Тогда 
			НаборЗаписей[0].ОбновитьМаршрутныеЛисты = Истина;
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНеобходимостьОбновленияЗаявокНаРемонт(ВодителиКРегистрации, ТС)
	
	Для Каждого ВодительЗарегистрировать Из ВодителиКРегистрации Цикл 
		НаборЗаписей = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВодительЗарегистрировать);
		НаборЗаписей.Отбор.ТС.Установить(ТС);

		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() И Не НаборЗаписей[0].ОбновитьЗаявкиНаРемонт Тогда 
			НаборЗаписей[0].ОбновитьЗаявкиНаРемонт = Истина;
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакОтправлено(НаборИдентификаторов, ОтправкаМЛ, ОтправкаСообщений, ОтправкаЗР)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("pushIDs", НаборИдентификаторов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо,
	|	уатВодителиНаЛинии.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.pushID В(&pushIDs)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НаборЗаписи = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписи.Отбор.ТС.Установить(Выборка.ТС);
		НаборЗаписи.Прочитать();
		
		Если НаборЗаписи.Количество() Тогда 
			Если ОтправкаМЛ Тогда 
				НаборЗаписи[0].ОбновитьМаршрутныеЛисты = Ложь;
			ИначеЕсли ОтправкаСообщений Тогда 
				НаборЗаписи[0].ОбновитьСообщения = Ложь;
			ИначеЕсли ОтправкаЗР Тогда
				НаборЗаписи[0].ОбновитьЗаявкиНаРемонт = Ложь;
			КонецЕсли;
			НаборЗаписи[0].ДатаПоследнейОтправки = ТекущаяДата();
			
			НаборЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура GoogleGCM_SendMessage(НаборИдентификаторов, НеобходимостьЗагрузкиМЛ, НеобходимостьЗагрузкиСообщений, НеобходимостьЗагрузкиЗР)
	
	ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	                         
	Попытка
		HTTPСоединение = Новый HTTPСоединение("fcm.googleapis.com",,,,, 5, ЗащищенноеСоединениеOpenSSL);
	Исключение
		ТекстНСТР = НСтр("en='Could not connect to Google GCM server';ru='Неудалось установить соединение с сервером Google GCM'") + Символы.ПС + НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке("GoogleGCM_SendMessage", ТекстНСТР);
		Возврат;
	КонецПопытки;
	
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапроса.Вставить("Authorization", "key=AAAA-ExmjUI:APA91bHQvFEHkR32rBK4M2u-oojGHQ6d2yUNh8KHYNVcBpFmzluetyM4RYBSCZh_vFYMGce_UuW_Kcu93c_d4S4K0pkiO4-VZ0oVMQpxSMavdpCjST1BuRMJ70qFVpcLwat1Alr99E0H");
	ЗаголовкиЗапроса.Вставить("Content-Type",  "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос("/fcm/send", ЗаголовкиЗапроса);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("registration_ids");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого Идентификатор Из НаборИдентификаторов Цикл 
		ЗаписьJSON.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("data");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("message");
	ЗаписьJSON.ЗаписатьЗначение(НеобходимостьЗагрузкиСообщений);
	ЗаписьJSON.ЗаписатьИмяСвойства("route_list");
	ЗаписьJSON.ЗаписатьЗначение(НеобходимостьЗагрузкиМЛ);
	ЗаписьJSON.ЗаписатьИмяСвойства("Order_for_repair");
	ЗаписьJSON.ЗаписатьЗначение(НеобходимостьЗагрузкиЗР);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть(),, ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Если Не Ответ.КодСостояния = 200 Тогда 
			ТекстНСТР = НСтр("en='Error while sending data to the server. Error code:';ru='Ошибка при отправке данных на сервер. Код ошибки:'") + " " + Ответ.КодСостояния;
			ЗаписатьСообщениеОбОшибке("GoogleGCM_SendMessage", ТекстНСТР);
			HTTPСоединение = Неопределено;
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
		
		Если ДанныеОтвета.failure <> 0 Тогда 
			ТекстНСТР = НСтр("en='Server response:';ru='Ответ сервера:'") + " " + Ответ.ПолучитьТелоКакСтроку();
			ЗаписатьСообщениеОбОшибке("GoogleGCM_SendMessage", ТекстНСТР);
			HTTPСоединение = Неопределено;
			Возврат;
		КонецЕсли;
		
	Исключение
		ТекстНСТР = НСтр("en='Exception has occurred when sending the request to Google GCM';ru='Возникла исключительная ситуация при отправке запроса в Google GCM'") + Символы.ПС + НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке("GoogleGCM_SendMessage", ТекстНСТР);
		HTTPСоединение = Неопределено;
		Возврат;
	КонецПопытки;
	
	HTTPСоединение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьПараметрыТЛЭ(МаршЛистОб, НайдСтр, мВыборкаЗаказы, ДанныеМодификацииМЛ)
	
	СтрокиМодификации = ДанныеМодификацииМЛ.НайтиСтроки(Новый Структура("routeListRef, lineID", мВыборкаЗаказы.МаршрутныйЛист, Строка(мВыборкаЗаказы.GUIDСтроки)));
	Если СтрокиМодификации.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокиМодификации[0].orderResultRef) Тогда 
		НайдСтр.ПричинаЗакрытияЗаказа = СтрокиМодификации[0].orderResultRef;
	КонецЕсли;
	
	Если уатЗащищенныеФункцииСервер.ВариантПоставкиКОРП() Тогда 
		ПараметрВыработки1 = НайдСтр.ПараметрВыработки1;
		ПараметрВыработки2 = НайдСтр.ПараметрВыработки2;
		
		Если ЗначениеЗаполнено(СтрокиМодификации[0].productivityRef1) Тогда 
			Если ПараметрВыработки1 = СтрокиМодификации[0].productivityRef1 Тогда 
				НайдСтр.Выработка1 = СтрокиМодификации[0].productivityVal1;
			ИначеЕсли ПараметрВыработки2 = СтрокиМодификации[0].productivityRef1 Тогда 
				НайдСтр.Выработка2 = СтрокиМодификации[0].productivityVal1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиМодификации[0].productivityRef2) Тогда 
			Если ПараметрВыработки1 = СтрокиМодификации[0].productivityRef2 Тогда 
				НайдСтр.Выработка1 = СтрокиМодификации[0].productivityVal2;
			ИначеЕсли ПараметрВыработки2 = СтрокиМодификации[0].productivityRef2 Тогда 
				НайдСтр.Выработка2 = СтрокиМодификации[0].productivityVal2;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьБлокProductivity(ЗаписьXML, СтрокаЗаказа)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЗаказа.ПараметрВыработки1)
		И НЕ ЗначениеЗаполнено(СтрокаЗаказа.ПараметрВыработки2) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаЗаказа.Строки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрВыработки1 = СтрокаЗаказа.ПараметрВыработки1;
	ПараметрВыработки2 = СтрокаЗаказа.ПараметрВыработки2;
	
	// Начало "productivity"
	ЗаписьXML.ЗаписатьНачалоЭлемента("productivity");
	
	Если НЕ ПараметрВыработки1 = Неопределено Тогда 
		// Начало "item"
		ЗаписьXML.ЗаписатьНачалоЭлемента("item");
		
		ЗаписьXML.ЗаписатьАтрибут("ID",     Строка(ПараметрВыработки1.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("name",   ПараметрВыработки1.Наименование);
		ЗаписьXML.ЗаписатьАтрибут("isBool", СериализоватьБулево(ПараметрВыработки1.ОтображениеВВидеФлага));
		
		ЗаписьXML.ЗаписатьТекст(Формат(СтрокаЗаказа.Выработка1, "ЧРД=.; ЧН=0; ЧГ=0"));
		
		// Конец "item"
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если Не ПараметрВыработки2 = Неопределено Тогда 
		// Начало "item"
		ЗаписьXML.ЗаписатьНачалоЭлемента("item");
		
		ЗаписьXML.ЗаписатьАтрибут("ID",     Строка(ПараметрВыработки2.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("name",   ПараметрВыработки2.Наименование);
		ЗаписьXML.ЗаписатьАтрибут("isBool", СериализоватьБулево(ПараметрВыработки2.ОтображениеВВидеФлага));
		
		ЗаписьXML.ЗаписатьТекст(Формат(СтрокаЗаказа.Выработка2, "ЧРД=.; ЧН=0; ЧГ=0"));
		
		// Конец "item"
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Конец "productivity"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЗаписатьКоординатыВРегистрТекущегоМестоположения(Знач ДанныеАвторизации, Знач ТабКоординат, resultCode)
	
	// Текущее местоположение
	ТабКоординат.Сортировать("Дата УБЫВ");
	
	Попытка
		МенЗаписи = РегистрыСведений.уатТекущиеКоординатыМП.СоздатьМенеджерЗаписи();
		
	Исключение
		ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ОписаниеОшибки());
		resultCode = 35;
		
		Возврат Ложь;
	КонецПопытки;
	
	МенЗаписи.ТС          = ДанныеАвторизации.ТС;
	МенЗаписи.Дата        = ТабКоординат[0].Дата;
	МенЗаписи.Лат         = ТабКоординат[0].Лат;
	МенЗаписи.Лон         = ТабКоординат[0].Лон;
	МенЗаписи.Алт         = ТабКоординат[0].Алт;
	МенЗаписи.Скорость    = ТабКоординат[0].Скорость;
	МенЗаписи.Направление = ТабКоординат[0].Направление;
	
	Попытка
		МенЗаписи.Записать(Истина);
	Исключение
		ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ОписаниеОшибки());
		resultCode = 35;
		
		Возврат Ложь;
	КонецПопытки;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьКоординатыВРегистрТекущегоМестоположения()

Функция ЗаписатьКоординатыВРегистрИсторииМестоположения(Знач ДанныеАвторизации, Знач ТабКоординат, resultCode)
	
	Для Каждого ТекКоординаты Из ТабКоординат Цикл 
		Попытка
			МенЗаписи = РегистрыСведений.уатИсторияКоординатМП.СоздатьМенеджерЗаписи();
			
		Исключение
			ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ОписаниеОшибки());
			resultCode = 35;
			
			Возврат Ложь;
		КонецПопытки;
		
		МенЗаписи.Дата        = ТекКоординаты.Дата;
		МенЗаписи.Время       = ТекКоординаты.Дата;
		МенЗаписи.ТС          = ДанныеАвторизации.ТС;
		МенЗаписи.Лат         = ТекКоординаты.Лат;
		МенЗаписи.Лон         = ТекКоординаты.Лон;
		МенЗаписи.Алт         = ТекКоординаты.Алт;
		МенЗаписи.Скорость    = ТекКоординаты.Скорость;
		МенЗаписи.Направление = ТекКоординаты.Направление;
		
		Попытка
			МенЗаписи.Записать(Истина);
		Исключение
			ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ОписаниеОшибки());
			resultCode = 35;
			
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьКоординатыВРегистрИсторииМестоположения()

Функция ЗаписатьКоординатыВоВнешнююБазу(Знач ДанныеАвторизации, Знач ТабКоординат, Знач ДанныеПодключения, resultCode)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=SQLOLEDB.1;Password=" + ДанныеПодключения.Пароль 
	+ ";Persist Security Info=True;User ID=" + ДанныеПодключения.Логин 
	+ ";Initial Catalog=" + ДанныеПодключения.ИмяБазы 
	+ ";Data Source=" + ДанныеПодключения.АдресСервера;
	Connection.ConnectionString = СтрокаПодключения;
	
	Попытка
		Connection.Open();
	Исключение
		ТекстНСТР = НСтр("en='Error of opening connection to external DB.';ru='Ошибка открытия подключения к внешней БД.'") + Символы.ПС +" " + НСтр("en='Connection line:';ru='Строка подлючения:'") + " " +
					СтрокаПодключения + "." + Символы.ПС + " " + НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ТекстНСТР);
		resultCode = 35;
		Возврат Ложь;
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	Command.CommandTimeout = 0;
	ТекстКомманды = "";
	
	Для Каждого ТекКоординаты Из ТабКоординат Цикл 
		СтрокаЛат         = СтрЗаменить(Строка(ТекКоординаты.Лат), ",", ".");
		СтрокаЛон         = СтрЗаменить(Строка(ТекКоординаты.Лон), ",", ".");
		СтрокаАлт         = СтрЗаменить(Строка(ТекКоординаты.Алт), ",", ".");
		СтрокаСкорость    = СтрЗаменить(Строка(ТекКоординаты.Скорость), ",", ".");
		СтрокаНаправление = СтрЗаменить(Строка(ТекКоординаты.Направление), ",", ".");
		
		ТекстКомманды = ТекстКомманды + "INSERT INTO " + ДанныеПодключения.ИмяБазы
			+ ".dbo.GPSData VALUES ('" + Формат(ТекКоординаты.Дата, "ДФ=yyyy-MM-ddTHH:mm:ss") + "', '" + ДанныеАвторизации.ТС
			+ "', " + СтрокаЛат + ", " + СтрокаЛон + ", " + СтрокаАлт + ", " + СтрокаСкорость + ", " + СтрокаНаправление + "); ";
	КонецЦикла;
	
	Command.CommandText = ТекстКомманды;
	
	Попытка
		Recordset = Command.Execute();
	Исключение
		Connection.Close();
		ТекстНСТР = НСтр("en='Error occurred while executing coordinate record in external DB.';ru='Ошибка при выполнении записии координат во внешнюю БД.'") + " " + Символы.ПС +" " + НСтр("en='Command text:';ru='Текст команды:'") + " " + 
					ТекстКомманды + "." + Символы.ПС + " " + НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
		ЗаписатьСообщениеОбОшибке("SetVehiclePositions", ТекстНСТР);
		resultCode = 35;
		Возврат Ложь;
	КонецПопытки;
	
	Connection.Close();
	
	resultCode = 0;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьКоординатыВоВнешнююБазу()

Процедура ОбновитьВремяПоследнегоСобытия(Знач ДанныеАвторизации)
	
	НаборЗаписейРСВодители = РегистрыСведений.уатВодителиНаЛинии.СоздатьНаборЗаписей();
	НаборЗаписейРСВодители.Отбор.ФизическоеЛицо.Установить(ДанныеАвторизации.ФизическоеЛицо);
	НаборЗаписейРСВодители.Отбор.ТС.Установить(ДанныеАвторизации.ТС);
	НаборЗаписейРСВодители.Прочитать();
	
	Если НаборЗаписейРСВодители.Количество() Тогда 
		НаборЗаписейРСВодители[0].ДатаПоследнегоСобытия = ТекущаяДата();
		НаборЗаписейРСВодители.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьМодельИВерсиюОСМобильногоУстройства(МобильноеУстройство, Модель, ВерсияОС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Терминал", МобильноеУстройство);
	Запрос.УстановитьПараметр("Модель", Модель);
	Запрос.УстановитьПараметр("ВерсияОС", ВерсияОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМобильныеУстройства.Модель КАК Модель,
	|	уатМобильныеУстройства.ВерсияОС КАК ВерсияОС,
	|	уатМобильныеУстройства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМобильныеУстройства КАК уатМобильныеУстройства
	|ГДЕ
	|	уатМобильныеУстройства.Ссылка = &Терминал
	|	И (уатМобильныеУстройства.Модель <> &Модель
	|			ИЛИ уатМобильныеУстройства.ВерсияОС <> &ВерсияОС)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		ТерминалОбъект          = МобильноеУстройство.ПолучитьОбъект();
		ТерминалОбъект.Модель   = Модель;
		ТерминалОбъект.ВерсияОС = ВерсияОС;
		
		ТерминалОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЦвет(Знач Красный, Знач Зеленый, Знач Синий) Экспорт
	
	ЦветСтр = "#"+ДесятичноеВШестнадцатеричное(Красный)+ДесятичноеВШестнадцатеричное(Зеленый)+ДесятичноеВШестнадцатеричное(Синий);
	
	Возврат ЦветСтр;
	
КонецФункции // ПолучитьЦветLeaflet()

Функция ДесятичноеВШестнадцатеричное(Знач дЧисло)
	
	Если дЧисло = 0 Тогда 
		Возврат "00";
	КонецЕсли;
	
	База = 16;
	Результат = "";
	Пока дЧисло <> 0 Цикл
		Поз =дЧисло % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		дЧисло = Цел(дЧисло / База);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда 
		Возврат "0" + Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьСкладскиеАкты(тблСкладскиеДанные, МаршрутныйЛистОбъект)
	
	ДанныеСкладскихАктов = тблСкладскиеДанные.Скопировать(, "МаршрутныйЛист, ВидОперации, Пункт, НачалоОперации, ОкончаниеОперации");
	ДанныеСкладскихАктов.Свернуть("МаршрутныйЛист, ВидОперации, Пункт, НачалоОперации, ОкончаниеОперации");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСкладскихАктов.ВидОперации КАК ВидОперации,
	|	ДанныеСкладскихАктов.Пункт КАК Пункт,
	|	ДанныеСкладскихАктов.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ДанныеСкладскихАктов.НачалоОперации КАК НачалоОперации,
	|	ДанныеСкладскихАктов.ОкончаниеОперации КАК ОкончаниеОперации
	|ПОМЕСТИТЬ ДанныеСкладскихАктов
	|ИЗ
	|	&ДанныеСкладскихАктов КАК ДанныеСкладскихАктов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(уатАктОтгрузки_уэ.Ссылка, ЗНАЧЕНИЕ(Документ.уатАктОтгрузки_уэ.ПустаяСсылка)) КАК Ссылка,
	|	ДанныеСкладскихАктов.ВидОперации КАК ВидОперации,
	|	ДанныеСкладскихАктов.Пункт КАК Пункт,
	|	ДанныеСкладскихАктов.МаршрутныйЛист КАК МаршрутныйЛист
	|ПОМЕСТИТЬ втСкладскиеАкты
	|ИЗ
	|	ДанныеСкладскихАктов КАК ДанныеСкладскихАктов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатАктОтгрузки_уэ КАК уатАктОтгрузки_уэ
	|		ПО ДанныеСкладскихАктов.ВидОперации = уатАктОтгрузки_уэ.ВидОперации
	|			И ДанныеСкладскихАктов.Пункт = уатАктОтгрузки_уэ.Пункт
	|			И ДанныеСкладскихАктов.МаршрутныйЛист = уатАктОтгрузки_уэ.МаршрутныйЛист
	|ГДЕ
	|	уатАктОтгрузки_уэ.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(уатАктПриемки_уэ.Ссылка, ЗНАЧЕНИЕ(Документ.уатАктПриемки_уэ.ПустаяСсылка)),
	|	ДанныеСкладскихАктов.ВидОперации,
	|	ДанныеСкладскихАктов.Пункт,
	|	ДанныеСкладскихАктов.МаршрутныйЛист
	|ИЗ
	|	ДанныеСкладскихАктов КАК ДанныеСкладскихАктов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатАктПриемки_уэ КАК уатАктПриемки_уэ
	|		ПО ДанныеСкладскихАктов.ВидОперации = уатАктПриемки_уэ.ВидОперации
	|			И ДанныеСкладскихАктов.Пункт = уатАктПриемки_уэ.Пункт
	|			И ДанныеСкладскихАктов.МаршрутныйЛист = уатАктПриемки_уэ.МаршрутныйЛист
	|ГДЕ
	|	уатАктПриемки_уэ.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСкладскихАктов.ВидОперации КАК ВидОперации,
	|	ДанныеСкладскихАктов.Пункт КАК Пункт,
	|	ДанныеСкладскихАктов.МаршрутныйЛист КАК МаршрутныйЛист,
	|	МИНИМУМ(ДанныеСкладскихАктов.НачалоОперации) КАК НачалоОперации,
	|	МАКСИМУМ(ДанныеСкладскихАктов.ОкончаниеОперации) КАК ОкончаниеОперации,
	|	ВЫБОР
	|		КОГДА НЕ втСкладскиеАкты.Ссылка ЕСТЬ NULL
	|			ТОГДА втСкладскиеАкты.Ссылка
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСкладскихАктов.ВидОперации) = ТИП(Перечисление.уатВидыОперацийАктОтгрузки_уэ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатАктОтгрузки_уэ.ПустаяСсылка)
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСкладскихАктов.ВидОперации) = ТИП(Перечисление.уатВидыОперацийАктПриемки_уэ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатАктПриемки_уэ.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ссылка
	|ИЗ
	|	ДанныеСкладскихАктов КАК ДанныеСкладскихАктов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСкладскиеАкты КАК втСкладскиеАкты
	|		ПО ДанныеСкладскихАктов.ВидОперации = втСкладскиеАкты.ВидОперации
	|			И ДанныеСкладскихАктов.Пункт = втСкладскиеАкты.Пункт
	|			И ДанныеСкладскихАктов.МаршрутныйЛист = втСкладскиеАкты.МаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСкладскихАктов.ВидОперации,
	|	ДанныеСкладскихАктов.Пункт,
	|	ДанныеСкладскихАктов.МаршрутныйЛист,
	|	ВЫБОР
	|		КОГДА НЕ втСкладскиеАкты.Ссылка ЕСТЬ NULL
	|			ТОГДА втСкладскиеАкты.Ссылка
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСкладскихАктов.ВидОперации) = ТИП(Перечисление.уатВидыОперацийАктОтгрузки_уэ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатАктОтгрузки_уэ.ПустаяСсылка)
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСкладскихАктов.ВидОперации) = ТИП(Перечисление.уатВидыОперацийАктПриемки_уэ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатАктПриемки_уэ.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("ДанныеСкладскихАктов", ДанныеСкладскихАктов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидОперации, Пункт, МаршрутныйЛист", Выборка.ВидОперации, Выборка.Пункт, Выборка.МаршрутныйЛист);
		НайденныеСтроки = тблСкладскиеДанные.НайтиСтроки(СтруктураПоиска);
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СкладскойАктОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИначеЕсли Выборка.Ссылка = Документы.уатАктОтгрузки_уэ.ПустаяСсылка() Тогда
			СкладскойАктОбъект = Документы.уатАктОтгрузки_уэ.СоздатьДокумент();
			СкладскойАктОбъект.Водитель1         = МаршрутныйЛистОбъект.Водитель1;
			СкладскойАктОбъект.ПринадлежностьПеревозки = МаршрутныйЛистОбъект.ПринадлежностьПеревозки;
		ИначеЕсли Выборка.Ссылка = Документы.уатАктПриемки_уэ.ПустаяСсылка() Тогда
			СкладскойАктОбъект = Документы.уатАктПриемки_уэ.СоздатьДокумент();
		Иначе
			Продолжить;
		КонецЕсли;
		СкладскойАктОбъект.СтатусВыполнения  = Справочники.уатСтатусы_уэ.Выполнен;
		СкладскойАктОбъект.НачалоОперации    = Выборка.НачалоОперации;
		СкладскойАктОбъект.ОкончаниеОперации = Выборка.ОкончаниеОперации;
		СкладскойАктОбъект.ОперацияВыполнена = ЗначениеЗаполнено(Выборка.ОкончаниеОперации);
		Если СкладскойАктОбъект.ЭтоНовый() Тогда
			СкладскойАктОбъект.Дата              = ТекущаяДатаСеанса();
			СкладскойАктОбъект.ВидОперации       = Выборка.ВидОперации;
			СкладскойАктОбъект.Пункт             = Выборка.Пункт;
			СкладскойАктОбъект.МаршрутныйЛист    = Выборка.МаршрутныйЛист;
			СкладскойАктОбъект.Организация       = МаршрутныйЛистОбъект.Организация;
			СкладскойАктОбъект.Ответственный     = МаршрутныйЛистОбъект.Ответственный;
		Иначе
			// Перезаписывается таблица грузов для существующего складского акта.
			// Только по тем зазакам, данные по которым обновляются, 
			// т.к. из мобильного приложения могут приходить данные только по части заказов
			Для Каждого ТекСтрокаГруза Из НайденныеСтроки Цикл
				СтрокиПоЗаказу = СкладскойАктОбъект.Грузы.НайтиСтроки(Новый Структура("Заказ", ТекСтрокаГруза.Заказ));
				Для Каждого ТекСтрокаДокумента Из СтрокиПоЗаказу Цикл
					СкладскойАктОбъект.Грузы.Удалить(ТекСтрокаДокумента);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ЕстьРасхожденияПоАкту = Ложь;
		Для Каждого ТекСтрокаГруза Из НайденныеСтроки Цикл
			НоваяСтрока = СкладскойАктОбъект.Грузы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГруза);
			ЕстьРасхожденияПоАкту = ЕстьРасхожденияПоАкту Или ТекСтрокаГруза.ЕстьРасхождения;
		КонецЦикла;
		СкладскойАктОбъект.ЕстьРасхождения = ЕстьРасхожденияПоАкту;
		// Флаги в Заказах и Маршрутных листах устанавливаются отдельно, чтобы не перезаписывать один документ несколько раз.
		СкладскойАктОбъект.ДополнительныеСвойства.Вставить("НеУстанавливатьФлагЕстьРасхождения", Истина);
		
		ОшибкаПриПроведении = Ложь;
		Попытка
			СкладскойАктОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОшибкаПриПроведении = Истина;
			ЗаписатьСообщениеОбОшибке("UpdateOrders", ОписаниеОшибки());
		КонецПопытки;
		
		Если ОшибкаПриПроведении Тогда
			Попытка
				СкладскойАктОбъект.Записать();
			Исключение
				ЗаписатьСообщениеОбОшибке("UpdateOrders", ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВсехВодителейНаЛинии()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции // ПолучитьВсехВодителейНаЛинии()

Процедура ИнициализацияДанныхПрицепа(Объект, Прицеп, НомерПрицепа = 0)
	
	Если НомерПрицепа = 0 Тогда
		// удаление строк с прицепом из ТЧ РасходГСМ
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.ТС = Прицеп Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Прицеп) Тогда
			Если ЗначениеЗаполнено(Прицеп.Модель.ОсновноеТопливо) И Прицеп.Модель.НаличиеТопливногоБака = Истина Тогда
				НоваяСтрокаГСМ = Объект.РасходГСМ.Добавить();
				НоваяСтрокаГСМ.Активен = Истина;
				НоваяСтрокаГСМ.ТС = Прицеп;
				НоваяСтрокаГСМ.ГСМ = Прицеп.Модель.ОсновноеТопливо;
				НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Прицеп,
				Прицеп.Модель.ОсновноеТопливо, Объект.Ссылка);
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЕсли;
			
			// добавляем остатки ТЖ при выезде
			тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(Прицеп, Объект.ДатаВыезда);
			Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
				НоваяСтрокаГСМ 					= Объект.РасходГСМ.Добавить();
				НоваяСтрокаГСМ.ТС 				= Прицеп;
				НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
				НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Прицеп)
			И Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС", Прицеп)).Количество()=0 Тогда
			Если ЗначениеЗаполнено(Прицеп.Модель.ОсновноеТопливо) И Прицеп.Модель.НаличиеТопливногоБака = Истина Тогда
				НоваяСтрокаГСМ = Объект.РасходГСМ.Добавить();
				НоваяСтрокаГСМ.Активен = Истина;
				НоваяСтрокаГСМ.ТС = Прицеп;
				НоваяСтрокаГСМ.ГСМ = Прицеп.Модель.ОсновноеТопливо;
				НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Прицеп,
				Прицеп.Модель.ОсновноеТопливо, Объект.Ссылка);
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЕсли;
			
			// добавляем остатки ТЖ при выезде
			тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(Прицеп, Объект.ДатаВыезда);
			Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
				НоваяСтрокаГСМ 					= Объект.РасходГСМ.Добавить();
				НоваяСтрокаГСМ.ТС 				= Прицеп;
				НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
				НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьУстаревшиеСообщения(ИдентификаторОбсуждения) 
	Попытка 
		УстановитьПривилегированныйРежим(Истина);   
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
		ОтборСообщений.Обсуждение            = ИдентификаторОбсуждения;
		ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Возр;
		ОтборСообщений.Количество            = 100;
		
		Сообщения   = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		ТекущаяДата = ТекущаяДатаСеанса() - 3600;
		
		Для Каждого Сообщение Из Сообщения Цикл
			Если НЕ ЗначениеЗаполнено(Сообщение.Текст)
				И Сообщение.Дата < ТекущаяДата Тогда
				СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор); 
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
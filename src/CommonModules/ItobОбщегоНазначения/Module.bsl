////////////////////////////////////////////////////////////////////////////////
// Общего назначения (сервер)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
	
#Область ДобавлениеОбъектовНаФорму

// Добавляет кнопку на форму.
//
// Параметры:
//  Форма	 - УправляемаяФорма								 - Форма, на которую необходимо добавить кнопку.
//  Имя		 - Строка										 - Имя кнопки.
//  Действие - Строка										 - Содержит отображаемый текст команды.
//  Родитель - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Родитель для добавляемого элемента.
//  	Если не указан, то добавляется на верхний уровень.
//  Свойства - Структура									 - Свойства кнопки формы.
// 
// Возвращаемое значение:
//  КнопкаФормы - Элемент управляемой формы, предназначенный для инициирования выполнения команды, с которой он связан.
//
Функция ДобавитьКнопкуНаФорму(Форма, Имя, Действие, Родитель = Неопределено, Свойства = Неопределено) Экспорт
	
	Команда = ДобавитьКомандуНаФорму(Форма, Имя, Действие, Свойства);
	Свойства.Вставить("ИмяКоманды", Команда.Имя);
	Элемент = ДобавитьЭлементНаФорму(Форма, Имя, Тип("КнопкаФормы"), Родитель, Свойства);	
	
	Возврат Элемент;
КонецФункции // ДобавитьКнопкуНаФорму()

// Добавляет элемент на форму.
//
// Параметры:
//  Форма		 - УправляемаяФорма							 - Форма, на которую необходимо добавить элемент формы.
//  Имя			 - Строка									 - Имя элемента формы.
//  ТипЭлемента	 - Тип										 - Тип добавляемого элемента.
//  Родитель	 - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Родитель для добавляемого элемента.
//  	Если не указан, то добавляется на верхний уровень.
//  Свойства	 - Структура								 - Свойства элемента формы.
// 
// Возвращаемое значение:
//  ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Элемент управляемой формы.
//
Функция ДобавитьЭлементНаФорму(Форма, Имя, ТипЭлемента, Родитель, Свойства = Неопределено) Экспорт
	Элемент = Форма.Элементы.Добавить(Имя, ТипЭлемента, ?(Родитель = Неопределено, Форма, Родитель));
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(Элемент,Свойства);
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ДобавитьЭлементНаФорму()

// Добавляет группу на форму.
//
// Параметры:
//  Форма	 - УправляемаяФорма								 - Форма, на которую необходимо добавить группу.
//  Имя		 - Строка										 - Имя группы.
//  Родитель - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Содержит ссылку на родительский элемент.
//  	Если не указан, то добавляется на верхний уровень.
//  Свойства - Структура									 - Свойства группы на форме.
// 
// Возвращаемое значение:
//  ГруппаФормы - Элемент управляемой формы, предназначенный для визуальной и/или логической группировки элементов.
//
Функция ДобавитьГруппуНаФорму(Форма, Имя, Родитель = Неопределено, Свойства = Неопределено) Экспорт
	
	Элемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(Элемент,Свойства);
	КонецЕсли;
	Возврат Элемент;
	
КонецФункции // ДобавитьЭлементНаФорму()

// Добавляет команду на форму.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - Форма, на которую необходимо добавить команду.
//  Имя		 - Строка			 - Имя команды.
//  Действие - Строка			 - Содержит отображаемый текст команды.
//  Свойства - Структура		 - Свойства команды формы.
// 
// Возвращаемое значение:
//  КомандаФормы - Содержит описание команды управляемой формы.
//
Функция ДобавитьКомандуНаФорму(Форма, Имя, Действие, Свойства) Экспорт
	Команда = Форма.Команды.Добавить(Имя);
	Команда.Действие = Действие;
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(Команда, Свойства);	
	КонецЕсли;
	Возврат Команда;
КонецФункции // ДобавитьКомандуНаФорму()

// Добавляет реквизит на форму.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма, на которую необходимо добавить реквизит.
//  Имя					 - Строка			 - Имя реквизита.
//  Тип					 - ОписаниеТипов	 - Тип реквизита.
//  Путь				 - Строка			 - Путь к создаваемому реквизиту. Не включает имя реквизита.
//  Заголовок			 - Строка			 - Содержит отображаемый текст реквизита.
//  СохраняемыеДанные	 - Булево			 - Реквизит содержит сохраняемые данные.
//  			Истина - сохраняемый реквизит формы.
//  			Значение по умолчанию: Ложь.
// 
// Возвращаемое значение:
//  РеквизитФормы - Добавленный реквизит на форму.
//
Функция ДобавитьРеквизитНаФорму(Форма, Имя, Тип, Путь = "", Заголовок = "", СохраняемыеДанные = Ложь) Экспорт
	НовыеРеквизиты = Новый Массив();
	НовыйРеквизит = Новый РеквизитФормы(Имя, Новый ОписаниеТипов(Тип), Путь, Заголовок, СохраняемыеДанные);
	НовыеРеквизиты.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Возврат НовыйРеквизит;
КонецФункции // ДобавитьКомандуНаФорму()

// Добавляет поле на форму
//
// Параметры:
//  Форма		 - УправляемаяФорма							 - Форма, на которую необходимо добавить поле формы.
//  Имя			 - Строка									 - Имя реквизита.
//  Родитель	 - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Содержит ссылку на родительский элемент.
//  	Если не указан, то добавляется на верхний уровень.
//  Тип			 - ОписаниеТипов								 - Тип реквизита.
//  ПутьКДанным	 - Строка										 - Путь к создаваемому реквизиту. Не включает имя реквизита.
//  Свойства	 - Структура									 - Свойства поля формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Предназначен для отображения и редактирования реквизитов формы не табличных типов.
//  В случае размещения в таблице представляет собой колонку.
//
Функция ДобавитьПолеНаФорму(Форма,Имя,Родитель,Тип,ПутьКДанным = Неопределено,Свойства = Неопределено) Экспорт
	Если ПутьКДанным = Неопределено Тогда
	   Реквизит = ДобавитьРеквизитНаФорму(Форма,Имя,Тип);
	   ПутьКДанным = Реквизит.Имя;
	КонецЕсли;
	Элемент = Форма.Элементы.Добавить(Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Форма, Родитель));
	Элемент.ПутьКДанным = ПутьКДанным;
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(Элемент,Свойства);
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ДобавитьПолеНаФорму()

// Добавляет таблицу на форму
//
// Параметры:
//  Форма			 - УправляемаяФорма						 - Форма, на которую необходимо добавить табличный документ.
//  ИмяТаблицы		 - Строка								 - Имя таблицы.
//  Родитель		 - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Содержит ссылку на родительский элемент.
//  	Если не указан, то добавляется на верхний уровень.
//  МассивКолонок	 - Массив из Структура							 - Колонки таблицы.
//  ПутьКДанным		 - Строка										 - Путь к создаваемому реквизиту. Не включает имя реквизита.
//  Свойства		 - Структура									 - Свойства таблицы формы.
// 
// Возвращаемое значение:
//  ТаблицаФормы - Элемент управляемой формы,
//  предназначенный для отображения и редактирования реквизитов формы табличных типов.
//
Функция ДобавитьТаблицуНаФорму(Форма,ИмяТаблицы,Родитель,МассивКолонок = Неопределено,ПутьКДанным = Неопределено,Свойства = Неопределено) Экспорт
	ЗаголовокТаблицы = "";
	
	Если Свойства <> Неопределено Тогда
		Свойства.Свойство("Заголовок",ЗаголовокТаблицы);
	КонецЕсли;
	Если ПутьКДанным = Неопределено Тогда
		РеквизитТаблица = ДобавитьРеквизитНаФорму(Форма,ИмяТаблицы,Новый ОписаниеТипов("ТаблицаЗначений"),,ЗаголовокТаблицы,Истина);	
		ПутьКДанным = РеквизитТаблица.Имя;
		ДобавлятьРеквизиты = Истина;
	Иначе
		ДобавлятьРеквизиты = Ложь;
	КонецЕсли;
	
	ТаблицаФормы = Форма.Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"),Родитель); 
	ТаблицаФормы.ПутьКДанным = ПутьКДанным; 
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ТаблицаФормы,Свойства);
	КонецЕсли;
	
	// Колонки
	Если МассивКолонок <> Неопределено Тогда
		
		
		
		Для Каждого ДанныеКолонки Из МассивКолонок Цикл
			Если ДобавлятьРеквизиты Тогда
				РеквизитКолонка = ДобавитьРеквизитНаФорму(Форма,ДанныеКолонки.Имя,ДанныеКолонки.Тип,РеквизитТаблица.Имя,ДанныеКолонки.Заголовок,Истина);	 		
			КонецЕсли; 
			
			
			Колонка = Форма.Элементы.Добавить(ТаблицаФормы.Имя + ДанныеКолонки.Имя, Тип("ПолеФормы"), ТаблицаФормы);
			ЗаполнитьЗначенияСвойств(Колонка,ДанныеКолонки);
			Колонка.ПутьКДанным = ПутьКДанным + "." + ДанныеКолонки.Имя;
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаФормы;
КонецФункции // ДобавитьТаблицуНаФорму()

// Добавляет таблицу динамического списка на форму
//
// Параметры:
//  Форма			 - УправляемаяФорма						 - Форма, на которую необходимо добавить динамический список.
//  ИмяСписка		 - Строка								 - Имя динамического списка.
//  Родитель		 - ГруппаФормы, УправляемаяФорма, ТаблицаФормы	 - Содержит ссылку на родительский элемент.
//  	Если не указан, то добавляется на верхний уровень.
//  МассивКолонок	 - Массив из Структура							 - Колонки таблицы.
//  Свойства		 - Структура									 - Свойства динамического списка.
// 
// Возвращаемое значение:
//  ДинамическийСписок - Предоставляет разработчику возможность описать в форме запрос практически произвольного вида,
//  указать условное оформление данных, порядок сортировки, отборы и группировки данных.
//
Функция ДобавитьДинамическиСписокНаФорму(Форма,ИмяСписка,Родитель,МассивКолонок = Неопределено,Свойства = Неопределено) Экспорт
	ЗаголовокСписка = "";
	Если Свойства <> Неопределено Тогда
		Свойства.Свойство("Заголовок",ЗаголовокСписка);
	КонецЕсли; 
	
	РеквизитСписок = ДобавитьРеквизитНаФорму(Форма,ИмяСписка,Новый ОписаниеТипов("ДинамическийСписок"),,ЗаголовокСписка,Истина);	
	Если Свойства <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма[ИмяСписка],Свойства);
	КонецЕсли; 
	
	ТаблицаФормы = Форма.Элементы.Добавить(ИмяСписка, Тип("ТаблицаФормы"),Родитель);    
	ТаблицаФормы.ПутьКДанным = РеквизитСписок.Имя; 
	Если Свойства <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ТаблицаФормы,Свойства);
	КонецЕсли;
	
	// Колонки
	Если МассивКолонок <> Неопределено Тогда
		Для Каждого ДанныеКолонки Из МассивКолонок Цикл
			Колонка = Форма.Элементы.Добавить(ТаблицаФормы.Имя + ДанныеКолонки.Имя, Тип("ПолеФормы"), ТаблицаФормы);
			ЗаполнитьЗначенияСвойств(Колонка,ДанныеКолонки);
			Колонка.ПутьКДанным = РеквизитСписок.Имя + "." + ДанныеКолонки.Имя;
		КонецЦикла; 
	КонецЕсли;
	
	// Ограничения при использовании динамических списков.
	// Свойство "Положение строки поиска" динамических списков должно быть установлено в значение "Нет".	
	ТаблицаФормы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	// Свойство "Положение управления поиском" динамических списков должно быть установлено в значение "Нет".
	ТаблицаФормы.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	
	Возврат ТаблицаФормы;
КонецФункции // ДобавитьТаблицуНаФорму()

#КонецОбласти

#Область ФормированиеОтчетов

// Заполняет параметры формы.
//  Функция вызывается при создании на сервере формы отчета с параметрами.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - Форма, на которые выполняется процедура ПриСозданииНаСервере.
// 
// Возвращаемое значение:
//  Булево - Истина, если параметры существуют.
//
Функция ОтчетСПараметрамиПриСозданииНаСервере(Форма) Экспорт
	Параметры = Форма.Параметры;
	СписокПараметров = Неопределено;
	
	Если Параметры.Свойство("СписокПараметров", СписокПараметров) Тогда
			
		СписокПараметров = Параметры.СписокПараметров;
			
		ОтчетСПараметрами = Форма.РеквизитФормыВЗначение("Отчет");	
		Для каждого ЭлементСписка Из СписокПараметров Цикл
			
			ОтчетСПараметрами[ЭлементСписка.Представление] = ЭлементСписка.Значение; 
		
		КонецЦикла;
		
		Форма.ЗначениеВРеквизитФормы(ОтчетСПараметрами, "Отчет");
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОтчетСПараметрамиПриСозданииНаСервере()

// Заполняет параметры перевода времени в тех отчетах, где требуется перевод времени из UTC0 в часовой пояс клиента.
//	Пример такого отчета - "ItobАнализКачестваВождения".
//
// Ожидается, что в отчете есть (и всегда используются) следующие параметры (НЕ выведенные в пользовательские настройки): 
//	СдвигВремени, ВариантПереводаНаЛетнееВремя, СдвигЛетнееВремя.
//
// Предназначена для вызова в обработчике "ПриКомпоновкеРезультата()".
//
// Параметры:
//	ПараметрыОтчета - ЗначенияПараметровДанныхКомпоновкиДанных - Коллекция параметров, в которой находятся модифицируемые параметры сдвигов.
//					  (должна быть получена через КомпоновщикНастроек.Настройки.ПараметрыДанных).
//
Процедура УстановитьПараметрыСдвигаВремениДляОтчета(ПараметрыОтчета) Экспорт
	
	НастройкиСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	
	ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыОтчета, 
													   "СдвигВремени", 
													   НастройкиСдвигаВремени.СдвигВремени,
													   "Сдвиг времени",
													   Истина);
	
	ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыОтчета, 
													   "ВариантПереводаНаЛетнееВремя", 
													   НастройкиСдвигаВремени.ВариантПереводаВремени,
													   "Вариант перевода на летнее время",
													   Истина);
	
	ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыОтчета, 
													   "СдвигЛетнееВремя", 
													   НастройкиСдвигаВремени.СдвигЛетнееВремя,
													   "Сдвиг летнее время",
													   Истина);
	
КонецПроцедуры
 
#КонецОбласти 

// Процедура "ОбработчикПриСозданииНаСервереСправочниковВодителиТС".
//  При создании на сервере элементов справочников:
//  - Водители;
//  - Транспортные средства.
//
// Параметры:
//  Отказ				 - Булево	 - Признак отказа от создания формы.
//  	Если в теле процедуры-обработчика установить данному параметру значение Истина, то форма создана не будет.
//  СтандартнаяОбработка - Булево	 - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//  	Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//  пЭтотОбъект			 - УправляемаяФорма	 - Форма, на которой необходимо обновить данные.
//
Процедура ОбработчикПриСозданииНаСервереСправочниковВодителиТС(Отказ, СтандартнаяОбработка, пЭтотОбъект) Экспорт
	
	ЭтаФорма = пЭтотОбъект.ЭтаФорма;
	
	ИмяОбъекта = "";
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "Объект" Тогда
			ИмяОбъекта = "Объект";
			Прервать;
		ИначеЕсли Реквизит.Имя = "Запись" Тогда 
			ИмяОбъекта = "Запись";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяОбъекта = "Объект" Тогда 
	
		Объект = пЭтотОбъект.Объект;
		
		ОбъектВыборка = ПолучитьНастройкиОтображенияОбъектов(Объект.Ссылка);
			
		пЭтотОбъект.ЦветМаршрутаНаКарте = ОбъектВыборка.ЦветМаршрутаНаКарте;
		пЭтотОбъект.ЦветНадписиНаКарте = ОбъектВыборка.ЦветНадписиНаКарте;
		пЭтотОбъект.ИконкаНаКарте = ОбъектВыборка.ИконкаНаКарте;
		пЭтотОбъект.ДополнительнаяИконкаНаКарте = ОбъектВыборка.ДополнительнаяИконкаНаКарте;
		пЭтотОбъект.ВариантОтображенияТрека = ОбъектВыборка.ВариантОтображенияТрека;
		
		СтруктураПривязки = РегистрыСведенийItobПривязкиТерминаловПолучитьПоследнее(ТекущаяДатаСеанса(), 
			Новый Структура("Объект", Объект.Ссылка ));
		Если СтруктураПривязки.ТерминалУстановлен = Истина Тогда
			ЭтаФорма.Терминал = СтруктураПривязки.Терминал;	
			
		КонецЕсли;
			
	ИначеЕсли ИмяОбъекта = "Запись" Тогда  		
		Объект = пЭтотОбъект.Запись;
		
		пЭтотОбъект.ЦветМаршрутаНаКарте = Объект.ЦветМаршрутаНаКарте;
		пЭтотОбъект.ЦветНадписиНаКарте = Объект.ЦветНадписиНаКарте;
		пЭтотОбъект.ИконкаНаКарте = Объект.ИконкаНаКарте;
		пЭтотОбъект.ДополнительнаяИконкаНаКарте = Объект.ДополнительнаяИконкаНаКарте;
		пЭтотОбъект.ВариантОтображенияТрека = Объект.ВариантОтображенияТрека;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура "ОбработчикПриЗаписиНаСервереСправочниковВодителиТС".
//  При записи на сервере элементов справочников:
//  - Водители;
//  - Транспортные средства.
//
// Параметры:
//  пЭтотОбъект	 - УправляемаяФорма - Форма, на которой находится элемент.
//  Ссылка		 - СправочникСсылка.упСотрудники, СправочникСсылка.упТранспортныеСредства	 - Ссылка на объект.
//
Процедура ОбработчикПриЗаписиНаСервереСправочниковВодителиТС(пЭтотОбъект, Ссылка) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ItobНастройкиОтображенияОбъектов) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав на изменение Настройки отображения цветов'"),,"ЦветМаршрутаНаКарте",,);
		Возврат;
	КонецЕсли;
	
	Выборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать(Новый Структура("Объект", Ссылка));
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
	КонецЦикла;
	Запись = ?(Запись = Неопределено, РегистрыСведений.ItobНастройкиОтображенияОбъектов.СоздатьМенеджерЗаписи(), Запись); 
	Запись.Объект	 		   = Ссылка;
	Запись.ЦветМаршрутаНаКарте = пЭтотОбъект.ЦветМаршрутаНаКарте;
	Запись.ЦветНадписиНаКарте  = пЭтотОбъект.ЦветНадписиНаКарте;
	Запись.ИконкаНаКарте 	   = пЭтотОбъект.ИконкаНаКарте;
	Запись.ДополнительнаяИконкаНаКарте = пЭтотОбъект.ДополнительнаяИконкаНаКарте;
	Запись.ВариантОтображенияТрека = пЭтотОбъект.ВариантОтображенияТрека;
	Запись.Записать();
	
КонецПроцедуры

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  ЭлементСправочника	 - СправочникСсылка	 - Ссылка на элемент справочника.
// 
// Возвращаемое значение:
//  Массив - Вышестоящие группы.
//
Функция ПолучитьВышеСтоящиеГруппы(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Для Индекс = 1 По 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает данные из регистра сведений "ItobНастройкиОтображенияОбъектов".
//
// Параметры:
//  Ссылка	 - СправочникСсылка.упСотрудники, СправочникСсылка.упТранспортныеСредства	 - Ссылка на объект мониторинга.
// 
// Возвращаемое значение:
//  Структура - Настройки отображения объектов.
//
Функция ПолучитьНастройкиОтображенияОбъектов(Ссылка) Экспорт
	ОбъектВыборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать(Новый Структура("Объект", Ссылка));
	Пока ОбъектВыборка.Следующий() Цикл
		Возврат Новый Структура("ЦветМаршрутаНаКарте,ЦветНадписиНаКарте,ИконкаНаКарте,ДополнительнаяИконкаНаКарте,ВариантОтображенияТрека",
			 						 ОбъектВыборка.ЦветМаршрутаНаКарте,
									 ОбъектВыборка.ЦветНадписиНаКарте,
									 ?(ОбъектВыборка.ИконкаНаКарте = "", Справочники.ItobИконкиОбъектов.Грузовик.Иконка.Получить(), ОбъектВыборка.ИконкаНаКарте),
									 ?(ОбъектВыборка.ДополнительнаяИконкаНаКарте = "", Справочники.ItobИконкиОбъектов.Грузовик.Иконка.Получить(), ОбъектВыборка.ДополнительнаяИконкаНаКарте),
									 ОбъектВыборка.ВариантОтображенияТрека);
	КонецЦикла;
	Возврат Новый Структура("ЦветМаршрутаНаКарте,ЦветНадписиНаКарте,ИконкаНаКарте,ДополнительнаяИконкаНаКарте,ВариантОтображенияТрека",
	 						 0,
							 255,
							 Справочники.ItobИконкиОбъектов.Грузовик.Иконка.Получить(),
							 Справочники.ItobИконкиОбъектов.Грузовик.Иконка.Получить(),
							 Справочники.ItobВариантыОтображенияТрека.ПустаяСсылка());
КонецФункции

// Процедура заполняет поле выбора иконки пунктами назначения.
//
// Параметры:
//  ПолеВыбораИконки - ПолеФормы - Исходное поле.
//
Процедура ЗаполнитьПолеВыбораИконкиПунктовНазначения(ПолеВыбораИконки) Экспорт
	СписокВыбора = ПолеВыбораИконки.СписокВыбора;
	СписокВыбора.Добавить("ItobИконкаКругКрасный"    , НСтр("ru = 'Круг красный'"));
	СписокВыбора.Добавить("ItobИконкаКругЖелтый"     , НСтр("ru = 'Круг желтый'"));
	СписокВыбора.Добавить("ItobИконкаКругЗеленый"    , НСтр("ru = 'Круг зеленый'"));
	СписокВыбора.Добавить("ItobИконкаЗеленаяГалочка" , НСтр("ru = 'Зеленая галочка'"));
	СписокВыбора.Добавить("ItobИконкаДорожныйКонус"  , НСтр("ru = 'Дорожный конус'"));	
	СписокВыбора.Добавить("ItobИконкаВидеокамера"  	 , НСтр("ru = 'Видеокамера'"));	
	СписокВыбора.Добавить("ItobИконкаФотоаппарат"  	 , НСтр("ru = 'Фотоаппарат'"));
КонецПроцедуры

// Загружает настройку из хранилища.
//  Результатом работы являются настройки, загруженные из хранилища.
//
// Параметры:
//  Раздел		 - Строка	 - Ключ объекта настройки.
//  	Подробнее см. в Настройки, автоматически сохраняемые в системном хранилище.
//  Настройка	 - Строка	 - Ключ загружаемых настроек.
//  	Значение по умолчанию: Пустая строка.
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Неопределено, если настройки не найдены.
//
Функция ПрочитатьНастройкуПользователя(Раздел, Настройка) Экспорт

	Возврат ХранилищеОбщихНастроек.Загрузить(Раздел, Настройка);	

КонецФункции // ПрочитатьНастройкуПользователя()

// Процедура показывает панель географической карты,
//  выполняя при этом необходимые проверки доступности сервиса CsmSvc.
//
// Параметры:
//  ЭтаФорма		 - УправляемаяФорма	 - Форма, на которую необходимо показать географическую карту.
//  ТекстДопСкрипта	 - Строка			 - Текст дополнительного скрипта.
//  ДопСкриптHEAD	 - Строка			 - Текст дополнительного скрипта HEAD.
//
Процедура ПоказатьГеографическуюКарту(ЭтаФорма, ТекстДопСкрипта, ДопСкриптHEAD="") Экспорт
	
	Элементы 		= ЭтаФорма.Элементы;
	КартаДоступна 	= ЭтаФорма.КартаДоступна;
	ВебСсылкаСервер = ЭтаФорма.ВебСсылкаСервер;
	ПолеHTML 		= ЭтаФорма.ПолеHTML;
	ТекущийМасштаб 	= ЭтаФорма.ТекущийМасштаб;
	ТекущаяШирота 	= ЭтаФорма.ТекущаяШирота;
	ТекущаяДолгота 	= ЭтаФорма.ТекущаяДолгота;
	
	ОшибкаДоступаНаСервер = Ложь;
	ОписаниеОшибки = "";
			
	Если НЕ ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены") Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |В настройках системы не указан адрес сервиса CsmSvc!
						 |Установите службу CsmSvc или проверьте настройки подключения к службе'");
		
	ИначеЕсли НЕ ItobОперативныйМониторинг.ПроверитьДоступностьСервисаCsmSvc(
		 ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес"), ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт")) Тогда
		 
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |Сервис CsmSvc не доступен!
						 |Установите службу CsmSvc или проверьте настройки подключения к службе'");
						 
	КонецЕсли;
					 
	Если ОшибкаДоступаНаСервер Тогда
		Элементы.НадписьОшибкаОтображенияКарты.Заголовок = ОписаниеОшибки;
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["СтраницаОшибкиОтображенияКарты"];
		КартаДоступна = Ложь;
		
	Иначе
		
		СсылкаБазы   = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		
		// Адреса CsmSvc с клиентской стороны
		АдресСервера = ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес");
		ПортСервера  = Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");
		
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			ВебСсылкаСервер = "https://"+АдресСервера+":"+ПортСервера+"/map/";
		Иначе
			ВебСсылкаСервер = "http://"+АдресСервера+":"+ПортСервера+"/map/";		
		КонецЕсли;		
		
		АтрибутыКарты = "";
		// Необходимо установить координаты по умолчанию
		Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(ТекущийМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+";";			
			
		КонецЕсли;
			
		ИмяСлояПоУмолчанию = ПрочитатьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию");
		Если ЗначениеЗаполнено(ИмяСлояПоУмолчанию) Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|firstLayerName = """+ИмяСлояПоУмолчанию+""";";
		
		КонецЕсли;
		
		ПолеHTML = ItobОперативныйМониторинг.ПолучитьАдресКарты(АтрибутыКарты+Символы.ПС+ТекстДопСкрипта, ДопСкриптHEAD);
		
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["ГруппаКарта"];
		КартаДоступна = Истина;
	
	КонецЕсли;
	
	ЭтаФорма.КартаДоступна 		= КартаДоступна;
	ЭтаФорма.ВебСсылкаСервер 	= ВебСсылкаСервер;
	ЭтаФорма.ПолеHTML 			= ПолеHTML;
	ЭтаФорма.ТекущийМасштаб 	= ТекущийМасштаб;
	ЭтаФорма.ТекущаяШирота 		= ТекущаяШирота;
	ЭтаФорма.ТекущаяДолгота 	= ТекущаяДолгота;
	
КонецПроцедуры

// Возвращает первую запись из регистра сведений или создает новую, если ее нет.
//
// Параметры:
//  ИмяРегистраСведений		 - Строка					 - Имя регистра сведений.
//  НаименованиеИзмерения	 - Строка					 - Наименование измерения для условия отбора.
//  СсылкаНаОбъект			 - СправочникСсылка, ДокументСсылка	 - Ссылка на сравниваемый объект.
//  Записать				 - Булево							 - Нужно ли выполнить запись в регистр.
//  ЭтоНоваяЗапись			 - Булево							 - Возвращает, является ли запись регистра новой.
// 
// Возвращаемое значение:
//  РегистрСведенийМенеджерЗаписи - Запись из регистра сведений.
//
Функция ПолучитьЗаписьРегистраСведений(ИмяРегистраСведений, НаименованиеИзмерения, Знач СсылкаНаОбъект, Записать = Ложь, ЭтоНоваяЗапись = Ложь) Экспорт
	
	// Если передается объект, то получаем ссылку.
	СсылкаНаОбъект = ?(СсылкаНаОбъект.Ссылка = СсылкаНаОбъект, СсылкаНаОбъект, СсылкаНаОбъект.Ссылка);
	
	ЭтоНоваяЗапись = Ложь;
	Запись = РегистрыСведений[ИмяРегистраСведений].СоздатьМенеджерЗаписи();
	Запись[НаименованиеИзмерения] = СсылкаНаОбъект;
	Запись.Прочитать();
	
	ЭтоНоваяЗапись = (Не (Запись[НаименованиеИзмерения] = СсылкаНаОбъект));
	Если ЭтоНоваяЗапись Тогда
		// Заполняем поля по умолчанию.
		ЗаписьСПолямиПоУмолчанию = РегистрыСведений[ИмяРегистраСведений].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЗаписьСПолямиПоУмолчанию);
		
		Запись[НаименованиеИзмерения] = СсылкаНаОбъект
	КонецЕсли; 
	
	// Если необходимо выполнить запись новой.
	Если Записать И ЭтоНоваяЗапись Тогда
	    Запись.Записать();
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

// Запускает процедуру ЗаписьЖурналаРегистрации.
//
// Параметры:
//  ИмяСобытия	 - Строка	 - Событие указывается строкой. Может содержать точки для обозначения иерархии событий.
//  	Запрещена запись событий использующих сочетания символов "_$" и "$_", зарезервированные для системных событий.
//  	Например: _$МоеСобытие$_ или _$МояГруппаСобытий$_.МоеСобытие.
//  Комментарий	 - Строка	 - Произвольная строка комментария к событию.
//
Процедура ЗаписьЖурналаРегистрацииОшибка(ИмяСобытия, Комментарий) Экспорт
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
КонецПроцедуры // ЗаписьЖурналаРегистрацииОбщее()

// Возвращает терминал, привязанный к переданному объекту.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка.упСотрудники, СправочникСсылка.упТранспортныеСредства	 - Объект мониторинга.
//  НаДату			 - Дата																		 - Учетная дата.
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobТерминалы - Привязанный терминал.
//
Функция ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobТерминалы.ПустаяСсылка();   // *FIXIT* переписать, не использовать объектную модель здесь.
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				
		СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(
			?(НаДату=Неопределено,ТекущаяДатаСеанса(),НаДату), Новый Структура("Объект", ТекущийОбъект));
		Если ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
			Результат = СрезНаНачало.Терминал;
						
		КонецЕсли;	
	
	КонецЕсли;
	
	Возврат Результат;			

КонецФункции

// Получает следующую запись из результата запроса.
//  Для обхода результата запроса нужно после получения выборки вызвать данный метод
//  для позиционирования на первый элемент и далее вызывать до тех пор,
//  пока не будет возвращено значение Ложь.
//
// Параметры:
//  Выборка	 - ВыборкаИзРезультатаЗапроса	 - Исходная выборка.
// 
// Возвращаемое значение:
//  Булево - Истина - следующая запись выбрана; Ложь - достигнут конец выборки.
//
Функция ВыборкаСледующий(Знач Выборка) Экспорт
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;	
	Возврат Ложь;
КонецФункции

// Преобразовывает строку в данные датчиков.
//
// Параметры:
//  СтрокаДанныеДатчиков - Строка	 - Строка данных датчиков.
//  ВерсияФормата		 - Число	 - Версия формата данных.
// 
// Возвращаемое значение:
//  Соответствие - Данные датчиков.
//
Функция ПреобразоватьСтрокуВДанныеДатчиков(СтрокаДанныеДатчиков, ВерсияФормата = 1) Экспорт
	
	// Если тип поля "СтрокаДанныеДатчиков" не соответствует строке, то возвращаем пустое Соответствие.
	Если НЕ ТипЗнч(СтрокаДанныеДатчиков) = Тип("Строка") Тогда
		Возврат Новый Соответствие();	
	КонецЕсли;
	
	Возврат ItobCsmHandler.СтрокаДляДанныхДатчика(СтрокаДанныеДатчиков, ВерсияФормата);
	
КонецФункции

// Находит у переданного объекта первый реквизит, тип которого соответствует заданному и возвращает имя этого реквизита.
//
// Параметры:
//	ДанныеОбъекта - Произвольный - Тип или любой производный от объекта тип (СправочникСсылка, СправочникВыборка и т.д.). Допустимо передавать как тип объекта,
//					в котором будет производиться поиск, так и любой производный от этого объекта тип (см. СП по методу "НайтиПоТипу()").
//	ДанныеРеквизита - Ссылка, Тип - Допустимо передавать как тип того реквизита, который требуется найти в объекте,
//					  так и ссылку на объект такого типа.
//	ЗначениеПоУмолчанию - Строка - Имя реквизита в случае, если поиск не дал результата.
//
// Возвращаемое значение:
//	ИмяРеквизита - Строка - Имя найденного реквизита.
//
Функция ИмяРеквизитаОбъектаПоТипу(ДанныеОбъекта, ДанныеРеквизита, ЗначениеПоУмолчанию = "") Экспорт
	
	ТипОбъекта = Неопределено;
	Если ТипЗнч(ДанныеОбъекта) = Тип("Тип") Тогда
		ТипОбъекта = ДанныеОбъекта;
	Иначе
		ТипОбъекта = ТипЗнч(ДанныеОбъекта);
	КонецЕсли;
	
	ТипРеквизита = Неопределено;
	Если ТипЗнч(ДанныеРеквизита) = Тип("Тип") Тогда
		ТипРеквизита = ДанныеРеквизита;
	Иначе
		ТипРеквизита = ТипЗнч(ДанныеРеквизита);
	КонецЕсли;
	
	СправочникМетаданные = Метаданные.НайтиПоТипу(ТипОбъекта);
	ИмяРеквизита = ЗначениеПоУмолчанию;
	Для каждого Реквизит Из СправочникМетаданные.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипРеквизита) Тогда
			ИмяРеквизита = Реквизит.Имя;
			Прервать;
		КонецЕсли; 	
	КонецЦикла;
	
	
	Возврат ИмяРеквизита;
	
КонецФункции

// В отличие от аналогичной функции из ОбщегоНазначения, учитывает включенные в КИ подсистемы.
//
// Параметры:
//	ПолноеИмяПодсистемы - Строка - Полный путь (с учетов вложенности подсистем) к проверяемой подсистеме.
//	ПреобразоватьПутьКПодсистеме - Булево - Если установить в Истину, то для объектов ЦСМ в составе другой конфигурации
//								   в путь к подсистеме будет добавлено стандартное имя подсистемы ЦСМ (см. ItobЦентрСпутниковогоМониторинга.ИмяКонфигурацииЦСМ()).
//								   Так, например, "УчетГСМ" превратится в ItobЦентрСпутниковогоМониторинга.УчетГСМ.
// Возвращаемое значение:
//  Булево - Истина, если существует.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы, ПреобразоватьПутьКПодсистеме = Истина) Экспорт
	 
	Возврат ItobОбщегоНазначенияПовтИсп.ПодсистемаСуществует(ПолноеИмяПодсистемы, ПреобразоватьПутьКПодсистеме);
	
КонецФункции

// Функция - Предопределенное значение объекта
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта метаданных.
//  ИмяЗначения	 - Строка - имя значения.
// 
// Возвращаемое значение:
//	СправочникСсылка - если в параметре ИмяЗначения передано "ПустаяСсылка" вернет пустую ссылку на справочник данного вида. 
//
Функция ПредопределенноеЗначениеОбъекта(ИмяОбъекта, ИмяЗначения) Экспорт
	
	АктуальноеИмяОбъекта = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта(ИмяОбъекта);
	
	Возврат ?(ИмяЗначения = "ПустаяСсылка", Справочники[АктуальноеИмяОбъекта].ПустаяСсылка(), Справочники[АктуальноеИмяОбъекта][ИмяЗначения]);
	
КонецФункции

// Функция - Пустая ссылка объекта
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта метаданных.
// 
// Возвращаемое значение:
//	Ссылка - получает пустое значение ссылки на объект указанный в параметре ИмяОбъекта. 
//
Функция ПустаяСсылкаОбъекта(ИмяОбъекта) Экспорт
	
	Возврат ПредопределенноеЗначениеОбъекта(ИмяОбъекта, "ПустаяСсылка");
	
КонецФункции
 
// Функция - Норма расхода основного топлива
//
// Параметры:
//  ТС		 - СправочникСсылка.ItobТранспортныеСредства - ссылка на транспортное средство.
//  НаДату	 - Дата - по умолчанию текущая дата сеанса.     
// 
// Возвращаемое значение:
//	Структура
//
Функция НормаРасходаОсновногоТоплива(ТС, НаДату = Неопределено) Экспорт
	
	ДатаСреза = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	ИмяРеквизитаМодели = ИмяРеквизитаМоделиУТС();
	ИмяРеквизитаОсновноеТопливо = ИмяРеквизитаМодели + "ОсновноеТопливо";
	
	СвойстваТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТС, ИмяРеквизитаМодели + ", " + ИмяРеквизитаМодели + ".ОсновноеТопливо");	
	сткОтбора = Новый Структура("МодельТС, ГСМ", СвойстваТС[ИмяРеквизитаМодели], СвойстваТС[ИмяРеквизитаОсновноеТопливо]);
	
	
	Возврат РегистрыСведений.ItobНормыРасходаГСМ.ПолучитьПоследнее(ДатаСреза, сткОтбора);
	
КонецФункции

// Функция - Имя реквизита модели у ТС
// 
// Возвращаемое значение:
//	Строка
//
Функция ИмяРеквизитаМоделиУТС() Экспорт
																			
	Возврат ItobОбщегоНазначенияПовтИсп.ИмяРеквизитаМоделиУТС();
	
КонецФункции

// Генерирует настройки прокси сервера (исходя из данных ИБ). При необходимости возвращает описание ошибки
//	в соответствующий параметр.
//
// Параметры:
//  ОписаниеОшибки - Строка - описание ошибки. 
// 
// Возвращаемое значение:
//  ИнтернетПрокси 
//
Функция НастройкиПрокси(ОписаниеОшибки = "") Экспорт
	
	Прокси = Неопределено;
	
	НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаСервере();
	Если НЕ НастройкаПроксиСервера = Неопределено
	     И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Если НЕ НастройкаПроксиСервера = Неопределено Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
		ДополнительныеНастройкиПрокси = НастройкаПроксиСервера["ДополнительныеНастройкиПрокси"];
		Если ДополнительныеНастройкиПрокси = Неопределено Тогда
		    Прокси.Установить("http", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		Иначе
			// Обрабатываем дополнительные настройки прокси, на случай если необходимо установить защищенное соединение.
			НастройкаПроксиСервераДополнительно = ДополнительныеНастройкиПрокси["http"];
			Если НастройкаПроксиСервераДополнительно = Неопределено Тогда
				НастройкаПроксиСервераДополнительно = НастройкаПроксиСервера["ДополнительныеНастройкиПрокси"]["https"];
				Если НастройкаПроксиСервераДополнительно = Неопределено Тогда
					ОписаниеОшибки = "Ошибка настройки прокси, необходимо установить настройки для http или https соединений";							
					Возврат Неопределено;
				Иначе
					НастройкаПроксиСервераДополнительно.Вставить("Протокол", "https");
				КонецЕсли; 
			Иначе
				НастройкаПроксиСервераДополнительно.Вставить("Протокол", "http");
			КонецЕсли;
			Прокси.Установить(НастройкаПроксиСервераДополнительно["Протокол"], НастройкаПроксиСервераДополнительно["Адрес"], НастройкаПроксиСервераДополнительно["Порт"]);
		КонецЕсли; 
		
		Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
		Прокси.Пароль = НастройкаПроксиСервера["Пароль"];
	КонецЕсли;

	
	Возврат Прокси;
	
КонецФункции

// Функция - Это ТС
//
// Параметры:
//  Ссылка	 - Ссылка - ссылка на проверяемый объект 
// 
// Возвращаемое значение:
//  Булево 
//
Функция ЭтоТС(Ссылка) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	Возврат ЭтоТипТС(ТипСсылки);
	
КонецФункции

// Функция - Это тип ТС
//
// Параметры:
//  ПроверяемыйТип - Тип - тип проверяемый на вхождение в состав ОпределяемыеТипы.ItobТранспортноеСредство.
// 
// Возвращаемое значение:
//	Булево 
//
Функция ЭтоТипТС(ПроверяемыйТип) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ItobТранспортноеСредство.Тип.СодержитТип(ПроверяемыйТип);
	
КонецФункции

// Функция - Представление контактной информация по приоритету
//
// Параметры:
//  ВладелецКИ		 -  ЛюбаяСсылка, Объект - Ссылка или объект-владелец контактной информации. 
//  ДопустимыеВидыКИ -  Массив из СправочникСсылка.ВидыКонтактнойИнформации   - будет получена
//        контактная информация только этих видов.
// 
// Возвращаемое значение:
//	Строка - Представление контактной информации 
//
Функция ПредставлениеКонтактнойИнформацияПоПриоритету(ВладелецКИ, ДопустимыеВидыКИ) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ВладелецКИ) Тогда
		Возврат Результат;
	КонецЕсли; 
	   
	Для каждого ВидКИ Из ДопустимыеВидыКИ Цикл
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВладелецКИ, 
																						   ВидКИ,, 
																						   Ложь); 	
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			Результат = КонтактнаяИнформация[0].Представление;
			
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат Результат;
	
КонецФункции

#Область ЗащитаОтОпасныхДействий

// Процедура - Отключает защиту от опасных действий у всех пользователей.
//             Устанавливает в качестве свойства "ЗащитаОтОпасныхДействий" для каждого пользователя новое ОписаниеЗащитыОтОпасныхДействий 
//			   у которого для свойства ПредупреждатьОбОпасныхДействиях установлено значение Ложь.
//
Процедура ОтключитьЗащитуОтОпасныхДействийУВсехПользователей() Экспорт
	
	Для каждого ТекущийПользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ОтключитьЗащитуОтОпасныхДействийУПользователя(ТекущийПользователь);
	КонецЦикла; 	
	
КонецПроцедуры

// Доопределяет действия при записи пользователя информационной базы.
// Для пользователя, имя которого передано в старых свойствах, отключается защита от опасных действий.
//
// Параметры:
//  СтарыеСвойства - см. Пользователи.НовоеОписаниеПользователяИБ.
//  НовыеСвойства  - см. Пользователи.НовоеОписаниеПользователяИБ.
//
Процедура ПользовательПриЗаписи(СтарыеСвойства, НовыеСвойства) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтарыеСвойства.Имя) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(НовыеСвойства.Имя);
		Если ПользовательИБ = Неопределено Тогда
			Возврат;	
		КонецЕсли; 
		
		ОтключитьЗащитуОтОпасныхДействийУПользователя(ПользовательИБ);
	КонецЕсли; 

КонецПроцедуры
 
#КонецОбласти 

#Область ПереопределениеВыгрузкиЗагрузкиВМоделиСервиса

// Процедура - Перед загрузкой объекта
//
// Параметры:
//  Контейнер	 - Произвольный - 
//  Объект		 - Объект - 
//  Артефакты	 - Массив - Коллекция артефактов
//  Отказ		 - Булево - Флаг отказа
//
Процедура ПередЗагрузкойОбъекта(Контейнер, Объект, Артефакты, Отказ) Экспорт
	 
	Объект.ДополнительныеСвойства.Вставить("ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса", Истина);
	
КонецПроцедуры

// Функция - Это запись объекта при загрузке в модели сервиса
//
// Параметры:
//  Источник - Ссылка, Объект.
// 
// Возвращаемое значение:
//   Булево
//
Функция ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса(Источник) Экспорт
	
	ДопСвойства = Источник.ДополнительныеСвойства;
	
	Возврат (ДопСвойства.Свойство("ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса") И ДопСвойства.ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса);
	
КонецФункции

#КонецОбласти

// Функция - Масштабы объектов на карте
// 
// Возвращаемое значение:
//  Число - Коэффициент на которой будет умножено значение размера объекта на карте по умолчанию.
//
Функция МасштабыОбъектовНаКарте() Экспорт
	Возврат ItobОбщегоНазначенияПовтИсп.МасштабыОбъектовНаКарте();
КонецФункции

// Функция - Добавить недостающую колонку
//
// Параметры:
//  Таблица		 - ТаблицаЗначений	 - Таблица в которую добавляем.
//  ИмяКолонки	 - Строка			 - Имя добавляемой колонки.
//  ТипКолонки	 - ОписаниеТипов	 - Тип добавляемой колонки.
//  ТекстОшибки	 - Строка			 - Текст ошибки.
// 
// Возвращаемое значение:
//  КолонкаТаблицыЗначений, Неопределено - КолонкаТаблицыЗначений если колонка добавлена/получена,
//  Неопределено если колонка не может быть добавлена/получена по какой то причине.
//
Функция ДобавитьПолучитьНедостающуюКолонку(Таблица, ИмяКолонки, ТипКолонки, ТекстОшибки = "") Экспорт
	
	Попытка
		Колонка = Таблица.Колонки.Найти(ИмяКолонки);
		Если Колонка = Неопределено Тогда
			Колонка = Таблица.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		КонецЕсли;
		Возврат Колонка;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#Область ЦветаИКартинки

// Возвращает абсолютный цвет из цвета стиля.
//
// Параметры:
//  Цвет - ЦветСтиля - Цвет.
// 
// Возвращаемое значение:
//  Цвет - Абсолютный цвет.
//
Функция ПолучитьАбсолютныйЦвет(Цвет) Экспорт
	
	Если Цвет.Вид = ВидЦвета.WebЦвет Тогда
		ФорматированныйДокумент = Новый ФорматированныйДокумент; 
		ФорматированныйДокумент.Добавить("ОпределениеЦвета", Тип("ТекстФорматированногоДокумента")); 
		ФорматированныйДокумент.Элементы[0].Элементы[0].ЦветФона = Цвет; 
		ТекстХТМЛДокумента = "";
		ФорматированныйДокумент.ПолучитьHTML(ТекстХТМЛДокумента, Новый Структура); 
		ФорматированныйДокумент.УстановитьHTML(ТекстХТМЛДокумента, Новый Структура); 
		АбсолютныйЦвет = ФорматированныйДокумент.Элементы[0].Элементы[0].ЦветФона;			
	Иначе
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Область("R1C1").ЦветФона = Цвет;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.MXL7);
		ТабДок.Прочитать(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		АбсолютныйЦвет = ТабДок.Область("R1C1").ЦветФона;	
	КонецЕсли; 
	
	
	Возврат АбсолютныйЦвет;

КонецФункции

// Функция - Привести цвет к RGB
//
// Параметры:
//  ТекЦвет	 - Цвет	 - текущий цвет.
// 
// Возвращаемое значение:
//	Цвет 
//
Функция ПривестиЦветК_RGB(ТекЦвет) Экспорт
	
	Если ТекЦвет.Вид = ВидЦвета.Абсолютный Тогда
		Возврат ТекЦвет;	
	ИначеЕсли ТекЦвет.Вид = ВидЦвета.WebЦвет Тогда
		Макет = ПолучитьОбщийМакет("ItobWebЦвета");
		Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
			Если ТекЦвет = WebЦвета[Макет.Область(НомерСтроки,1).Текст] Тогда
				
				Возврат Новый Цвет(Макет.Область(НомерСтроки,2).Текст, 
								   Макет.Область(НомерСтроки,3).Текст, 
								   Макет.Область(НомерСтроки,4).Текст );							
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
	
	
	Возврат Новый Цвет(-1,-1,-1);
	
КонецФункции

// Генерирует RGB-палитру в 7656 цветов и затем выбирает из нее случайный цвет.
//	Не рекомендуется вызов данной функции в цикле - как по соображениям производительности (на каждом шаге цикла будет генерироваться палитра),
//		так и из-за "особенности" работы псевдорандома: несколько вызовов в 1 секунду могут дать один и тот же "случайный" результат.
//	Для циклических вызовов рекомендуется использовать функцию КоллекцияСлучайныхЦветов().
// 
// Возвращаемое значение:
//  Цвет - Полученный случайный цвет.
//
Функция СлучайныйЦвет() Экспорт
	
	Палитра = СоздатьПалитруЦветов();
	СлучайныйЦвет = СлучайноеЗначениеКоллекции(Палитра);
	
	
	Возврат	СлучайныйЦвет;
	
КонецФункции

// Генерирует RGB-палитру в 7656 цветов и затем выбирает из нее требуемое количество случайных цветов.
//	Функция предназначена для вызова в цикле: не может быть выбран подряд один и тот же случайный цвет.
//	(требуется для защиты от псевдорандома).
//
// Параметры:
//  РазмерКоллекции - Число - Целое неотрицательное число, ограничивающее размер генерируемой коллекции. 
// 
// Возвращаемое значение:
//  Массив - Массив из элементов типа Цвет - Полученная коллекция случайных цветов заданного размера.
//
Функция КоллекцияСлучайныхЦветов(РазмерКоллекции) Экспорт
	
	КоллекцияСлучайныхЦветов = Новый Массив;
	
	Палитра = СоздатьПалитруЦветов();	
	ПредыдущийЦвет = Неопределено;
	
	Для ЭлементКоллекции = 1 По РазмерКоллекции Цикл	
		ТекущийЦвет = СлучайноеЗначениеКоллекции(Палитра);
		
		Пока ПредыдущийЦвет = ТекущийЦвет Цикл
			ТекущийЦвет = СлучайноеЗначениеКоллекции(Палитра);
		КонецЦикла;
		
		КоллекцияСлучайныхЦветов.Добавить(ТекущийЦвет);
		
		ПредыдущийЦвет = ТекущийЦвет;		
	КонецЦикла;
	
	
	Возврат КоллекцияСлучайныхЦветов;
		
КонецФункции

// Функция - Случайное значение коллекции
//
// Параметры:
//  Коллекция	 - 	Массив, ТаблицаЗначений, СписокЗначений, Соответствие - 
//						Универсальная коллекция, у которой работает метод Количество()
// 
// Возвращаемое значение:
//   - Элемент коллекции - случайный элемент коллекции.
//
Функция СлучайноеЗначениеКоллекции(Коллекция) Экспорт
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах() * Коллекция.Количество());	
	СлучайныйИндексЭлемента = Генератор.СлучайноеЧисло(0, Коллекция.Количество()-1);
	
	
	Возврат	Коллекция[СлучайныйИндексЭлемента]; 

КонецФункции

//  Создает простую картинку (квадрат 16х16 заданного цвета) в формате png.
//
// Параметры:
//  Красный	 - Число - значение R в RGB.
//  Зеленый	 - Число - значение G в RGB. 
//  Синий	 - Число - значение B в RGB.
// 
// Возвращаемое значение:
//   - Картинка - Сгенерированная картинка (формат png).
//
Функция СоздатьПростуюКартинку(Красный, Зеленый, Синий) Экспорт
	
	// Формат BMP 24 крайне прост в создании.
	//	Потребуется корректно зашифровать заголовок файла и разместить "карту" значений RGB
	//	в бинарных данных.	
	
	// Создадим массив под значения байтов будущего BMP-файла. Количество = 822 рассчитывается как адрес максимального значащего байта под адресацию картинки, 
	//	"верх" выделяется под заголовок (в т.ч. задается разрешение: 16х16).
	ПредварительныеДанныеФорматаBMP = Новый Массив(822);
	
	// Заполним заголовок файла BMP.
	ПредварительныеДанныеФорматаBMP[0] = 66;
	ПредварительныеДанныеФорматаBMP[1] = 77;

	ПредварительныеДанныеФорматаBMP[2] = 54;
	ПредварительныеДанныеФорматаBMP[3] = 3;
	
	ПредварительныеДанныеФорматаBMP[10] = 54;
	ПредварительныеДанныеФорматаBMP[14] = 40;
	
	ПредварительныеДанныеФорматаBMP[18] = 16;
	ПредварительныеДанныеФорматаBMP[22] = 16;
	
	ПредварительныеДанныеФорматаBMP[26] = 1;
	ПредварительныеДанныеФорматаBMP[28] = 24;
	
	ПредварительныеДанныеФорматаBMP[38] = 195;
	ПредварительныеДанныеФорматаBMP[39] = 14;
	
	ПредварительныеДанныеФорматаBMP[42] = 195;
	ПредварительныеДанныеФорматаBMP[43] = 14;
	
	// Заполним карту значений числами R, G и B согласно требования BMP 24.
	//	Цвет кодируется тремя байтами - один на каждый цвет в RGB.
	Для Счетчик = 0 По 255 Цикл
		АдресСинего = 54 + Счетчик * 3;
		
		ПредварительныеДанныеФорматаBMP[АдресСинего] = Синий;
		ПредварительныеДанныеФорматаBMP[АдресСинего + 1] = Зеленый;
		ПредварительныеДанныеФорматаBMP[АдресСинего + 2] = Красный;
	КонецЦикла; 
	
	// Осталось только сформировать двоичные данные и воспользоваться стандартным конструктором картинки.
	Поток = Новый ПотокВПамяти;
	ЗаписьДвоичныхДанных = Новый ЗаписьДанных(Поток);
	Для каждого ЗначениеБайта Из ПредварительныеДанныеФорматаBMP Цикл
		ЗаписьДвоичныхДанных.ЗаписатьБайт(?(ЗначениеБайта = Неопределено, 0, ЗначениеБайта));
	КонецЦикла; 
	ЗаписьДвоичныхДанных.Закрыть();
	
	ДвоичныеДанныеКартинки = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	СозданнаяКартинкаBMP = Новый Картинка(ДвоичныеДанныеКартинки);
	
	ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(СозданнаяКартинкаBMP);
	ОбрабатываемаяКартинка.УстановитьФормат(ФорматКартинки.PNG);
	СозданнаяКартинкаPNG = ОбрабатываемаяКартинка.ПолучитьКартинку(); 
	
	
	Возврат СозданнаяКартинкаPNG;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// Функция получения последних привязок терминалов
//
Функция РегистрыСведенийItobПривязкиТерминаловПолучитьПоследнее(пТекущаяДата, пСтруктура)
	Результат = Новый Структура("Терминал,ТерминалУстановлен",Справочники.ItobТерминалы.ПустаяСсылка(),Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен,
		|	ItobПривязкиТрекеровСрезПоследних.Терминал
		|ИЗ
		|	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(
		|			&Дата,
		|			Объект = &Объект) КАК ItobПривязкиТрекеровСрезПоследних
		|ГДЕ
		|	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен";

	Запрос.УстановитьПараметр("Дата", пТекущаяДата);
	Запрос.УстановитьПараметр("Объект", пСтруктура.Объект);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат,Выборка);
		Прервать;
	КонецЦикла;
    Возврат Результат;	
КонецФункции

Процедура ОтключитьЗащитуОтОпасныхДействийУПользователя(ТекущийПользователь)
	
	ОписаниеЗащитыОтключитьЗащиту = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащитыОтключитьЗащиту.ПредупреждатьОбОпасныхДействиях = Ложь;
	ТекущийПользователь.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтключитьЗащиту;
	
	ТекущийПользователь.Записать();
	
КонецПроцедуры

Функция СоздатьПалитруЦветов()

	ПалитраЦветов = Новый Массив;
		
	Для ЧислоПовторов = 2 По 7 Цикл 	
		Множитель = ЧислоПовторов * 32;		
		
		Зеленый = 0;
		Пока Зеленый <= 255 Цикл
			Зеленый = Зеленый + 1;
			ПалитраЦветов.Добавить(Новый Цвет(0 + Множитель, Зеленый, 255));		
		КонецЦикла;
		
		Синий = 255;
		Пока Синий > 0 Цикл
			Синий = Синий - 1;
			ПалитраЦветов.Добавить(Новый Цвет(0 + Множитель, 255, Синий));
		КонецЦикла;
		
		Красный = 0;
		Пока Красный < 255 Цикл
			Красный = Красный + 1;
			ПалитраЦветов.Добавить(Новый Цвет(Красный, 128, 0 + Множитель));
		КонецЦикла;
		
		Зеленый = 255;
		Пока Зеленый > 0 Цикл
			Зеленый = Зеленый - 1;
			ПалитраЦветов.Добавить(Новый Цвет(255, Зеленый, 0 + Множитель));
		КонецЦикла;
		
		Синий = 0;
		Пока Синий < 255 Цикл
			Синий = Синий + 1;
			ПалитраЦветов.Добавить(Новый Цвет(0, 0 + Множитель, Синий));
		КонецЦикла;		
	КонецЦикла;
	
	
	Возврат ПалитраЦветов;

КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Загрузка данных из процессинговых центров
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаДанныхИзПЦ

// Выполняет создание заправок в документе "Отчет поставщика ПЦ ".
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  мсвЗагруженныеДанные - Массив - данные заправок;
//  ДокументСсылка - СправочникСсылка.уатОтчетПоставщикаПЦ.
//
Процедура СоздатьЗаправкиВОтчетеПЦ(СтруктураПараметровУчетнойЗаписи, мсвЗагруженныеДанные,
	ДатаНачала = Неопределено, ТекущаяДата = Неопределено, Знач ДокументСсылка = Неопределено, мсвЗаправокДляЗаписи = Неопределено) Экспорт
	
	ЗаписыватьДокумент = ДокументСсылка = Неопределено;

	мсвЗаправокДляЗаписи = Новый Массив();
	Если мсвЗагруженныеДанные <> Неопределено 
		И ТипЗнч(мсвЗагруженныеДанные) = Тип("Массив")
		И мсвЗагруженныеДанные.Количество() > 0 Тогда
		
		// Удалим из данных транзакции загруженные ранее
		мсвТранзакцияДляУдаления = Новый Массив();
		Если ЗаписыватьДокумент Тогда
			мсвТранзакций = Новый Массив();
			Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
				мсвТранзакций.Добавить(ТекСтрока.Транзакция);
			КонецЦикла; 
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Транзакция", мсвТранзакций);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	уатОборотыПоОтчетамПоставщиковПЦ.Транзакция КАК Транзакция
			               |ИЗ
			               |	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
			               |ГДЕ
			               |	уатОборотыПоОтчетамПоставщиковПЦ.Транзакция В(&Транзакция)
			               |	И уатОборотыПоОтчетамПоставщиковПЦ.Транзакция <> """"";
			ВыборкаТранзакций = Запрос.Выполнить().Выбрать();
			Пока ВыборкаТранзакций.Следующий() Цикл
				мсвТранзакцияДляУдаления.Добавить(ВыборкаТранзакций.Транзакция);
			КонецЦикла
		КонецЕсли;
		
		Организация       = СтруктураПараметровУчетнойЗаписи.Организация;
		Ответственный     = СтруктураПараметровУчетнойЗаписи.Ответственный;
		РазбиватьНаОтделы = СтруктураПараметровУчетнойЗаписи.РазбиватьНаОтделы;
		Отдел             = СтруктураПараметровУчетнойЗаписи.АЗС.Отдел;
		ВнешняяСистема    = СтруктураПараметровУчетнойЗаписи.ВнешняяСистема;
		АЗС               = СтруктураПараметровУчетнойЗаписи.АЗС;
		Контрагент        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АЗС, "Контрагент_Склад");
		УчитыватьНДС      = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		СуммаВключаетНДС  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		ВалютаДокумента   = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Отделы = Новый Соответствие;
		мсвЗаправок      = Новый Массив();
		мсвТопливныхКарт = Новый Массив();
		
		Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
			мсвТопливныхКарт.Добавить(ТекСтрока.ПластиковаяКартаОтчета);
		КонецЦикла;
		// Сопоставим топливные карты
		СоответствиеКарт = НайтиКартыВБазе(мсвТопливныхКарт);

		Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
			
			Если ЗаписыватьДокумент Тогда
				Если мсвТранзакцияДляУдаления.Найти(ТекСтрока.Транзакция) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			АЗС    = СтруктураПараметровУчетнойЗаписи.АЗС;
			ТекАЗС = Неопределено;
			Если РазбиватьНаОтделы Тогда
				// Исключаем заправки по другим отделам (нет фильтра). ППР
				Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР")
					И ЗначениеЗаполнено(Отдел) Тогда
					Если Отдел <> ТекСтрока.Отдел Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
					ПластиковаяКарта = СоответствиеКарт.Получить(ТекСтрока.ПластиковаяКартаОтчета);
					Если ДокументСсылка = Неопределено Тогда // Загружам все заправки
						Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
							ТекАЗС = ПластиковаяКарта.КемВыдана;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекАЗС) 
							ИЛИ ТипЗнч(ТекАЗС) = Тип("СправочникСсылка.Контрагенты") Тогда
							ТекАЗС = СтруктураПараметровУчетнойЗаписи.ОсновнаяАЗС;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекАЗС) Тогда
							ТекАЗС = АЗС;
						КонецЕсли;
					Иначе
						// Исключаем заправки по другим АЗС (нет фильтра). Лукойл
						Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
							ТекАЗС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПластиковаяКарта, "КемВыдана");
							Если ЗначениеЗаполнено(ТекАЗС) 
								И НЕ ТипЗнч(ТекАЗС) = Тип("СправочникСсылка.Контрагенты") Тогда
								Если ТекАЗС <> АЗС Тогда
									Продолжить;
								Конецесли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекАЗС) Тогда
				ТекАЗС = АЗС;
			КонецЕсли;
			
			ТекМсвЗаправок = Отделы.Получить(ТекАЗС);
			Если ТекМсвЗаправок = Неопределено Тогда
				мсвЗаправок = Новый Массив();
				мсвЗаправок.Добавить(ТекСтрока);
				
				Отделы.Вставить(ТекАЗС, мсвЗаправок);
			Иначе
				ТекМсвЗаправок.Добавить(ТекСтрока);
				Отделы.Вставить(ТекАЗС, ТекМсвЗаправок);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекОтдел Из Отделы Цикл
			
			ТекАЗС = ТекОтдел.Ключ;
			Если ДокументСсылка = Неопределено Тогда
				ТекДокументСсылка = Документы.уатОтчетПоставщикаПЦ.СоздатьДокумент();
				ТекДокументСсылка.Дата				 = ТекущаяДата;
				ТекДокументСсылка.Ответственный		 = Ответственный;
				ТекДокументСсылка.Организация		 = Организация;
				ТекДокументСсылка.АЗС				 = ТекАЗС;
				ТекДокументСсылка.Контрагент		 = Контрагент;
				ТекДокументСсылка.УчитыватьНДС		 = УчитыватьНДС;
				ТекДокументСсылка.СуммаВключаетНДС	 = СуммаВключаетНДС;
				ТекДокументСсылка.ВалютаДокумента	 = ВалютаДокумента;
			Иначе
				ТекДокументСсылка = ДокументСсылка;
			КонецЕсли;
			
			ТекМсвЗаправок = ТекОтдел.Значение;
			Для Каждого ТекСтрока Из ТекМсвЗаправок Цикл
				
				НоваяЗаправка = ТекДокументСсылка.Заправки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗаправка, ТекСтрока);
				
				// Заполняем ГСМ и Топливные карты
				НоваяЗаправка.ГСМ              = НайтиГСМвБазе(НоваяЗаправка.НоменклатураОтчета, ТекДокументСсылка.АЗС);
				НоваяЗаправка.ПластиковаяКарта = СоответствиеКарт.Получить(НоваяЗаправка.ПластиковаяКартаОтчета);
				
				// Заполняем ТС
				мВладелецКарты = уатОбщегоНазначения.уатВладелецПластиковойКарты(НоваяЗаправка.ПластиковаяКарта, НоваяЗаправка.Дата);
				Если ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка." + уатОбщегоНазначения.ПолучитьНаименованиеСправочникаТС()) Тогда
					НоваяЗаправка.ТС = мВладелецКарты;
				ИначеЕсли ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка.Сотрудники") Тогда
					НоваяЗаправка.ТС = НайтиТСизПЛ(мВладелецКарты, НоваяЗаправка.Дата);
				КонецЕсли;
				
				Если НЕ ТекДокументСсылка.УчитыватьНДС Тогда
					НоваяЗаправка.СтавкаНДС = Неопределено;
					НоваяЗаправка.СуммаНДС = 0;
				Иначе
					НоваяЗаправка.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяЗаправка.ГСМ, "СтавкаНДС");
					НоваяЗаправка.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяЗаправка.Сумма,
						ТекДокументСсылка.УчитыватьНДС, ТекДокументСсылка.СуммаВключаетНДС,
					уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяЗаправка.СтавкаНДС));
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура("ГСМ,Дата,Количество,МестоЗаправкиКод,
				|МестоЗаправкиНаименование,НоменклатураОтчета,ПластиковаяКарта,ПластиковаяКартаОтчета,
				|Проверено,ТС,ТСОтчета,Сумма,СтавкаНДС,СуммаНДС,Лат,Лон,Транзакция");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, НоваяЗаправка);
				мсвЗаправокДляЗаписи.Добавить(СтруктураСтроки);
			КонецЦикла;
			
			Если ЗаписыватьДокумент Тогда
				ТекДокументСсылка.Записать(РежимЗаписиДокумента.Проведение);
				
				Если СтруктураПараметровУчетнойЗаписи.СоздаватьЗаправкиГСМ
					И ТекДокументСсылка <> Неопределено Тогда
					ВыполнитьСозданиеЗаправокПоОтчетамПЦ(ТекДокументСсылка.Ссылка, ТекДокументСсылка.Организация,
					ТекДокументСсылка.АЗС,
					ТекДокументСсылка.АЗС.ПрофильОбменаСПЦ.ЗаменятьАналогНаОсновноеТопливо);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВычитатьСливыИзЗаправок(мсвЗагруженныеДанные) Экспорт
	
	тЗагруженныеДанные = Новый ТаблицаЗначений;
	тЗагруженныеДанные.Колонки.Добавить("Дата",						 Новый ОписаниеТипов("Дата"));
	тЗагруженныеДанные.Колонки.Добавить("НоменклатураОтчета",		 Новый ОписаниеТипов("Строка"));
	тЗагруженныеДанные.Колонки.Добавить("ПластиковаяКартаОтчета",	 Новый ОписаниеТипов("Строка"));
	тЗагруженныеДанные.Колонки.Добавить("Количество",				 Новый ОписаниеТипов("Число"));
	тЗагруженныеДанные.Колонки.Добавить("Сумма",					 Новый ОписаниеТипов("Число"));
	тЗагруженныеДанные.Колонки.Добавить("СтавкаНДС",				 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	тЗагруженныеДанные.Колонки.Добавить("СуммаНДС",					 Новый ОписаниеТипов("Число"));
	тЗагруженныеДанные.Колонки.Добавить("МестоЗаправкиКод",			 Новый ОписаниеТипов("Строка"));
	тЗагруженныеДанные.Колонки.Добавить("МестоЗаправкиНаименование", Новый ОписаниеТипов("Строка"));
	тЗагруженныеДанные.Колонки.Добавить("Лат",						 Новый ОписаниеТипов("Число"));
	тЗагруженныеДанные.Колонки.Добавить("Лон",						 Новый ОписаниеТипов("Число"));
	тЗагруженныеДанные.Колонки.Добавить("Отдел",					 Новый ОписаниеТипов("Строка"));
	тЗагруженныеДанные.Колонки.Добавить("Транзакция",				 Новый ОписаниеТипов("Строка"));
	
	мсвСливов = Новый Массив(); 
	
	тЗагруженныеСливы = Новый ТаблицаЗначений;  
	тЗагруженныеСливы.Колонки.Добавить("Дата",						 Новый ОписаниеТипов("Дата"));  
	тЗагруженныеСливы.Колонки.Добавить("НоменклатураОтчета",		 Новый ОписаниеТипов("Строка"));
	тЗагруженныеСливы.Колонки.Добавить("ПластиковаяКартаОтчета",	 Новый ОписаниеТипов("Строка"));
	тЗагруженныеСливы.Колонки.Добавить("Транзакция",				 Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
		ТекСтрока.МестоЗаправкиКод = Строка(ТекСтрока.МестоЗаправкиКод);
		Если НЕ ТекСтрока.Свойство("Отдел") Тогда
			ТекСтрока.Вставить("Отдел", "");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Отдел) Тогда
			ТекСтрока.Отдел = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СуммаНДС) Тогда
			ТекСтрока.СуммаНДС = 0;
		КонецЕсли;
		
		Если ТекСтрока.Количество >= 0 Тогда
			НоваяСтрока = тЗагруженныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Продолжить;
		КонецЕсли;
		мсвСливов.Добавить(ТекСтрока); 
		
		НовыяСтрока = тЗагруженныеСливы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыяСтрока, ТекСтрока);
	КонецЦикла;

	// Проверим наличие слива в ранее созданном отчете
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("тЗагруженныеСливы", тЗагруженныеСливы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	тЗагруженныеСливы.Дата КАК Дата,
	               |	тЗагруженныеСливы.НоменклатураОтчета КАК НоменклатураОтчета,
	               |	тЗагруженныеСливы.ПластиковаяКартаОтчета КАК ПластиковаяКартаОтчета,
	               |	тЗагруженныеСливы.Транзакция КАК Транзакция
	               |ПОМЕСТИТЬ втСливы
	               |ИЗ
	               |	&тЗагруженныеСливы КАК тЗагруженныеСливы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатОборотыПоОтчетамПоставщиковПЦ.Период КАК Период,
	               |	уатОборотыПоОтчетамПоставщиковПЦ.Транзакция КАК Транзакция
	               |ИЗ
	               |	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ";
	
	тЗагруженныеДанные.Сортировать("Дата УБЫВ");
	Для Каждого ТекущаяСтрока Из мсвСливов Цикл
		
		СтруктураОтбора = Новый Структура("МестоЗаправкиКод, МестоЗаправкиНаименование, ПластиковаяКартаОтчета, НоменклатураОтчета, Отдел");
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
		
		ТекСтроки = тЗагруженныеДанные.НайтиСтроки(СтруктураОтбора);
		
		КоличествоНайдСтрок = ТекСтроки.Количество();
		Если КоличествоНайдСтрок > 0 Тогда
			КоличествоСлить	 = ?(ТекущаяСтрока.Количество < 0, -ТекущаяСтрока.Количество, ТекущаяСтрока.Количество);
			СуммаСлить		 = ?(ТекущаяСтрока.Сумма < 0, -ТекущаяСтрока.Сумма, ТекущаяСтрока.Сумма);
			СуммаНДССлить	 = ?(ТекущаяСтрока.СуммаНДС < 0, -ТекущаяСтрока.СуммаНДС, ТекущаяСтрока.СуммаНДС);
			СуммаЗаЕдинцу	 = ?(КоличествоСлить = 0, 0, СуммаСлить / КоличествоСлить);
			СуммаНДСЗаЕдинцу = ?(КоличествоСлить = 0, 0, СуммаНДССлить / КоличествоСлить);
			Для Каждого ТекСтрока Из ТекСтроки Цикл
				Если КоличествоСлить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекСтрока.Дата > ТекущаяСтрока.Дата Тогда
					Продолжить;
				Иначе
					КоличествоЗаправка = ?(ТекСтрока.Количество < 0, -ТекСтрока.Количество, ТекСтрока.Количество);
					Если КоличествоСлить >= КоличествоЗаправка Тогда
						тЗагруженныеДанные.Удалить(ТекСтрока);
						КоличествоСлить = КоличествоСлить - КоличествоЗаправка;
					ИначеЕсли КоличествоСлить < КоличествоЗаправка Тогда
						СуммаЗаправить		 = ?(ТекСтрока.Сумма < 0, -ТекСтрока.Сумма, ТекСтрока.Сумма);
						СуммаНДСЗаправить	 = ?(ТекущаяСтрока.СуммаНДС < 0, -ТекущаяСтрока.СуммаНДС, ТекущаяСтрока.СуммаНДС);
						СуммаЗаправитьЗаЕдинцу		 = ?(КоличествоЗаправка = 0, 0, СуммаЗаправить / КоличествоЗаправка);
						СуммаНДСЗаправитьЗаЕдинцу	 = ?(КоличествоЗаправка = 0, 0, СуммаНДСЗаправить / КоличествоЗаправка);
						
						ТекСтрока.Количество	 = ?(ТекСтрока.Количество < 0, -(КоличествоЗаправка - КоличествоСлить), КоличествоЗаправка - КоличествоСлить);
						ТекСтрока.Сумма		 = ?(ТекСтрока.Сумма < 0, -(СуммаЗаправитьЗаЕдинцу * (КоличествоЗаправка - КоличествоСлить)),
						СуммаЗаправитьЗаЕдинцу * (КоличествоЗаправка - КоличествоСлить));
						ТекСтрока.СуммаНДС	 = ?(ТекСтрока.СуммаНДС < 0, -(СуммаНДСЗаправитьЗаЕдинцу * (КоличествоЗаправка - КоличествоСлить)),
						СуммаНДСЗаправитьЗаЕдинцу * (КоличествоЗаправка - КоличествоСлить));
						
						КоличествоСлить = 0;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоСлить > 0 Тогда
				НоваяСтрока = тЗагруженныеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Количество	 = ?(НоваяСтрока.Количество < 0, -КоличествоСлить, КоличествоСлить);
				НоваяСтрока.Сумма		 = ?(НоваяСтрока.Сумма < 0, -(СуммаЗаЕдинцу * КоличествоСлить), СуммаЗаЕдинцу * КоличествоСлить);
				НоваяСтрока.СуммаНДС	 = ?(НоваяСтрока.СуммаНДС < 0, -(СуммаНДСЗаЕдинцу * КоличествоСлить), СуммаНДСЗаЕдинцу * КоличествоСлить);
			КонецЕсли;
		Иначе
			НоваяСтрока = тЗагруженныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	мсвРезультат = Новый Массив();
	тЗагруженныеДанные.Сортировать("МестоЗаправкиКод, МестоЗаправкиНаименование, СтавкаНДС, ПластиковаяКартаОтчета, НоменклатураОтчета, Дата");
	Для Каждого ТекСтрока Из тЗагруженныеДанные Цикл
		СтруктураОтбора = Новый Структура("Дата, МестоЗаправкиКод, МестоЗаправкиНаименование, СтавкаНДС,
		|ПластиковаяКартаОтчета, НоменклатураОтчета, Количество, Сумма, СуммаНДС, Лат, Лон, Отдел, Транзакция");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрока);
		мсвРезультат.Добавить(СтруктураОтбора);
	КонецЦикла;
	
	Возврат мсвРезультат;
КонецФункции

Функция НайтиГСМвБазе(мНоменклатураОтчета, мАЗС) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА рсГСМ.ГСМ ЕСТЬ NULL
	|			ТОГДА спрАЗС.ГСМ
	|		ИНАЧЕ рсГСМ.ГСМ
	|	КОНЕЦ КАК ГСМ
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		уатНоменклатураГСМ.Номенклатура КАК ГСМ
	|	ИЗ
	|		РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|	ГДЕ
	|		уатНоменклатураГСМ.Номенклатура.Наименование = &НоменклатураОтчета) КАК рсГСМ
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			уатАЗССоответствиеГСМ.ГСМ КАК ГСМ
	|		ИЗ
	|			Справочник.уатАЗС.СоответствиеГСМ КАК уатАЗССоответствиеГСМ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатАЗС КАК уатАЗС
	|				ПО уатАЗССоответствиеГСМ.Ссылка = уатАЗС.Ссылка
	|		ГДЕ
	|			уатАЗС.Ссылка = &АЗС
	|			И (уатАЗССоответствиеГСМ.ГСМизФайла = &НоменклатураОтчета
	|					ИЛИ уатАЗССоответствиеГСМ.ГСМизФайла = &НоменклатураОтчетаБезНалив
	|					ИЛИ уатАЗССоответствиеГСМ.ГСМизФайла = &НоменклатураОтчетаАИ)) КАК спрАЗС
	|		ПО рсГСМ.ГСМ = спрАЗС.ГСМ";
	
	НоменклатураОтчета			 = СокрЛП(мНоменклатураОтчета);
	НоменклатураОтчетаБезНалив	 = СтрЗаменить(НоменклатураОтчета, " налив", "");
	НоменклатураОтчетаБезНалив	 = СтрЗаменить(НоменклатураОтчета, "А/", "");
	НоменклатураОтчетаАИ		 = СтрЗаменить(НоменклатураОтчета, "Аи", "АИ");
	
	Запрос.УстановитьПараметр("АЗС", мАЗС);
	Запрос.УстановитьПараметр("НоменклатураОтчета", НоменклатураОтчета);
	Запрос.УстановитьПараметр("НоменклатураОтчетаБезНалив", НоменклатураОтчетаБезНалив);
	Запрос.УстановитьПараметр("НоменклатураОтчетаАИ", НоменклатураОтчетаАИ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.ГСМ;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции	

Функция НайтиКартыВБазе(мПластиковаяКартаОтчета, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	мсвТопливныхКарт = Новый Массив();
	Если ТипЗнч(мПластиковаяКартаОтчета) = Тип("Строка") Тогда
		мсвТопливныхКарт.Добавить(СокрЛП(мПластиковаяКартаОтчета));
	Иначе
		мсвТопливныхКарт = мПластиковаяКартаОтчета;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПластиковыеКарты.Ссылка КАК Карта,
	|	уатПластиковыеКарты.Основная КАК Основная,
	|	уатПластиковыеКарты.Статус.Действует КАК СтатусДействует,
	|	0 КАК Порядок,
	|	уатПластиковыеКарты.Код КАК ПластиковаяКартаОтчета
	|ПОМЕСТИТЬ втКарты
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.Код В(&ПластиковаяКартаОтчета)
	|	И НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И уатПластиковыеКарты.Статус.Действует = ИСТИНА
	|	И ВЫБОР
	|			КОГДА уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА уатПластиковыеКарты.ДатаОкончания >= &Дата
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПластиковыеКарты.Ссылка,
	|	уатПластиковыеКарты.Основная,
	|	уатПластиковыеКарты.Статус.Действует,
	|	1,
	|	уатПластиковыеКарты.Код
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.Код В(&ПластиковаяКартаОтчета)
	|	И НЕ уатПластиковыеКарты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКарты.Карта КАК Карта,
	|	втКарты.Основная КАК Основная,
	|	втКарты.СтатусДействует КАК СтатусДействует,
	|	втКарты.Порядок КАК Порядок,
	|	втКарты.ПластиковаяКартаОтчета КАК ПластиковаяКартаОтчета
	|ИЗ
	|	втКарты КАК втКарты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СтатусДействует УБЫВ,
	|	Основная УБЫВ
	|ИТОГИ ПО
	|	ПластиковаяКартаОтчета";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПластиковаяКартаОтчета", мсвТопливныхКарт);
	Запрос.УстановитьПараметр("ПластиковаяКартаОтчета", мсвТопливныхКарт);

	
	ВыбркаКарта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеКарт = Новый Соответствие;
	Пока ВыбркаКарта.Следующий() Цикл
		Выборка = ВыбркаКарта.Выбрать();
		Если Выборка.Следующий() Тогда
			СоответствиеКарт.Вставить(Выборка.ПластиковаяКартаОтчета, Выборка.Карта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеКарт;
	
КонецФункции

Функция НайтиКартуВБазе(мПластиковаяКартаОтчета, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПластиковыеКарты.Ссылка КАК Карта,
	|	уатПластиковыеКарты.Основная КАК Основная,
	|	уатПластиковыеКарты.Статус.Действует КАК СтатусДействует,
	|	0 КАК Порядок
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.Код = &ПластиковаяКартаОтчета
	|	И НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И уатПластиковыеКарты.Статус.Действует = ИСТИНА
	|	И ВЫБОР
	|			КОГДА уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА уатПластиковыеКарты.ДатаОкончания >= &Дата
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПластиковыеКарты.Ссылка,
	|	уатПластиковыеКарты.Основная,
	|	уатПластиковыеКарты.Статус.Действует,
	|	1
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.Код = &ПластиковаяКартаОтчета
	|	И НЕ уатПластиковыеКарты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СтатусДействует УБЫВ,
	|	Основная УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПластиковаяКартаОтчета",СокрЛП(мПластиковаяКартаОтчета));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Карта;
	Иначе
		Возврат "";
	КонецЕсли;	
	 
КонецФункции

Функция НайтиТСизПЛ(мВладелецКарты, мДатаЗаправки) Экспорт
	Если НЕ ЗначениеЗаполнено(мВладелецКарты) ИЛИ НЕ ЗначениеЗаполнено(мДатаЗаправки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запрос для поиска путевого листа для водителя
	ЗапросПЛ = Новый Запрос;
	ЗапросПЛ.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ПОМЕСТИТЬ втПересечения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель)
	|	И &ДатаЗаправки МЕЖДУ уатПутевойЛист.ДатаВыезда И уатПутевойЛист.ДатаВозвращения
	|	И уатПутевойЛист.ПометкаУдаления <> ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель)
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаЗаправкиНачало
	|	И уатПутевойЛист.ДатаВыезда <= &ДатаЗаправкиКонец
	|	И уатПутевойЛист.ПометкаУдаления <> ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	втПересечения.ТС КАК ТС
	|ИЗ
	|	втПересечения КАК втПересечения";
	
	ЗапросПЛ.УстановитьПараметр("Водитель", мВладелецКарты);
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправки", мДатаЗаправки);
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправкиНачало", НачалоДня(мДатаЗаправки));
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправкиКонец", КонецДня(мДатаЗаправки));
	РезультатЗапроса = ЗапросПЛ.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.ТС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ЗагрузкаТопливныхКарт

Процедура СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки, СоответствиеВодителей = Неопределено) Экспорт
	
	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		Газпромнефть_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		ЛИКАРД_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, СоответствиеВодителей, ТекстОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		Роснефть_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации = "", ВсеОК = Истина) Экспорт

	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		Газпромнефть_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации, ВсеОК);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		ЛИКАРД_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации, ВсеОК);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		Роснефть_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации, ВсеОК);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура выполняет создание заправок и сливов ГСМ по данным отчетов ПЦ и мониторинга
// Параметры:
//	СтруктураПараметров - Структура - структура параметров,
//	СозданныеДокументы - Массив - массив документов, созданных и обработанных
//		в ходе создания заправок (заправки, сливы, ПЛ, ТПЛ)
//
Процедура СоздатьЗаправкиГСМпоДаннымПЦиССМ(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина); 
	
	Если НЕ СтруктураПараметров.Свойство("Организация") Тогда
		СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("РежимРаботы") Тогда
		СтруктураПараметров.Вставить("РежимРаботы", 0);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ИспользоватьДанныеПЦ") Тогда
		СтруктураПараметров.Вставить("ИспользоватьДанныеПЦ", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ИспользоватьДанныеССМ") Тогда
		СтруктураПараметров.Вставить("ИспользоватьДанныеССМ", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ОсновнаяСтавкаНДС") Тогда
		СтруктураПараметров.Вставить("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ОбрабатыватьРассчитанныеПутевыеЛисты") Тогда
		СтруктураПараметров.Вставить("ОбрабатыватьРассчитанныеПутевыеЛисты", Истина);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("мсвТопливныеКарты") Тогда
		СтруктураПараметров.Вставить("мсвТопливныеКарты", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("мсвГСМ") Тогда
		СтруктураПараметров.Вставить("мсвГСМ", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ТС") Тогда
		СтруктураПараметров.Вставить("ТС", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидПЛприПоискеПЛдляЗаправки") Тогда
		СтруктураПараметров.Вставить("ВидПЛприПоискеПЛдляЗаправки", 0);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("СоздаватьСливыДляОтрицательныхЗаправок") Тогда
		СтруктураПараметров.Вставить("СоздаватьСливыДляОтрицательныхЗаправок", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидЗаправкиМониторинг") Тогда
		СтруктураПараметров.Вставить("ВидЗаправкиМониторинг", Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("АЗС") Тогда
		СтруктураПараметров.Вставить("АЗС", Справочники.уатАЗС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Контрагент") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.АЗС) Тогда
			СтруктураПараметров.Вставить("Контрагент", СтруктураПараметров.АЗС.Контрагент_Склад);
		Иначе
			СтруктураПараметров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидСлива") Тогда
		СтруктураПараметров.Вставить("ВидСлива", ?(СтруктураПараметров.АЗС.ЭтоАЗССклад,
			Перечисления.уатВидыОперацийСливГСМ.НаСклад, Перечисления.уатВидыОперацийСливГСМ.НаАЗС));
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("КомментироватьХодВыполнения") Тогда
		СтруктураПараметров.Вставить("КомментироватьХодВыполнения", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("АвтосозданиеТПЛ") Тогда
		СтруктураПараметров.Вставить("АвтосозданиеТПЛ", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("АдресХранилищаФоновогоЗадания") Тогда
		СтруктураПараметров.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("СообщенияОбОшибках") Тогда
		СтруктураПараметров.Вставить("СообщенияОбОшибках", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ЭтоРегламентноеЗадание") Тогда
		СтруктураПараметров.Вставить("ЭтоРегламентноеЗадание", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ЗаменятьАналогНаОсновноеТопливо") Тогда
		СтруктураПараметров.Вставить("ЗаменятьАналогНаОсновноеТопливо", Ложь);
	КонецЕсли;
	
	Если СтруктураПараметров.РежимРаботы = 1 
		И СтруктураПараметров.Свойство("ПроверятьНаличееДублейПоСозданнымРанееДокументам") Тогда
		СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 0;
	КонецЕсли;
	
	Если СтруктураПараметров.ИспользоватьДанныеПЦ Тогда
		Если СтруктураПараметров.АдресХранилищаФоновогоЗадания <> Неопределено Тогда 
			ТекстСообщения = "Запрос данных заправок ГСМ по отчетам ПЦ";
			ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
		КонецЕсли;
		
		мсвЗаправкиПЦ = ПолучитьДанныеЗаправокПЦ(СтруктураПараметров);
	Иначе
		мсвЗаправкиПЦ = Новый Массив;
	КонецЕсли;
	
	Если СтруктураПараметров.ИспользоватьДанныеССМ Тогда
		Если СтруктураПараметров.АдресХранилищаФоновогоЗадания <> Неопределено Тогда 
			ТекстСообщения = "Запрос данных заправок ГСМ по данным мониторинга";
			ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
		КонецЕсли;
		
		мсвЗаправкиССМ = ПолучитьДанныеЗаправокССМ(СтруктураПараметров);
	Иначе
		мсвЗаправкиССМ = Новый Массив;
	КонецЕсли;
	
	Если СтруктураПараметров.АдресХранилищаФоновогоЗадания <> Неопределено Тогда 
		ТекстСообщения = "Обработка данных заправок перед созданием документов";
		ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
	КонецЕсли;
		
	Если СтруктураПараметров.ИспользоватьДанныеПЦ И СтруктураПараметров.ИспользоватьДанныеССМ Тогда
		мсвДанныеЗаправок = ОбъединитьДанныеЗаправокПЦиССМ(СтруктураПараметров, мсвЗаправкиПЦ, мсвЗаправкиССМ);
	ИначеЕсли СтруктураПараметров.ИспользоватьДанныеССМ Тогда
		мсвДанныеЗаправок = мсвЗаправкиССМ;
	Иначе
		мсвДанныеЗаправок = мсвЗаправкиПЦ;
	КонецЕсли;
	
	ДополнительнаяОбработкаТаблицыДанныхЗаправок(СтруктураПараметров, мсвДанныеЗаправок);
	
	Если СтруктураПараметров.РежимРаботы = 0 Тогда
		ЗаписатьЗаправкиГСМ(СтруктураПараметров, мсвДанныеЗаправок, АдресРезультата);
	Иначе
		ОбновитьЗаправкиГСМ(СтруктураПараметров, мсвДанныеЗаправок, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, ВременныйФайл = "", СтруктураПараметровУчетнойЗаписи) Экспорт
	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР Тогда
		ППР_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		Газпромнефть_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, ВременныйФайл, СтруктураПараметровУчетнойЗаписи);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		ЛИКАРД_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		Роснефть_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи);
	КонецЕсли;
КонецПроцедуры

#Область Газпромнефть

// Выполняет выполняет загрузку данных от поставщика ПЦ Газпромнефть.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Газпромнефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала, ДатаОкончания = Неопределено, ТекущаяДата, ЕстьОшибки = Ложь)
	
	мсвЗагруженныеДанные = Новый Массив();
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания");
	Если ДатаОкончания <> Неопределено Тогда
		Период.ДатаНачала    = ДатаНачала;
		Период.ДатаОкончания = ДатаОкончания;
	Иначе 
		// Получение данных минимум за сутки, без возможности передать время.
		// Для загрузки новых заправок, пропущенных в предыдущей транзакции, грузим данные за 2ое суток
		Если ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) Тогда
			Период.ДатаНачала = НачалоДня(НачалоДня(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) - 1);
		Иначе
			Период.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата) - 1);
		КонецЕсли;
		Период.ДатаОкончания  = НачалоДня(ТекущаяДата);
	КонецЕсли;

	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Возврат мсвЗагруженныеДанные;
	КонецЕсли;
	
	Текстошибки = "";
	Газпромнефть_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи,,ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;

	ДатаНачала    = НачалоДня(Период.ДатаНачала);
	ДатаОкончания = НачалоДня(Период.ДатаОкончания);
	РазницаВМесяцах = (Год(ДатаОкончания) - Год(ДатаНачала))*12 +
	Месяц(ДатаОкончания) - Месяц(ДатаНачала) - ?(День(ДатаОкончания) >= День(ДатаНачала), 0, 1);
	Лет = ЦЕЛ(РазницаВМесяцах / 12);
	РазницаВМесяцах = РазницаВМесяцах - Лет * 12;
	
	МассивДат = Новый Массив();
	Если РазницаВМесяцах > 2 Тогда
		ДатаОкончания = Период.ДатаНачала - 1;
		Для ТекМесяц = 1 По РазницаВМесяцах Цикл
			ДатаНачала		 = КонецДня(ДатаОкончания) + 1;
			ДатаОкончания	 = КонецМесяца(ДатаНачала);
			Если ДатаОкончания > Период.ДатаОкончания Тогда
				ДатаОкончания = Период.ДатаОкончания;
			КонецЕсли;
			МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания));
		КонецЦикла;
		Если ДатаОкончания < Период.ДатаОкончания Тогда
			ДатаНачала		 = КонецДня(ДатаОкончания) + 1;
			МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, Период.ДатаОкончания));
		КонецЕсли;
	Иначе
		МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", Период.ДатаНачала, Период.ДатаОкончания));
	КонецЕсли;
	
	Для Каждого ТекСтрокаПериод Из МассивДат Цикл
		
		Если СтруктураПараметровУчетнойЗаписи.СохранятьОтчетВКаталог 
			И ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.КаталогФайлаДанных)Тогда
			ИмяФайлаДанных     = СтруктураПараметровУчетнойЗаписи.КаталогФайлаДанных
				+ "\" + НСтр("ru = 'ТранзакционныйОтчетЗаПериод'") + Формат(ТекущаяДата, "ДФ='ddMMyyyyHHmmss'") + ".xlsx";
			Попытка
				мсвЗагруженныеДанные = Новый Массив;
				Газпромнефть_ЗагрузитьЗаправкиИзAPI(ТекСтрокаПериод, мсвЗагруженныеДанные, ИмяФайлаДанных,
					СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
			Исключение
				ЗаписьЖурналаРегистрации("Процессинговый центр. Газпромнефть", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				Возврат мсвЗагруженныеДанные;
			КонецПопытки;
		Иначе
			мсвЗагруженныеДанные = Новый Массив;
			Газпромнефть_ЗагрузитьЗаправкиИзAPI(ТекСтрокаПериод, мсвЗагруженныеДанные,
				,СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсвЗагруженныеДанные;

КонецФункции

Процедура Газпромнефть_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, ВременныйФайл = "", СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;

	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзПЦ.ОбновлениеСпискаЗаправок.Газпромнефть";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекстОшибки = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("ДатаНачала",    Период.ДатаНачала);
	ПараметрыЗапрос.Вставить("ДатаОкончания", Период.ДатаОкончания);
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "reports", ПараметрыЗапрос, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	IDОтчета = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса);
	
	Пауза(300);
	ДвоичныеДанныеФайла = Газпромнефть_ПолучитьДанныеотчета(СтруктураПараметровУчетнойЗаписи,
		IDОтчета,
		ТекущаяДатаСеанса(), 1800, ТекстОшибки, 30);
	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	флагСохранятьОтчет = Ложь;
	Если ВременныйФайл = "" Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("xlsx");
	Иначе
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.XLSX);
		флагСохранятьОтчет = Истина;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
	Исключение
	КонецПопытки;
	
	ДлинаДатыЗаправки		 = СтрДлина("01.01.1900");
	ДлинаДатыЗаправкиСокр	 = СтрДлина("01.01.19");
	ДлинаВремениЗаправки	 = СтрДлина("12:00:00");
	ДлинаВремениЗаправкиСокр = СтрДлина("12:00");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ВременныйФайл, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	ПрофильОбменаСПЦ		 = СтруктураПараметровУчетнойЗаписи.АЗС.ПрофильОбменаСПЦ;
	СоответствиеКолонок		 = ПрофильОбменаСПЦ.СоответствиеКолонок;
	ТипСоответствияКолонок	 = ПрофильОбменаСПЦ.ТипСоответствияКолонок;
	
	СоответствиеКолонокВрем = Новый ТаблицаЗначений;
	СоответствиеКолонокВрем.Колонки.Добавить("КолонкаДокумента");
	СоответствиеКолонокВрем.Колонки.Добавить("ИмяКолонкиФайла");
	СоответствиеКолонокВрем.Колонки.Добавить("КолонкаДокументаПредставление");
	СоответствиеКолонокВрем.Колонки.Добавить("НомерКолонкиФайла");
	СоответствиеКолонокВрем.Колонки.Добавить("НомерСтрокиФайла");
	СоответствиеКолонокВрем.Колонки.Добавить("Использование");
	
	ФлагТипТранзакции = Ложь;
	ФлагТранзакция    = Ложь;
	Для Каждого ТекСтрока Из СоответствиеКолонок Цикл
		НоваяСтрока = СоответствиеКолонокВрем.Добавить();
		НоваяСтрока.КолонкаДокумента = ТекСтрока.КолонкаДокумента;
		НоваяСтрока.ИмяКолонкиФайла = ТекСтрока.ИмяКолонкиФайла;
		НоваяСтрока.КолонкаДокументаПредставление = ТекСтрока.КолонкаДокументаПредставление;
		НоваяСтрока.Использование = ТекСтрока.Использование;
		
		Если ТекСтрока.КолонкаДокумента = "ТипТранзакции" Тогда
			ФлагТипТранзакции = Истина;
		КонецЕсли;
		Если ТекСтрока.КолонкаДокумента = "RRNТранзакции" Тогда
			ФлагТранзакция = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ФлагТипТранзакции Тогда
		НоваяСтрока = СоответствиеКолонокВрем.Добавить();
		НоваяСтрока.КолонкаДокумента = "ТипТранзакции";
		НоваяСтрока.ИмяКолонкиФайла  = "Тип транзакции";
		НоваяСтрока.КолонкаДокументаПредставление = "Тип транзакции";
		НоваяСтрока.Использование    = Истина;
	КонецЕсли;
	
	Если НЕ ФлагТранзакция Тогда
		НоваяСтрока = СоответствиеКолонокВрем.Добавить();
		НоваяСтрока.КолонкаДокумента = "RRNТранзакции";
		НоваяСтрока.ИмяКолонкиФайла  = "RRN транзакции";
		НоваяСтрока.КолонкаДокументаПредставление = "RRN транзакции";
		НоваяСтрока.Использование    = Истина;
	КонецЕсли;
	
	ФлагЗаголовокНайден = Ложь;
	НомерПервойСтроки   = 0;
	Для мНомСтроки = 1 по ТабличныйДокумент.ВысотаТаблицы Цикл
		НомСтроки = СтрЗаменить(СтрЗаменить(Строка(мНомСтроки), " ", ""), Символы.НПП, "");
		Для НомКолонки = 1 по ТабличныйДокумент.ШиринаТаблицы Цикл
			ИмяКолонки = ТабличныйДокумент.Область("R" + НомСтроки + "C" + НомКолонки).Текст;
			Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
				Если НЕ ТекСоотв.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекСоотв.НомерКолонкиФайла) И ТекСоотв.ИмяКолонкиФайла = ИмяКолонки Тогда
					ТекСоотв.НомерКолонкиФайла	 = НомКолонки;
					НомерПервойСтроки			 = мНомСтроки + 1;
					ФлагЗаголовокНайден			 = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСоотв.ИмяКолонкиФайла) И ТекСоотв.ИмяКолонкиФайла = ИмяКолонки Тогда
					ТекСоотв.ИмяКолонкиФайла = ИмяКолонки;
					ФлагЗаголовокНайден		 = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		Если ФлагЗаголовокНайден Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
		Если НЕ ТекСоотв.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСоотв.НомерКолонкиФайла) 
			И НЕ ТекСоотв.КолонкаДокумента = "Дата"
			И НЕ ТекСоотв.КолонкаДокумента = "Время" Тогда
			ТекСоотв.Использование = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверяем на наличие всех колонок в файле, отмеченных флагом в таблице соответствий колонок
	флОшибкиСоотв = Ложь;
	Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
		Если НЕ ТекСоотв.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСоотв.НомерКолонкиФайла) Тогда
			флОшибкиСоотв = Истина;
			СтрокаОшибки = "Не найдена колонка файла или не указано соответствие для колонки документа """
			+ ТекСоотв.КолонкаДокументаПредставление + """!";

			ЗаписьЖурналаРегистрации("Процессинговый центр. Газпромнефть", УровеньЖурналаРегистрации.Ошибка,,, СтрокаОшибки);
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если флОшибкиСоотв Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем структуру колонок в удобном виде [ИмяКолонкиДок, НомКолонкиФайла]
	СтруктураКолонок = Новый Структура;
	Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
		Если НЕ ТекСоотв.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКолонок.Вставить(ТекСоотв.КолонкаДокумента, ТекСоотв.НомерКолонкиФайла);
	КонецЦикла;
	
	Если СтруктураКолонок.Дата = СтруктураКолонок.Время Тогда
		флИспользуетсяСовмещеннаяКолонкаДатаВремя = Истина;
	Иначе
		флИспользуетсяСовмещеннаяКолонкаДатаВремя = Ложь;
	КонецЕсли;
	
	ТаблицаТранзакций = Новый ТаблицаЗначений;
	ТаблицаТранзакций.Колонки.Добавить("Дата");
	ТаблицаТранзакций.Колонки.Добавить("ПластиковаяКартаОтчета");
	ТаблицаТранзакций.Колонки.Добавить("НоменклатураОтчета");
	ТаблицаТранзакций.Колонки.Добавить("Количество");
	ТаблицаТранзакций.Колонки.Добавить("Сумма");
	ТаблицаТранзакций.Колонки.Добавить("СтавкаНДС");
	ТаблицаТранзакций.Колонки.Добавить("СуммаНДС");
	ТаблицаТранзакций.Колонки.Добавить("МестоЗаправкиКод");
	ТаблицаТранзакций.Колонки.Добавить("МестоЗаправкиНаименование");
	ТаблицаТранзакций.Колонки.Добавить("ТипТранзакции");
	ТаблицаТранзакций.Колонки.Добавить("Транзакция");
	
	
	МассивСторнирования  = Новый Массив();
	
	ПластиковаяКартаПред = Неопределено;
	Для мНомСтр = НомерПервойСтроки по ТабличныйДокумент.ВысотаТаблицы Цикл
		НомСтр = СтрЗаменить(СтрЗаменить(Строка(мНомСтр), " ", ""), Символы.НПП, "");
		// Пропускаем строки с незаполненными картами
		Если ТабличныйДокумент.Область("R" + НомСтр + "C1").Текст = "Итого:" Тогда
			Прервать;
		КонецЕсли;
		
		Попытка
			Если ПустаяСтрока(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.ПластиковаяКартаОтчета).Текст)
				И Не ЗначениеЗаполнено(ПластиковаяКартаПред) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		// Пытаемся получить дату из строки
		ДатаЗаправки = Неопределено;
		Попытка
			Если флИспользуетсяСовмещеннаяКолонкаДатаВремя Тогда
				ДатаВремяЗаправкиСтрока = СокрЛП(СтрЗаменить(СтрЗаменить(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Дата).Текст,Символы.НПП,"")," ",""));
				ДатаЗаправкиСтрока = Лев(ДатаВремяЗаправкиСтрока, +10);
				ВремяЗаправкиСтрока = Сред(ДатаВремяЗаправкиСтрока,11,+8);
			Иначе
				ДатаЗаправкиСтрока = СокрЛП(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Дата).Текст);
				ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Время).Формат = "ДФ='ЧЧ:мм:сс';";
				ВремяЗаправкиСтрока = СокрЛП(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Время).Текст);
				// Для Сибнефть в дате есть еще и нулевое время
				ПозицияПустойСимвол = Найти(ДатаЗаправкиСтрока, " ");
				Если ПозицияПустойСимвол <> 0 Тогда
					ДатаЗаправкиСтрока = Лев(ДатаЗаправкиСтрока, ПозицияПустойСимвол - 1);
				КонецЕсли;
			КонецЕсли;
			
			флДатаЗаправки = (СтрДлина(ДатаЗаправкиСтрока) = ДлинаДатыЗаправки);
			флДатаЗаправкиСокр = (СтрДлина(ДатаЗаправкиСтрока) = ДлинаДатыЗаправкиСокр);
			флВремяЗаправки = (СтрДлина(ВремяЗаправкиСтрока) = ДлинаВремениЗаправки);
			флВремяЗаправкиСокр = (СтрДлина(ВремяЗаправкиСтрока) = ДлинаВремениЗаправкиСокр);
			
			Если Не флДатаЗаправки и Не флВремяЗаправкиСокр Тогда
				Если флИспользуетсяСовмещеннаяКолонкаДатаВремя Тогда
					ДатаВремяЗаправкиСтрока = СокрЛП(СтрЗаменить(СтрЗаменить(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Дата).Текст,Символы.НПП,"")," ",""));
					ДатаЗаправкиСтрока = Лев(ДатаВремяЗаправкиСтрока, +10);
				Иначе	
					ДатаЗаправкиСтрока = СокрЛП(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Дата).Текст);
					ПозицияПустойСимвол = Найти(ДатаЗаправкиСтрока, " ");
					Если ПозицияПустойСимвол <> 0 Тогда
						ДатаЗаправкиСтрока = Лев(ДатаЗаправкиСтрока, ПозицияПустойСимвол - 1);
					КонецЕсли;
				КонецЕсли;
				флДатаЗаправки = (СтрДлина(ДатаЗаправкиСтрока) = ДлинаДатыЗаправки);
				флДатаЗаправкиСокр = (СтрДлина(ДатаЗаправкиСтрока) = ДлинаДатыЗаправкиСокр);
			КонецЕсли;
			
			Если Не флВремяЗаправки И Не флВремяЗаправкиСокр Тогда
				Если флИспользуетсяСовмещеннаяКолонкаДатаВремя Тогда
					ВремяЗаправкиСтрока = Сред(ДатаВремяЗаправкиСтрока,11,+8);
				Иначе
					ВремяЗаправкиСтрока = СокрЛП(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Время).Текст);
				КонецЕсли;
				Если СтрДлина(ВремяЗаправкиСтрока) = 7 Тогда
					ВремяЗаправкиСтрока = "0" + ВремяЗаправкиСтрока;
				КонецЕсли;
				флВремяЗаправки = (СтрДлина(ВремяЗаправкиСтрока) = ДлинаВремениЗаправки);
				флВремяЗаправкиСокр = (СтрДлина(ВремяЗаправкиСтрока) = ДлинаВремениЗаправкиСокр);
			КонецЕсли;
			
			Если (флДатаЗаправки ИЛИ флДатаЗаправкиСокр) И (флВремяЗаправки ИЛИ флВремяЗаправкиСокр) Тогда
				Месяц_ = Число(Сред(ДатаЗаправкиСтрока, 4, 2));
				День_ = Число(Лев(ДатаЗаправкиСтрока, 2));
				Если флДатаЗаправки Тогда
					Год_ = Число(Сред(ДатаЗаправкиСтрока, 7, 4));
				Иначе
					Год_ = Цел(Год(ТекущаяДата())/100)*100 + Число(Сред(ДатаЗаправкиСтрока, 7, 2));
				КонецЕсли;
				
				Час_ = Число(Лев(ВремяЗаправкиСтрока, 2));
				Минута_ = Число(Сред(ВремяЗаправкиСтрока, 4, 2));
				Если флВремяЗаправки Тогда
					Секунда_ = Число(Прав(ВремяЗаправкиСтрока, 2));
				Иначе
					Секунда_ = 0;
				КонецЕсли;
				
				ДатаЗаправки = Дата(Год_, Месяц_, День_, Час_, Минута_, Секунда_);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(ДатаЗаправки) <> Тип("Дата") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураКолонок.Свойство("ТипТранзакции") Тогда
			ТипТранзакции = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.ТипТранзакции).Текст;
		Иначе
			ТипТранзакции = "";
		КонецЕсли;
		
		Если СтруктураКолонок.Свойство("ТипТранзакции") Тогда
			Транзакция = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.RRNТранзакции).Текст;
		Иначе
			Транзакция = "";
		КонецЕсли;
		
		Если ТипТранзакции = "Сторнирование" Тогда
			СтрокиТранзакции = ТаблицаТранзакций.НайтиСтроки(Новый Структура("Транзакция, Дата", Транзакция, ДатаЗаправки));
			Если СтрокиТранзакции.Количество() <> 0 Тогда
				ПредСумма       = 0;
				СтрокаКУдалению = Неопределено;
				Для Каждого ТекТранзакция Из СтрокиТранзакции Цикл
					Если ТекТранзакция.Сумма > ПредСумма Тогда
						СтрокаКУдалению = ТекТранзакция;
						ПредСумма = ТекТранзакция.Сумма;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаКУдалению <> Неопределено Тогда
					ТаблицаТранзакций.Удалить(СтрокаКУдалению);
				КонецЕсли;
			Иначе
				МассивСторнирования.Добавить(Новый Структура("Транзакция, Дата", Транзакция, ДатаЗаправки));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТранзакций.Добавить();
		НоваяСтрока.ТипТранзакции = ТипТранзакции;
		НоваяСтрока.Дата          = ДатаЗаправки;
		НоваяСтрока.Транзакция    = Транзакция;
		
		ПластиковаяКарта = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.ПластиковаяКартаОтчета).Текст;
		Если ТипЗнч(ПластиковаяКарта) = Тип("Число") Тогда 
			ПластиковаяКарта = Формат(ПластиковаяКарта, "ЧГ=0");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
			ПластиковаяКартаПред = ПластиковаяКарта;
		КонецЕсли;
		НоваяСтрока.ПластиковаяКартаОтчета = ПластиковаяКартаПред;
		Если СтруктураКолонок.Свойство("НоменклатураОтчета") Тогда
			НоваяСтрока.НоменклатураОтчета = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.НоменклатураОтчета).Текст;
		Иначе
			НоваяСтрока.НоменклатураОтчета = "";
		КонецЕсли;
		Если СтруктураКолонок.Свойство("Количество") Тогда
			ТекКолич = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Количество).Текст;
			Попытка 
				ТекКолич = Число(ТекКолич);
			Исключение
				ТекКолич = 0;
			КонецПопытки;
			НоваяСтрока.Количество = ТекКолич;
		Иначе
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		Если СтруктураКолонок.Свойство("Сумма") Тогда
			ТекСумма = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.Сумма).Текст;
			Попытка 
				ТекСумма = Число(ТекСумма);
			Исключение
				ТекСумма = 0;
			КонецПопытки;
			НоваяСтрока.Сумма = ТекСумма;
		Иначе
			НоваяСтрока.Сумма = 0;
		КонецЕсли;
		Если СтруктураКолонок.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС = ПолучитьСсылкуНаСтавкуНДС(ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.СтавкаНДС).Текст);
		Иначе
			НоваяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
		КонецЕсли;
		Если СтруктураКолонок.Свойство("СуммаНДС") Тогда
			ТекСуммаНДС = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.СуммаНДС).Текст;
			Попытка 
				ТекСуммаНДС = Число(ТекСумма);
			Исключение
				ТекСуммаНДС = 0;
			КонецПопытки;
			НоваяСтрока.СуммаНДС = ТекСуммаНДС;
		Иначе
			НоваяСтрока.СуммаНДС = 0;
		КонецЕсли;
		Если СтруктураКолонок.Свойство("МестоЗаправкиКод") Тогда
			НоваяСтрока.МестоЗаправкиКод = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.МестоЗаправкиКод).Текст;
		Иначе
			НоваяСтрока.МестоЗаправкиКод = 0;
		КонецЕсли;
		Если СтруктураКолонок.Свойство("МестоЗаправкиНаименование") Тогда
			НоваяСтрока.МестоЗаправкиНаименование = ТабличныйДокумент.Область("R" + НомСтр + "C" + СтруктураКолонок.МестоЗаправкиНаименование).Текст;
		Иначе
			НоваяСтрока.МестоЗаправкиНаименование = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСторнирование Из МассивСторнирования Цикл
		СтрокиТранзакции = ТаблицаТранзакций.НайтиСтроки(Новый Структура("Транзакция",
		ТекСторнирование.Транзакция));
		Если СтрокиТранзакции.Количество() <> 0 Тогда
			ПредСумма       = 0;
			СтрокаКУдалению = Неопределено;
			Для Каждого ТекТранзакция Из СтрокиТранзакции Цикл
				Если ТекТранзакция.Сумма > ПредСумма Тогда
					СтрокаКУдалению = ТекТранзакция;
					ПредСумма = ТекТранзакция.Сумма;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаКУдалению <> Неопределено Тогда
				ТаблицаТранзакций.Удалить(СтрокаКУдалению);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаТранзакций Цикл
		СтруктураТранзакции = Новый Структура("Дата,ПластиковаяКартаОтчета,НоменклатураОтчета,
		|Количество,Сумма,СтавкаНДС,СуммаНДС,МестоЗаправкиКод,МестоЗаправкиНаименование,ТипТранзакции,Транзакция");
		ЗаполнитьЗначенияСвойств(СтруктураТранзакции, ТекСтрока);
		мсвЗагруженныеДанные.Добавить(СтруктураТранзакции);
	КонецЦикла;
	
	Если НЕ флагСохранятьОтчет Тогда
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Функция производит авторизацию пользователя.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Газпромнефть_Авторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт 
	
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);

	Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// Функция выполняет получение списка ГСМ.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  Массив - Список ГСМ.
//
Функция Газпромнефть_ПолучитьМассивГСМ(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт 
	
	МассивГСМ = Новый Массив();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивГСМ;
	КонецЕсли;
		
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИмяСправочника", "Goods");
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getDictionary", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивГСМ;
	КонецЕсли;
	
	МассивГСМ = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивНоменклатуры(ДанныеЗапроса);

	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат МассивГСМ;
	
КонецФункции

// Функция выполняет получение списка договоров.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  СписокЗначений - Список договоров.
//
Функция Газпромнефть_ПолучитьСписокДоговоров(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт 
	
	СписокДоговоровПодробный = Новый СписокЗначений();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат СписокДоговоровПодробный;
	КонецЕсли;
	
	СписокДоговоров = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_СписокДоговор(ДанныеЗапроса);

	// Получаем данные по каждому договору
	Для Каждого ТекДоговор Из СписокДоговоров Цикл
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("contract_id", ТекДоговор.Значение);
		ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"getPartContractData", ПараметрыЗапроса, ТекстОшибки);
		СтруктураДоговора = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_ДанныеПоДоговору(ДанныеЗапроса);
		
		Если СтруктураДоговора.IDДоговора = Неопределено Тогда
			IDДоговора     = ТекДоговор.Значение; 
			ДоговорАктивен = Истина;
		Иначе
			IDДоговора     = СтруктураДоговора.IDДоговора;
			ДоговорАктивен = СтруктураДоговора.ДоговорАктивен;
		КонецЕсли;
		Если СтруктураДоговора.НаименованиеДоговора = Неопределено Тогда
			НаименованиеДоговора = ТекДоговор.Значение; 
		Иначе
			НаименованиеДоговора = СтруктураДоговора.НаименованиеДоговора;
		КонецЕсли;
		СписокДоговоровПодробный.Добавить(IDДоговора,
			Новый ФорматированнаяСтрока(НаименованиеДоговора,
			,?(ДоговорАктивен, Неопределено, ЦветаСтиля.ЦветТекстаНеактуальногоСписка)));
	КонецЦикла;

	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат СписокДоговоровПодробный;
	
КонецФункции

// Функция выполняет получение списка групп карт.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  Массив - Список групп карт.
//
Функция Газпромнефть_ПолучитьМассивГруппКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивГрупп = Новый Массив();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивГрупп;
	КонецЕсли;

	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "cardGroups",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивГрупп;
	КонецЕсли;

	МассивГрупп = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивГруппКарт(ДанныеЗапроса);

	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат МассивГрупп;
	
КонецФункции

// Функция выполняет получение списка карт.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  Массив - Список групп карт.
//
Функция Газпромнефть_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивКарт = Новый Массив();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивКарт;
	КонецЕсли;

	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "cards",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивКарт;
	КонецЕсли;

	МассивКарт = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивТопливныхКарт(ДанныеЗапроса);

	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат МассивКарт;
	
КонецФункции

Процедура Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "logoff",, ТекстОшибки);
	
КонецПроцедуры

Функция Газпромнефть_ПрименитьЛимит(СтруктураПараметровУчетнойЗаписи, ИдентификаторКарты, Лимит, ТекстОшибки = "") Экспорт
	
	ФлагВыполнено = Ложь;
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ФлагВыполнено;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИдентификаторКарты", ИдентификаторКарты);
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "limit", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ФлагВыполнено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИмяСправочника", "ProductType");
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getDictionary", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ФлагВыполнено;
	КонецЕсли;
	МассивТиповГСМ = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивНоменклатуры(ДанныеЗапроса);
	
	ТипГСМ = "1-CK231";
	Для Каждого ТекСтрока Из МассивТиповГСМ Цикл
		Если ТекСтрока.Код = "FUEL" Тогда
			ТипГСМ = ТекСтрока.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИдентификаторКарты", ИдентификаторКарты);
	ПараметрыЗапроса.Вставить("ТипГСМ",             ТипГСМ);
	ПараметрыЗапроса.Вставить("Лимит",              Лимит);

	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "setLimit", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;

	ФлагВыполнено = Истина;
	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	

	Возврат ФлагВыполнено;
	
КонецФункции

Функция Газпромнефть_ПолучитьИнформациюПоКарте(СтруктураПараметровУчетнойЗаписи, ИдентификаторКарты, ТекстОшибки = "") Экспорт
	
	ДетальнаяИнформацияПоКарте = Новый Структура;
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("card_id", ИдентификаторКарты);
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(
		СтруктураПараметровУчетнойЗаписи, "cards", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);

	МассивТопливныхКарт = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивТопливныхКарт(ДанныеЗапроса);
	Если МассивТопливныхКарт.Количество() <> 0 Тогда
		ДетальнаяИнформацияПоКарте = МассивТопливныхКарт[0];
	КонецЕсли;
	
	Статус  = ПолучитьСтатусКарты(ДетальнаяИнформацияПоКарте.Статус, СтруктураПараметровУчетнойЗаписи);
	ДетальнаяИнформацияПоКарте.Вставить("СтатусСсылка", Статус);
		
	Возврат ДетальнаяИнформацияПоКарте;
	
КонецФункции

Функция Газпромнефть_БлокироватьРазблокироватьКарту(СтруктураПараметровУчетнойЗаписи, ИдентификаторКарты, Заблокировать = Истина, ТекстОшибки = "") Экспорт
	
	ФлагВыполнено = Ложь;
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ФлагВыполнено;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИдентификаторКарты", ИдентификаторКарты);
	ПараметрыЗапроса.Вставить("Заблокировать",      Заблокировать);
	
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "blockCard", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ФлагВыполнено;
	КонецЕсли;
	
	ФлагВыполнено = Истина;
	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат ФлагВыполнено;
	
КонецФункции

Функция Газпромнефть_ПолучитьДанныеотчета(СтруктураПараметровУчетнойЗаписи, IDОтчета, ВремяЗапуска, ВремяОжиданияСек, ТекстОшибки, ПаузаСек = 2)
	
	ДвоичныеДанныеФайла = "";
	
	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("IDОтчета", IDОтчета);
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetReportFile", ПараметрыЗапрос, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
 
	Если НЕ ТипЗнч(ДанныеЗапроса) = Тип("Соответствие") Тогда
		Возврат ДанныеЗапроса;
	Иначе 
		Если ТекущаяДатаСеанса() - ВремяЗапуска >= ВремяОжиданияСек Тогда
			ТекстОшибки = НСтр("ru='Ошибка при попытке получить данные отчета.'");
		Иначе
			Пауза(ПаузаСек);
			ДвоичныеДанныеФайла = Газпромнефть_ПолучитьДанныеотчета(СтруктураПараметровУчетнойЗаписи, 
				IDОтчета, ВремяЗапуска, ВремяОжиданияСек, ТекстОшибки, ПаузаСек + 2);
		КонецЕсли;
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;

КонецФункции

Процедура Газпромнефть_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации = "", ВсеОК = Истина) Экспорт

	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ИмяСобытияВЖурналеРегистрации <> "" Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
			ВсеОК = Ложь;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИмяСправочника", "CardStatus");
	ДанныеЗапроса = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getDictionary", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ИмяСобытияВЖурналеРегистрации <> "" Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
			ВсеОК = Ложь;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Газпромнефть_Деавторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	МассивСтатусовКарт = уатИнтеграцияПЦГазпромнефть.Газпромнефть_ВыполнитьОбработкуРезультатаЗапроса_МассивНоменклатуры(ДанныеЗапроса);
	
	СтатусыТопливныхКарт	 = Новый Массив();
	Для Каждого ТекСтатус Из МассивСтатусовКарт Цикл
		СтатусыТопливныхКарт.Добавить(ТекСтатус.Идентификатор);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика КАК НаименованиеВСистемеПоставщика
	               |ИЗ
	               |	Справочник.уатСтатусыТопливныхКарт КАК уатСтатусыТопливныхКарт
	               |ГДЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика В(&СтатусыТопливныхКарт)
	               |	И НЕ уатСтатусыТопливныхКарт.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СтатусыТопливныхКарт", СтатусыТопливныхКарт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтатус = СтатусыТопливныхКарт.Найти(Выборка.НаименованиеВСистемеПоставщика);
		Если ТекСтатус <> Неопределено Тогда
			СтатусыТопливныхКарт.Удалить(ТекСтатус);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекСтатус Из МассивСтатусовКарт Цикл
		Если СтатусыТопливныхКарт.Найти(ТекСтатус.Идентификатор) <> Неопределено Тогда
			НовыйСтатус = Справочники.уатСтатусыТопливныхКарт.СоздатьЭлемент();
			НовыйСтатус.Наименование					 = ?(ЗначениеЗаполнено(ТекСтатус.Наименование), 
				ТекСтатус.Наименование, ТекСтатус.Значение);
			НовыйСтатус.НаименованиеВСистемеПоставщика	 = ТекСтатус.Идентификатор;
			НовыйСтатус.Действует						 = ?(ТекСтатус.Идентификатор = "Active",
			Истина, Ложь);
			НовыйСтатус.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Газпромнефть_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено = 0, ТекстОшибки = "") Экспорт
	
	Загружено			 = 0;
	ТекстОшибки			 = "";
	МассивДанных = Газпромнефть_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;

	УчетнаяЗаписьПЦ = СтруктураПараметровУчетнойЗаписи.Ссылка;
	АЗС             = СтруктураПараметровУчетнойЗаписи.АЗС;
	
	ГруппыКарт         = АЗС.ГруппыКарт;
	ЕстьОтборПоГруппам = ГруппыКарт.Количество() <> 0;

	МассивТопливныхКарт = Новый Массив;
	МассивИДКарт        = Новый Массив;
	МассивНомеровКарт   = Новый Массив;
	ИДПоНомеру          = Новый Соответствие();
	Для Каждого ТекКарта Из МассивДанных Цикл
		
		Если ТекКарта.Тип = "wallet"
			ИЛИ (ЕстьОтборПоГруппам
			И ГруппыКарт.НайтиСтроки(
			Новый Структура("IDГруппы", ТекКарта.IDГруппы)).Количество() = 0) Тогда
			Продолжить;
		КонецЕсли;

		ТекКарта.Идентификатор = СтрЗаменить(СтрЗаменить(ТекКарта.Идентификатор, " ", ""), Символы.НПП, "");
		ТекКарта.Номер         = СтрЗаменить(СтрЗаменить(ТекКарта.Номер, " ", ""), Символы.НПП, "");
		
		МассивТопливныхКарт.Добавить(ТекКарта);
		МассивИДКарт.Добавить(ТекКарта.Идентификатор);
		МассивНомеровКарт.Добавить(ТекКарта.Номер);
		
		ИДПоНомеру.Вставить(ТекКарта.Номер, ТекКарта.Идентификатор);
	КонецЦикла;

	СоответствиеКарт = ПолучитьСписокТопливныхКартПоИД(МассивИДКарт, МассивНомеровКарт, ИДПоНомеру, АЗС);
	
	Для Каждого ТекКарта Из МассивТопливныхКарт Цикл
		КартаСсылка = СоответствиеКарт.Получить(ТекКарта.Идентификатор);
		Если НЕ ЗначениеЗаполнено(КартаСсылка) Тогда
			СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
			Загружено = Загружено + 1;
		Иначе 
			Если КартаСсылка.КемВыдана <> АЗС Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Карта  %1 не была сопоставлена. АЗС не соответствует загружаемой.'"), КартаСсылка.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Статус = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
			Если ТекКарта.Идентификатор = КартаСсылка.IDкарты
				И Статус = КартаСсылка.Статус Тогда
				Продолжить;
			КонецЕсли;

			СпрОб = КартаСсылка.ПолучитьОбъект();
			СпрОб.Статус  = Статус;
			СпрОб.IDкарты = ТекКарта.Идентификатор;
			СпрОб.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура Газпромнефть_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки)
	
	НоваяКарта = Справочники.уатПластиковыеКарты.СоздатьЭлемент();
	НоваяКарта.Код			 = СтрЗаменить(ТекКарта.Номер, " ", "");
	НоваяКарта.ДатаВыдачи	 = ТекКарта.ДатаВыдачи;
	НоваяКарта.IDкарты		 = СтрЗаменить(ТекКарта.Идентификатор, " ", "");
	НоваяКарта.КемВыдана	 = СтруктураПараметровУчетнойЗаписи.АЗС;
	
	НоваяКарта.Статус		 = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
	НоваяКарта.Записать();
	
	ИсторияИзмененияВладельцаКарты = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьМенеджерЗаписи();
	ИсторияИзмененияВладельцаКарты.Период		 = НоваяКарта.ДатаВыдачи;
	ИсторияИзмененияВладельцаКарты.Карта		 = НоваяКарта.Ссылка;
	ИсторияИзмененияВладельцаКарты.КомуВыдана	 = НоваяКарта.КомуВыдана;
	Попытка
		ИсторияИзмененияВладельцаКарты.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура Пауза(Секунды)
	 
	ВремяОкончания = ТекущаяДатаСеанса() + Секунды;
	Пока ТекущаяДатаСеанса() <= ВремяОкончания Цикл
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеЗаправокПоОтчетамПЦ(Регистратор, Организация, АЗС, ЗаменятьАналогНаОсновноеТопливо = Ложь) Экспорт
	Перем мДокументЗаправкаСлив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.ТС КАК ТС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Номенклатура КАК ГСМ,
	|	уатОборотыПоОтчетамПоставщиковПЦ.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Валюта КАК Валюта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Количество КАК Количество,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Стоимость КАК Стоимость,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СтавкаНДС КАК СтавкаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СуммаНДС КАК СуммаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период КАК Период,
	|	уатОборотыПоОтчетамПоставщиковПЦ.АЗС КАК АЗС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.УчитыватьНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.СуммаВключаетНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|ГДЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.Регистратор = &Регистратор
	|	И (уатОборотыПоОтчетамПоставщиковПЦ.Количество <> 0
	|			ИЛИ уатОборотыПоОтчетамПоставщиковПЦ.Стоимость <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Индекс             = 0;
	мсвВыборкаЗаправки = Новый Массив();
	мсвВыборкаСливы    = Новый Массив();
	МассивГСМ          = Новый Массив();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("НомерСтроки",      Индекс);
		СтруктураСтроки.Вставить("Контрагент",       Выборка.Контрагент);
		СтруктураСтроки.Вставить("АЗС",              Выборка.АЗС);
		СтруктураСтроки.Вставить("ТС",               Выборка.ТС);
		СтруктураСтроки.Вставить("ГСМ",              Выборка.ГСМ);
		СтруктураСтроки.Вставить("ПластиковаяКарта", Выборка.ПластиковаяКарта);
		СтруктураСтроки.Вставить("Валюта",           Выборка.Валюта);
		СтруктураСтроки.Вставить("Количество",       Выборка.Количество);
		СтруктураСтроки.Вставить("Стоимость",        Выборка.Стоимость);
		СтруктураСтроки.Вставить("Период",           Выборка.Период);
		СтруктураСтроки.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураСтроки.Вставить("СуммаНДС",         Выборка.СуммаНДС);
		СтруктураСтроки.Вставить("УчитыватьНДС",     Выборка.УчитыватьНДС);
		СтруктураСтроки.Вставить("СуммаВключаетНДС", Выборка.СуммаВключаетНДС);
		СтруктураСтроки.Вставить("КоличествоСлив",   0);
		СтруктураСтроки.Вставить("ЕстьДубли",        Ложь);
		СтруктураСтроки.Вставить("Дубли",            "");
		
		Если Выборка.Количество > 0 Тогда
			мсвВыборкаЗаправки.Добавить(СтруктураСтроки);
			Если МассивГСМ.Найти(СтруктураСтроки.ГСМ) = Неопределено Тогда
				МассивГСМ.Добавить(СтруктураСтроки.ГСМ);
			КонецЕсли;
		Иначе
			ИндексСтроки = мсвВыборкаЗаправки.Количество() - 1;
			Пока ИндексСтроки >= 0 Цикл
				Если Выборка.ТС = мсвВыборкаЗаправки[ИндексСтроки].ТС И Выборка.ГСМ = мсвВыборкаЗаправки[ИндексСтроки].ГСМ 
					И Выборка.Валюта = мсвВыборкаЗаправки[ИндексСтроки].Валюта Тогда
					мсвВыборкаЗаправки[ИндексСтроки].КоличествоСлив = мсвВыборкаЗаправки[ИндексСтроки].КоличествоСлив + Выборка.Количество;
					Прервать;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки - 1;
			КонецЦикла;

			мсвВыборкаСливы.Добавить(СтруктураСтроки);
			Если МассивГСМ.Найти(СтруктураСтроки.ГСМ) = Неопределено Тогда
				МассивГСМ.Добавить(СтруктураСтроки.ГСМ);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ЗаменятьАналогНаОсновноеТопливо Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивГСМ", МассивГСМ);
		Запрос.Текст = "ВЫБРАТЬ
		               |	уатАналогиГСМ.Аналог КАК Аналог,
		               |	уатАналогиГСМ.ГСМ КАК ГСМ
		               |ИЗ
		               |	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
		               |ГДЕ
		               |	уатАналогиГСМ.Аналог В (&МассивГСМ)";
		Выборка = Запрос.Выполнить().Выбрать();
		Для Каждого ТекСтрока Из мсвВыборкаЗаправки Цикл
			СтруктураПоиска = Новый Структура("Аналог, ГСМ", ТекСтрока.ГСМ, ТекСтрока.ТС.Модель.ОсновноеТопливо);
			Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
				ТекСтрока.ГСМ = Выборка.ГСМ;
			КонецЕсли;
			Выборка.Сбросить();
		КонецЦикла;
	КонецЕсли;
	СписокПЛ = Новый СписокЗначений;
	
	ТекОтветственный = АЗС.УчетнаяЗаписьПЦ.Ответственный;
	НастройкиОрганизации_УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	НастройкиОрганизации_СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
		
	КолСтрок	 = мсвВыборкаЗаправки.Количество();
	Инд			 = 0;
	Дата1		 = '00010101';
	флЗаписать	 = Ложь;
	мОтказ		 = Ложь;
	ВидОперацииСливГСМ		 = ?(АЗС.ЭтоАЗССклад, Перечисления.уатВидыОперацийСливГСМ.НаСклад, Перечисления.уатВидыОперацийСливГСМ.НаАЗС);
	ВидОперацииЗаправкаГСМ	 = ?(АЗС.ЭтоАЗССклад, Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад, Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
	
	СообщениеПредупреждение	 = "";
	
	Для Каждого ВыборкаЗапроса Из мсвВыборкаЗаправки Цикл
		Инд = Инд + 1;
		ЗначениеИндикатора = Инд / КолСтрок * 100;
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаЗапроса.ТС) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Дата1 <> '00010101' Тогда
			Попытка
				мДокументЗаправкаСлив.Записать(РежимЗаписиДокумента.Проведение);
				
				Если ЗначениеЗаполнено(СообщениеПредупреждение) Тогда
					СообщениеПредупреждение = СтрШаблон(СообщениеПредупреждение, мДокументЗаправкаСлив);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПредупреждение);
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			флЗаписать = Ложь;
		КонецЕсли;
		
		Дата1 = ВыборкаЗапроса.Период;
		
		СообщениеПредупреждение = "";
		мДокументЗаправкаСлив = Документы.уатЗаправкаГСМ.СоздатьДокумент();
		Если ВыборкаЗапроса.УчитыватьНДС = Неопределено Тогда //это иной документ, например Корректировка записей регистров - нестандартная ситуация
			мДокументЗаправкаСлив.УчитыватьНДС = НастройкиОрганизации_УчитыватьНДС;
			мДокументЗаправкаСлив.СуммаВключаетНДС = НастройкиОрганизации_СуммаВключаетНДС;
		Иначе // Это документ Отчет ПЦ
			мДокументЗаправкаСлив.УчитыватьНДС = ВыборкаЗапроса.УчитыватьНДС;
			мДокументЗаправкаСлив.СуммаВключаетНДС = ВыборкаЗапроса.СуммаВключаетНДС;
		КонецЕсли;
		
		мДокументЗаправкаСлив.ВидДвиженияГСМ = ВидОперацииЗаправкаГСМ;
		Если ТипЗнч(АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
			мДокументЗаправкаСлив.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(АЗС.Контрагент_Склад, "СПоставщиком", Организация);
		КонецЕсли;
		
		мДокументЗаправкаСлив.Дата						 = Дата1;
		мДокументЗаправкаСлив.АЗС						 = ВыборкаЗапроса.АЗС;
		мДокументЗаправкаСлив.Организация				 = Организация;
		мДокументЗаправкаСлив.Ответственный				 = ТекОтветственный;
		
		флЗаписать = Истина;
		
		НоваяСтрока = мДокументЗаправкаСлив.Заправки.Добавить();
		НоваяСтрока.Дата		 = Дата1;
		НоваяСтрока.ГСМ			 = ВыборкаЗапроса.ГСМ;
		НоваяСтрока.ТС			 = ВыборкаЗапроса.ТС;
		
		МестоТС = уатОбщегоНазначения.МестонахождениеТС(ВыборкаЗапроса.ТС, Дата1);
		Если ЗначениеЗаполнено(мДокументЗаправкаСлив.ПодразделениеОрганизации) И
			мДокументЗаправкаСлив.ПодразделениеОрганизации <> МестоТС.Подразделение
			ИЛИ ЗначениеЗаполнено(мДокументЗаправкаСлив.Колонна) И мДокументЗаправкаСлив.Колонна <> МестоТС.Колонна Тогда
			СообщениеПредупреждение = НСтр("ru = 'В документе %1 колонна и подразделение не были заполнены, так как в списке присутствуют ТС с различным местоположением.'");
			мДокументЗаправкаСлив.ПодразделениеОрганизации	 = Неопределено;
			мДокументЗаправкаСлив.Колонна					 = Неопределено;
		Иначе
			мДокументЗаправкаСлив.ПодразделениеОрганизации	 = МестоТС.Подразделение;
			мДокументЗаправкаСлив.Колонна					 = МестоТС.Колонна;
		КонецЕсли;

		НоваяСтрока.Цена		 = ВыборкаЗапроса.Стоимость / ?(ВыборкаЗапроса.Количество = 0, 1, ВыборкаЗапроса.Количество);
		НоваяСтрока.Количество	 = ВыборкаЗапроса.Количество + ВыборкаЗапроса.КоличествоСлив;
		НоваяСтрока.Сумма		 = ?(ЗначениеЗаполнено(ВыборкаЗапроса.КоличествоСлив) , НоваяСтрока.Количество * НоваяСтрока.Цена, ВыборкаЗапроса.Стоимость);
		
		Если ВыборкаЗапроса.УчитыватьНДС = Неопределено Тогда //это иной документ, например Корректировка записей регистров - нестандартная ситуация
			НоваяСтрока.СтавкаНДС = НоваяСтрока.ГСМ.СтавкаНДС;
			НоваяСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяСтрока.Сумма,
				мДокументЗаправкаСлив.УчитыватьНДС, мДокументЗаправкаСлив.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		Иначе // Это документ Отчет ПЦ
			НоваяСтрока.СтавкаНДС = ВыборкаЗапроса.СтавкаНДС;
			НоваяСтрока.СуммаНДС  = ?(ЗначениеЗаполнено(ВыборкаЗапроса.КоличествоСлив), уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяСтрока.Сумма,
				мДокументЗаправкаСлив.УчитыватьНДС, мДокументЗаправкаСлив.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС)), ВыборкаЗапроса.СуммаНДС);
		КонецЕсли;
			
		Если ВыборкаЗапроса.УчитыватьНДС = Истина И ВыборкаЗапроса.СуммаВключаетНДС = Ложь Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма - ВыборкаЗапроса.СуммаНДС;
		Иначе
			НоваяСтрока.Сумма = НоваяСтрока.Сумма;
		КонецЕсли;
		
		НоваяСтрока.Валюта				 = ВыборкаЗапроса.Валюта;
		НоваяСтрока.ПластиковаяКарта	 = ВыборкаЗапроса.ПластиковаяКарта;
		
		// Теперь найдем путевой лист
		ПрофильОбменаСПЦ = АЗС.ПрофильОбменаСПЦ;
		ВремяВыезд      = ПрофильОбменаСПЦ.ГлубинаПоискаПЛДоВыезда;
		ВремяВозврат    = ПрофильОбменаСПЦ.ГлубинаПоискаПЛПослеВозвращения;
		
		ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛистыВыездВозврат(ВыборкаЗапроса.ТС,Дата1, ВремяВыезд, 
				ВремяВозврат, , ?(ПрофильОбменаСПЦ.ОбрабатыватьРассчитанныеПутевыеЛисты, Неопределено, Ложь));
			
		Если ТаблицаПЛ.Количество() > 0 Тогда
			НоваяСтрока.ПутевойЛист = ТаблицаПЛ[0].Ссылка;
			НоваяСтрока.Водитель = ТаблицаПЛ[0].Ссылка.Водитель1;
			Если СписокПЛ.НайтиПоЗначению(НоваяСтрока.ПутевойЛист) = Неопределено Тогда
				СписокПЛ.Добавить(НоваяСтрока.ПутевойЛист);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если флЗаписать Тогда
		Попытка
			мДокументЗаправкаСлив.Записать(РежимЗаписиДокумента.Проведение);
			
			Если ЗначениеЗаполнено(СообщениеПредупреждение) Тогда
				СообщениеПредупреждение = СтрШаблон(СообщениеПредупреждение, мДокументЗаправкаСлив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПредупреждение);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Обновляем информацию по путевым листам
	
	КолСтрок	 = СписокПЛ.Количество();
	Инд			 = 0;
	
	Для Каждого ТекСтрока Из СписокПЛ Цикл
		Инд = Инд + 1;
		ЗначениеИндикатора = Инд / КолСтрок * 100;
		
		мПутевойЛист	= ТекСтрока.Значение.ПолучитьОбъект();
		мЗаголовок = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + мПутевойЛист.Номер + " :";
		Если АЗС.ПрофильОбменаСПЦ.ПересчитатьПутевыеЛисты Тогда
			уатПутевыеЛисты.ПересчетВыданногоГСМ(мПутевойЛист);
			мПутевойЛист.ПересчетСданногоГСМ();
			мПутевойЛист.РасчетРасходаГСМ(мЗаголовок, мОтказ);
		Иначе
			мПутевойЛист.Рассчитан	= Ложь;
		КонецЕсли;	
		Если мПутевойЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Попытка
			мПутевойЛист.Записать(мРежимЗаписи);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеЗаправокПоОтчетамПЦ(Регистратор, АЗС) Экспорт
	Перем мДокументЗаправкаСлив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.ТС КАК ТС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Номенклатура КАК ГСМ,
	|	уатОборотыПоОтчетамПоставщиковПЦ.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Валюта КАК Валюта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Количество КАК Количество,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Стоимость КАК Стоимость,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СтавкаНДС КАК СтавкаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СуммаНДС КАК СуммаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период КАК Период,
	|	уатОборотыПоОтчетамПоставщиковПЦ.АЗС КАК АЗС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.УчитыватьНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.СуммаВключаетНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент
	|ПОМЕСТИТЬ втЗаправкиПЦ
	|ИЗ
	|	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|ГДЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.Регистратор = &Регистратор
	|	И (уатОборотыПоОтчетамПоставщиковПЦ.Количество <> 0
	|			ИЛИ уатОборотыПоОтчетамПоставщиковПЦ.Стоимость <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Ссылка,
	|	втЗаправкиПЦ.Стоимость КАК Стоимость,
	|	втЗаправкиПЦ.АЗС КАК АЗС,
	|	втЗаправкиПЦ.УчитыватьНДС КАК УчитыватьНДС,
	|	втЗаправкиПЦ.УчитыватьНДС КАК СуммаВключаетНДС,
	|	уатЗаправкаГСМЗаправки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втЗаправкиПЦ КАК втЗаправкиПЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ПО втЗаправкиПЦ.Период = уатЗаправкаГСМЗаправки.Дата
	|			И втЗаправкиПЦ.ГСМ = уатЗаправкаГСМЗаправки.ГСМ
	|			И втЗаправкиПЦ.ПластиковаяКарта = уатЗаправкаГСМЗаправки.ПластиковаяКарта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПЛ = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДокЗаправка = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаЗаправка = ДокЗаправка.Заправки[Выборка.НомерСтроки - 1];
		СтрокаЗаправка.Цена   = Выборка.Стоимость / ?(СтрокаЗаправка.Количество = 0, 1, СтрокаЗаправка.Количество);
		СтрокаЗаправка.Сумма  = Выборка.Стоимость;

		Попытка
			СтрокаЗаправка.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаЗаправка.Сумма,
			Выборка.УчитыватьНДС, Выборка.СуммаВключаетНДС,
			уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаЗаправка.СтавкаНДС));
			Если Выборка.УчитыватьНДС = Истина И Выборка.СуммаВключаетНДС = Ложь Тогда
				СтрокаЗаправка.Сумма = СтрокаЗаправка.Сумма - СтрокаЗаправка.СуммаНДС;
			Иначе
				СтрокаЗаправка.Сумма = СтрокаЗаправка.Сумма;
			КонецЕсли;
		Исключение
		КонецПопытки;

		ДокЗаправка.АЗС     = Выборка.АЗС;
		Попытка
			ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаЗаправка.ПутевойЛист) Тогда
			СписокПЛ.Добавить(СтрокаЗаправка.ПутевойЛист);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем информацию по путевым листам
	
	КолСтрок	 = СписокПЛ.Количество();
	Инд			 = 0;
	мОтказ		 = Ложь;
	Для Каждого ТекСтрока Из СписокПЛ Цикл
		Инд = Инд + 1;
		ЗначениеИндикатора = Инд / КолСтрок * 100;
		
		мПутевойЛист	= ТекСтрока.Ссылка.ПолучитьОбъект();
		мЗаголовок = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + мПутевойЛист.Номер + " :";
		
		//уатПутевыеЛисты.ПересчетВыданногоГСМ(мПутевойЛист);
		//мПутевойЛист.ПересчетСданногоГСМ();
		//мПутевойЛист.РасчетРасходаГСМ(мЗаголовок, мОтказ);

		Если мПутевойЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Попытка
			мПутевойЛист.Записать(мРежимЗаписи);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтатусКарты(СтатусКарты, СтруктураПараметровУчетнойЗаписи = Неопределено) Экспорт
	Статус = Справочники.уатСтатусыТопливныхКарт.Действует;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеВСистемеПоставщика", СтатусКарты);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатСтатусыТопливныхКарт.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатСтатусыТопливныхКарт КАК уатСтатусыТопливныхКарт
	               |ГДЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика = &НаименованиеВСистемеПоставщика
	               |	И НЕ уатСтатусыТопливныхКарт.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Ссылка;
	ИначеЕсли СтруктураПараметровУчетнойЗаписи <> Неопределено Тогда
		ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи);
		Статус = ПолучитьСтатусКарты(СтатусКарты);
	Иначе
		Статус = Справочники.уатСтатусыТопливныхКарт.Действует;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ПолучитьСписокТопливныхКартПоИД(МассивИДКарт, МассивНомеровКарт, ИДПоНомеру, АЗС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("АЗС", АЗС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатПластиковыеКарты.Ссылка КАК Ссылка,
	               |	уатПластиковыеКарты.IDкарты КАК IDкарты,
	               |	уатПластиковыеКарты.Код КАК Код
	               |ИЗ
	               |	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	               |ГДЕ
	               |	НЕ уатПластиковыеКарты.ПометкаУдаления";

	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеКарт = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		
		IDкарты = СтрЗаменить(СтрЗаменить(Выборка.IDкарты, " ", ""), Символы.НПП, "");
		Код     = СтрЗаменить(СтрЗаменить(Выборка.Код, " ", ""), Символы.НПП, "");
		
		Если МассивИДКарт.Найти(IDкарты) <> Неопределено
			ИЛИ МассивНомеровКарт.Найти(Код) <> Неопределено Тогда
			
			СоответствиеКарт.Вставить(?(ЗначениеЗаполнено(IDкарты), IDкарты
			, ИДПоНомеру.Получить(Код)), Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеКарт;
КонецФункции

#КонецОбласти

#Область ЛукойлЛИКАРД

// Выполняет выполняет загрузку данных от поставщика ЛукойлЛИКАРД.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЛИКАРД_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала, ДатаОкончания = Неопределено, ТекущаяДата, ЕстьОшибки = Ложь)
	
	мсвЗагруженныеДанные = Новый Массив();
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания");
	Если ДатаОкончания <> Неопределено Тогда
		Период.ДатаНачала    = ДатаНачала;
		Период.ДатаОкончания = ДатаОкончания;
	Иначе
		СтандартныйПериодДаты = Новый Структура("ДатаНачала, ДатаОкончания");
		Если ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) Тогда
			Период.ДатаНачала = СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена;
		Иначе
			Период.ДатаНачала = НачалоДня(ТекущаяДата);
		КонецЕсли;
		
		Период.ДатаОкончания  = ТекущаяДата;
		ДатаНачала            = Период.ДатаНачала;
	КонецЕсли;
	
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Возврат мсвЗагруженныеДанные;
	КонецЕсли;

	мсвЗагруженныеДанные = Новый Массив;
	ЛИКАРД_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	
	Возврат мсвЗагруженныеДанные;

КонецФункции

Процедура ЛИКАРД_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;

	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзПЦ.ОбновлениеСпискаЗаправок.ЛукойлЛИКАРД";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	ТекстОшибки = "";
	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("ДатаНачала",    Период.ДатаНачала);
	ПараметрыЗапрос.Вставить("ДатаОкончания", Период.ДатаОкончания);
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getContractTransactions", ПараметрыЗапрос, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	мсвЗагруженныеДанные = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, СтруктураПараметровУчетнойЗаписи, Период);

КонецПроцедуры

Процедура ЛИКАРД_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено = 0, ТекстОшибки = "") Экспорт
	
	Загружено	 = 0;
	ТекстОшибки	 = "";
	
	МассивДанных = ЛИКАРД_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьПЦ = СтруктураПараметровУчетнойЗаписи.Ссылка;
	АЗС             = СтруктураПараметровУчетнойЗаписи.АЗС;
	
	ГруппыКарт         = АЗС.ГруппыКарт;
	ЕстьОтборПоГруппам = ГруппыКарт.Количество() <> 0;
	
	МассивТопливныхКарт = Новый Массив;
	МассивИДКарт        = Новый Массив;
	МассивНомеровКарт   = Новый Массив;
	ИДПоНомеру          = Новый Соответствие();
	Для Каждого ТекКарта Из МассивДанных Цикл
		
		ТекКарта.Идентификатор = СтрЗаменить(СтрЗаменить(ТекКарта.Идентификатор, " ", ""), Символы.НПП, "");
		ТекКарта.Номер         = СтрЗаменить(СтрЗаменить(ТекКарта.Номер, " ", ""), Символы.НПП, "");

		МассивТопливныхКарт.Добавить(ТекКарта);
		МассивИДКарт.Добавить(ТекКарта.Идентификатор);
		МассивНомеровКарт.Добавить(ТекКарта.Номер);
		
		ИДПоНомеру.Вставить(ТекКарта.Номер, ТекКарта.Идентификатор);
	КонецЦикла;
	
	СоответствиеКарт = ПолучитьСписокТопливныхКартПоИД(МассивИДКарт, МассивНомеровКарт, ИДПоНомеру, АЗС);
	
	ИнформациюПоДоговору	 = ЛИКАРД_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	СоответствиеВодителей    = Новый Соответствие();
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		clientId = ИнформациюПоДоговору.clientId;
		СоответствиеВодителей = ЛИКАРД_ПолучитьСписокВодителей(СтруктураПараметровУчетнойЗаписи, clientId, ТекстОшибки);
	КонецЕсли;
		
	Для Каждого ТекКарта Из МассивТопливныхКарт Цикл
		КартаСсылка = СоответствиеКарт.Получить(ТекКарта.Идентификатор);
		Если НЕ ЗначениеЗаполнено(КартаСсылка) Тогда
			СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки, СоответствиеВодителей);
			Загружено = Загружено + 1;
		Иначе 
			Если КартаСсылка.КемВыдана <> АЗС Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Карта  %1 не была сопоставлена. АЗС не соответствует загружаемой.'"), КартаСсылка.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Статус = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
			Если ТекКарта.Идентификатор = КартаСсылка.IDкарты
				И Статус = КартаСсылка.Статус Тогда
				Продолжить;
			КонецЕсли;
			
			СпрОб = КартаСсылка.ПолучитьОбъект();
			СпрОб.Статус  = Статус;
			СпрОб.IDкарты = ТекКарта.Идентификатор;
			СпрОб.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЛИКАРД_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивКарт = Новый Массив;
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getContractCards",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивКарт;
	КонецЕсли;
	
	МассивКарт = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_МассивТопливныхКарт(ДанныеЗапроса);
	
	Возврат МассивКарт;
	
КонецФункции

Функция ЛИКАРД_ПолучитьСписокТоваров(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивТоваров = Новый Массив;
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getGoodsHandbook_GOODS_HB_STATUS",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивТоваров;
	КонецЕсли;
	
	getGoodsHandbookRs = ДанныеЗапроса.Получить("getGoodsHandbookRs");
	Если getGoodsHandbookRs <> Неопределено Тогда
		getGoodsHandbookPayload = getGoodsHandbookRs.Получить("getGoodsHandbookPayload");
		Если ТипЗнч(getGoodsHandbookPayload) = Тип("Массив") Тогда
			МассивГруппТоваров = getGoodsHandbookPayload;
			Для Каждого ТекСтрока Из МассивГруппТоваров Цикл
				
				ПараметрыЗапроса = Новый Структура();
				ПараметрыЗапроса.Вставить("idFilter1", ТекСтрока.Получить("handbookId"));

				ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getGoodsHandbook_GOODS_HB_STATUS_GOODS",
					ПараметрыЗапроса, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Возврат МассивТоваров;
				КонецЕсли;
				мgetGoodsHandbookRs = ДанныеЗапроса.Получить("getGoodsHandbookRs");
				Если мgetGoodsHandbookRs <> Неопределено Тогда
					мgetGoodsHandbookPayload = мgetGoodsHandbookRs.Получить("getGoodsHandbookPayload");
					Если ТипЗнч(мgetGoodsHandbookPayload) = Тип("Массив") Тогда
						Для Каждого ТекСтрока Из мgetGoodsHandbookPayload Цикл
							МассивТоваров.Добавить(ТекСтрока.Получить("name"));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Период      = Новый Структура("ДатаНачала, ДатаОкончания");
	КонецМесяца = НачалоМесяца(ТекущаяДата()) - 1;
	Период.ДатаОкончания  = ТекущаяДатаСеанса();
	Период.ДатаНачала     = НачалоМесяца(КонецМесяца);
	
	мсвЗагруженныеДанные = Новый Массив;
	ЛИКАРД_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи);
	
	Если мсвЗагруженныеДанные <> Неопределено
		И ТипЗнч(мсвЗагруженныеДанные) = Тип("Массив") Тогда
		Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
			ГСМ = МассивТоваров.Найти(ТекСтрока.НоменклатураОтчета);
			Если ГСМ = Неопределено Тогда
				ТекГСМ = СтрЗаменить(ТекСтрока.НоменклатураОтчета, " налив", "");
				ТекГСМ = СтрЗаменить(ТекГСМ, "А/", "");
				ГСМ = МассивТоваров.Найти(ТекГСМ);
				Если ГСМ = Неопределено Тогда
					ТекГСМ = СтрЗаменить(ТекГСМ, "Аи", "АИ");
					ГСМ = МассивТоваров.Найти(ТекГСМ);
					Если ГСМ = Неопределено Тогда
						МассивТоваров.Добавить(ТекГСМ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат МассивТоваров;
	
КонецФункции

Процедура ЛИКАРД_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации = "", ВсеОК = Истина) Экспорт

	мСтатусовТопливныхКарт = Новый Массив();
	СтатусыТопливныхКарт   = Новый Массив();
	ТекстОшибки   = "";
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getGoodsHandbook_EXT_CARD_STATUS_PUBLIC",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;

	уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_СтатусыКарт(ДанныеЗапроса, мСтатусовТопливныхКарт);
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getGoodsHandbook_EXT_CARD_STATUS_PRIVATE",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_СтатусыКарт(ДанныеЗапроса, мСтатусовТопливныхКарт);

	Для Каждого ТекСтатус Из мСтатусовТопливныхКарт Цикл
		idСтатуса = ТекСтатус.Код;
		СтатусыТопливныхКарт.Добавить(idСтатуса);
	КонецЦикла;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика КАК НаименованиеВСистемеПоставщика
	               |ИЗ
	               |	Справочник.уатСтатусыТопливныхКарт КАК уатСтатусыТопливныхКарт
	               |ГДЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика В(&мСтатусовТопливныхКарт)
	               |	И НЕ уатСтатусыТопливныхКарт.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("мСтатусовТопливныхКарт", СтатусыТопливныхКарт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтатус = СтатусыТопливныхКарт.Найти(Выборка.НаименованиеВСистемеПоставщика);
		Если ТекСтатус <> Неопределено Тогда
			СтатусыТопливныхКарт.Удалить(ТекСтатус);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтатус Из мСтатусовТопливныхКарт Цикл
		idСтатуса = ТекСтатус.Код;
		Если СтатусыТопливныхКарт.Найти(idСтатуса) <> Неопределено Тогда
			НовыйСтатус = Справочники.уатСтатусыТопливныхКарт.СоздатьЭлемент();
			НовыйСтатус.Наименование					 = ТекСтатус.Наименование;
			НовыйСтатус.НаименованиеВСистемеПоставщика	 = idСтатуса;
			НовыйСтатус.Действует						 = ?(idСтатуса = "CT_ACTIVE", Истина, Ложь);
			НовыйСтатус.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЛИКАРД_ПолучитьIDКонтрактаПоНомеру(СтруктураПараметровУчетнойЗаписи, НомерДоговора, ТекстОшибки = "") Экспорт
	
	contractId = "";
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НомерДоговора", НомерДоговора);
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getContractIdByNumber", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат contractId;
	КонецЕсли;
	
	contractId = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_IDКонтракта(ДанныеЗапроса);
	
	Возврат contractId;
	
КонецФункции

Процедура ЛИКАРД_БлокироватьРазблокироватьКарту(СтруктураПараметровУчетнойЗаписи, idКарты, block = Истина, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("contractId", СтрЗаменить(СтрЗаменить(idКарты, Символы.НПП, ""), " ", "")); 
	Если block Тогда
		ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "blockCard", ПараметрыЗапроса, ТекстОшибки);
	Иначе
		ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unblockCard", ПараметрыЗапроса, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЛИКАРД_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	ИнформациюПоДоговору = Новый Структура("clientId, contractNumber,
		|openDate, closeDate, status, clientShortName");

	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getContractInfo",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ИнформациюПоДоговору;
	КонецЕсли;
	
	ИнформациюПоДоговору = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_ИнформациюПоДоговору(ДанныеЗапроса);
	
	Возврат ИнформациюПоДоговору;
	
КонецФункции

Функция ЛИКАРД_ПолучитьСписокВодителей(СтруктураПараметровУчетнойЗаписи, clientId, ТекстОшибки = "") Экспорт
	
	СоответствиеВодителей = Новый Соответствие;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("clientId", clientId);
	
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getClientDrivers", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат СоответствиеВодителей;
	КонецЕсли;

	СоответствиеВодителей = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьОбработкуРезультатаЗапроса_СписокВодителей(ДанныеЗапроса);
	
	Возврат СоответствиеВодителей;
	
КонецФункции

Процедура ЛИКАРД_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, СоответствиеВодителей, ТекстОшибки) Экспорт
	
	НоваяКарта = Справочники.уатПластиковыеКарты.СоздатьЭлемент();
	НоваяКарта.Код			 = СтрЗаменить(ТекКарта.Номер, " ", "");
	НоваяКарта.ДатаВыдачи	 = ТекКарта.ДатаВыдачи;
	НоваяКарта.ДатаОкончания = ТекКарта.ДатаОкончания;
	НоваяКарта.IDкарты		 = СтрЗаменить(ТекКарта.Идентификатор, " ", "");
	НоваяКарта.КемВыдана	 = СтруктураПараметровУчетнойЗаписи.АЗС;
	НоваяКарта.Статус		 = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
	
	СтруктураВодителя = СоответствиеВодителей.Получить(ТекКарта.ИдентификаторВодителя);
		
	Если СтруктураВодителя <> Неопределено Тогда
		КомуВыдана = ЛИКАРД_УстановитьВладельцаТопливнойКарты(?(ЗначениеЗаполнено(СтруктураВодителя.НаименованиеВодителя),
		СтруктураВодителя.НаименованиеВодителя, СтруктураВодителя.НаименованиеТС));
		
		НоваяКарта.КомуВыдана    = КомуВыдана;
	КонецЕсли;

	НоваяКарта.Записать();
	
	ИсторияИзмененияВладельцаКарты = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьМенеджерЗаписи();
	ИсторияИзмененияВладельцаКарты.Период		 = НоваяКарта.ДатаВыдачи;
	ИсторияИзмененияВладельцаКарты.Карта		 = НоваяКарта.Ссылка;
	ИсторияИзмененияВладельцаКарты.КомуВыдана	 = НоваяКарта.КомуВыдана;
	Попытка
		ИсторияИзмененияВладельцаКарты.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Функция ЛИКАРД_УстановитьВладельцаТопливнойКарты(НаименованиеТСВодителя) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеТСВодителя", НаименованиеТСВодителя);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	100 КАК Приоритет
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Наименование = &НаименованиеТСВодителя
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	0
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ГаражныйНомер = &НаименованиеТСВодителя
	               |	И &НаименованиеТСВодителя <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	2
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ГосударственныйНомер = &НаименованиеТСВодителя
	               |	И &НаименованиеТСВодителя <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка,
	               |	200
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Наименование = &НаименованиеТСВодителя
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";  
	Запрос.Текст = уатОбщегоНазначения.МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(Запрос.Текст);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекТС = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекТС;
	
КонецФункции

Функция ЛИКАРД_ДетальнаяИнформацияПоКарте(СтруктураПараметровУчетнойЗаписи, idКарты, ТекстОшибки = "") Экспорт
	
	ДетальнаяИнформацияПоКарте = Новый Соответствие;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("contractId", СтрЗаменить(СтрЗаменить(idКарты, Символы.НПП, ""), " ", ""));
	ДанныеЗапроса = уатИнтеграцияПЦЛукойлЛИКАРД.ЛИКАРД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getCardInfo", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ДетальнаяИнформацияПоКарте;
	КонецЕсли;
	
	getCardInfoRs = ДанныеЗапроса.Получить("getCardInfoRs");
	Если getCardInfoRs <> Неопределено Тогда
		getCardInfoPayload = getCardInfoRs.Получить("getCardInfoPayload");
		Если ТипЗнч(getCardInfoPayload) = Тип("Соответствие") Тогда
			ДетальнаяИнформацияПоКарте = getCardInfoPayload;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДетальнаяИнформацияПоКарте;
	
КонецФункции

#КонецОбласти

#Область Роснефть

// Выполняет выполняет загрузку данных от поставщика Роснефть.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Роснефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала, ДатаОкончания = Неопределено, ТекущаяДата, ЕстьОшибки = Ложь)
	
	мсвЗагруженныеДанные = Новый Массив();
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания");
	Если ДатаОкончания <> Неопределено Тогда
		Период.ДатаНачала    = ДатаНачала;
		Период.ДатаОкончания = ДатаОкончания;
	Иначе
		Если ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) Тогда
			Период.ДатаНачала = СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена;
		Иначе
			Период.ДатаНачала = НачалоДня(ТекущаяДата);
		КонецЕсли;
		Период.ДатаОкончания  = ТекущаяДата;
		Период.ДатаНачала     = УниверсальноеВремя(Период.ДатаНачала,    ЧасовойПоясСеанса());
		Период.ДатаОкончания  = УниверсальноеВремя(Период.ДатаОкончания, ЧасовойПоясСеанса());
		
		ДатаНачала            = Период.ДатаНачала;
	КонецЕсли;

	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Возврат мсвЗагруженныеДанные;
	КонецЕсли;

	ДатаНачала    = НачалоДня(Период.ДатаНачала);
	ДатаОкончания = НачалоДня(Период.ДатаОкончания);
	РазницаВМесяцах = (Год(ДатаОкончания) - Год(ДатаНачала))*12 +
	Месяц(ДатаОкончания) - Месяц(ДатаНачала) - ?(День(ДатаОкончания) >= День(ДатаНачала), 0, 1);
	
	МассивДат = Новый Массив();
	Если РазницаВМесяцах > 2 Тогда
		ДатаОкончания = Период.ДатаНачала - 1;
		Для ТекМесяц = 1 По РазницаВМесяцах Цикл
			ДатаНачала		 = КонецДня(ДатаОкончания) + 1;
			ДатаОкончания	 = КонецМесяца(ДатаНачала);
			Если ДатаОкончания > Период.ДатаОкончания Тогда
				ДатаОкончания = Период.ДатаОкончания;
			КонецЕсли;
			МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания));
		КонецЦикла;
		Если ДатаОкончания < Период.ДатаОкончания Тогда
			ДатаНачала		 = КонецДня(ДатаОкончания) + 1;
			МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, Период.ДатаОкончания));
		КонецЕсли;
	Иначе
		МассивДат.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", Период.ДатаНачала, Период.ДатаОкончания));
	КонецЕсли;
	
	ПредПериод = ТекущаяДата;
	Для Каждого ТекСтрокаПериод Из МассивДат Цикл
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("АЗС", СтруктураПараметровУчетнойЗаписи.АЗС);
		
		Роснефть_ЗагрузитьЗаправкиИзAPI(ТекСтрокаПериод, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, Истина, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			ТекущаяДата = ТекСтрокаПериод.ДатаОкончания;
			Прервать;
		КонецЕсли;
		ПредПериод = ТекСтрокаПериод.ДатаОкончания;
	КонецЦикла;
	
	Возврат мсвЗагруженныеДанные;

КонецФункции

Процедура Роснефть_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, ВычитатьСливы = Ложь, ЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзПЦ.ОбновлениеСпискаЗаправок.Роснефть";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	АЗС                    = СтруктураПараметровУчетнойЗаписи.АЗС;
	ПрофильОбмена          = СтруктураПараметровУчетнойЗаписи.АЗС.ПрофильОбменаСПЦ;
	УчитыватьНаценкиСкидки = ПрофильОбмена.УчитыватьНаценкиСкидки;
	
	ТекстОшибки = "";
	
	ТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	ТекущаяДата = НачалоДня(ТекущаяДата); 

	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("ДатаНачала",    Период.ДатаНачала);
	ПараметрыЗапрос.Вставить("ДатаОкончания", Период.ДатаОкончания);

	Если НачалоДня(Период.ДатаНачала) = ТекущаяДата
		И НачалоДня(Период.ДатаОкончания) = ТекущаяДата Тогда
		ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetOperByContractLM", ПараметрыЗапрос, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли; 
		мсвЗагруженныеДанные = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, УчитыватьНаценкиСкидки, ВычитатьСливы);
	ИначеЕсли НачалоДня(Период.ДатаОкончания) = ТекущаяДата Тогда  
		КолВоЧасовВыборки = (Период.ДатаОкончания - Период.ДатаНачала) / 3600;
		КолВоЧасовВыборки = Цел(КолВоЧасовВыборки);
		Если КолВоЧасовВыборки > 120 Тогда  
			ПараметрыЗапрос.ДатаНачала    = НачалоДня(Период.ДатаОкончания - (120 * 3600));
			ПараметрыЗапрос.ДатаОкончания = Период.ДатаОкончания;
			ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetOperByContractLM", ПараметрыЗапрос, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			мсвТекЗагруженныеДанные = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, УчитыватьНаценкиСкидки, ВычитатьСливы);
			
			ПараметрыЗапрос.ДатаОкончания = КонецДня(ПараметрыЗапрос.ДатаНачала);
			ПараметрыЗапрос.ДатаНачала    = Период.ДатаНачала;
			ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetOperByContract", ПараметрыЗапрос, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			мсвЗагруженныеДанные = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, УчитыватьНаценкиСкидки, ВычитатьСливы, мсвТекЗагруженныеДанные);
			Для Каждого ТекСтрока Из мсвТекЗагруженныеДанные Цикл
				мсвЗагруженныеДанные.Добавить(ТекСтрока);
			КонецЦикла;
		Иначе 
			ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetOperByContractLM", ПараметрыЗапрос, ТекстОшибки); 
			мсвЗагруженныеДанные = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, УчитыватьНаценкиСкидки, ВычитатьСливы);
		КонецЕсли;
	Иначе
		ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetOperByContract", ПараметрыЗапрос, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		мсвЗагруженныеДанные = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса, УчитыватьНаценкиСкидки, ВычитатьСливы);
	КонецЕсли;

КонецПроцедуры

Функция Роснефть_ПолучитьIDКонтрактаПоНомеруКарты(СтруктураПараметровУчетнойЗаписи, ИдентификаторКарты, ТекстОшибки = "") Экспорт
	
	contractId = "";
	
	ТекстОшибки   = "";
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИдентификаторКарты", ИдентификаторКарты);
	
	ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetContractByCard", ПараметрыЗапроса, ТекстОшибки);
	Если ТипЗнч(ДанныеЗапроса) = Тип("Строка") Тогда
		contractId = ДанныеЗапроса;
	КонецЕсли;
	
	Возврат contractId;
	
КонецФункции

Функция Роснефть_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
		
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "ContractBalance",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДанныеЗапроса;
	
КонецФункции

// Функция выполняет получение списка ГСМ.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  ТекстОшибки - Строка.
//
// Возвращаемое значение:
//  Массив - Список ГСМ.
//
Функция Роснефть_ПолучитьМассивГСМ(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивГСМ = Новый Массив();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetGoodsList",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивГСМ;
	КонецЕсли;
	
	МассивГСМ = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_МассивНоменклатуры(ДанныеЗапроса);
		
	Возврат МассивГСМ;
	
КонецФункции

Процедура Роснефть_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено, ТекстОшибки) Экспорт
	
	Загружено	 = 0;
	ТекстОшибки	 = "";
	
	МассивДанных = Роснефть_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьПЦ = СтруктураПараметровУчетнойЗаписи.Ссылка;
	АЗС             = СтруктураПараметровУчетнойЗаписи.АЗС;
	
	ГруппыКарт         = АЗС.ГруппыКарт;
	ЕстьОтборПоГруппам = ГруппыКарт.Количество() <> 0;
	
	МассивТопливныхКарт = Новый Массив;
	МассивИДКарт        = Новый Массив;
	МассивНомеровКарт   = Новый Массив;
	ИДПоНомеру          = Новый Соответствие();
	Для Каждого ТекКарта Из МассивДанных Цикл
		
		ТекКарта.Идентификатор = СтрЗаменить(СтрЗаменить(ТекКарта.Идентификатор, " ", ""), Символы.НПП, "");
		ТекКарта.Номер         = СтрЗаменить(СтрЗаменить(ТекКарта.Номер, " ", ""), Символы.НПП, "");

		МассивТопливныхКарт.Добавить(ТекКарта);
		МассивИДКарт.Добавить(ТекКарта.Идентификатор);
		МассивНомеровКарт.Добавить(ТекКарта.Номер);
		
		ИДПоНомеру.Вставить(ТекКарта.Номер, ТекКарта.Идентификатор);
	КонецЦикла;
	
	СоответствиеКарт = ПолучитьСписокТопливныхКартПоИД(МассивИДКарт, МассивНомеровКарт, ИДПоНомеру, АЗС);

	Для Каждого ТекКарта Из МассивТопливныхКарт Цикл
		КартаСсылка = СоответствиеКарт.Получить(ТекКарта.Идентификатор);
		Если НЕ ЗначениеЗаполнено(КартаСсылка) Тогда
			СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
			Загружено = Загружено + 1;
		Иначе 
			Если КартаСсылка.КемВыдана <> АЗС Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Карта  %1 не была сопоставлена. АЗС не соответствует загружаемой.'"), КартаСсылка.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Статус = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
			Если ТекКарта.Идентификатор = КартаСсылка.IDкарты
				И Статус = КартаСсылка.Статус Тогда
				Продолжить;
			КонецЕсли;

			СпрОб = КартаСсылка.ПолучитьОбъект();
			СпрОб.Статус  = Статус;
			СпрОб.IDкарты = ТекКарта.Идентификатор;
			СпрОб.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция Роснефть_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт
	
	МассивКарт = Новый Массив;
	
	ДанныеЗапроса = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetCardsByContract",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивКарт;
	КонецЕсли;
	
	МассивКарт = уатИнтеграцияПЦРоснефть.Роснефть_ВыполнитьОбработкуРезультатаЗапроса_МассивТопливныхКарт(ДанныеЗапроса);
	
	Возврат МассивКарт;
	
КонецФункции

Процедура Роснефть_СоздатьТопливнуюКарту(ТекКарта, СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	НоваяКарта = Справочники.уатПластиковыеКарты.СоздатьЭлемент();
	НоваяКарта.Код			 = СтрЗаменить(ТекКарта.Номер, " ", "");
	НоваяКарта.ДатаВыдачи	 = ТекущаяДатаСеанса();	
	НоваяКарта.IDкарты		 = СтрЗаменить(ТекКарта.Идентификатор, " ", "");
	НоваяКарта.КемВыдана	 = СтруктураПараметровУчетнойЗаписи.АЗС;
	
	НоваяКарта.Статус		 = ПолучитьСтатусКарты(ТекКарта.Статус, СтруктураПараметровУчетнойЗаписи);
	НоваяКарта.Записать();
	
КонецПроцедуры

Процедура Роснефть_ЗагрузкаСтатусовТопливныхКарт(СтруктураПараметровУчетнойЗаписи, ИмяСобытияВЖурналеРегистрации = "", ВсеОК = Истина) Экспорт

	СтатусыТопливныхКарт = Новый Массив();
	СтатусыТопливныхКарт.Добавить("00");
	СтатусыТопливныхКарт.Добавить("05_C");
	СтатусыТопливныхКарт.Добавить("05_D");
	СтатусыТопливныхКарт.Добавить("05_S");

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика КАК НаименованиеВСистемеПоставщика
	               |ИЗ
	               |	Справочник.уатСтатусыТопливныхКарт КАК уатСтатусыТопливныхКарт
	               |ГДЕ
	               |	уатСтатусыТопливныхКарт.НаименованиеВСистемеПоставщика В(&мСтатусовТопливныхКарт)
	               |	И НЕ уатСтатусыТопливныхКарт.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("мСтатусовТопливныхКарт", СтатусыТопливныхКарт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтатус = СтатусыТопливныхКарт.Найти(Выборка.НаименованиеВСистемеПоставщика);
		Если ТекСтатус <> Неопределено Тогда
			СтатусыТопливныхКарт.Удалить(ТекСтатус);
		КонецЕсли;
	КонецЦикла;
	
	мСтатусовТопливныхКарт = Новый Массив();
	СтруктураСтатуса = Новый Структура("code, name", "00", "В работе");
	мСтатусовТопливныхКарт.Добавить(СтруктураСтатуса);
	СтруктураСтатуса = Новый Структура("code, name", "05_C", "Заблокирована (Клиент)");
	мСтатусовТопливныхКарт.Добавить(СтруктураСтатуса);
	СтруктураСтатуса = Новый Структура("code, name", "05_D", "Заблокирована (доставка клиенту)");
	мСтатусовТопливныхКарт.Добавить(СтруктураСтатуса);
	СтруктураСтатуса = Новый Структура("code, name", "05_S", "Заблокирована (СБ)");
	мСтатусовТопливныхКарт.Добавить(СтруктураСтатуса);

	Для Каждого ТекСтатус Из мСтатусовТопливныхКарт Цикл
		idСтатуса = ТекСтатус.code;
		Если СтатусыТопливныхКарт.Найти(idСтатуса) <> Неопределено Тогда
			НовыйСтатус = Справочники.уатСтатусыТопливныхКарт.СоздатьЭлемент();
			НовыйСтатус.Наименование					 = ТекСтатус.name;
			НовыйСтатус.НаименованиеВСистемеПоставщика	 = idСтатуса;
			НовыйСтатус.Действует						 = ?(idСтатуса = "00", Истина, Ложь);
			НовыйСтатус.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ППР

// Выполняет выполняет загрузку данных от поставщика ПЦ ППР.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ППР_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала, ДатаОкончания = Неопределено, ТекущаяДата, ЕстьОшибки = Ложь)
	
	мсвЗагруженныеДанные = Новый Массив();
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания");
	Если ДатаОкончания <> Неопределено Тогда
		Период.ДатаНачала    = ДатаНачала;
		Период.ДатаОкончания = ДатаОкончания;
	Иначе
		Если ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) Тогда
			Период.ДатаНачала = НачалоДня(НачалоДня(СтруктураПараметровУчетнойЗаписи.ДатаПоследнегоОбмена) - 1);
		Иначе
			Период.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата) - 1);
		КонецЕсли;
		Период.ДатаОкончания  = НачалоДня(ТекущаяДата);
		
		ДатаНачала            = Период.ДатаНачала;
	КонецЕсли;

	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Возврат мсвЗагруженныеДанные;
	КонецЕсли;

	ППР_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	
	Возврат мсвЗагруженныеДанные;

КонецФункции

Процедура ППР_ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;

	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзПЦ.ОбновлениеСпискаЗаправок.ППР";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекстОшибки = "";
	
	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("ДатаНачала",    Период.ДатаНачала);
	ПараметрыЗапрос.Вставить("ДатаОкончания", Период.ДатаОкончания);
	ДанныеЗапроса = уатИнтеграцияПЦППР.ППР_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "transaction-list", ПараметрыЗапрос, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	мсвЗагруженныеДанные = уатИнтеграцияПЦППР.ППР_ВыполнитьОбработкуРезультатаЗапроса_ТранзакционныйОтчет(ДанныеЗапроса);
	
КонецПроцедуры

Функция ППР_ПроверитьПодключение(СтруктураПараметровУчетнойЗаписи, ДатаНачала, ДатаОкончания, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапрос = Новый Структура();
	ПараметрыЗапрос.Вставить("ДатаНачала",    ДатаНачала);
	ПараметрыЗапрос.Вставить("ДатаОкончания", ДатаОкончания);
	ДанныеЗапроса = уатИнтеграцияПЦППР.ППР_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "transaction-list", ПараметрыЗапрос, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СозданиеЗаправокПЦиМониторинг

// Возвращает таблицу данных отчетов ПЦ для создания заправок и сливов ГСМ
//
Функция ПолучитьДанныеЗаправокПЦ(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.ТС КАК ТС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Номенклатура КАК ГСМ,
	|	уатОборотыПоОтчетамПоставщиковПЦ.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Валюта КАК Валюта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Количество КАК Количество,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Стоимость КАК Стоимость,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СтоимостьУпр КАК СтоимостьУпр,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СтавкаНДС КАК СтавкаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СуммаНДС КАК СуммаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период КАК Период,
	|	уатОборотыПоОтчетамПоставщиковПЦ.АЗС КАК АЗС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.УчитыватьНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.СуммаВключаетНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор ССЫЛКА Документ.уатОтчетПоставщикаПЦ
	|			ТОГДА уатОборотыПоОтчетамПоставщиковПЦ.Регистратор.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Транзакция КАК Транзакция
	|ИЗ
	|	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|ГДЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И (&ТолькоПроверенные = ЛОЖЬ
	|			ИЛИ уатОборотыПоОтчетамПоставщиковПЦ.Проверено)
	|	И (уатОборотыПоОтчетамПоставщиковПЦ.Количество <> 0
	|			ИЛИ уатОборотыПоОтчетамПоставщиковПЦ.Стоимость <> 0)";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.Организация = &Организация";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.АЗС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.АЗС = &АЗС";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.АЗС.Контрагент_Склад = &Контрагент";
	КонецЕсли;
	Если СтруктураПараметров.мсвТопливныеКарты.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.ПластиковаяКарта В(&мсвТопливныеКарты)";
	КонецЕсли;
	Если СтруктураПараметров.мсвГСМ.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.Номенклатура В(&мсвГСМ)";
	КонецЕсли;
	Если СтруктураПараметров.ТС.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатОборотыПоОтчетамПоставщиковПЦ.ТС В(&мсвТС)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ДатаНач",           СтруктураПараметров.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",           КонецДня(СтруктураПараметров.ДатаКон));
	Запрос.УстановитьПараметр("ТолькоПроверенные", СтруктураПараметров.ТолькоПроверенные);
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("АЗС",               СтруктураПараметров.АЗС);
	Запрос.УстановитьПараметр("Контрагент",        СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("мсвТопливныеКарты", СтруктураПараметров.мсвТопливныеКарты);
	Запрос.УстановитьПараметр("мсвГСМ",            СтруктураПараметров.мсвГСМ);
	Запрос.УстановитьПараметр("мсвТС",             СтруктураПараметров.ТС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВалютаРеглУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпрУчета   = Константы.ВалютаУправленческогоУчета.Получить();
	мсвЗаправкиСливы = Новый Массив;
	Индекс           = 0;
		
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НомерСтроки",      Индекс);
		СтруктураСтроки.Вставить("Контрагент",       Выборка.Контрагент);
		СтруктураСтроки.Вставить("АЗС",              Выборка.АЗС);
		СтруктураСтроки.Вставить("ТС",               Выборка.ТС);
		СтруктураСтроки.Вставить("ГСМ",              Выборка.ГСМ);
		СтруктураСтроки.Вставить("ПластиковаяКарта", Выборка.ПластиковаяКарта);
		СтруктураСтроки.Вставить("Валюта",           Выборка.Валюта);
		СтруктураСтроки.Вставить("Количество",       Выборка.Количество);
		СтруктураСтроки.Вставить("Период",           Выборка.Период);
		СтруктураСтроки.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураСтроки.Вставить("УчитыватьНДС",     Выборка.УчитыватьНДС);
		СтруктураСтроки.Вставить("СуммаВключаетНДС", Выборка.СуммаВключаетНДС);
		СтруктураСтроки.Вставить("ЕстьДубли",        Ложь);
		СтруктураСтроки.Вставить("Дубли",            "");
		СтруктураСтроки.Вставить("ЗаправкаССМ",      Ложь);
		СтруктураСтроки.Вставить("Транзакция",       Выборка.Транзакция);
		
		Если Выборка.Валюта = ВалютаРеглУчета Тогда
			ТекСтоимость = Выборка.Стоимость;
			ТекСуммаНДС  = Выборка.СуммаНДС;
		Иначе
			СтруктураКурсКратностьРегл      = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРеглУчета, Выборка.Период);
			СтруктураКурсКратностьДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Выборка.Валюта,  Выборка.Период);
			
			Если Выборка.Валюта = ВалютаУпрУчета Тогда
				ТекСтоимость = Выборка.СтоимостьУпр;
			Иначе
				ТекСтоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Стоимость,
					ВалютаРеглУчета,                      Выборка.Валюта,
					СтруктураКурсКратностьРегл.Курс,      СтруктураКурсКратностьДокумента.Курс,
					СтруктураКурсКратностьРегл.Кратность, СтруктураКурсКратностьДокумента.Кратность);
			КонецЕсли;
			
			ТекСуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
				ВалютаРеглУчета,                      Выборка.Валюта,
				СтруктураКурсКратностьРегл.Курс,      СтруктураКурсКратностьДокумента.Курс,
				СтруктураКурсКратностьРегл.Кратность, СтруктураКурсКратностьДокумента.Кратность);
		КонецЕсли;
		СтруктураСтроки.Вставить("Стоимость", ТекСтоимость);
		СтруктураСтроки.Вставить("СуммаНДС",  ТекСуммаНДС);
			
		мсвЗаправкиСливы.Добавить(СтруктураСтроки);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат мсвЗаправкиСливы;
КонецФункции

// Возвращает таблицу данных мониторинга для создания заправок и сливов ГСМ
//
Функция ПолучитьДанныеЗаправокССМ(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДополнительныеСведенияПоGPS.ТС КАК ТС,
	|	уатДополнительныеСведенияПоGPS.ТС.Модель.ОсновноеТопливо КАК ГСМ,
	|	ВЫБОР
	|		КОГДА уатДополнительныеСведенияПоGPS.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.уатТипСобытияGPS.ЗаправкаГСМ)
	|			ТОГДА уатДополнительныеСведенияПоGPS.Значение
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатДополнительныеСведенияПоGPS.Значение < 0
	|					ТОГДА уатДополнительныеСведенияПоGPS.Значение
	|				ИНАЧЕ -уатДополнительныеСведенияПоGPS.Значение
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	уатДополнительныеСведенияПоGPS.Период КАК Период,
	|	уатДополнительныеСведенияПоGPS.ТС.Модель.ОсновноеТопливо.СтавкаНДС КАК СтавкаНДС,
	|	уатДополнительныеСведенияПоGPS.ТС.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.уатДополнительныеСведенияПоGPS КАК уатДополнительныеСведенияПоGPS
	|ГДЕ
	|	(уатДополнительныеСведенияПоGPS.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.уатТипСобытияGPS.ЗаправкаГСМ)
	|			ИЛИ уатДополнительныеСведенияПоGPS.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.уатТипСобытияGPS.СливГСМ))
	|	И уатДополнительныеСведенияПоGPS.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И уатДополнительныеСведенияПоGPS.Значение <> 0";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатДополнительныеСведенияПоGPS.ТС.Организация = &Организация";
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ТС") И ЗначениеЗаполнено(СтруктураПараметров.ТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатДополнительныеСведенияПоGPS.ТС В (&мсвТС)";
		Запрос.УстановитьПараметр("мсвТС", СтруктураПараметров.ТС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач",     СтруктураПараметров.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     КонецДня(СтруктураПараметров.ДатаКон));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Период";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвЗаправкиСливы = Новый Массив;
	Индекс = 0;
	кэшНастроекНДСпоОрганизациям = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НомерСтроки",      Индекс);
		СтруктураСтроки.Вставить("Контрагент",       СтруктураПараметров.АЗСМониторинг.Контрагент_Склад);
		СтруктураСтроки.Вставить("АЗС",              ?(Выборка.Количество < 0,
			?(СтруктураПараметров.Свойство("АЗССливМониторинг"),
			СтруктураПараметров.АЗССливМониторинг, СтруктураПараметров.АЗСМониторинг),
			СтруктураПараметров.АЗСМониторинг));
		СтруктураСтроки.Вставить("ТС",               Выборка.ТС);
		СтруктураСтроки.Вставить("ГСМ",              Выборка.ГСМ);
		СтруктураСтроки.Вставить("ПластиковаяКарта", Справочники.уатПластиковыеКарты.ПустаяСсылка());
		СтруктураСтроки.Вставить("Валюта",           Справочники.Валюты.ПустаяСсылка());
		СтруктураСтроки.Вставить("Количество",       Выборка.Количество);
		СтруктураСтроки.Вставить("Стоимость",        0);
		СтруктураСтроки.Вставить("Период",           Выборка.Период);
		СтруктураСтроки.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураСтроки.Вставить("СуммаНДС",         0);
		СтруктураСтроки.Вставить("УчитыватьНДС",     Неопределено);
		СтруктураСтроки.Вставить("СуммаВключаетНДС", Неопределено);
		СтруктураСтроки.Вставить("ЕстьДубли",        Ложь);
		СтруктураСтроки.Вставить("Дубли",            "");
		СтруктураСтроки.Вставить("ЗаправкаССМ",      Истина);
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			Если кэшНастроекНДСпоОрганизациям.Получить(Выборка.Организация) = Неопределено Тогда
				СтруктураНДС = Новый Структура;
				СтруктураНДС.Вставить("УчитыватьНДС", уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Выборка.Организация,
					ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС")));
				СтруктураНДС.Вставить("СуммаВключаетНДС", уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Выборка.Организация,
					ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС")));
				кэшНастроекНДСпоОрганизациям.Вставить(Выборка.Организация, СтруктураНДС);
			КонецЕсли;
			
			СтруктураСтроки.УчитыватьНДС     = кэшНастроекНДСпоОрганизациям[Выборка.Организация].УчитыватьНДС;
			СтруктураСтроки.СуммаВключаетНДС = кэшНастроекНДСпоОрганизациям[Выборка.Организация].СуммаВключаетНДС;
		КонецЕсли;
		
		мсвЗаправкиСливы.Добавить(СтруктураСтроки);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат мсвЗаправкиСливы;
КонецФункции

Функция ОбъединитьДанныеЗаправокПЦиССМ(СтруктураПараметров, мсвЗаправкиПЦ, мсвЗаправкиССМ)
	Если мсвЗаправкиССМ.Количество() = 0 Тогда
		Возврат мсвЗаправкиПЦ;
	КонецЕсли;
	
	// В приоритете заправки ПЦ, ни одна заправка ПЦ не должна пропасть
	// поэтому сразу добавляем их все в результат
	мсвЗаправкиОбъед = мсвЗаправкиПЦ;
	
	// Сопоставляем каждую заправку ПЦ с каждой по очереди заправкой ССМ
	// если заправки соответствуют, то заправку ПЦ оставляем,
	// а заправку ССМ заносим в массив на удаление
	ИндексССМ = мсвЗаправкиССМ.Количество()-1;
	Пока ИндексССМ >= 0 Цикл
		ТекЗаправкаССМ = мсвЗаправкиССМ[ИндексССМ];
		флУдалениеССМ = Ложь;
		
		Для Каждого ТекЗаправкаПЦ Из мсвЗаправкиПЦ Цикл
			Если ТекЗаправкаПЦ.Период >= ТекЗаправкаССМ.Период Тогда
				РазницаПериодов = ТекЗаправкаПЦ.Период - ТекЗаправкаССМ.Период;
			Иначе
				РазницаПериодов = ТекЗаправкаССМ.Период - ТекЗаправкаПЦ.Период;
			КонецЕсли;
			Если ТекЗаправкаПЦ.Количество >= ТекЗаправкаССМ.Количество Тогда
				РазницаКоличества = ТекЗаправкаПЦ.Количество - ТекЗаправкаССМ.Количество;
			Иначе
				РазницаКоличества = ТекЗаправкаССМ.Количество - ТекЗаправкаПЦ.Количество;
			КонецЕсли;
			
			Если РазницаПериодов <= СтруктураПараметров.МаксимальноеОтклонениеДанныхПЦиССМпоВремени*60
				И РазницаКоличества <= СтруктураПараметров.МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству Тогда
				флУдалениеССМ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// добавляем заправку ССМ в объединенный массив
		Если НЕ флУдалениеССМ Тогда
			мсвЗаправкиОбъед.Добавить(ТекЗаправкаССМ);
		КонецЕсли;
		
		ИндексССМ = ИндексССМ - 1;
	КонецЦикла;
	
	// сортировка по периоду
	тблСортировка = Новый ТаблицаЗначений;
	тблСортировка.Колонки.Добавить("СтруктураСтроки");
	тблСортировка.Колонки.Добавить("Период");
	
	Для Каждого ТекСтруктураСтроки Из мсвЗаправкиОбъед Цикл
		НоваяСтрока = тблСортировка.Добавить();
		НоваяСтрока.СтруктураСтроки = ТекСтруктураСтроки;
		НоваяСтрока.Период = ТекСтруктураСтроки.Период;
	КонецЦикла;
		
	тблСортировка.Сортировать("Период");
	мсвЗаправкиОбъед = тблСортировка.ВыгрузитьКолонку("СтруктураСтроки");
		
	Возврат мсвЗаправкиОбъед;
КонецФункции

Процедура ДополнительнаяОбработкаТаблицыДанныхЗаправок(СтруктураПараметров, мсвДанныеЗаправок)
	// Проверка дублей 1 - проверяется совпадение загружаемых данных между собой
	Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам <> 0 Тогда
		мсвДляУдаления = Новый Массив;
		ИндексСтроки = -1;
		Для Каждого ТекСтрока Из мсвДанныеЗаправок Цикл
			ИндексСтроки = ИндексСтроки + 1;
			
			ТекИндексВлож = -1;
			Для Каждого ТекСтрокаВлож Из мсвДанныеЗаправок Цикл
				ТекИндексВлож = ТекИндексВлож + 1;
				
				Если ТекИндексВлож = ИндексСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				Если Формат(ТекСтрокаВлож.Период, "ДФ='dd.MM.yyyy HH:mm'") = Формат(ТекСтрока.Период, "ДФ='dd.MM.yyyy HH:mm'")
					И ТекСтрокаВлож.Количество = ТекСтрока.Количество
					И ТекСтрокаВлож.АЗС = ТекСтрока.АЗС
					И ТекСтрокаВлож.ГСМ = ТекСтрока.ГСМ
					И ТекСтрокаВлож.ТС = ТекСтрока.ТС
					И ИндексСтроки > ТекИндексВлож Тогда
					
					ТекСтрока.ЕстьДубли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
				
			Если ТекСтрока.ЕстьДубли Тогда
				Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 1 Тогда
					ТекстСообщения = СтрШаблон(
						"При загрузке пропущен дубль %1 с ключевыми полями:
						|Дата: %2; АЗС: %3; ГСМ: %4; ТС: %5; Количество: %6",
						?(ТекСтрока.Количество >= 0, "заправки", "слива"),
						ТекСтрока.Период, ТекСтрока.АЗС, ТекСтрока.ГСМ, ТекСтрока.ТС,
						?(ТекСтрока.Количество >= 0, ТекСтрока.Количество, -ТекСтрока.Количество));
						
					СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
					
					ТекСтрока.Дубли = ТекстСообщения;
				КонецЕсли;
								
				мсвДляУдаления.Вставить(0, ИндексСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 1 Тогда
			Для Каждого ТекИндексУдалить Из мсвДляУдаления Цикл
				мсвДанныеЗаправок.Удалить(ТекИндексУдалить);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Анализируем возврат ГСМ и вычитаем его из последней записи прихода
	// Если количество последней строки меньше количества слива, то вычитаем остаток слива и из предпоследней строки
	// и т.д. пока не "закроем" весь слив
	Индекс = 0;
	Если НЕ СтруктураПараметров.СоздаватьСливыДляОтрицательныхЗаправок ИЛИ СтруктураПараметров.ВидПЛприПоискеПЛдляЗаправки = 1 Тогда
		Для Каждого ТекСтрока Из мсвДанныеЗаправок Цикл
			Если ТекСтрока.Количество < 0 Тогда
				ОсталосьСлить = -ТекСтрока.Количество;
				ИндексСтроки = Индекс - 1;
				Пока ИндексСтроки >= 0 Цикл
					Если мсвДанныеЗаправок[ИндексСтроки].Количество > 0 
						И ТекСтрока.ТС = мсвДанныеЗаправок[ИндексСтроки].ТС
						И ТекСтрока.ГСМ = мсвДанныеЗаправок[ИндексСтроки].ГСМ 
						И ТекСтрока.Валюта = мсвДанныеЗаправок[ИндексСтроки].Валюта Тогда
						
						ТекСливПоЗаправке = Мин(мсвДанныеЗаправок[ИндексСтроки].Количество, ОсталосьСлить);
						мсвДанныеЗаправок[ИндексСтроки].Количество = мсвДанныеЗаправок[ИндексСтроки].Количество - ТекСливПоЗаправке;
						
						ОсталосьСлить = ОсталосьСлить - ТекСливПоЗаправке;
						Если ОсталосьСлить = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					ИндексСтроки = ИндексСтроки - 1;
				КонецЦикла;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		// Удаляем сливы и нулевые заправки, полученные после "закрытия" сливов
		Индекс = мсвДанныеЗаправок.Количество()-1;
		Пока Индекс >= 0 Цикл
			Если мсвДанныеЗаправок[Индекс].Количество <= 0 Тогда
				мсвДанныеЗаправок.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка дублей 2 - проверяется совпадение загружаемых данных и данных в базе
	Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам <> 0 Тогда
		мсвДляУдаления = Новый Массив;
		ИндексСтроки = 0;
		Для Каждого ТекСтрока Из мсвДанныеЗаправок Цикл
			ТекстСообщения = "";
			
			Если ТекСтрока.Количество >= 0 Тогда
				ЕстьДубли = ПроверитьНаличиеДублей(ТекСтрока.Период, ТекСтрока.АЗС, ТекСтрока.Контрагент,
					СтруктураПараметров.Организация, ТекСтрока.ГСМ, ТекСтрока.ТС, ТекСтрока.ПластиковаяКарта,
					ТекСтрока.Количество, ТекстСообщения);
			Иначе	
				ЕстьДубли = ПроверитьНаличиеДублейСливы(ТекСтрока.Период, ТекСтрока.АЗС, СтруктураПараметров.Организация,
					ТекСтрока.ГСМ, ТекСтрока.ТС, ТекСтрока.Количество, ТекстСообщения);
			КонецЕсли;
				
			Если ЕстьДубли Тогда
				ТекСтрока.ЕстьДубли = Истина;
				ТекСтрока.Дубли     = ТекстСообщения;
				
				Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 1 Тогда
					ТекстСообщения = СтрШаблон(
						"Документ %1 не был создан - уже существует документ с аналогичными ключевыми полями:
						|Дата: %2; Организация: %3; АЗС: %4; ГСМ: %5; ТС: %6, Количество: %7
						|%8",
						?(ТекСтрока.Количество >= 0, """Заправка ГСМ""", """Слив ГСМ"""),
						ТекСтрока.Период, СтруктураПараметров.Организация, ТекСтрока.АЗС,
						ТекСтрока.ГСМ, ТекСтрока.ТС,
						?(ТекСтрока.Количество >= 0, ТекСтрока.Количество, -ТекСтрока.Количество),
						ТекстСообщения);
						
					СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
				КонецЕсли;
								
				мсвДляУдаления.Вставить(0, ИндексСтроки);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
		Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 1 Тогда
			Для Каждого ТекИндексУдалить Из мсвДляУдаления Цикл
				мсвДанныеЗаправок.Удалить(ТекИндексУдалить);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаменятьАналогНаОсновноеТопливо Тогда
		мсвГСМ = Новый Массив;
		Для Каждого ТекСтрока Из мсвДанныеЗаправок Цикл
			Если мсвГСМ.Найти(ТекСтрока.ГСМ) = Неопределено Тогда
				мсвГСМ.Добавить(ТекСтрока.ГСМ);
			КонецЕсли;
		КонецЦикла;
					
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("мсвГСМ", мсвГСМ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	уатАналогиГСМ.Аналог КАК Аналог,
		|	уатАналогиГСМ.ГСМ КАК ГСМ
		|ИЗ
		|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
		|ГДЕ
		|	уатАналогиГСМ.Аналог В (&мсвГСМ)";
		ВыборкаАналоги = Запрос.Выполнить().Выбрать();
		
		Для Каждого ТекСтрока Из мсвДанныеЗаправок Цикл
			СтруктураПоиска = Новый Структура("Аналог, ГСМ", ТекСтрока.ГСМ, ТекСтрока.ТС.Модель.ОсновноеТопливо);
			Если ВыборкаАналоги.НайтиСледующий(СтруктураПоиска) Тогда
				ТекСтрока.ГСМ = ВыборкаАналоги.ГСМ;
			КонецЕсли;
			ВыборкаАналоги.Сбросить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьНаличиеДублей(ДатаЗаправки, АЗС, Контрагент, Организация, ГСМ, ТС, ПластиковаяКарта, Количество, ТекстСообщения = "")
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатОборотыПоЗаправкамГСМ.Регистратор.Представление КАК РегистраторПредставление,
	|	уатОборотыПоЗаправкамГСМ.Регистратор КАК Регистратор,
	|	уатОборотыПоЗаправкамГСМ.НомерСтроки КАК НомерСтроки,
	|	уатОборотыПоЗаправкамГСМ.Период КАК Период
	|ИЗ
	|	РегистрНакопления.уатОборотыПоЗаправкамГСМ КАК уатОборотыПоЗаправкамГСМ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(уатОборотыПоЗаправкамГСМ.Регистратор) = ТИП(Документ.уатЗаправкаГСМ)
	|	И уатОборотыПоЗаправкамГСМ.ГСМ = &ГСМ
	|	И уатОборотыПоЗаправкамГСМ.АЗС = &АЗС
	|	И уатОборотыПоЗаправкамГСМ.ПластиковаяКарта = &ПластиковаяКарта
	|	И уатОборотыПоЗаправкамГСМ.ТС = &ТС
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатОборотыПоЗаправкамГСМ.Организация = &Организация)
	|	И уатОборотыПоЗаправкамГСМ.Количество = &Количество
	|	И (&Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВЫБОР
	|				КОГДА уатОборотыПоЗаправкамГСМ.Регистратор.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА уатОборотыПоЗаправкамГСМ.Регистратор.ДоговорКонтрагента.Владелец = &Контрагент
	|				ИНАЧЕ уатОборотыПоЗаправкамГСМ.Регистратор.АЗС.Контрагент_Склад = &Контрагент
	|			КОНЕЦ)";
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("АЗС", АЗС);
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПластиковаяКарта", ПластиковаяКарта);
	Запрос.УстановитьПараметр("Количество", Количество);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		флЕстьДубли = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Формат(ДатаЗаправки, "ДФ='dd.MM.yyyy HH:mm'") = Формат(Выборка.Период, "ДФ='dd.MM.yyyy HH:mm'") Тогда 
				ТекстСообщения = ?(ТекстСообщения = "", Выборка.РегистраторПредставление, ТекстСообщения + ", " + Выборка.РегистраторПредставление);
				флЕстьДубли = Истина;
			Иначе
				Попытка
					СтрокаЗаправки = Выборка.Регистратор.Заправки[Выборка.НомерСтроки - 1];
					Если Формат(ДатаЗаправки, "ДФ='dd.MM.yyyy HH:mm'") = Формат(СтрокаЗаправки.Дата, "ДФ='dd.MM.yyyy HH:mm'") Тогда
						ТекстСообщения = ?(ТекстСообщения = "", Выборка.РегистраторПредставление, ТекстСообщения + ", " + Выборка.РегистраторПредставление);
						флЕстьДубли = Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Возврат флЕстьДубли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаличиеДублейСливы(ДатаЗаправки, АЗС, Организация, ГСМ, ТС, Количество, ТекстСообщения = "")
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатСливГСМ.Представление КАК Представление
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.Проведен
	|	И уатСливГСМ.АЗС = &АЗС
	|	И уатСливГСМ.ГСМ = &ГСМ
	|	И уатСливГСМ.ТС = &ТС
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ уатСливГСМ.Организация = &Организация)
	|	И уатСливГСМ.Количество = &Количество
	|	И уатСливГСМ.Дата = &ДатаЗаправки";
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("ДатаЗаправки", ДатаЗаправки);
	Запрос.УстановитьПараметр("АЗС", АЗС);
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Количество", -Количество);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ?(ТекстСообщения = "", Выборка.Представление, ТекстСообщения + ", " + Выборка.Представление);
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
	
// Процедура создает документы Заправка ГСМ и Слив ГСМ по таблице данных заправок ПЦ и мониторинга
// Параметры:
//    СтруктураПараметров - Структура - структура параметров создания документов
//    СозданныеДокументы - массив созданных документов
//    мсвДанныеЗаправокСливов - массив структур с данными заправок и сливов
//
Процедура ЗаписатьЗаправкиГСМ(СтруктураПараметров, мсвДанныеЗаправокСливов, АдресРезультата = Неопределено)
	
	Если НЕ СтруктураПараметров.Свойство("ОбработанныеДокументы") Тогда
		СтруктураПараметров.Вставить("ОбработанныеДокументы", Новый Массив);
	КонецЕсли;
			
	СписокПЛ     = Новый СписокЗначений;
	КолСтрок	 = мсвДанныеЗаправокСливов.Количество();
	Инд			 = 0;
	мОтказ		 = Ложь;
	мДокументЗаправкаСлив = Неопределено;
	СообщениеПредупреждение	 = "";
	НастройкиОрганизации_УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураПараметров.Организация, "УчитыватьНДС");
	НастройкиОрганизации_СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураПараметров.Организация, "СуммаВключаетНДС");
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	Для Каждого ТекСтрока Из мсвДанныеЗаправокСливов Цикл
		СообщениеПредупреждение = "";
		Инд = Инд + 1;
		
		ТекстСообщения = "Создание документов ""Заправка ГСМ"" и ""Слив ГСМ""";
		//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстСообщения, Окр(Инд/КолСтрок*100)),
		//	СтруктураПараметров.АдресХранилищаФоновогоЗадания);
		ДлительныеОперации.СообщитьПрогресс(Окр(Инд/КолСтрок*100), ТекстСообщения);
		
		флЭтоЗаправка = (ТекСтрока.Количество >= 0);
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ТС)
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Период)
			ИЛИ (НЕ флЭтоЗаправка И НЕ СтруктураПараметров.СоздаватьСливыДляОтрицательныхЗаправок) Тогда
			
			Продолжить;
		КонецЕсли;	
		
		Если мДокументЗаправкаСлив = Неопределено Тогда
			Если флЭтоЗаправка Тогда
				мДокументЗаправкаСлив = Документы.уатЗаправкаГСМ.СоздатьДокумент();
				Если ТекСтрока.УчитыватьНДС = Неопределено Тогда //это иной документ, например Корректировка записей регистров - нестандартная ситуация
					мДокументЗаправкаСлив.УчитыватьНДС = НастройкиОрганизации_УчитыватьНДС;
					мДокументЗаправкаСлив.СуммаВключаетНДС = НастройкиОрганизации_СуммаВключаетНДС;
				Иначе //это документ Отчет ПЦ
					мДокументЗаправкаСлив.УчитыватьНДС = ТекСтрока.УчитыватьНДС;
					мДокументЗаправкаСлив.СуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
				КонецЕсли;
				
				Если ТекСтрока.ЗаправкаССМ Тогда
					мДокументЗаправкаСлив.ВидДвиженияГСМ = СтруктураПараметров.ВидЗаправкиМониторинг;
				Иначе
					мДокументЗаправкаСлив.ВидДвиженияГСМ = ?(ТекСтрока.АЗС.ЭтоАЗССклад,
						Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад,
						Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
				КонецЕсли;
				
				мДокументЗаправкаСлив.Дата						 = ТекСтрока.Период;
				мДокументЗаправкаСлив.АЗС						 = ТекСтрока.АЗС;
				мДокументЗаправкаСлив.Ответственный				 = СтруктураПараметров.Ответственный;
				
				МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период);
				Если ЗначениеЗаполнено(мДокументЗаправкаСлив.ПодразделениеОрганизации)
					И мДокументЗаправкаСлив.ПодразделениеОрганизации <> МестоТС.Подразделение
					ИЛИ ЗначениеЗаполнено(мДокументЗаправкаСлив.Колонна) И мДокументЗаправкаСлив.Колонна <> МестоТС.Колонна Тогда
					
					СообщениеПредупреждение = НСтр("ru = 'В документе %1 колонна и подразделение не были заполнены, так как в списке присутствуют ТС с различным местоположением.'");
					мДокументЗаправкаСлив.ПодразделениеОрганизации	 = Неопределено;
					мДокументЗаправкаСлив.Колонна					 = Неопределено;
				Иначе
					мДокументЗаправкаСлив.ПодразделениеОрганизации	 = МестоТС.Подразделение;
					мДокументЗаправкаСлив.Колонна					 = МестоТС.Колонна;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
					мДокументЗаправкаСлив.Организация				 = СтруктураПараметров.Организация;
				Иначе
					мДокументЗаправкаСлив.Организация				 = МестоТС.Организация;
				КонецЕсли;
				Если ТипЗнч(ТекСтрока.АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
					мДокументЗаправкаСлив.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(
						ТекСтрока.АЗС.Контрагент_Склад, "СПоставщиком", мДокументЗаправкаСлив.Организация, ТекСтрока.Валюта);
				КонецЕсли;
				
				Если ТекСтрока.Свойство("Транзакция") Тогда
					мДокументЗаправкаСлив.Транзакция = ТекСтрока.Транзакция;
				КонецЕсли;
			Иначе
				мДокументЗаправкаСлив = Документы.уатСливГСМ.СоздатьДокумент();
				мДокументЗаправкаСлив.ВидОперации    = СтруктураПараметров.ВидСлива;
				мДокументЗаправкаСлив.Дата			 = ТекСтрока.Период;
				мДокументЗаправкаСлив.АЗС			 = ?(СтруктураПараметров.Свойство("АЗССливМониторинг"),
					СтруктураПараметров.АЗССливМониторинг, СтруктураПараметров.АЗС);
				
				МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период);
				Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
					мДокументЗаправкаСлив.Организация				 = СтруктураПараметров.Организация;
				Иначе
					мДокументЗаправкаСлив.Организация				 = МестоТС.Организация;
				КонецЕсли;

				мДокументЗаправкаСлив.Ответственный	 = СтруктураПараметров.Ответственный;
				мДокументЗаправкаСлив.ГСМ			 = ТекСтрока.ГСМ;
				мДокументЗаправкаСлив.ТС			 = ТекСтрока.ТС;
				мДокументЗаправкаСлив.Количество	 = -ТекСтрока.Количество;
				
				Если ТекСтрока.Свойство("Транзакция") Тогда
					мДокументЗаправкаСлив.Транзакция = ТекСтрока.Транзакция;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если флЭтоЗаправка Тогда
			НоваяСтрока = мДокументЗаправкаСлив.Заправки.Добавить();
			НоваяСтрока.Дата		 = ТекСтрока.Период;
			НоваяСтрока.ГСМ			 = ТекСтрока.ГСМ;
			НоваяСтрока.ТС			 = ТекСтрока.ТС;
			НоваяСтрока.Цена		 = ТекСтрока.Стоимость / ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество);
			НоваяСтрока.Количество	 = ?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество);
			НоваяСтрока.Сумма		 = ТекСтрока.Стоимость;
			НоваяСтрока.Валюта       = ТекСтрока.Валюта;
			НоваяСтрока.СтавкаНДС    = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС     = ТекСтрока.СуммаНДС;
			НоваяСтрока.ПластиковаяКарта = ТекСтрока.ПластиковаяКарта;
			
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(НоваяСтрока.ТС, мДокументЗаправкаСлив.Организация, НоваяСтрока.Дата, НоваяСтрока.Водитель);
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
				Если ЗначениеЗаполнено(мДокументЗаправкаСлив.ДоговорКонтрагента) Тогда
					НоваяСтрока.Валюта = мДокументЗаправкаСлив.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Иначе
					НоваяСтрока.Валюта = ВалютаРеглУчета;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				Если ТекСтрока.УчитыватьНДС = Неопределено Тогда //это иной документ, например Корректировка записей регистров - нестандартная ситуация
					НоваяСтрока.СтавкаНДС = СтруктураПараметров.ОсновнаяСтавкаНДС;
				Иначе
					ТекСтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрока.ГСМ, "СтавкаНДС");
					НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(ТекСтавкаНДС), ТекСтавкаНДС, СтруктураПараметров.ОсновнаяСтавкаНДС);
				КонецЕсли;
			КонецЕсли;
						
			Если НоваяСтрока.Цена = 0 Тогда //заполняем цену топлива из регистра ЦеныНоменклатуры
				СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(НоваяСтрока.Дата, НоваяСтрока.ГСМ, мДокументЗаправкаСлив.АЗС, Ложь);
				Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
					НоваяСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтруктураЦенаВалюта.Цена,
						СтруктураЦенаВалюта.Валюта, НоваяСтрока.Валюта,
						мДокументЗаправкаСлив.Дата, мДокументЗаправкаСлив.Дата);
				КонецЕсли;
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;	
			КонецЕсли;
			
			Если НоваяСтрока.СуммаНДС = 0 И НоваяСтрока.Сумма <> 0 И ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				НоваяСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НоваяСтрока.Сумма,
					мДокументЗаправкаСлив.УчитыватьНДС, мДокументЗаправкаСлив.СуммаВключаетНДС,
					уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			КонецЕсли;
				
			Если ТекСтрока.УчитыватьНДС = Истина И ТекСтрока.СуммаВключаетНДС = Ложь Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма - ТекСтрока.СуммаНДС;
			Иначе
				НоваяСтрока.Сумма = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		// теперь найдем путевой лист
		ВремяВыезд      = СтруктураПараметров.ГлубинаПоискаПЛДоВыезда;
		ВремяВозврат    = СтруктураПараметров.ГлубинаПоискаПЛПослеВозвращения;
		
		// Если создание заправок вызывается при автосоздании ТПЛ, то ТПЛ для пересчета выбираются не из всей базы,
		// а из только что созданных ТПЛ
		ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛистыВыездВозврат(ТекСтрока.ТС, ТекСтрока.Период, ВремяВыезд, 
			ВремяВозврат, , ?(СтруктураПараметров.ОбрабатыватьРассчитанныеПутевыеЛисты, Неопределено, Ложь),
			СтруктураПараметров.ВидПЛприПоискеПЛдляЗаправки,
			?(СтруктураПараметров.АвтосозданиеТПЛ, СтруктураПараметров.СозданныеДокументы, Неопределено));
			
		Если ТаблицаПЛ.Количество() > 0 Тогда
			Если СтруктураПараметров.СоздаватьСливыДляОтрицательныхЗаправок И ТекСтрока.Количество < 0 Тогда
				мДокументЗаправкаСлив.ПутевойЛист = ТаблицаПЛ[0].Ссылка;
				Если СписокПЛ.НайтиПоЗначению(мДокументЗаправкаСлив.ПутевойЛист) = Неопределено Тогда
					СписокПЛ.Добавить(мДокументЗаправкаСлив.ПутевойЛист);
				КонецЕсли;
			Иначе
				НоваяСтрока.ПутевойЛист = ТаблицаПЛ[0].Ссылка;
				Попытка
					НоваяСтрока.Водитель    = ТаблицаПЛ[0].Водитель;
				Исключение
					Если ТипЗнч(НоваяСтрока.ПутевойЛист) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
						НоваяСтрока.Водитель    = НоваяСтрока.ПутевойЛист.Водитель1;
					Иначе
						НоваяСтрока.Водитель    = НоваяСтрока.ПутевойЛист.Водитель;
					КонецЕсли;
				КонецПопытки;
				Если СписокПЛ.НайтиПоЗначению(НоваяСтрока.ПутевойЛист) = Неопределено Тогда
					СписокПЛ.Добавить(НоваяСтрока.ПутевойЛист);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Записываем документ только когда в следующей строке значение периода меняется
		// или если это последняя строка данных,
		// или если заправка меняется на слив, или обратно
		Если Инд = КолСтрок ИЛИ мсвДанныеЗаправокСливов[Инд].Период <> ТекСтрока.Период
			ИЛИ мсвДанныеЗаправокСливов[Инд].Количество < 0 И ТекСтрока.Количество > 0
			ИЛИ мсвДанныеЗаправокСливов[Инд].Количество > 0 И ТекСтрока.Количество < 0 Тогда
			Попытка
				Если СтруктураПараметров.ПроводитьСозданныеЗаправкиГСМ Тогда
					мДокументЗаправкаСлив.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					мДокументЗаправкаСлив.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СообщениеПредупреждение) Тогда
					СообщениеПредупреждение = СтрШаблон(СообщениеПредупреждение, мДокументЗаправкаСлив);
					СтруктураПараметров.СообщенияОбОшибках.Добавить(СообщениеПредупреждение);
				КонецЕсли;
				Если СтруктураПараметров.ПроверятьНаличееДублейПоСозданнымРанееДокументам = 2 И ТекСтрока.ЕстьДубли Тогда
					ТекстНСТР = СтрШаблон("Создан документ ""%1"".
						|По документу существуют дубли:
						|%2
						|",
						мДокументЗаправкаСлив.Ссылка,
						ТекСтрока.Дубли);
											
					СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстНСТР);
					
					Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда	
						ЗаписьЖурналаРегистрации("Документ. " + ?(СтруктураПараметров.ПроводитьСозданныеЗаправкиГСМ, "Проведение", "Запись"),
							УровеньЖурналаРегистрации.Предупреждение,
							Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
							мДокументЗаправкаСлив,
							ТекстНСТР);
					КонецЕсли;
				КонецЕсли;
				
				СтруктураПараметров.ОбработанныеДокументы.Добавить(мДокументЗаправкаСлив.Ссылка);
				
				Если СтруктураПараметров.КомментироватьХодВыполнения Тогда
					ТекстНСТР = НСтр("en='Recorded document:';ru='Записан документ:'") + " <" + мДокументЗаправкаСлив + ">";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон("Не удалось %1 документ ""%2""", 
					?(СтруктураПараметров.ПроводитьСозданныеЗаправкиГСМ, "провести", "записать"),
					мДокументЗаправкаСлив);
					
				СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
				Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
					ЗаписьЖурналаРегистрации("Документ. " + ?(СтруктураПараметров.ПроводитьСозданныеЗаправкиГСМ, "Проведение", "Запись"),
						УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
						мДокументЗаправкаСлив,
						ТекстОшибки + ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
			
			мДокументЗаправкаСлив = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// обновляем информацию по путевым листам
	КолСтрок = СписокПЛ.Количество();
	Инд      = 0;
	
	Для Каждого ТекСтрока Из СписокПЛ Цикл
		Инд = Инд + 1;
		
		ТекстСообщения = "Обновление данных по расходу ГСМ в путевых листах";
		//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстСообщения, Окр(Инд/КолСтрок*100)),
		//	СтруктураПараметров.АдресХранилищаФоновогоЗадания);
		ДлительныеОперации.СообщитьПрогресс(Окр(Инд/КолСтрок*100), ТекстСообщения);
		
		мПутевойЛист = ТекСтрока.Значение.ПолучитьОбъект();
		ЭтоТПЛ       = (ТипЗнч(мПутевойЛист) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист"));
		мЗаголовок   = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + мПутевойЛист.Номер + " :";
		
		Если СтруктураПараметров.ПересчитатьПутевыеЛисты Тогда
			уатПутевыеЛисты.ПересчетВыданногоГСМ(мПутевойЛист);
			Если НЕ ЭтоТПЛ Тогда
				мПутевойЛист.ПересчетСданногоГСМ();
			КонецЕсли;
			мПутевойЛист.РасчетРасходаГСМ(мЗаголовок, мОтказ);
			
			// Выполняется перерасчет ГСМ в ПЛ и проведение
			// если загрузка заправок вызывается при автосоздании ТПЛ, то обновляем остаток топлива при выезде
			Если ЭтоТПЛ И СтруктураПараметров.АвтосозданиеТПЛ Тогда
				ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(мПутевойЛист.ДатаВыезда,
					мПутевойЛист.ТС, мПутевойЛист.ТС.Модель.ОсновноеТопливо, мПутевойЛист.Ссылка);
				
				Если ЗначениеЗаполнено(мПутевойЛист.ТС.Модель.ОсновноеТопливо) Тогда
					Для Каждого ТекСтрокаРасходГСМ Из мПутевойЛист.РасходГСМ Цикл
						Если ТекСтрокаРасходГСМ.ГСМ = мПутевойЛист.ТС.Модель.ОсновноеТопливо Тогда
							ТекСтрокаРасходГСМ.ОстатокПриВыезде 	 = ОстатокТопливаВыезд;
							ТекСтрокаРасходГСМ.ОстатокПриВозвращении = 0;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтруктураПараметров.РасчетИтогов Тогда
					Попытка
						флОтказ = Истина;
						мПутевойЛист.РасчетИтогов(флОтказ, Ложь);
					Исключение
						ТекстСообщения = СтрШаблон("Ошибка при расчете итогов в документе ""%2""", мПутевойЛист);
						СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
						Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
							ЗаписьЖурналаРегистрации("Расчет итогов в технологическом ПЛ после расчета ГСМ",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
								мПутевойЛист,
								ТекстСообщения + ОписаниеОшибки());
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			мПутевойЛист.Рассчитан	= Ложь;
		КонецЕсли;
		
		Если мПутевойЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Попытка
			мПутевойЛист.Записать(мРежимЗаписи);
			Если СтруктураПараметров.ОбработанныеДокументы.Найти(мПутевойЛист.Ссылка) = Неопределено Тогда
				СтруктураПараметров.ОбработанныеДокументы.Добавить(мПутевойЛист.Ссылка);
			КонецЕсли;
			
			Если СтруктураПараметров.КомментироватьХодВыполнения Тогда
				ТекстСообщения = СтрШаблон("Скорректирован документ ""%1"" по заправкам ГСМ", мПутевойЛист);
				
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон("Ошибка при %1 документа ""%2""",
				?(мПутевойЛист.Проведен, "проведении", "записи"),
				мПутевойЛист);
				
			СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
			Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
				ЗаписьЖурналаРегистрации("Документ. " + ?(мРежимЗаписи = РежимЗаписиДокумента.Проведение, "Проведение", "Запись"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
					мПутевойЛист,
					ТекстОшибки + ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ОбработанныеДокументы, ПроцентВыполнения, СообщенияОбОшибках",
			"", СтруктураПараметров.ОбработанныеДокументы, 100, СтруктураПараметров.СообщенияОбОшибках),
			АдресРезультата);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЗаправкиГСМ(СтруктураПараметров, мсвЗагруженныеДанные, АдресРезультата = Неопределено)
	
	Если НЕ СтруктураПараметров.Свойство("ОбработанныеДокументы") Тогда
		СтруктураПараметров.Вставить("ОбработанныеДокументы", Новый Массив);
	КонецЕсли;

	ОборотыПоОтчетамПоставщиковПЦ = Новый ТаблицаЗначений();
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("ТС",				 Новый ОписаниеТипов("СправочникСсылка." + уатОбщегоНазначения.ПолучитьНаименованиеСправочникаТС()));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("ГСМ", 				 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("ПластиковаяКарта",	 Новый ОписаниеТипов("СправочникСсылка.уатПластиковыеКарты"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("Валюта",			 Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("Количество",		 Новый ОписаниеТипов("Число"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("Стоимость",			 Новый ОписаниеТипов("Число"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("СтавкаНДС",			 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("СуммаНДС",			 Новый ОписаниеТипов("Число"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("Период",			 Новый ОписаниеТипов("Дата"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("АЗС",				 Новый ОписаниеТипов("СправочникСсылка.уатАЗС"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("УчитыватьНДС",		 Новый ОписаниеТипов("Булево"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("СуммаВключаетНДС",	 Новый ОписаниеТипов("Булево"));
	ОборотыПоОтчетамПоставщиковПЦ.Колонки.Добавить("Контрагент",		 Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
		НоваяСтрока = ОборотыПоОтчетамПоставщиковПЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОборотыПоОтчетамПоставщиковПЦ", ОборотыПоОтчетамПоставщиковПЦ);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.ТС КАК ТС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.ГСМ КАК ГСМ,
	|	уатОборотыПоОтчетамПоставщиковПЦ.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Валюта КАК Валюта,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Количество КАК Количество,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Стоимость КАК Стоимость,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СтавкаНДС КАК СтавкаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СуммаНДС КАК СуммаНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период КАК Период,
	|	уатОборотыПоОтчетамПоставщиковПЦ.АЗС КАК АЗС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.УчитыватьНДС КАК УчитыватьНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	уатОборотыПоОтчетамПоставщиковПЦ.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втЗаправкиПЦ
	|ИЗ
	|	&ОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Ссылка,
	|	втЗаправкиПЦ.Стоимость КАК Стоимость,
	|	втЗаправкиПЦ.АЗС КАК АЗС,
	|	втЗаправкиПЦ.УчитыватьНДС КАК УчитыватьНДС,
	|	втЗаправкиПЦ.УчитыватьНДС КАК СуммаВключаетНДС,
	|	уатЗаправкаГСМЗаправки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втЗаправкиПЦ КАК втЗаправкиПЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ПО втЗаправкиПЦ.Период = уатЗаправкаГСМЗаправки.Дата
	|			И втЗаправкиПЦ.ГСМ = уатЗаправкаГСМЗаправки.ГСМ
	|			И втЗаправкиПЦ.ПластиковаяКарта = уатЗаправкаГСМЗаправки.ПластиковаяКарта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Обновляем информацию по Заправкам ГСМ
	КолСтрок = Выборка.Количество();
	Инд      = 0;
		
	СписокПЛ = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Инд = Инд + 1;
		
		ДокЗаправка = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаЗаправка = ДокЗаправка.Заправки[Выборка.НомерСтроки - 1];
		СтрокаЗаправка.Цена   = Выборка.Стоимость / ?(СтрокаЗаправка.Количество = 0, 1, СтрокаЗаправка.Количество);
		СтрокаЗаправка.Сумма  = СтрокаЗаправка.Количество * СтрокаЗаправка.Цена;
		
		ТекстСообщения = "Обновление данных Заправок ГСМ";
		ДлительныеОперации.СообщитьПрогресс(Окр(Инд/КолСтрок*100), ТекстСообщения);
		
		Попытка
			СтрокаЗаправка.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаЗаправка.Сумма,
			Выборка.УчитыватьНДС, Выборка.СуммаВключаетНДС,
			уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаЗаправка.СтавкаНДС));
			Если Выборка.УчитыватьНДС = Истина И Выборка.СуммаВключаетНДС = Ложь Тогда
				СтрокаЗаправка.Сумма = СтрокаЗаправка.Сумма - СтрокаЗаправка.СуммаНДС;
			Иначе
				СтрокаЗаправка.Сумма = СтрокаЗаправка.Сумма;
			КонецЕсли;
		Исключение
		КонецПопытки;

		ДокЗаправка.АЗС     = Выборка.АЗС;
		Попытка
			ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
			СтруктураПараметров.ОбработанныеДокументы.Добавить(ДокЗаправка.Ссылка);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаЗаправка.ПутевойЛист) Тогда
			СписокПЛ.Добавить(СтрокаЗаправка.ПутевойЛист);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем информацию по путевым листам
	КолСтрок	 = СписокПЛ.Количество();
	Инд			 = 0;
	мОтказ		 = Ложь;
	Для Каждого ТекСтрока Из СписокПЛ Цикл
		Инд = Инд + 1;
				
		ТекстСообщения = "Обновление данных Путевых листов";
		ДлительныеОперации.СообщитьПрогресс(Окр(Инд/КолСтрок*100), ТекстСообщения);
		
		мПутевойЛист = ТекСтрока.Ссылка.ПолучитьОбъект();
		ЭтоТПЛ       = (ТипЗнч(мПутевойЛист) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист"));
		мЗаголовок   = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + мПутевойЛист.Номер + " :";
		
		Если мПутевойЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Попытка
			мПутевойЛист.Записать(мРежимЗаписи);
			Если СтруктураПараметров.ОбработанныеДокументы.Найти(мПутевойЛист.Ссылка) = Неопределено Тогда
				СтруктураПараметров.ОбработанныеДокументы.Добавить(мПутевойЛист.Ссылка);
			КонецЕсли;
			
			Если СтруктураПараметров.КомментироватьХодВыполнения Тогда
				ТекстСообщения = СтрШаблон("Скорректирован документ ""%1"" по заправкам ГСМ", мПутевойЛист);
				
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон("Ошибка при %1 документа ""%2""",
				?(мПутевойЛист.Проведен, "проведении", "записи"),
				мПутевойЛист);
				
			СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
			Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
				ЗаписьЖурналаРегистрации("Документ. " + ?(мРежимЗаписи = РежимЗаписиДокумента.Проведение, "Проведение", "Запись"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
					мПутевойЛист,
					ТекстОшибки + ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ОбработанныеДокументы, ПроцентВыполнения, СообщенияОбОшибках",
			"", СтруктураПараметров.ОбработанныеДокументы, 100, СтруктураПараметров.СообщенияОбОшибках),
			АдресРезультата);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

Процедура ЛИКАРД_ЗагрузкаДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД;
	ЗагрузкаДанныхПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура Роснефть_ЗагрузкаДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть;
	ЗагрузкаДанныхПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура ППР_ЗагрузкаДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР;
	ЗагрузкаДанныхПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура Газпромнефть_ЗагрузкаДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть;
	ЗагрузкаДанныхПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура ЛИКАРД_ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД;
	ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ(ВнешняяСистема);

КонецПроцедуры

Процедура Роснефть_ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть;
	ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура ППР_ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР;
	ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ(ВнешняяСистема);
	
КонецПроцедуры

Процедура Газпромнефть_ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ() Экспорт
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть;
	ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ(ВнешняяСистема);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Процедура выполняет регламентное задание ЗагрузкаДанных.
//
// Параметры
//		ВнешняяСистема - СправочникСсылка.уатВнешниеСистемы
Процедура ЗагрузкаДанныхПЦ(ВнешняяСистема)
	
	ИмяСобытияВЖурналеРегистрации = СтрШаблон(НСтр("en='Loading data %1';ru='Загрузка данных от поставщика ПЦ %1'"), ВнешняяСистема.Наименование);
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	ЕстьОшибки = Ложь;
	СоответвиеУчетныхЗаписей = Новый Соответствие();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатАЗС.Ссылка КАК Ссылка,
	               |	уатАЗС.УчетнаяЗаписьПЦ КАК УчетнаяЗаписьПЦ,
	               |	уатАЗС.ПрофильОбменаСПЦ КАК ПрофильОбменаСПЦ,
	               |	уатАЗС.Отдел КАК Отдел
	               |ИЗ
	               |	Справочник.уатАЗС КАК уатАЗС
	               |ГДЕ
	               |	уатАЗС.ВидЗагрузкиДанныхОтПЦ = ЗНАЧЕНИЕ(Перечисление.уатВидыЗагрузкиДанныхОтПЦ.АвтоматическаяЗагрузка)
	               |	И уатАЗС.УчетнаяЗаписьПЦ <> ЗНАЧЕНИЕ(Справочник.уатУчетныеЗаписиПЦ.ПустаяСсылка)
	               |	И НЕ уатАЗС.ПометкаУдаления
	               |	И уатАЗС.УчетнаяЗаписьПЦ.ВнешняяСистема = &ВнешняяСистема";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыСПЦ(Выборка.УчетнаяЗаписьПЦ);
		СтруктураПараметровУчетнойЗаписи.Вставить("АЗС",              Выборка.Ссылка);
		СтруктураПараметровУчетнойЗаписи.Вставить("ПрофильОбменаСПЦ", Выборка.ПрофильОбменаСПЦ);
		СтруктураПараметровУчетнойЗаписи.Вставить("Отдел",            Выборка.Отдел);
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.Организация) Тогда
			ТекстОшибки = СтрШаблон("Требуется заполнить поле ""Организация"" в справочнике ""Учетные записи ПЦ"" %1", Выборка.УчетнаяЗаписьПЦ);
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.Ответственный) Тогда 
			ТекстОшибки = СтрШаблон("Требуется заполнить поле ""Ответственный"" в справочнике ""Учетные записи ПЦ"" %1", Выборка.УчетнаяЗаписьПЦ);
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗагрузкаДанныхПЦПоАЗС(СтруктураПараметровУчетнойЗаписи, СоответвиеУчетныхЗаписей) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Обновим дату последней загрузки
	Для Каждого ТекУчетка Из СоответвиеУчетныхЗаписей Цикл 
		ЗначениеДанных = ТекУчетка.Значение;
		Если ЗначениеДанных.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьПЦСсылка = ТекУчетка.Ключ;
		ТекущаяДата           = ЗначениеДанных.ТекущаяДата;
		
		УчетнаяЗаписьПЦ = УчетнаяЗаписьПЦСсылка.ПолучитьОбъект();
		УчетнаяЗаписьПЦ.ДатаПоследнегоОбмена = ТекущаяДата;
		УчетнаяЗаписьПЦ.Записать();
	КонецЦикла;

	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru = 'Загрузка данных завершена.'; en = 'Data loading is completed.'") 
		+ Символы.ПС + НСтр("ru = 'При загрузке данных возникли ошибки (Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура выполняет регламентное задание "Обновление загруженных данных от поставщика ПЦ".
//
// Параметры
//		ВнешняяСистема - СправочникСсылка.уатВнешниеСистемы
Процедура ОбновлениеЗагруженныхДанныхОтПоставщикаПЦ(ВнешняяСистема)
	
	ИмяСобытияВЖурналеРегистрации = СтрШаблон(НСтр("ru='Обновление загруженных данных от поставщика ПЦ %1'"), ВнешняяСистема.Наименование);
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);

	ЕстьОшибки = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатАЗС.Ссылка КАК Ссылка,
	               |	уатАЗС.УчетнаяЗаписьПЦ КАК УчетнаяЗаписьПЦ,
	               |	уатАЗС.ПрофильОбменаСПЦ КАК ПрофильОбменаСПЦ,
	               |	уатАЗС.Отдел КАК Отдел
	               |ИЗ
	               |	Справочник.уатАЗС КАК уатАЗС
	               |ГДЕ
	               |	уатАЗС.ВидЗагрузкиДанныхОтПЦ = ЗНАЧЕНИЕ(Перечисление.уатВидыЗагрузкиДанныхОтПЦ.АвтоматическаяЗагрузка)
	               |	И уатАЗС.УчетнаяЗаписьПЦ <> ЗНАЧЕНИЕ(Справочник.уатУчетныеЗаписиПЦ.ПустаяСсылка)
	               |	И НЕ уатАЗС.ПометкаУдаления
	               |	И уатАЗС.УчетнаяЗаписьПЦ.ВнешняяСистема = &ВнешняяСистема";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыСПЦ(Выборка.УчетнаяЗаписьПЦ);
		СтруктураПараметровУчетнойЗаписи.Вставить("АЗС",              Выборка.Ссылка);
		СтруктураПараметровУчетнойЗаписи.Вставить("ПрофильОбменаСПЦ", Выборка.ПрофильОбменаСПЦ);
		СтруктураПараметровУчетнойЗаписи.Вставить("Отдел",            Выборка.Отдел);
		
		Если НЕ ОбновлениеЗагруженныхДанныхОтПоставщикаПЦПоАЗС(СтруктураПараметровУчетнойЗаписи) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru = 'Обновление данных завершено.'; en = 'Data loading is completed.'") 
		+ Символы.ПС + НСтр("ru = 'При обновлении данных возникли ошибки (Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;

	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Выполняет загрузку данных от поставщика ПЦ по АЗС.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ;
//  Загружено - Число;
//  ТекстОшибки - Строка.
//
Процедура ЗагрузитьТопливныеКарты(СтруктураПараметровУчетнойЗаписи, Загружено = 0, ТекстОшибки = "") Экспорт
	
	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема= Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		Газпромнефть_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено, ТекстОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		ЛИКАРД_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено, ТекстОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		Роснефть_ЗагрузкаТопливныхКарт(СтруктураПараметровУчетнойЗаписи, Загружено, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для работы с системой ПЦ.
//
// Параметры:
//  УчетнаяЗаписьСистемыПЦ - СправочникСсылка.уатУчетныеЗаписиПЦ.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//
Функция ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьСистемыПЦ) Экспорт
	
	СтруктураЗначенийРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьСистемыПЦ,
		"Ссылка,ВнешняяСистема,АдресСервиса,Логин,КлючАвторизации,СоздаватьЗаправкиГСМ,
		|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
		|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
		|ОсновнаяАЗС,ЛогированиеЗапросов");
	СтруктураЗначенийРеквизитов.Вставить("Пароль", "");
	
	АдресСервиса = СтруктураЗначенийРеквизитов.АдресСервиса;
	
	// Адрес не должен оканчиваться символом "/".
	Если Прав(АдресСервиса, 1) = "/" Тогда
		АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса)-1);
	КонецЕсли;

	// Адрес должен начинаться на "http" или "https"
	Если Не НРег(Лев(АдресСервиса, 7)) = "http://" Тогда 
		Если Не НРег(Лев(АдресСервиса, 8)) = "https://" Тогда 
			АдресСервиса = "http://" + АдресСервиса;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗначенийРеквизитов.АдресСервиса = АдресСервиса;
	СтруктураЗначенийРеквизитов.Пароль = 
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СтруктураЗначенийРеквизитов.Ссылка);

	Возврат СтруктураЗначенийРеквизитов;
	
КонецФункции

// Выполняет загрузку данных от поставщика ПЦ по АЗС.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузкаДанныхПЦПоАЗС(СтруктураПараметровУчетнойЗаписи, СоответвиеУчетныхЗаписей)
	ЕстьОшибки = Ложь;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаНачала  = ТекущаяДата;
	
	СтруктураДанных = СоответвиеУчетныхЗаписей.Получить(СтруктураПараметровУчетнойЗаписи.Ссылка);

	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		мсвЗагруженныеДанные = Газпромнефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала,, ТекущаяДата, ЕстьОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		
		// Запрос данных всегда один. Отбор по отделам накладывается при обработки записей.
		Если СтруктураДанных = Неопределено Тогда
			мсвЗагруженныеДанные = ЛИКАРД_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала,,ТекущаяДата, ЕстьОшибки);
		Иначе
			Возврат НЕ ЕстьОшибки;
		КонецЕсли;
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		мсвЗагруженныеДанные = Роснефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала,,ТекущаяДата, ЕстьОшибки);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР Тогда
		// Запрос данных всегда один. Отбор по отделам накладывается при обработки записей.
		Если СтруктураДанных = Неопределено Тогда
			мсвЗагруженныеДанные = ППР_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, ДатаНачала,,ТекущаяДата, ЕстьОшибки);
		Иначе
			мсвЗагруженныеДанные = СтруктураДанных.мсвЗагруженныеДанные;
			ДатаНачала           = СтруктураДанных.ДатаНачала;
			ТекущаяДата          = СтруктураДанных.ТекущаяДата;
			ЕстьОшибки           = СтруктураДанных.ЕстьОшибки;
		КонецЕсли;

	КонецЕсли;
	
	// Удалим ранее созданные транзакции
	УдалениеРанееСозданныхТранзакций(мсвЗагруженныеДанные, СтруктураПараметровУчетнойЗаписи.Ссылка);

	Если СтруктураДанных  = Неопределено Тогда
		ТекущаяДатаУчетки = ТекущаяДата;
	Иначе
		ТекущаяДатаУчетки = Мин(ТекущаяДата, СтруктураДанных.ТекущаяДата);
	КонецЕсли;

	СоответвиеУчетныхЗаписей.Вставить(СтруктураПараметровУчетнойЗаписи.Ссылка,
		Новый Структура("мсвЗагруженныеДанные,ДатаНачала,ТекущаяДата,ЕстьОшибки", мсвЗагруженныеДанные, ДатаНачала, ТекущаяДатаУчетки, ЕстьОшибки));
	
	// Для регламентных заданий сразу вычитаем сливы из заправок
	мсвЗагруженныеДанные = ВычитатьСливыИзЗаправок(мсвЗагруженныеДанные);

	Если мсвЗагруженныеДанные <> Неопределено 
		И ТипЗнч(мсвЗагруженныеДанные) = Тип("Массив")
		И мсвЗагруженныеДанные.Количество() > 0 Тогда
		

		СоздатьЗаправкиВОтчетеПЦ(СтруктураПараметровУчетнойЗаписи, мсвЗагруженныеДанные, ДатаНачала, ТекущаяДата);
		
	КонецЕсли;
		
	Возврат НЕ ЕстьОшибки;
КонецФункции

// Выполняет регламентное задание "Обновление загруженных данных от поставщика ПЦ" по АЗС.
// 
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыСПЦ.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ОбновлениеЗагруженныхДанныхОтПоставщикаПЦПоАЗС(СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь)
	
	ТекущаяДата = ТекущаяДатаСеанса();

	Период = Новый СтандартныйПериод;
	Период.ДатаОкончания  = НачалоМесяца(ТекущаяДата) - 1;
	Период.ДатаНачала     = НачалоМесяца(Период.ДатаОкончания);
	
	Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
		мсвЗагруженныеДанные = Газпромнефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, Период.ДатаНачала, Период.ДатаОкончания, ТекущаяДата);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
		мсвЗагруженныеДанные = ЛИКАРД_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, Период.ДатаНачала, Период.ДатаОкончания,ТекущаяДата);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
		мсвЗагруженныеДанные = Роснефть_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, Период.ДатаНачала, Период.ДатаОкончания,ТекущаяДата);
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР Тогда
		мсвЗагруженныеДанные = ППР_ЗагрузкаДанных(СтруктураПараметровУчетнойЗаписи, Период.ДатаНачала, Период.ДатаОкончания, ТекущаяДата);
	КонецЕсли;
	мсвЗагруженныеДанные = уатЗагрузкаПЦ.ВычитатьСливыИзЗаправок(мсвЗагруженныеДанные);

	Если мсвЗагруженныеДанные <> Неопределено
		И ТипЗнч(мсвЗагруженныеДанные) = Тип("Массив")
		И мсвЗагруженныеДанные.Количество() > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаНачала",    Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
		Запрос.УстановитьПараметр("УчетнаяЗаписьПЦ", СтруктураПараметровУчетнойЗаписи.Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатОтчетПоставщикаПЦЗаправки.Ссылка КАК Ссылка,
		               |	уатОтчетПоставщикаПЦЗаправки.НомерСтроки КАК НомерСтроки,
		               |	уатОтчетПоставщикаПЦЗаправки.ГСМ КАК ГСМ,
		               |	уатОтчетПоставщикаПЦЗаправки.Дата КАК Дата,
		               |	уатОтчетПоставщикаПЦЗаправки.Количество КАК Количество,
		               |	уатОтчетПоставщикаПЦЗаправки.МестоЗаправкиКод КАК МестоЗаправкиКод,
		               |	уатОтчетПоставщикаПЦЗаправки.МестоЗаправкиНаименование КАК МестоЗаправкиНаименование,
		               |	уатОтчетПоставщикаПЦЗаправки.НоменклатураОтчета КАК НоменклатураОтчета,
		               |	уатОтчетПоставщикаПЦЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
		               |	уатОтчетПоставщикаПЦЗаправки.ПластиковаяКартаОтчета КАК ПластиковаяКартаОтчета,
		               |	уатОтчетПоставщикаПЦЗаправки.Проверено КАК Проверено,
		               |	уатОтчетПоставщикаПЦЗаправки.ТС КАК ТС,
		               |	уатОтчетПоставщикаПЦЗаправки.ТСОтчета КАК ТСОтчета,
		               |	уатОтчетПоставщикаПЦЗаправки.Сумма КАК Сумма,
		               |	уатОтчетПоставщикаПЦЗаправки.СтавкаНДС КАК СтавкаНДС,
		               |	уатОтчетПоставщикаПЦЗаправки.СуммаНДС КАК СуммаНДС,
		               |	уатОтчетПоставщикаПЦЗаправки.Транзакция КАК Транзакция
		               |ИЗ
		               |	Документ.уатОтчетПоставщикаПЦ.Заправки КАК уатОтчетПоставщикаПЦЗаправки
		               |ГДЕ
		               |	уатОтчетПоставщикаПЦЗаправки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И НЕ уатОтчетПоставщикаПЦЗаправки.Ссылка.ПометкаУдаления
		               |	И уатОтчетПоставщикаПЦЗаправки.Ссылка.АЗС.УчетнаяЗаписьПЦ = &УчетнаяЗаписьПЦ
		               |ИТОГИ ПО
		               |	Ссылка";
		ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			ВыборкаОтчет    = ВыборкаДокумент.Выбрать();
			
			МассивУдаляемых = Новый Массив();
			уатОтчетПоставщикаПЦ = ВыборкаДокумент.Ссылка.ПолучитьОбъект();
			флагЗаписать = Ложь;
			
			Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
				
				Если СтруктураПараметровУчетнойЗаписи.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД  Тогда
					СтруктураПоиска = Новый Структура("Дата, ПластиковаяКартаОтчета, Количество, НоменклатураОтчета");
				Иначе
					СтруктураПоиска = Новый Структура("Дата, ПластиковаяКартаОтчета, Количество, НоменклатураОтчета, Транзакция");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
				
				Если ВыборкаОтчет.НайтиСледующий(СтруктураПоиска) Тогда
					МассивУдаляемых.Добавить(ТекСтрока);
					ТекЗаправка = уатОтчетПоставщикаПЦ.Заправки[ВыборкаОтчет.НомерСтроки - 1];
					Если ТекЗаправка.Сумма <> ТекСтрока.Сумма Тогда
						флагЗаписать = Истина;
						
						// Цена могла поменяться
						ТекЗаправка.Сумма = ТекСтрока.Сумма;
						Если НЕ уатОтчетПоставщикаПЦ.УчитыватьНДС Тогда
							ТекЗаправка.СтавкаНДС = Неопределено;
							ТекЗаправка.СуммаНДС  = 0;
						Иначе
							ТекЗаправка.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекЗаправка.ГСМ, "СтавкаНДС");
							ТекЗаправка.СуммаНДС  = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(ТекЗаправка.Сумма,
								уатОтчетПоставщикаПЦ.УчитыватьНДС, уатОтчетПоставщикаПЦ.СуммаВключаетНДС,
								уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(ТекЗаправка.СтавкаНДС));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ВыборкаОтчет.Сбросить();
			КонецЦикла;
			Если флагЗаписать Тогда
				уатОтчетПоставщикаПЦ.Записать(РежимЗаписиДокумента.Проведение);
				Если СтруктураПараметровУчетнойЗаписи.СоздаватьЗаправкиГСМ Тогда
					ВыполнитьОбновлениеЗаправокПоОтчетамПЦ(уатОтчетПоставщикаПЦ.Ссылка, уатОтчетПоставщикаПЦ.АЗС);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из МассивУдаляемых Цикл
				ТекИндекс = мсвЗагруженныеДанные.Найти(ТекСтрока);
				Если ТекИндекс <> Неопределено Тогда
					мсвЗагруженныеДанные.Удалить(ТекИндекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Если запрвки не смогли сопоставить, создаем новый документ
		Если мсвЗагруженныеДанные.Количество() > 0 Тогда
			СоздатьЗаправкиВОтчетеПЦ(СтруктураПараметровУчетнойЗаписи, мсвЗагруженныеДанные, Период.ДатаНачала, Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСсылкуНаСтавкуНДС(Знач СтрокаСтавкаНДС)
	СтрокаСтавкаНДС = СокрЛП(СтрокаСтавкаНДС);
	Если ПустаяСтрока(СтрокаСтавкаНДС) Тогда
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого ТекСтавка Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		Если Лев(ТекСтавка.Имя, СтрДлина("НДС" + СтрокаСтавкаНДС)) = "НДС" + СтрокаСтавкаНДС Тогда
			Возврат ТекСтавка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
КонецФункции

Процедура УдалениеРанееСозданныхТранзакций(мсвЗагруженныеДанные, УчетнаяЗаписьПЦ)
	
	ДатаНачала    = ТекущаяДата();
	ДатаОкончания = ДатаНачала;
	
	Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
		ДатаНачала    = Мин(ТекСтрока.Дата, ДатаНачала);
		ДатаОкончания = Макс(ТекСтрока.Дата, ДатаОкончания);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала",      ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",   ДатаОкончания);
	Запрос.УстановитьПараметр("УчетнаяЗаписьПЦ", УчетнаяЗаписьПЦ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОтчетПоставщикаПЦЗаправки.ПластиковаяКартаОтчета КАК ПластиковаяКартаОтчета,
	|	уатОтчетПоставщикаПЦЗаправки.Количество КАК Количество,
	|	уатОтчетПоставщикаПЦЗаправки.Дата КАК Дата,
	|	уатОтчетПоставщикаПЦЗаправки.НоменклатураОтчета КАК НоменклатураОтчета
	|ИЗ
	|	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатОтчетПоставщикаПЦ.Заправки КАК уатОтчетПоставщикаПЦЗаправки
	|		ПО уатОборотыПоОтчетамПоставщиковПЦ.Регистратор = уатОтчетПоставщикаПЦЗаправки.Ссылка
	|			И уатОборотыПоОтчетамПоставщиковПЦ.НомерСтроки = уатОтчетПоставщикаПЦЗаправки.НомерСтроки
	|ГДЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И уатОборотыПоОтчетамПоставщиковПЦ.АЗС.УчетнаяЗаписьПЦ = &УчетнаяЗаписьПЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивУдаляемых = Новый Массив();
	Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
		СтруктураПоиска = Новый Структура("Дата, ПластиковаяКартаОтчета, Количество, НоменклатураОтчета");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
		
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			МассивУдаляемых.Добавить(ТекСтрока);
		КонецЕсли;
		Выборка.Сбросить();
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивУдаляемых Цикл
		ТекИндекс = мсвЗагруженныеДанные.Найти(ТекСтрока);
		Если ТекИндекс <> Неопределено Тогда
			мсвЗагруженныеДанные.Удалить(ТекИндекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

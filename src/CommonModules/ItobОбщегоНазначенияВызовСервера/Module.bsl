////////////////////////////////////////////////////////////////////////////////
// Общего назначения (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает интервал времени согласно персональных настроек пользователя.
//
// Параметры:
//  ДатаНачала		 - Дата	 - Дата начала.
//  НачалоПериода	 - Дата	 - Начало интервала.
//  КонецПериода	 - Дата	 - Конец интервала.
//
Процедура ПолучитьИнтервалСогласноПерсональнымНастройкам(ДатаНачала, НачалоПериода, КонецПериода) Экспорт
	ВремяНачалаОтчетов = ХранилищеОбщихНастроек.Загрузить("НастройкиЦСМ", "ВремяНачалаОтчетов");
	ВремяНачалаОтчетовЧисло = ?(ВремяНачалаОтчетов = Неопределено, 0, ВремяНачалаОтчетов-'00010101');
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущаяДатаСеансаНачалоДня = НачалоДня(ТекущаяДатаСеанса);
	ПрибавитьКДате = 0;
	Если (ТекущаяДатаСеанса-ТекущаяДатаСеансаНачалоДня) < ВремяНачалаОтчетовЧисло Тогда
		ПрибавитьКДате = -86400;
	КонецЕсли; 
	НачалоПериода = ТекущаяДатаСеансаНачалоДня+ПрибавитьКДате+ВремяНачалаОтчетовЧисло;
	КонецПериода  = НачалоПериода+86399;
КонецПроцедуры // ПолучитьИнтервалСогласноПерсональнымНастройкам()

// Возвращает абсолютный цвет из цвета стиля.
//
// Параметры:
//  Цвет - ЦветСтиля - Цвет.
// 
// Возвращаемое значение:
//  Цвет - Абсолютный цвет.
//
Функция ПолучитьАбсолютныйЦвет(Цвет) Экспорт
	Возврат ItobОбщегоНазначения.ПолучитьАбсолютныйЦвет(Цвет);
КонецФункции	
 
// Очищает регистры сведений ItobГеографическийКлассификатор и ItobКэшГеокодера.
//
Процедура ОчиститьЗаписиРегистров() Экспорт
	
	НаборЗаписей1 = РегистрыСведений.ItobГеографическийКлассификатор.СоздатьНаборЗаписей();
	НаборЗаписей1.Записать();	
	
	НаборЗаписей2 = РегистрыСведений.ItobКэшГеокодера.СоздатьНаборЗаписей();
	НаборЗаписей2.Записать();	
	
КонецПроцедуры

// Получает текущую дату сервера, приведенную к часовому поясу сеанса.
//  При вычислении даты используется один из заданных часовых поясов в порядке:
//  часовой пояс сеанса, часовой пояс информационной базы, часовой пояс сервера.
// 
// Возвращаемое значение:
//  Дата - Текущая дата на сервере.
//
Функция ПолучитьТекущуюДату() Экспорт
	Возврат ТекущаяДатаСеанса();
КонецФункции // ПолучитьТекущуюДату()

// Возвращает дату начала отчетов.
// 
// Возвращаемое значение:
//  Дата - Пользовательская дата начала отчетов.
//
Функция ПолучитьДатуВремяНачалаОтчетов() Экспорт
	
	Результат = НачалоДня(ТекущаяДатаСеанса());
	
	ВремяНачалаОтчетов = ХранилищеОбщихНастроек.Загрузить("НастройкиЦСМ",   "ВремяНачалаОтчетов");
	Если ЗначениеЗаполнено(ВремяНачалаОтчетов) Тогда
		Результат = Результат + (ВремяНачалаОтчетов - '00010101000000');	
	КонецЕсли;
	
	Если ТекущаяДатаСеанса() < Результат Тогда
		Результат = Результат - 24*3600;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ПолучитьДатуВремяНачалаОтчетов()

// Возвращает общий макет.
//
// Параметры:
//  ИмяМакета	 - Строка	 - Имя получаемого макета.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Общий макет.
//
Функция ПолучитьМакет(ИмяМакета) Экспорт
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);	
	
КонецФункции // ПолучитьМакет()

// Возвращает параметры сеанса в виде структуры.
// 
// Возвращаемое значение:
//  Структура - Параметры адреса CsmSvc.
//
Функция ПолучитьItobАдресCsmSvc() Экспорт
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("НастройкиОпределены", ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены"));
	ПараметрыСтруктура.Вставить("СерверАдрес", ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес"));
	ПараметрыСтруктура.Вставить("СерверПорт", ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт"));
	ПараметрыСтруктура.Вставить("КлиентАдрес", ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес"));
	ПараметрыСтруктура.Вставить("КлиентПорт", ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"));
	Возврат ПараметрыСтруктура;
КонецФункции

// Записывает параметры сеанса.
//
// Параметры:
//  ПараметрыСеансаНовые - Структура - Параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ПараметрыСеансаНовые) Экспорт
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("НастройкиОпределены", ПараметрыСеансаНовые.НастройкиОпределены);
	Соответствие.Вставить("СерверАдрес", 		 ПараметрыСеансаНовые.СерверАдрес);
	Соответствие.Вставить("СерверПорт", 		 ПараметрыСеансаНовые.СерверПорт);
	Соответствие.Вставить("КлиентАдрес", 		 ПараметрыСеансаНовые.КлиентАдрес);
	Соответствие.Вставить("КлиентПорт", 		 ПараметрыСеансаНовые.КлиентПорт);
	ItobАдресCsmSvc = Новый ФиксированноеСоответствие(Соответствие);
	ПараметрыСеанса.ItobАдресCsmSvc = ItobАдресCsmSvc;	
КонецПроцедуры

// Возвращает картинку из библиотеки.
//
// Параметры:
//  Картинка - Строка	 - Наименование картинки из библиотеки.
// 
// Возвращаемое значение:
//  Картинка - Картинка из библиотеки.
//
Функция ПолучитьКартинкуИзБиблиотеки(Картинка) Экспорт
	Возврат ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки(Картинка);
КонецФункции // ПолучитьКартинкуИзБиблиотеки()

// Осуществляет поиск в указанном справочнике по наименованию.
//
// Параметры:
//  ИмяСправочника		 - Строка	 - точное имя справочника из дерева метаданных.
//  Наименование		 - Строка	 - наименование элемента.
//  ТочноеСоответствие	 - Булево	 - Если указать Истина, то будут найдены лишь объекты,
//  	наименование которых полностью соответствует поисковой строке.
// 
// Возвращаемое значение:
//	- СправочникСсылка 	- 	ссылка на найденный элемент справочника. Если не существует ни одного элемента с требуемым
//							наименованием, то будет возвращена пустая ссылка.
//	- Неопределено 		- 	если для справочника наименование не задано (длина = 0) и поиск выполняется по полному соответствию.
//
Функция ПолучитьЭлементСправочникаПоНаименованию(ИмяСправочника, Наименование, ТочноеСоответствие = Ложь) Экспорт
	
	Возврат Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, ТочноеСоответствие);
	
КонецФункции

// Возвращает список вариантов времени доставки.
// 
// Возвращаемое значение:
//  СписокЗначений - Список вариантов времени доставки.
//
Функция ПолучитьСписокВариантовВремениДоставки() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВариантыВремениДоставки.Ссылка,
	                      |	ВариантыВремениДоставки.Представление КАК Представление,
	                      |	ВариантыВремениДоставки.ВремяДоставкиС,
	                      |	ВариантыВремениДоставки.ВремяДоставкиПо
	                      |ИЗ
	                      |	Справочник.ItobВариантыВремениДоставки КАК ВариантыВремениДоставки
	                      |ГДЕ
	                      |	НЕ ВариантыВремениДоставки.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВариантыВремениДоставки.Наименование");
						  
	Выборка = Запрос.Выполнить().Выбрать();	
	
	СписокВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанные = Новый Структура("ВремяДоставкиС,ВремяДоставкиПо");
		ЗаполнитьЗначенияСвойств(СтруктураДанные, Выборка);
		СписокВыбора.Добавить(СтруктураДанные, Выборка.Представление);		
	
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции // ПолучитьСписокВариантовВремениДоставки()

#Область ПеренаправлениеНаСерверныйМодуль
	
// Загружает настройку из хранилища.
//  Результатом работы являются настройки, загруженные из хранилища.
//
// Параметры:
//  Раздел		 - Строка	 - Ключ объекта настройки.
//  	Подробнее см. в Настройки, автоматически сохраняемые в системном хранилище.
//  Настройка	 - Строка	 - Ключ загружаемых настроек.
//  	Значение по умолчанию: Пустая строка.
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Неопределено, если настройки не найдены.
//
Функция ПрочитатьНастройкуПользователя(Раздел, Настройка) Экспорт
	Возврат ItobОбщегоНазначения.ПрочитатьНастройкуПользователя(Раздел, Настройка);	
КонецФункции // ПрочитатьНастройкуПользователя()

// Запускает процедуру ЗаписьЖурналаРегистрации.
//
// Параметры:
//  ИмяСобытия	 - Строка	 - Событие указывается строкой. Может содержать точки для обозначения иерархии событий.
//  	Запрещена запись событий использующих сочетания символов "_$" и "$_", зарезервированные для системных событий.
//  	Например: _$МоеСобытие$_ или _$МояГруппаСобытий$_.МоеСобытие.
//  Комментарий	 - Строка	 - Произвольная строка комментария к событию.
//
Процедура ЗаписьЖурналаРегистрацииОшибка(ИмяСобытия, Комментарий) Экспорт
	ItobОбщегоНазначения.ЗаписьЖурналаРегистрацииОшибка(ИмяСобытия, Комментарий);
КонецПроцедуры // ЗаписьЖурналаРегистрацииОбщее()

// Возвращает модель терминала для переданного объекта.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка.упСотрудники, СправочникСсылка.упТранспортныеСредства	 - Объект мониторинга.
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobМоделиТерминалов - Модель терминала.
//
Функция ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект) Экспорт 
	
	Возврат ItobОперативныйМониторинг.ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект, ТекущаяДатаСеанса());
	
КонецФункции

// Функция - Масштаб объектов на карте
// 
// Возвращаемое значение:
//  Число - Коэффициент на которой будет умножено значение размера объекта на карте по умолчанию.
//
Функция МасштабыОбъектовНаКарте() Экспорт
	Возврат ItobОбщегоНазначения.МасштабыОбъектовНаКарте();
КонецФункции

#КонецОбласти 
 
#КонецОбласти

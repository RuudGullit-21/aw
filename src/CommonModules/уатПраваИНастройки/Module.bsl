//////////////////////////////////////////////////////////////////
//        ФУНКЦИИ РАБОТЫ ПРАВАМИ И НАСТРОЙКАМИ
//////////////////////////////////////////////////////////////////  

#Область СлужебныйПрограммныйИнтерфейс

// Стандартная процедура проверки корректности заполнения элемента
// по заполнению обязательных реквизитов и уникальности уникальных индексированных
//
//  ЭтотОбъект -объект для проверки
//  Ошибки - ошибки в объекте,строкой
//  ДопРеквизиты - список дополнительных реквизитов для проверки
//  Заполнение - требование заполнения
//  Уникальность - требование уникальности
//
Функция уатПроверитьКорректность(ЭтотОбъект, Ошибки = "", ДопРеквизиты = Неопределено, Заполнение = Истина,
		Уникальность = Истина) Экспорт
	Результат=Истина;
	Если НЕ уатПраво("ПроверкаЗаполненияСправочниковИДокументов", ЭтотОбъект.Права) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// Определимся это элемент или группа (для плана счетов всегда элемент)
	Попытка  ЭтоГруппа = ЭтотОбъект.ЭтоГруппа;
	Исключение ЭтоГруппа = Ложь;
	КонецПопытки;
	// сначала получим список обязательных у нашего объекта....
	Реквизиты = ЭтотОбъект.ПолучитьОбязательныеРеквизиты(НЕ ЭтоГруппа, ЭтоГруппа);
	// и его метаданные
	ЭтотОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	// добавим дополнительные реквизиты
	Если ДопРеквизиты <> Неопределено Тогда
		Для каждого ДопРеквизит Из ДопРеквизиты Цикл
			Реквизиты.Вставить(ДопРеквизит.Ключ, ДопРеквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Проверим установим заранее владельца, чтобы ниже в циклах этим не заниматься
	ЭтоСправочник = Ложь; Владелец = НЕОПРЕДЕЛЕНО;
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭтотОбъект.Ссылка)) Тогда // Владелец только у справочников бывает
		ЭтоСправочник = Истина;
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ЭтотОбъект.Владелец) Тогда
			Владелец = ЭтотОбъект.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	// пройдемся по списку реквизитов с проверкой
	Для каждого Реквизит Из Реквизиты Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда
			// проверяем табличную часть
			ТабличнаяЧасть = ЭтотОбъект[Реквизит.Ключ];
			СписокНайденныхДублей = Новый СписокЗначений();
			// идем по табличной части
			Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
				// создадим структуру отбора для проверки уникальности реквизитов
				Если Уникальность Тогда СтруктураОтбора = Новый Структура(); КонецЕсли;
				// переберем обязательные реквизиты
				Для каждого РеквизитТаблицы Из Реквизит.Значение Цикл
					Если (Заполнение) И (РеквизитТаблицы.Значение <> 2) И (РеквизитТаблицы.Значение > 0) 
							И уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы[РеквизитТаблицы.Ключ]) Тогда
						Результат = Ложь;
						Ошибки = Ошибки + НСтр("en='Table';ru='Таблица'") + " <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, , Реквизит.Ключ) + 
							"> " + НСтр("en='column value';ru='значение колонки'") + " <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, РеквизитТаблицы.Ключ, 
							Реквизит.Ключ) + "> " + НСтр("en='not filled in ! Line number';ru='не заполнено ! Строка номер'") + " " + СокрЛП(СтрокаТаблицы.НомерСтроки) + Символы.ПС;
						Продолжить; // Если реквизит таблицы не заполнен, проверять его уникальность нет смысла
					КонецЕсли;
					// заполним структуру отбора для проверки уникальности реквизитов
					Если Уникальность И РеквизитТаблицы.Значение > 1 Тогда
						СтруктураОтбора.Вставить(СокрЛП(РеквизитТаблицы.Ключ), СтрокаТаблицы[РеквизитТаблицы.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// проверка уникальности
				Если Уникальность И СтруктураОтбора.Количество() > 0 
						И СписокНайденныхДублей.НайтиПоЗначению(СтрокаТаблицы) = Неопределено Тогда
					// поищем строки удовлетворяющие структуре отбора
					НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
					// если нашли и их больше 1, то строки не уникальные
					Если НайденныеСтроки.Количество() > 1 Тогда
						// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
						Результат = Ложь;
						ДублирующиесяСтроки = ""; 
						// выведем строку сообщения...
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
							ДублирующиесяСтроки = ДублирующиесяСтроки + "," + СокрЛП(НайденнаяСтрока.НомерСтроки);
							// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
							СписокНайденныхДублей.Добавить(НайденнаяСтрока);
						КонецЦикла;
						СтрокаРеквизитов = "";
						Для каждого РеквизитТаблицы Из СтруктураОтбора Цикл
							СтрокаРеквизитов = СтрокаРеквизитов + ?(ПустаяСтрока(СтрокаРеквизитов), "", ",") + 
								РеквизитТаблицы.Ключ;
						КонецЦикла;
						Ошибки = Ошибки + НСтр("en='Table';ru='Таблица'") + " <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, , Реквизит.Ключ) +
							"> " + НСтр("en='column value';ru='значение колонки'") + " <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, РеквизитТаблицы.Ключ, 
							Реквизит.Ключ) + "> " + НСтр("en='not unique ! Lines:';ru='не уникальны ! Строки:'") + " " + Сред(ДублирующиесяСтроки, 2) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе // обычный реквизит справочника / ПВХ (не табличная часть)
			// Сначала проверим заполнение (параметры структуры 1 или 3)
			Если Заполнение 
				и ((Реквизит.Значение = 1) или (Реквизит.Значение = 3) или (Реквизит.Значение = Неопределено))
				и уатОбщегоНазначения.уатЗначениеНеЗаполнено(ЭтотОбъект[Реквизит.Ключ]) Тогда
				Результат = Ложь;
				Ошибки = Ошибки + НСтр("en='Property';ru='Реквизит'") + " """ + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные,Реквизит.Ключ) + 
					""" " + НСтр("en='not filled !';ru='не заполнен !'") + Символы.ПС;
				Продолжить; // Если реквизит не заполнен, проверять его уникальность нет смысла
			КонецЕсли;
			// Теперь проверим уникальность (параметры структуры 2 или 3)
			// проверку сделаем прямым сравнением (а не >2) во избежание ошибки при не числовом типе значения.
			Если (Уникальность) и ((Реквизит.Значение = 2)ИЛИ(Реквизит.Значение = 3)) Тогда
				ИмяОбъекта = ЭтотОбъект.Метаданные().Имя;
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					// имеем справочник
					Менеджер = Справочники[ЭтотОбъект.Метаданные().Имя];
				ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
					// имеем ПВХ
					Менеджер = ПланыВидовХарактеристик[ЭтотОбъект.Метаданные().Имя];
				ИначеЕсли Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
					// имеем ПВР
					Менеджер = ПланыВидовРасчета[ЭтотОбъект.Метаданные().Имя];
				Иначе
					// имеем ... ничего не имеем
				КонецЕсли;
				
				Если Реквизит.Ключ = "Наименование" Тогда
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоНаименованию(ЭтотОбъект.Наименование, Истина, , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоНаименованию(ЭтотОбъект.Наименование, Истина);
					КонецЕсли;
				ИначеЕсли Реквизит.Ключ = "Код" Тогда
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоКоду(ЭтотОбъект.Код, , , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоКоду(ЭтотОбъект.Код);
					КонецЕсли;
				Иначе // реквизит
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоРеквизиту(Реквизит.Ключ, ЭтотОбъект[Реквизит.Ключ], , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоРеквизиту(Реквизит.Ключ, ЭтотОбъект[Реквизит.Ключ]);
					КонецЕсли;
				КонецЕсли;
				
				Если (НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(НайденнаяСсылка)) и (НайденнаяСсылка<>ЭтотОбъект.Ссылка) Тогда
					Результат=Ложь;
					Ошибки =  Ошибки + НСтр("en='Property';ru='Реквизит'") + " """ + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, Реквизит.Ключ) +
						""" " + НСтр("en='not unique !';ru='не уникален !'");
					Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Владелец) Тогда
						Ошибки = Ошибки + " (" + НСтр("en='Within owner:';ru='В пределах владельца:'") + " " + СокрЛП(Владелец) + ")";
					КонецЕсли;
					Ошибки = Ошибки + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция получает синоним реквизита в шапке или табличной части
//
// Параметры:
//  ЭтотОбъектМетаданные - объект синоним реквизита которого необходимо получить
//  ИмяРеквизита - Имя реквизита синоним которого необходимо получить
//  ИмяТабличнойЧасти - имя табличной части для реквизита которой необходимо 
//                 получить синоним
//
// Возвращаемое значение%
//  Синоним реквизита.
Функция уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, ИмяРеквизита="", ИмяТабличнойЧасти="") Экспорт
	Если ТипЗнч(ЭтотОбъектМетаданные) <> Тип("ОбъектМетаданных") Тогда
		ЭтотОбъектМетаданные = ЭтотОбъектМетаданные.Метаданные();
	КонецЕсли; 
	СинонимРеквизита = ИмяРеквизита;
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		Реквизит = ЭтотОбъектМетаданные.Реквизиты.Найти(ИмяРеквизита);
	Иначе
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			Реквизит = ЭтотОбъектМетаданные.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Иначе
			Реквизит = ЭтотОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита);
		КонецЕсли;
	КонецЕсли; 
	Если Реквизит <> Неопределено Тогда
		СинонимРеквизита=Реквизит.Синоним;
	КонецЕсли; 
	Возврат СинонимРеквизита;
КонецФункции // уатПолучитьСинонимРеквизита()

// Преобразование имени права в ссылку на ПВХ 
// Так же поддерживается идентификация по коду ПВХ
// Параметры
//  Право – Строка, Число, ссылка на ПВХ ПраваИНастройки – имя или ссылка права
// Возвращаемое значение:
//   ссылка на ПВХ ПраваИНастройки или Неопределено для недопустимого имени ПВХ
Функция уатПолучитьСсылкуПВХПравИНастроек(Право) Экспорт
	ТипЗначения = ТипЗнч(Право);
	
	Если ТипЗначения = Тип("ПланВидовХарактеристикСсылка.уатПраваИНастройки") Тогда
		// Если право уже является ссылкой - вернем ее
		Возврат Право;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		// Если право задано в виде имени - преобразуем его в ссылку на ПВХ
		// Если такого предопределенного элемента нет. Попробуем найти добавленный по наименованию
		Попытка		Возврат ПланыВидовХарактеристик.уатПраваИНастройки[СокрЛП(Право)];
		Исключение	Возврат ПланыВидовХарактеристик.уатПраваИНастройки.НайтиПоНаименованию(СокрЛП(Право), Истина);
		КонецПопытки; 
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		// Возможно, хотя и не рекомендуется использовать поиск по коду ПВХ
		Возврат ПланыВидовХарактеристик.уатПраваИНастройки.НайтиПоКоду(Право);
		
	Иначе Возврат ПланыВидовХарактеристик.уатПраваИНастройки.ПустаяСсылка();
		
	КонецЕсли;
КонецФункции

// Получить значение права по имени или значению
// Параметры:
//	ЗначенияПрав - список прав (типа соответствие), в котором надо произвести  
//	  поиск значения конкретного права (в этот параметр обычно будет передаваться 
//    глобальная переменная "глПраваУАТ", в которой кэшируются права пользователя)
//	Право - строка с именем или ссылка на ПВХ ПраваИНастройки искомого права
// Возвращаемое значение:   значение запрошенного права 
Функция уатПраво(Право, ЗначенияПрав = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ (ЗначенияПрав = Неопределено) Тогда
		// Если это дополнительное право доступа справочников или документов
		ТекстНСТР = НСтр("en='Values access right';ru='Значения Право доступа'");
		Если (ТипЗнч(Право) = Тип("Строка")) И Найти(Право, ТекстНСТР) > 0 Тогда
			Возврат ЗначенияПрав[Право];
		КонецЕсли;
		// кеш с правами передан, попытаемся получить нужное право из него напрямую.
		ПравоСсылка = уатПолучитьСсылкуПВХПравИНастроек(Право);
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПравоСсылка) Тогда
			// Такого права нет в системе - явная ошибка. Нужен специалист
			ТекстНСТР = НСтр("en='Unknown right:';ru='Неизвестное право:'") + " " +Право;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Иначе
			Результат = ЗначенияПрав[ПравоСсылка];
		КонецЕсли;
	Иначе
		// Кэш прав не передан (вероятно мы на сервере), значит придется запрашивать данные из БД
		// Момент тонкий - чтобы не писать разные функции получения прав в кэш
		// и точечного получения, вызовем стандартную функцию с фильтром по праву.
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		// Получаем ссылку на ПВХ по ее имени
		ПравоСсылка = уатПолучитьСсылкуПВХПравИНастроек(Право);
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПравоСсылка) Тогда
			// Такого права нет в системе - явная ошибка. Нужен специалист
			ТекстНСТР = НСтр("en='Unknown right:';ru='Неизвестное право:'") + " " +Право;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			//Результат = Неопределено;
		Иначе
			Результат = уатПолучитьПраваИНастройкиПользователя(Пользователь, ПравоСсылка);
		КонецЕсли;
	КонецЕсли;
	// 
	Возврат(Результат);
	
КонецФункции

// Получает текущие значение прав и настроек для пользователя
// из регистра ПраваИНастройки. Кроме пользователя так же может фигурировать
// подразделение, организация, компания (пустая ссылка)
// Объект - ссылка на пользователя (или другой объект) для которого собрать права
// ТолькоЭтоПраво - ссылка на элемент ПВХ, если задан то накладывается фильтр для
// получения значения только именно этого права, по умолчанию НЕОПРЕДЕЛЕНО (все права)
// Возвращаемое значение: -Соответствие (в ключе ссылка на элемент ПВХ, а в значении оно и есть)
// 						   если параметр ТолькоЭтоПраво был не задан (неопределен), 
//						  -иначе возвращается текущее значение запрошенного права
// для группы прав доступа к справочникам и документам формируются записи соответствия вида:
// Ключ: "Значения <Имя права>"
// Значение: Соответствие, где ключ - значение доступа, значение - флаг доступа
//
Функция уатПолучитьПраваИНастройкиПользователя(Знач Объект = Неопределено, Знач ПравоНастройка = Неопределено, Знач ВозвращатьЗначениеПоУмолчанию = Истина) Экспорт
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	Если Объект = Неопределено Тогда
		Объект = ТекПользователь;
	КонецЕсли;
	
	// Если выполняется запрос ПИН не текуего пользователя то значения прав берем не из кэша а сразу запросом из базы
	// сделано в целях запрета доступности получения чужих прав и настроек
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(Объект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		СоотвВсеПИН = уатПраваИНастройкиПовтИсп.ПолучитьЗначенияВсехПравНастроек(Объект);
	Иначе
		СоотвВсеПИН = уатПраваИНастройкиПовтИсп.ПолучитьЗначенияВсехПравНастроек(ТекПользователь);
	КонецЕсли;
	
	// выбор всех прав и настроек
	Если ПравоНастройка = Неопределено Тогда
		РезПИН = Новый Соответствие;
		Для Каждого ТекПН Из СоотвВсеПИН Цикл
			ЗначПН = уатПолучитьПраваИНастройкиПользователя(Объект, ТекПН.Ключ);
			РезПИН.Вставить(ТекПН.Ключ, ЗначПН);
		КонецЦикла;
		Возврат РезПИН;
	КонецЕсли;
	
	ЭтоНастройкиПравДоступаДокИСпр = Ложь;
	Если ТипЗнч(ПравоНастройка) = Тип("Строка") Тогда
		ЭтоНастройкиПравДоступаДокИСпр = (Найти(ПравоНастройка, НСтр("en='Values Access right';ru='Значения Право доступа'")) > 0);
	КонецЕсли;
	
	Если ТипЗнч(ПравоНастройка) = Тип("Строка") И (НЕ ЭтоНастройкиПравДоступаДокИСпр) Тогда
		ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки[ПравоНастройка];
	КонецЕсли;
	
	СоотвПН = СоотвВсеПИН.Получить(ПравоНастройка);
	Если СоотвПН = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		// Добавляем блок для прав и настроек, которые могут быть "многоэтажными", то есть
		// существовать для нескольких видов объекта, например, ВидПЛ может быть указан и для пользователя,
		// и для подразделения, и для организации
		ТекПользователь =  Неопределено;
		ТекПодразделение = Неопределено;
		ТекОрганизация =   Неопределено;
		Объект.Свойство("Пользователь",  ТекПользователь);
		Объект.Свойство("Подразделение", ТекПодразделение);
		Объект.Свойство("Организация",   ТекОрганизация);
		
		ЗначениеПН = Неопределено;
		
		// для пользователя
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			ЗначениеПН = СоотвПН.Получить(ТекПользователь);
		КонецЕсли;
		// для подразделения
		Если ЗначениеЗаполнено(ТекПодразделение) И ЗначениеПН = Неопределено Тогда
			ЗначениеПН = СоотвПН.Получить(ТекПодразделение);
		КонецЕсли;
		// для организации
		Если ЗначениеЗаполнено(ТекОрганизация) И ЗначениеПН = Неопределено Тогда
			ЗначениеПН = СоотвПН.Получить(ТекОрганизация);
		КонецЕсли;
		
		// значение настройки по умолчанию
		Если ЗначениеПН = Неопределено Тогда
			ЗначениеПН = СоотвПН.Получить("ЗначениеПоУмолчанию");
		КонецЕсли;
		
		Возврат ЗначениеПН;
		
	ИначеЕсли ЭтоНастройкиПравДоступаДокИСпр Тогда
		Возврат СоотвПН;
		
	Иначе
		ЗначениеПН = СоотвПН.Получить(Объект);
		
		Если ЗначениеПН = Неопределено Тогда
			ЗначениеПН = СоотвПН.Получить("ЗначениеПоУмолчанию");
		КонецЕсли;
		
		Возврат ЗначениеПН;
		
	КонецЕсли;
	
КонецФункции // уатПолучитьПраваИНастройкиПользователя()

// Проверяет документы на право редактирования, чтения или доступности текущего
// вида документа, а так же на право, если оно установлено, редактирования или
// чтения объекта текущего вида документа, по автору или подразделению компании
// Параметры:
//  Объект - текущий ДокументОбъект. Обязательный для заполнения.
//  Отказ - результат работы процедуры, т.е. определяет текущую доступность данного объекта
//  ЭтаФорма - форма текущего объекта. Передается для проверки на редактирование или чтение 
//  объекта и соответственно для разрешения или запрещения редактирования формы объекта.
//  ЗначенияПрав - Кеш прав текущего пользователя. тип соответствие.
Процедура уатПроверкаПраваДоступаКДокументам(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	// если уже отказ, то не проверяем
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	МетаданныеОбъекта_Имя = МетаданныеОбъекта.Имя;
	МетаданныеОбъекта_Представление = МетаданныеОбъекта.Представление();
	
	ТекстНСТР = НСтр("en='Access right';ru='Право доступа'") + " " + МетаданныеОбъекта_Имя;
	Результат = уатПраво(ТекстНСТР, ЗначенияПрав);
	
	Если Результат = Перечисления.уатВидыПравДляДокументов.РедактированиеВсе Тогда
		// если редактируем, то ничего не делаем
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.НетДоступа Тогда
		ТекстНСТР = НСтр("en='No access to view objects';ru='Нет доступа к объектам вида'") + " " + МетаданныеОбъекта_Представление;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.ЧтениеВсе тогда
		// ЧТЕНИЕ
		ТекстНСТР = НСтр("en='No rights for edit view objects';ru='Нет прав на редактирование объектов вида'") + " " + МетаданныеОбъекта_Представление;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		// проверка на редактирование или просмотр объекта
		Если ЭтаФорма = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям Тогда
		// получаем значения доступа
		ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		Если НЕ Объект.Ссылка.Пустая() И ТекПользователь <> Объект.Ответственный Тогда
			Если ЗначенияПрав = Неопределено Тогда
				ЗначенияПрав = уатПолучитьПраваИНастройкиПользователя(ТекПользователь);
			КонецЕсли;
			
			Результат = Неопределено;
			ТекстНСТР = НСтр("en='Values access right';ru='Значения Право доступа'") + " " + МетаданныеОбъекта_Имя;
			ЗначениеДоступа = уатПраво(ТекстНСТР, ЗначенияПрав);
			Если ЗначениеДоступа <> Неопределено Тогда
				Результат = ЗначениеДоступа[Объект.Ответственный];
			КонецЕсли;
			Если (Результат = Неопределено) ИЛИ (Не Результат) Тогда
				ТекстНСТР = НСтр("en='No rights for edit view objects';ru='Нет прав на редактирование объектов вида'")
					+ " " + МетаданныеОбъекта_Представление + " " + НСтр("en='by author:';ru='по автору:'") + " " + Объект.Ответственный;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Если ЭтаФорма = Неопределено Тогда
					Отказ = Истина;
				Иначе
					ЭтаФорма.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе //можно все
		
	КонецЕсли;
КонецПроцедуры

// Проверяет справочники на право редактирования, чтения или доступности текущего
// вида справочника, а так же на право, если оно установлено, редактирования или
// чтения объекта текущего вида справочника, по ближайшему родителю, на которое
// установлено данное право  
// Параметры:
//  Объект - текущий СправочникОбъект. Обязательный для заполнения.
//  Отказ - результат работы процедуры, т.е. определяет текущую доступность данного объекта
//  ЭтаФорма - форма текущего объекта. Передается для проверки на редактирование или чтение 
//  объекта при открытии формы.
//  ЗначенияПрав - Соответствие, Кеш прав текущего пользователя.
Процедура уатПроверкаПраваДоступаКСправочникам(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	
	// если уже Отказ, то и проверять не надо
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// если не справочник, то и делать нечего
	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда	
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	МетаданныеОбъекта_Имя = МетаданныеОбъекта.Имя;
	МетаданныеОбъекта_Представление = МетаданныеОбъекта.Представление();
	
	Результат = уатПраво(НСтр("en='Access right';ru='Право доступа'") + " " + МетаданныеОбъекта_Имя, ЗначенияПрав);
	
	Если Результат = Перечисления.уатВидыПравДляСправочников.Редактирование Тогда
		// РЕДАКТИРОВАНИЕ 
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.НетДоступа Тогда
		ТекстНСТР = НСтр("en='No access to view objects';ru='Нет доступа к объектам вида'") + " " + МетаданныеОбъекта_Представление;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ=Истина;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.Чтение Тогда
		// ЧТЕНИЕ
		ТекстНСТР = НСтр("en='No rights for edit view objects';ru='Нет прав на редактирование объектов вида'") + " " + МетаданныеОбъекта_Представление;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		// проверка на редактирование или просмотр объекта
		Если ЭтаФорма = Неопределено Тогда 
			Отказ = Истина; 
		Иначе 
			ЭтаФорма.ТолькоПросмотр = Истина; 
		КонецЕсли;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.РедактированиеПоГруппам Тогда
		Если ЗначенияПрав = Неопределено Тогда
			ЗначенияПрав = уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь());
		КонецЕсли;
				
		СоответствиеГруппДоступа = уатПраво(НСтр("en='Values access right';ru='Значения Право доступа'") + " " + МетаданныеОбъекта_Имя, ЗначенияПрав);
		Если СоответствиеГруппДоступа = Неопределено Тогда 
			// ЧТЕНИЕ
			ТекстНСТР = НСтр("en='No rights for edit view objects';ru='Нет прав на редактирование объектов вида'") + " " + МетаданныеОбъекта_Представление;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			// проверка на редактирование или просмотр объекта
			Если ЭтаФорма = Неопределено Тогда 
				Отказ = Истина; 
			Иначе 
				ЭтаФорма.ТолькоПросмотр  =Истина; 
			КонецЕсли;
		Иначе //если не в корне, то определяем по дереву доступа
			Если (Объект.ЭтоГруппа) и (НЕ Объект.Ссылка.Пустая())  Тогда
				Родитель = Объект.Ссылка;
			Иначе
				Родитель = Объект.Родитель;
			КонецЕсли;
			// если родитель пустой, то уровня нет
			Попытка Уровень = Родитель.Уровень() Исключение Уровень = 0 КонецПопытки;
			// получаем для текущего уровня
			ЗначениеДоступа = СоответствиеГруппДоступа[Родитель];
			// Перебираем всех родителей объекта, пока не находим
			// любое значение доступности
			Для Ном=1 по Уровень Цикл
				Если ЗначениеДоступа <> Неопределено Тогда
					Прервать;
				КонецЕсли;
				Родитель = Родитель.Родитель;
				ЗначениеДоступа = СоответствиеГруппДоступа[Родитель];
			КонецЦикла;
			
			// или нашли значение доступа, или вышли из цикла, ничего не найдя
			Если (ЗначениеДоступа = Неопределено) ИЛИ (НЕ ЗначениеДоступа) Тогда
				Если Родитель.Пустая() Тогда
					стрРодитель = НСтр("en='root';ru='корня'");
				Иначе
					стрРодитель = НСтр("en='group';ru='группы'") + " " + СокрЛП(Родитель);
				КонецЕсли;
				ТекстНСТР = НСтр("en='No rights to edit';ru='Нет прав на редактирование'") + " " + стрРодитель + " " + НСтр("en='objects type';ru='объектов вида'") + " " + МетаданныеОбъекта_Представление;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				// проверка на редактирование или просмотр объекта
				Если ЭтаФорма = Неопределено Тогда 
					Отказ = Истина; 
				Иначе 
					ЭтаФорма.ТолькоПросмотр = Истина; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	// если значения права нет, то можно редактировать
КонецПроцедуры

Функция НеОтображатьПравоНастройку(Выборка) Экспорт
	Рез = (Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ОформлениеСистемы)
		ИЛИ (Выборка.Родитель <> Неопределено И Выборка.Родитель.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ОформлениеСистемы)
		ИЛИ (НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() И 
		(Выборка.Код = "79111" ИЛИ Выборка.Код = "41335" ИЛИ Выборка.Код = "41310" ИЛИ Выборка.Код = "71012"))
		ИЛИ Выборка.Код = "42002"
		ИЛИ Выборка.Код = "42004";
		
	Возврат Рез;	
КонецФункции
	
#КонецОбласти

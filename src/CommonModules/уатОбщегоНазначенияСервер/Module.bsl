////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - ДокументОбъект - Документ, реквизиты которого необходимо заполнить.
//  ДанныеЗаполнения - Структура ИЛИ Неопределено - Одноименный параметр обработчика ОбработкаЗаполнения документа.
//
Процедура Заполнить(ДокументОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьПоСтруктуре(ДокументОбъект, ДанныеЗаполнения, МетаданныеДокумента);
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанныхЗаполнения);
		ОбъектМетаданныхЭтоДокумент = ОбъектМетаданных <> Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных);
		Если ОбъектМетаданныхЭтоДокумент Тогда
			ПроверитьВводНаОснованииЗаказаНаТС(ДокументОбъект, ДанныеЗаполнения);
			ПеренестиДополнительныеРеквизиты(ДокументОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта
//  <МетаданныеОбъекта>  - <Метаданные> -
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт
	
	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (НЕ Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
КонецПроцедуры

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов объекта
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  СсылкаНаОбъект - ссылка на объект ИБ.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитСсылки(ИмяРеквизита, СсылкаНаОбъект) Экспорт

	Возврат НЕ (СсылкаНаОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	
КонецФункции // ЕстьРеквизитСсылки()

Функция ПолучитьПараметрыОткрытияОтчетыВзаиморасчеты(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатДокументыПоПЛИРазнарядкам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "Документ" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоПЛ = (ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатПутевойЛист"));
	
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если ЭтоПЛ Тогда
			Если Строка(ТекЭлем.Параметр) = "ДатаНачала" Тогда
				ТекЭлем.Значение = Ссылка.ДатаВыезда;
			ИначеЕсли Строка(ТекЭлем.Параметр) = "ДатаКонца" ИЛИ Строка(ТекЭлем.Параметр) = "ДатаКонца1" Тогда
				ТекЭлем.Значение = Ссылка.ДатаВозвращения;
			КонецЕсли;
		Иначе
			Если Строка(ТекЭлем.Параметр) = "ДатаНачала" Тогда
				ТекЭлем.Значение = Ссылка.Дата;
			ИначеЕсли Строка(ТекЭлем.Параметр) = "ДатаКонца" ИЛИ Строка(ТекЭлем.Параметр) = "ДатаКонца1" Тогда
				тчРазнарядка = Ссылка.Разнарядка.Выгрузить();
				тчРазнарядка.Сортировать("ДатаВозвращения Убыв");
				Если тчРазнарядка.Количество() = 0 Или Не ЗначениеЗаполнено(тчРазнарядка[0].ДатаВозвращения) Тогда
					ТекЭлем.Значение = КонецМесяца(ТекущаяДата());
				Иначе
					ТекЭлем.Значение = тчРазнарядка[0].ДатаВозвращения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетПриближениеСроковТО(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатПриближениеСроковТО.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "ТС" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если Строка(ТекЭлем.Параметр) = "Период" Тогда
			ТекЭлем.Значение = ТекущаяДата();
		ИначеЕсли Строка(ТекЭлем.Параметр) = "ОтображатьВыбывшиеТС" Тогда
			ТекЭлем.Значение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	сткПараметры.Вставить("КлючВарианта", "Невыполненные ТО");
	
	Возврат сткПараметры;
КонецФункции

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	ИначеЕсли ЗаданныйТип = Тип("NULL") Тогда
		Возврат Неопределено;
		
	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции // ПустоеЗначениеТипа();

// Преобразует входную таблицу значений в массив строк для передачи на контекст Клиента
// Возвращаемое значение:
//	МассивЗначений, тип значения - Структура (ключ - имя колонки таблицы, значение - значение ячейки таблицы)
//
Функция ПреобразоватьТаблицувМассивСтрок(тбл) Экспорт
	мсвРез = Новый Массив;
	
	Для Каждого ТекСтрока Из тбл Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из тбл.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

// Преобразует входной массив строк в таблицу значений
// Параметры:
//	МассивЗначений, тип значения - Структура (ключ - имя колонки таблицы, значение - значение ячейки таблицы)
// Возвращаемое значение:
//	ТаблицаЗначений - полученная таблица значений
//
Функция ПреобразоватьМассивСтрокВТаблицу(мсвСтрок) Экспорт
	тблРез = Новый ТаблицаЗначений;
	
	Если мсвСтрок.Количество() = 0 Тогда
		Возврат тблРез;
	КонецЕсли;
	Для Каждого ТекЭлем Из мсвСтрок[0] Цикл
		тблРез.Колонки.Добавить(ТекЭлем.Ключ);
	КонецЦикла;
		
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		НоваяСтрока = тблРез.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	Возврат тблРез;
КонецФункции

// Для проводящихся документов проверяет право на печать, если документ не проведен
//
Функция РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Экспорт
	Рез = Истина;
	
	Если уатПраваИНастройки.уатПраво("ПечатьНепроведенных") = ЛОЖЬ Тогда
		флПроведен = Ложь;
		Для Каждого ТекДок Из МассивОбъектов Цикл
			флПроведен = флПроведен ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДок, "Проведен");
		КонецЦикла;
		Если НЕ флПроведен Тогда
			ТекстНСТР = НСтр("en='There is not enough rights to print an unposted document';ru='Недостаточно полномочий для печати непроведенного документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Рез = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Возвращает структуру весо-объемных характеристик.
//
// Возвращаемое значение:
//  ВесоОбъемныеХарактеристики - Структура - Весо-объемных характеристик.
//       
//       * ЕдиницаИзмеренияВеса         - ПеречислениеСсылка.уатЕдиницыИзмеренияВеса.
//       * ЕдиницаИзмеренияОбъема       - ПеречислениеСсылка.уатЕдиницыИзмеренияОбъема.
//       * КоэффициентГрузоподъемности  - Число.
//       * КоэффициентОбъемаКузова      - Число.
//
Функция ПолучитьСтруктуруВесоОбъемныхХарактеристик() Экспорт
	
	ВесоОбъемныеХарактеристики = Новый Структура();
	ВесоОбъемныеХарактеристики.Вставить("ЕдиницаИзмеренияВеса",   Константы.уатЕдиницаИзмеренияВеса.Получить());
	ВесоОбъемныеХарактеристики.Вставить("ЕдиницаИзмеренияОбъема", Константы.уатЕдиницаИзмеренияОбъема.Получить());
	ВесоОбъемныеХарактеристики.Вставить("КоэффициентГрузоподъемности",
	?(ВесоОбъемныеХарактеристики.ЕдиницаИзмеренияВеса = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм, 1000, 1));
	ВесоОбъемныеХарактеристики.Вставить("КоэффициентОбъемаКузова", 
	?(ВесоОбъемныеХарактеристики.ЕдиницаИзмеренияОбъема = Перечисления.уатЕдиницыИзмеренияОбъема.Литр, 1000, 1));
	
	Возврат ВесоОбъемныеХарактеристики;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Возвращает курсы валют на дату.
//
// Параметры:
//  Валюта       - СправочникСсылка.Валюты - Валюта (элемент справочника "Валюты")
//  ДатаКурса    - Дата - дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс        - Число - курс валюты,
//   Кратность   - Число - кратность валюты.
//
Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
	
	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
	
	СтруктураКон.Курс = ?(
		СтруктураКон.Курс = 0,
		1,
		СтруктураКон.Курс
	);
	СтруктураКон.Кратность = ?(
		СтруктураКон.Кратность = 0,
		1,
		СтруктураКон.Кратность
	);
	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс      = 0, 1, СтруктураНач.Курс));
	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
	
	Возврат СтруктураКон;
	
КонецФункции // ПолучитьКурсыВалют()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма        - Число - сумма НДС
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число        - пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Ставка = СтавкаНДС.Ставка;
	
	Если СуммаВключаетНДС Тогда
		
		Сумма = (Сумма * (100 + Ставка)) / 100;
		
	Иначе
		
		Сумма = (Сумма * 100) / (100 + Ставка);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность /
	|		(КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / 
	|		ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 	СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 	СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  	СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("Коэффициент",	 	СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена = Выборка.Цена;
		
		// Учитываем: сумма включает НДС.
		Если (СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
		 ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если НайденныйРеквизит <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, 
		Поле = Неопределено, Отказ = Ложь) Экспорт
		
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;

	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабЧасти, СуммаВключаетНДС, ПересчитыватьПлановыеЦеныИСуммы = Ложь, ПересчитыватьВалютныеЦеныИСуммы = Ложь)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
		Если ПересчитыватьПлановыеЦеныИСуммы Тогда
			СтрокаТабЧасти.СуммаПлан = СтрокаТабЧасти.КоличествоПлан * СтрокаТабЧасти.ЦенаПлан;
		КонецЕсли;
		Если ПересчитыватьВалютныеЦеныИСуммы Тогда
			СтрокаТабЧасти.СуммаВалютная = СтрокаТабЧасти.Количество * СтрокаТабЧасти.ЦенаВалютная;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;	
	Если СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		
		СтрокаТабЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100);
			
		Если ПересчитыватьПлановыеЦеныИСуммы Тогда
			СтрокаТабЧасти.СуммаНДСПлан = ?(СуммаВключаетНДС, 
				СтрокаТабЧасти.СуммаПлан - (СтрокаТабЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.СуммаПлан * СтавкаНДС / 100);
		КонецЕсли;
			
		Если ПересчитыватьВалютныеЦеныИСуммы Тогда
			СтрокаТабЧасти.СуммаНДСВалютная = ?(СуммаВключаетНДС, 
				СтрокаТабЧасти.СуммаВалютная - (СтрокаТабЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.СуммаВалютная * СтавкаНДС / 100);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ПредыдущаяВалюта, ИмяТабличнойЧасти, ДопПараметры = Неопределено) Экспорт
	
	Попытка
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Ложь;
	КонецПопытки;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		МноговалютныйУчет = Ложь;
		ПересчитыватьПлановыеЦеныИСуммы = Ложь;
		ПересчитыватьВалютныеЦеныИСуммы = Ложь;
	Иначе
		МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
		ПересчитыватьПлановыеЦеныИСуммы = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ")
			И Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ЦенаПлан") <> Неопределено;
		ПересчитыватьВалютныеЦеныИСуммы = МноговалютныйУчет
			И Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ЦенаВалютная") <> Неопределено;
	КонецЕсли;
		
	Если Объект.Ссылка.Метаданные().Реквизиты.Найти("ДатаКурса") <> Неопределено И ДопПараметры <> Неопределено Тогда
		СтруктураКурсы = Новый Структура;
		СтруктураКурсы.Вставить("КурсНач",      ДопПараметры.ПредКурс);
		СтруктураКурсы.Вставить("КратностьНач", ДопПараметры.ПредКратность);
		СтруктураКурсы.Вставить("Курс",         ДопПараметры.Курс);
		СтруктураКурсы.Вставить("Кратность",    ДопПараметры.Кратность);
	Иначе
		СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, 
			Объект.ВалютаДокумента, Объект.Дата);
	КонецЕсли;
		   
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		// Если валюта документа стала равной валюте строки, тогда сбрасываем значения на валютные (цена = цена вал. и т.п.)
		флСброситьСуммы = МноговалютныйУчет И СтрокаТабличнойЧасти.Свойство("Валюта") И Объект.ВалютаДокумента = СтрокаТабличнойЧасти.Валюта;
					
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			Если флСброситьСуммы И СтрокаТабличнойЧасти.Свойство("ЦенаВалютная") И СтрокаТабличнойЧасти.ЦенаВалютная <> 0 Тогда
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.ЦенаВалютная;
			Иначе
				СтрокаТабличнойЧасти.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
					ПредыдущаяВалюта, Объект.ВалютаДокумента,
					СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			КонецЕсли;
			
			Если ПересчитыватьПлановыеЦеныИСуммы Тогда
				СтрокаТабличнойЧасти.ЦенаПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПлан, 
					ПредыдущаяВалюта, Объект.ВалютаДокумента,
					СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			КонецЕсли;
																					
			РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС, ПересчитыватьПлановыеЦеныИСуммы, ПересчитыватьВалютныеЦеныИСуммы);
			
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			Если флСброситьСуммы И СтрокаТабличнойЧасти.Свойство("СуммаВалютная") И СтрокаТабличнойЧасти.СуммаВалютная <> 0 Тогда
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаВалютная;
			Иначе
				СтрокаТабличнойЧасти.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
					ПредыдущаяВалюта, Объект.ВалютаДокумента,
					СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			КонецЕсли;
				
			Если ПересчитыватьПлановыеЦеныИСуммы Тогда
				СтрокаТабличнойЧасти.СуммаПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаПлан, 
					ПредыдущаяВалюта, Объект.ВалютаДокумента,
					СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
			КонецЕсли;
								
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * 
						(1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			Если СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
				СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
				
				СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
					СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / 
					((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				
				Если ПересчитыватьПлановыеЦеныИСуммы Тогда
					СтрокаТабличнойЧасти.СуммаНДСПлан = ?(СуммаВключаетНДС,
						СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / 
						((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ТаблЧасть, СуммаВключаетНДС = Ложь) Экспорт
	Попытка
		ЦенаПлан = ТаблЧасть[0].ЦенаПлан;
		ПересчитыватьПлановыеЦеныИСуммы = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	Исключение
		ПересчитыватьПлановыеЦеныИСуммы = Ложь;
	КонецПопытки;		
	Попытка
		ЦенаВалютная = ТаблЧасть[0].ЦенаВалютная;
		ПересчитыватьВалютныеЦеныИСуммы = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	Исключение
		ПересчитыватьВалютныеЦеныИСуммы = Ложь;
	КонецПопытки;
		
	Для каждого СтрокаТабличнойЧасти Из ТаблЧасть Цикл
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			Если СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
				Если ПересчитыватьПлановыеЦеныИСуммы Тогда
					СтрокаТабличнойЧасти.ЦенаПлан = (СтрокаТабличнойЧасти.ЦенаПлан * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
				Если ПересчитыватьВалютныеЦеныИСуммы Тогда
					СтрокаТабличнойЧасти.ЦенаВалютная = (СтрокаТабличнойЧасти.ЦенаВалютная * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
				Если ПересчитыватьПлановыеЦеныИСуммы Тогда
					СтрокаТабличнойЧасти.ЦенаПлан = (СтрокаТабличнойЧасти.ЦенаПлан * 100) / (100 + СтавкаНДС);
				КонецЕсли;
				Если ПересчитыватьВалютныеЦеныИСуммы Тогда
					СтрокаТабличнойЧасти.ЦенаВалютная = (СтрокаТабличнойЧасти.ЦенаВалютная * 100) / (100 + СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС, ПересчитыватьПлановыеЦеныИСуммы, ПересчитыватьВалютныеЦеныИСуммы);
	КонецЦикла;
КонецПроцедуры // ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Функция выполняет расчет кросс-курса для двух валют.
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Функция ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов = Неопределено) Экспорт
	// кеширование курсов используется для ускорения расчета при выполнении в цикле
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	ВалютаНачКурсКратность = КэшКурсов.Получить(ВалютаНач);
	Если ВалютаНачКурсКратность = Неопределено Тогда
		ВалютаНачКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаНач, ДатаКурса);
		КэшКурсов.Вставить(ВалютаНач, ВалютаНачКурсКратность);
	КонецЕсли;
	
	ВалютаКонКурсКратность = КэшКурсов.Получить(ВалютаКон);
	Если ВалютаКонКурсКратность = Неопределено Тогда
		ВалютаКонКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаКон, ДатаКурса);
		КэшКурсов.Вставить(ВалютаКон, ВалютаКонКурсКратность);
	КонецЕсли;
	
	Если ВалютаКонКурсКратность.Курс = 0 ИЛИ ВалютаНачКурсКратность.Кратность = 0 Тогда
		КроссКурс = 0;
	Иначе
		КроссКурс = ВалютаНачКурсКратность.Курс / ВалютаКонКурсКратность.Курс * ВалютаКонКурсКратность.Кратность / ВалютаНачКурсКратность.Кратность;
	КонецЕсли;
		
	Возврат КроссКурс;
КонецФункции


///////////////////////////////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ И ДОГОВОРЫ

// Функция формирует структуру для заполнения документа при изменении контрагента
//
// Параметры
//  ДанныеДляЗаполнения                      – данные для заполнения документа 
//  СтруктураПараметровДляПолученияДоговора  – структура параметров для получения договора контрагента
//
// Возвращаемое значение:
//   Структура                               – значения для заполнения документа
//
Функция ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора) Экспорт
	ЗначенияДляЗаполнения = Новый Структура();
	ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
		ДанныеДляЗаполнения.Организация, ДанныеДляЗаполнения.Контрагент, СтруктураПараметровДляПолученияДоговора);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Иначе
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Возврат ЗначенияДляЗаполнения;
КонецФункции // ПриИзмененииЗначенияКонтрагента()

Функция ДанныеВыбораКонтрагента(Параметры, ОкончаниеВводаТекста = Ложь) Экспорт
	
	ДанныеВыбора = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
	Если ДанныеВыбора.Количество() = 0 Тогда
		СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
		ДлинаСтроки  = СтрДлина(СтрокаПоиска);
		ЭтоСтрокаИНН = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоиска);
		Если ЭтоСтрокаИНН Тогда
			МассивПодстрок   = Новый Массив;
			МассивПодстрок.Добавить(НСтр("en='Create: TIN ';ru='Создать: ИНН '"));
			ИНН = Лев(СтрокаПоиска, 12);
			ЭтоКорректныйИНН = (ДлинаСтроки = 10
				И РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Истина, ""))
				ИЛИ (ДлинаСтроки = 12
				И РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ""));
			Если ЭтоКорректныйИНН Тогда
				ЖирныйШрифт  = Новый Шрифт(, , Истина);
				МассивПодстрок.Добавить(
					Новый ФорматированнаяСтрока(ИНН, ЖирныйШрифт, ЦветаСтиля.РезультатУспехЦвет));
			Иначе
				МассивПодстрок.Добавить(ИНН);
			КонецЕсли;
			СколькоВопросов = ?(ЭтоКорректныйИНН ИЛИ ДлинаСтроки >= 12, 0, 
				?(ДлинаСтроки < 10, 10 - ДлинаСтроки, 12 - ДлинаСтроки));
			ЗнакиВопроса = Лев("????????????", СколькоВопросов);
			ЛишниеЦифры  = Сред(СтрокаПоиска, 13);
			МассивПодстрок.Добавить(
				Новый ФорматированнаяСтрока(ЗнакиВопроса + ЛишниеЦифры, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента));
			ПредставлениеНового = Новый ФорматированнаяСтрока(МассивПодстрок);
		Иначе
			ПредставлениеНового = СтрШаблон(НСтр("en='Create: %1';ru='Создать: %1'"), СтрокаПоиска);
		КонецЕсли;
		ДанныеВыбора.Добавить(СтрокаПоиска, ПредставлениеНового);
		Если ОкончаниеВводаТекста Тогда
			// Добавляем вторую строку, чтобы в этом режиме не срабатывал автовыбор единственной строки.
			ДанныеВыбора.Добавить(""); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеВыбора;

КонецФункции 


///////////////////////////////////////////////////////////////////////////////////////////////////
// СОТРУДНИКИ

// Выполняет обновление реквизитов справочника Сотрудники, связанных с текущим местом работы:
//  Организация, Подразделение, Должность, ГрафикРаботы, а также реквизит ДатаПриема,
//  по данным регистра уатКадроваяИстория. Измененые данные справочника записываются.
//
Процедура ОбновитьТекущееМестоРаботыВСправочникеСотрудники(Знач вхСотрудники, СообщениеОшибка = "") Экспорт

	Если ТипЗнч(вхСотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		мсвСотрудники = Новый Массив;
		мсвСотрудники.Добавить(вхСотрудники);
	Иначе
		мсвСотрудники = вхСотрудники;
	КонецЕсли;
	
	ЗапросДатыПриема = Новый Запрос(
	"ВЫБРАТЬ
	|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(уатКадроваяИсторияСотрудников.Период) КАК Период
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
	|ГДЕ
	|	уатКадроваяИсторияСотрудников.Сотрудник В(&мсвСотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатКадроваяИсторияСотрудников.Сотрудник");
	ЗапросДатыПриема.УстановитьПараметр("мсвСотрудники", мсвСотрудники);
	тблДатыПриема = ЗапросДатыПриема.Выполнить().Выгрузить();
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(, Сотрудник В (&мсвСотрудники)) КАК уатКадроваяИсторияСотрудниковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период УБЫВ");
	Запрос.УстановитьПараметр("мсвСотрудники", мсвСотрудники);
	тблКадроваяИсторияСрез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		ДатаПриема = '00010101';
		СтрокаДатаПриема = тблДатыПриема.Найти(ТекСотрудник, "Сотрудник");
		Если СтрокаДатаПриема <> Неопределено Тогда
			ДатаПриема = СтрокаДатаПриема.Период;
		КонецЕсли;
		
		СтрокаКадроваяИстория = тблКадроваяИсторияСрез.Найти(ТекСотрудник, "Сотрудник");
		
		Если СтрокаКадроваяИстория = Неопределено Тогда
			СотрудникОбъект = ТекСотрудник.ПолучитьОбъект();
			СотрудникОбъект.Организация   = Неопределено;
			СотрудникОбъект.Подразделение = Неопределено;
			СотрудникОбъект.Должность     = Неопределено;
			СотрудникОбъект.ГрафикРаботы  = Неопределено;
			
			Попытка
				СотрудникОбъект.Записать();
			Исключение
			КонецПопытки;
		Иначе
			Если СтрокаКадроваяИстория.Организация      <> ТекСотрудник.Организация
				ИЛИ СтрокаКадроваяИстория.Подразделение <> ТекСотрудник.Подразделение
				ИЛИ СтрокаКадроваяИстория.Должность     <> ТекСотрудник.Должность
				ИЛИ СтрокаКадроваяИстория.ГрафикРаботы  <> ТекСотрудник.ГрафикРаботы
				ИЛИ ДатаПриема                          <> ТекСотрудник.ДатаПриема Тогда
				
				СотрудникОбъект = ТекСотрудник.ПолучитьОбъект();
				СотрудникОбъект.Организация   = СтрокаКадроваяИстория.Организация;
				СотрудникОбъект.Подразделение = СтрокаКадроваяИстория.Подразделение;
				СотрудникОбъект.Должность     = СтрокаКадроваяИстория.Должность;
				СотрудникОбъект.ГрафикРаботы  = СтрокаКадроваяИстория.ГрафикРаботы;
				СотрудникОбъект.ДатаПриема    = ДатаПриема;
				
				Попытка
					СотрудникОбъект.Записать();
				Исключение
					СообщениеОшибка = ИнформацияОбОшибке().Описание;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Функция определяет наличие в струкуре метаданных справочника "Единицы измерения"
//
// Возвращаемое значение:
//   Булево   – Если Истина - справочник "Единицы измерения" есть, иначе - Ложь.
//
Функция СуществуетСправочникЕдиницыИзмерения() Экспорт
	Возврат НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено;
КонецФункции // СуществуетСправочникЕдиницыИзмерения()

// проверка того что БД "файловая"
//
// Параметры:
//  СтрокаСоединенияСБД - строка адреса расположения БД
//
// Возвращаемое значение:
//  Булево - признак файловой БД
Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// В зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

// Перемещает кнопку контакты в группе команд Взаимодействие
Процедура ПереместитьКнопкуКонтакты(Элементы) Экспорт
	
	ГруппаВзаимодействия = Элементы.Найти("ФормаВзаимодействия");
	Если ГруппаВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаКонтакты = Элементы.Найти("ФормаОбщаяКомандауатФормаКонтактов");
	
	КнопкаСообщенияМП = Элементы.Найти("ФормаОбработкауатСообщенияМобильногоПриложенияСообщенияВодителяМаршрутногоЛиста");
	
	Если КнопкаКонтакты = Неопределено И КнопкаСообщенияМП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКнопокКонтакты = Элементы.Найти("ГруппаКнопокКонтакты");
	Если ГруппаКнопокКонтакты = Неопределено Тогда
		ГруппаКнопокКонтакты = Элементы.Добавить("ГруппаКнопокКонтакты", Тип("ГруппаФормы"), ГруппаВзаимодействия);
		ГруппаКнопокКонтакты.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
	Элементы.Переместить(ГруппаКнопокКонтакты, ГруппаВзаимодействия, ГруппаВзаимодействия.ПодчиненныеЭлементы[0]);
	
	Если Не КнопкаКонтакты = Неопределено Тогда 
		Элементы.Переместить(КнопкаКонтакты, ГруппаКнопокКонтакты);
	КонецЕсли;
	
	Если Не КнопкаСообщенияМП = Неопределено Тогда 
		Элементы.Переместить(КнопкаСообщенияМП, ГруппаКнопокКонтакты);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ НАСТРОЙКИ ПОЛЕЙ ВВОДА, ИМЕЮЩИХ СОСТАВНОЙ ТИП
// для корректной работы в спарках с типовыми конфигурациями

// Процедура устанавливает отбор по владельцу для полей "Единица измерения" для необъединенного решения
Процедура НастроитьПолеЕдиницыИзмерения(ФормаОбъекта, ИмяТабЧасти, ИмяКолонкиНоменклатура = "Номенклатура") Экспорт 
	КолонкаЕИ = ФормаОбъекта.Элементы[СокрЛП(ИмяТабЧасти) + "ЕдиницаИзмерения"];
		
	Отбор = Новый Массив;                    
	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + СокрЛП(ИмяТабЧасти) + ".ТекущиеДанные." + ИмяКолонкиНоменклатура, 
	                                   РежимИзмененияСвязанногоЗначения.Очищать);
	Отбор.Добавить(Связь);
	
	КолонкаЕИ.СвязиПараметровВыбора = Новый ФиксированныйМассив(Отбор);
	КолонкаЕИ.БыстрыйВыбор = Истина;
	КолонкаЕИ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	
КонецПроцедуры

// Процедура ограничивает тип ввода контактных лиц
//
Процедура НастроитьПолеКонтактноеЛицо(ЭлементФормы) Экспорт
	ЭлементФормы.ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.КонтактныеЛица");
КонецПроцедуры

// Процедура ограничивает тип ввода подразделений и добавляет
// связь по владельцу-организации, если она указана
//
Процедура НастроитьПолеПодразделение(ЭлементПодразделение, ПутьКДаннымОрганизация = "", ОписаниеТиповПодразделения = Неопределено) Экспорт
	// отбор по организации
	Если ЗначениеЗаполнено(ПутьКДаннымОрганизация) Тогда
		Отбор = Новый Массив;
		Отбор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьКДаннымОрганизация, РежимИзмененияСвязанногоЗначения.Очищать));
		ЭлементПодразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(Отбор);
	КонецЕсли;
	
	// ограничение ввода по типу
	Если ОписаниеТиповПодразделения = Неопределено Тогда
		ЭлементПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	Иначе
		мсвТипов = ОписаниеТиповПодразделения.Типы();
		ЭлементПодразделение.ОграничениеТипа = Новый ОписаниеТипов(мсвТипов);
	КонецЕсли;
КонецПроцедуры

// Процедура ограничивает тип ввода договора контрагента
// и добавляет отбор по организации и контрагенту
//
Процедура НастроитьПолеДоговорКонтрагента(ЭлементДоговор, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент, ВидДоговора = Неопределено) Экспорт
	// Фильтруем программно по виду договора - сделано для корректной отработки фильтра в объед. конф. с БП и УТ
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов." + ВидДоговора)));
		ЭлементДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	КонецЕсли;
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", ПутьКДаннымОрганизация, РежимИзмененияСвязанногоЗначения.Очищать));
	Отбор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец",    ПутьКДаннымКонтрагент,  РежимИзмененияСвязанногоЗначения.Очищать));
	ЭлементДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Отбор);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮридическоеФизическоеЛицо    - организация или физическое лицо, о котором собираются
//                 сведения
//  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
//                 отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮридическоеФизическоеЛицо, ДатаПериода = Неопределено, ДляФизЛицаТолькоИнициалы = Истина, 
		БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, НаименованиеДляПечатныхФорм, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, 
								|Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮридическоеФизическоеЛицо);
		Сведения.Вставить("полноеНаименование", ЮридическоеФизическоеЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", ЮридическоеФизическоеЛицо) Тогда
			ТекБанковскийСчет = ЮридическоеФизическоеЛицо.ОсновнойБанковскийСчет;
		Иначе
			ТекБанковскийСчет = Неопределено;
		КонецЕсли;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;

	// Выберем основные сведения о контрагенте и банковском счете
	Если ТекБанковскийСчет = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекБанковскийСчет.БанкДляРасчетов) Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;

	Если ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Представление      КАК Наименование,
		|	Организации.НаименованиеПолное КАК ПолноеНаименование,
		|	Организации.ИНН                КАК ИНН,
		|	Организации.КПП                КАК КПП,
		|	Организации.КодПоОКПО          КАК КодПоОКПО,";
		Если ИмяСправочника = "Организации" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
			|			ТОГДА Организации.НаименованиеСокращенное
			|		ИНАЧЕ Организации.НаименованиеПолное
			|	КОНЕЦ  КАК НаименованиеДляПечатныхФорм,
			|	Организации.ОГРН           КАК ОГРН,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮридическоеФизическоеЛицо";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Представление                      КАК Наименование,
		|	Организации.НаименованиеПолное                 КАК ПолноеНаименование,
		|	Организации.ИНН                                КАК ИНН,
		|	Организации.КПП                                КАК КПП,
		|	Организации.КодПоОКПО                          КАК КодПоОКПО,";
		Если ИмяСправочника = "Организации" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
			|			ТОГДА Организации.НаименованиеСокращенное
			|		ИНАЧЕ Организации.НаименованиеПолное
			|	КОНЕЦ  КАК НаименованиеДляПечатныхФорм,
			|	Организации.ОГРН                           КАК ОГРН,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮридическоеФизическоеЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	КонецЕсли;

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если ЮридическоеФизическоеЛицо.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
		Сведения.Вставить("КПП",       Данные.КПП);
	Иначе
		Сведения.Вставить("КодПоОКПО", "");
		Сведения.Вставить("КПП",       "");
	КонецЕсли;

	Сведения.Вставить("ПолноеНаименование",          Данные.ПолноеНаименование);
	Сведения.Вставить("НаименованиеДляПечатныхФорм", Данные.ПолноеНаименование);

	
	Если Данные <> Неопределено Тогда
		Если ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Организации") Тогда
			
			Сведения.Вставить("НаименованиеДляПечатныхФорм", Данные.НаименованиеДляПечатныхФорм);
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			
		ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			
		ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			
			ПчАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			Сведения.Вставить("ПочтовыйАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ПчАдрес, ДатаПериода));
			
		Иначе
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			
		КонецЕсли;
		
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, Телефон, ДатаПериода));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ЮрАдрес, ДатаПериода));
		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ФактАдрес, ДатаПериода));
		Если ИмяСправочника = "Организации" Тогда
			Сведения.Вставить("ОГРН",             СокрЛП(Данные.ОГРН));
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сведения.НаименованиеДляПечатныхФорм) Тогда
			Сведения.НаименованиеДляПечатныхФорм = Сведения.Представление;
		КонецЕсли;

	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
// Если задан период возвращает актуальную информацию на заданную дату.
//
// Параметры:
//  Объект       - СправочникСсылка, объект контактной информации
//  ТипАдреса    - тип контактной информации.
//  Период       - Дата на которую необходимо получить контктную информацию
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации, Период = Неопределено) Экспорт

	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Или 
			ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты")Тогда 
		
		КонтактнаяИнформация = уатОбщегоНазначения.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектКонтактнойИнформации),
		Неопределено, // типы определяются по видам - следующему параметру
		ВидИнформации,
		Период);
		
		Если КонтактнаяИнформация.Количество() = 0 Тогда
			Результат = "";
		Иначе
			Результат = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
		Запрос.УстановитьПараметр("Вид"   , ВидИнформации);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &Вид
		|	И КонтактнаяИнформация.Ссылка = &Объект";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = "";
		Иначе
			Результат = РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
	Иначе
		Результат = "";	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Процедура устанавливает свойства Защита и ТолькоПросмотр для табл. документов
// согласно настройкам пользователя УАТ
//
Процедура УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм) Экспорт
	
	// не используется в новой редакции
	
	Заглушка = Истина;
	
КонецПроцедуры

// Функция возвращает наименование услуги для печати
//		Параметры: 
// Номенклатура - СправочникСсылка.Номенклатура
// Содержание - Строка.
//	 	Возвращаемое значение:
// Строка - наименование услуги.
Функция ПолучитьНаименованиеУслугиДляПечати(Номенклатура,Содержание) Экспорт
	Если ЗначениеЗаполнено(Содержание) Тогда
		Возврат Содержание;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		Возврат Номенклатура.НаименованиеПолное;
	Иначе
		Возврат Номенклатура.Наименование;
	КонецЕсли;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВАМИ

// Процедура выполняет проверку прав пользователя перед записью элемента 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура ПроверкаПравПередЗаписьюВСправочниках(Объект, Отказ) Экспорт
	// Проверка доступа документа по текущему пользователю
	Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам") Тогда	
		уатПраваИНастройки.уатПроверкаПраваДоступаКСправочникам(Объект, Отказ);
	КонецЕсли;		
	
	Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
		Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку") Тогда
			ТекстНСТР = НСтр("en='Not enough rights to modify deletion marks!';ru='Недостаточно прав на изменение пометки удаления!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет проверку прав пользователя перед записью документа 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура ПроверкаПравПередЗаписьюВДокументах(Объект, Отказ) Экспорт
	// можно ли изменять уже проведенные документы
	Если Объект.Проведен Тогда
		Если НЕ уатПраваИНастройки.уатПраво("РедактированиеПроведенныхДокументов") Тогда
			ТекстНСТР = НСтр("en='Not enough rights to modify posted documents!';ru='Недостаточно прав на изменение проведенных документов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка доступа документа по текущему пользователю
	Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам") Тогда
		уатПраваИНастройки.уатПроверкаПраваДоступаКДокументам(Объект, Отказ);
	КонецЕсли;		
	
	Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
		Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку") Тогда
			ТекстНСТР = НСтр("en='Not enough rights to modify deletion marks!';ru='Недостаточно прав на изменение пометки удаления!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

// Процедура проверяет, что местонахождение ТС на указанную дату равно
// местонахождению по реквизитам шапки Организация, Подразделение, Колонна
//
// Параметры:
//  Объект		 - ДокументОбъект - контекст документа из модуля объекта
//  Отказ		 - Булево - флаг отмемы записи/проведения документа
//  ИмяТЧ		 - Строка - имя ТЧ, в которой проверяется местонахождение ТС
//  Заголовок	 - Строка - заголовок сообщения об ошибке
//
Процедура ПроверкаСоответствияМестонахожденияТС(Объект, Отказ, ИмяТЧ, Заголовок = "") Экспорт
	
	флПроверятьСоответствиеТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.КонтрольСоответствияМестонахожденияТСВДокументах);
		
	Если НЕ флПроверятьСоответствиеТС Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		Подразделение = Объект.ПодразделениеОрганизации;
	ИначеЕсли Объект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		Подразделение = Объект.Подразделение;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	Если Объект.Метаданные().Реквизиты.Найти("Колонна") <> Неопределено Тогда
		Колонна = Объект.Колонна;
	Иначе
		Колонна = Неопределено;
	КонецЕсли;
	
	Если Объект.Метаданные().Имя = "уатВводОстатков" Тогда
		ДатаСрезаПутьКДанным = "ТекСтрока.ДатаОтражения";
	ИначеЕсли Объект.Метаданные().Имя = "уатВыбытиеТСиОборудования" Тогда
		ДатаСрезаПутьКДанным = "ТекСтрока.ДатаВыбытия";
	ИначеЕсли Объект.Метаданные().Имя = "уатЗаправкаГСМ" Тогда
		ДатаСрезаПутьКДанным = "ТекСтрока.Дата";
	Иначе
		ДатаСрезаПутьКДанным = "Объект.Дата";
	КонецЕсли;
	
	флЗаправкаБезРазбиения = (Объект.Метаданные() = Метаданные.Документы.уатЗаправкаГСМ И Объект[ИмяТЧ].Количество() = 1);
		
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		ДатаСреза = Вычислить(ДатаСрезаПутьКДанным);
		Если ДатаСреза = '00010101' Тогда
			ДатаСреза = Объект.Дата;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ТС) ИЛИ ДатаСреза = '00010101' Тогда
			Продолжить;
		КонецЕсли;
			
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ДатаСреза-1);
		Если МестонахождениеТС.Организация <> Объект.Организация
			ИЛИ ЗначениеЗаполнено(Подразделение) И МестонахождениеТС.Подразделение <> Подразделение
			ИЛИ ЗначениеЗаполнено(Колонна) И МестонахождениеТС.Колонна <> Колонна Тогда
			
			Если флЗаправкаБезРазбиения Тогда
				ТекстСообщ = СтрШаблон("Местонахождение ТС ""%1"" на %2 не соответствует организации, подразделению или колонне документа.",
					ТекСтрока.ТС, Формат(ДатаСреза, "ДФ='dd.MM.yyyy HH:mm'"));
			Иначе
				ТекстСообщ = СтрШаблон("В строке №%1 местонахождение ТС ""%2"" на %3 не соответствует организации, подразделению или колонне документа.",
					ТекСтрока.НомерСтроки, ТекСтрока.ТС, Формат(ДатаСреза, "ДФ='dd.MM.yyyy HH:mm'"));
			КонецЕсли;
				
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщ, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Возвращает статью расходов номенклатуры
//
Функция СтатьяРасходовНоменклатуры(Номенклатура, флПоставлятьСтатьюПоУмолчанию = Истина) Экспорт
	Рез = Справочники.уатСтатьиРасходов.ПустаяСсылка();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатСтатьиДоходовРасходовНоменклатуры.СтатьяРасходов
	|ИЗ
	|	РегистрСведений.уатСтатьиДоходовРасходовНоменклатуры КАК уатСтатьиДоходовРасходовНоменклатуры
	|ГДЕ
	|	уатСтатьиДоходовРасходовНоменклатуры.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = Выборка.СтатьяРасходов;
	КонецЕсли;
	
	Если флПоставлятьСтатьюПоУмолчанию И НЕ ЗначениеЗаполнено(Рез) Тогда
		Рез = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Возвращает статью доходов номенклатуры
//
Функция СтатьяДоходовНоменклатуры(Номенклатура, флПоставлятьСтатьюПоУмолчанию = Истина) Экспорт
	Рез = Справочники.уатСтатьиДоходов.ПустаяСсылка();
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("СтатьяДоходов", Номенклатура) Тогда
		Рез = Номенклатура.СтатьяДоходов;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатСтатьиРасходовНоменклатуры.СтатьяДоходов
		|ИЗ
		|	РегистрСведений.уатСтатьиДоходовРасходовНоменклатуры КАК уатСтатьиРасходовНоменклатуры
		|ГДЕ
		|	уатСтатьиРасходовНоменклатуры.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Рез = Выборка.СтатьяДоходов;
		КонецЕсли;
	КонецЕсли;
	
	Если флПоставлятьСтатьюПоУмолчанию И НЕ ЗначениеЗаполнено(Рез) Тогда
		Рез = ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ОсновнаяСтатьяДоходов");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция - Установить состав начальной страницы
// 
// Возвращаемое значение:
//   - 
//
Функция УстановитьСоставНачальнойСтраницы() Экспорт
	
	СоставФормИзменен = Ложь;
	
	Если ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		Возврат СоставФормИзменен;
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И уатЖурналыТранспортныхДокументов.ТекущийПользовательВодитель() Тогда
		
		НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Документ.уатПутевойЛист.Форма.ФормаСпискаБезПанелиОтборов");
		НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
		Возврат Истина;
	КонецЕсли;
	
	НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиНачальнойСтраницы", "");
	
	Если НастройкиНачальнойСтраницы = Неопределено Тогда
		НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
		
		уатМодификацияКонфигурацииПереопределяемый.УстановитьРабочийСтолПользователя(СоставФорм);
		
		НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
		СоставФормИзменен = Истина;
	КонецЕсли;
	
	Если (НЕ СоставФормИзменен) И ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		// Проверяем, нужно ли удалить некоторые формы с рабочего стола для совместимости с мобильным клиентом
		УдаляемыеФормы = Новый Массив();
		УдаляемыеФормы.Добавить("Обработка.уатПанельФункций.Форма.Форма");
		УдаляемыеФормы.Добавить("Обработка.уатПанельФункций.Форма");
		
		НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
		Если НастройкиНачальнойСтраницы = Неопределено Тогда
			Возврат СоставФормИзменен;
		КонецЕсли;
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
		
		Для Каждого Форма Из УдаляемыеФормы Цикл
			Индекс = СоставФорм.ЛеваяКолонка.Найти(Форма);
			Если Индекс <> Неопределено Тогда
				СоставФорм.ЛеваяКолонка.Удалить(Индекс);
				СоставФормИзменен = Истина;
			КонецЕсли;
			
			Индекс = СоставФорм.ПраваяКолонка.Найти(Форма);
			Если Индекс <> Неопределено Тогда
				СоставФорм.ПраваяКолонка.Удалить(Индекс);
				СоставФормИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
		НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
	КонецЕсли;	
	
	Возврат СоставФормИзменен;
	
КонецФункции

// Функция предназначена для получения списка грузов по остаткам для формы подбора заказов.
//
Функция ПолучитьСписокГрузовПоОстаткамДляПодбора(ЗаказГрузоотправителя, МаршрутныйЛист, ТабПодобранныхГрузов, ПолучениеОстатков) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя",               ЗаказГрузоотправителя);
	Запрос.УстановитьПараметр("ТекМаршрутныйЛист",                   МаршрутныйЛист);
	Запрос.УстановитьПараметр("ТабПодобранныхГрузов",                ТабПодобранныхГрузов);
	Запрос.УстановитьПараметр("ПолучениеОстатков",                   ПолучениеОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодобранныеГрузы.Груз КАК Груз,
	|	ПодобранныеГрузы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодобранныеГрузы
	|ИЗ
	|	&ТабПодобранныхГрузов КАК ПодобранныеГрузы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Груз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|		ИНАЧЕ уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|	КОНЕЦ КАК Груз,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|			КОНЕЦ, 0)) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатГрузыКПеревозке_уэОстатки
	|ГДЕ
	|	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|		ИНАЧЕ уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|			ТОГДА уатГрузыКПеревозке_уэОбороты.Номенклатура
	|		ИНАЧЕ уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто
	|	КОНЕЦ КАК Груз,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОбороты.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОбороты.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОбороты.КоличествоРасход * уатГрузыКПеревозке_уэОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОбороты.КоличествоРасход / уатГрузыКПеревозке_уэОбороты.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОбороты.КоличествоРасход
	|			КОНЕЦ, 0)) КАК КоличествоРасход
	|ПОМЕСТИТЬ ВТ_ОборотТекМЛ
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Обороты(, , Регистратор, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатГрузыКПеревозке_уэОбороты
	|ГДЕ
	|	уатГрузыКПеревозке_уэОбороты.Регистратор = &ТекМаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|			ТОГДА уатГрузыКПеревозке_уэОбороты.Номенклатура
	|		ИНАЧЕ уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабГрузов.Груз КАК Груз,
	|	СУММА(ТабГрузов.Количество) КАК Количество,
	|	СУММА(ТабГрузов.КоличествоОстаток) КАК КоличествоОстаток,
	|	ТабГрузов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТабГрузов.ВесБрутто) КАК ВесБрутто,
	|	СУММА(ТабГрузов.Объем) КАК Объем,
	|	СУММА(ТабГрузов.КоличествоМест) КАК КоличествоМест
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНаТСТовары.Номенклатура КАК Груз,
	|		ЗаказНаТСТовары.Количество КАК Количество,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекМЛ.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0) КАК КоличествоОстаток,
	|		ЗаказНаТСТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНаТСТовары.ВесБрутто КАК ВесБрутто,
	|		ЗаказНаТСТовары.Объем КАК Объем,
	|		ЗаказНаТСТовары.КоличествоМест КАК КоличествоМест
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|				ПО (уатЗаказГрузоотправителяТовары.Ссылка = &ЗаказГрузоотправителя)
	|					И уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|					И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения) КАК ЗаказНаТСТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_Остатки.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекМЛ КАК ВТ_ОборотТекМЛ
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_ОборотТекМЛ.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_ПодобранныеГрузы.Груз
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказНаТСГрузы.ГрузовоеМесто,
	|		ЗаказНаТСГрузы.КоличествоМест,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекМЛ.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0),
	|		ЗаказНаТСГрузы.ВидУпаковки,
	|		ЗаказНаТСГрузы.ВесБрутто,
	|		ЗаказНаТСГрузы.Объем,
	|		ВЫБОР
	|			КОГДА ЗаказНаТСГрузы.Коэффициент = 0
	|				ТОГДА ЗаказНаТСГрузы.КоличествоМест
	|			ИНАЧЕ ЗаказНаТСГрузы.КоличествоМест / ЗаказНаТСГрузы.Коэффициент
	|		КОНЕЦ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ВидУпаковки,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест) КАК КоличествоМест,
	|			ВЫБОР
	|				КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки ССЫЛКА Справочник.уатВидыУпаковки_уэ
	|					ТОГДА ВЫРАЗИТЬ(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК Справочник.уатВидыУпаковки_уэ).Коэффициент
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК Коэффициент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|				ПО (уатЗаказГрузоотправителяГрузовойСостав.Ссылка = &ЗаказГрузоотправителя)
	|					И уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|					И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	|			ВЫБОР
	|				КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки ССЫЛКА Справочник.уатВидыУпаковки_уэ
	|					ТОГДА ВЫРАЗИТЬ(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК Справочник.уатВидыУпаковки_уэ).Коэффициент
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЗаказНаТСГрузы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_Остатки.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекМЛ КАК ВТ_ОборотТекМЛ
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_ОборотТекМЛ.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_ПодобранныеГрузы.Груз
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка),
	|		1,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекМЛ.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0),
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	|		уатЗаказГрузоотправителя.ВесБрутто,
	|		уатЗаказГрузоотправителя.Объем,
	|		уатЗаказГрузоотправителя.КоличествоМест
	|	ИЗ
	|		Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО (ВТ_Остатки.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_Остатки.Груз = NULL
	|					ИЛИ ВТ_Остатки.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_Остатки.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекМЛ КАК ВТ_ОборотТекМЛ
	|			ПО (ВТ_ОборотТекМЛ.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_ОборотТекМЛ.Груз = NULL
	|					ИЛИ ВТ_ОборотТекМЛ.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_ОборотТекМЛ.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО (ВТ_ПодобранныеГрузы.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = NULL
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|	ГДЕ
	|		уатЗаказГрузоотправителя.Ссылка = &ЗаказГрузоотправителя
	|		И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)) КАК ТабГрузов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабГрузов.Груз,
	|	ТабГрузов.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Документ.Груз КАК Груз,
	|	СУММА(ВЫБОР
	|			КОГДА &ПолучениеОстатков
	|				ТОГДА ВТ_Документ.КоличествоОстаток
	|			ИНАЧЕ ВТ_Документ.Количество
	|		КОНЕЦ) КАК КоличествоОстаток,
	|	ВТ_Документ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА &ПолучениеОстатков
	|				ТОГДА ВТ_Документ.ВесБрутто * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество
	|			ИНАЧЕ ВТ_Документ.ВесБрутто
	|		КОНЕЦ) КАК ВесБруттоОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА &ПолучениеОстатков
	|				ТОГДА ВТ_Документ.Объем * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество
	|			ИНАЧЕ ВТ_Документ.Объем
	|		КОНЕЦ) КАК ОбъемОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА &ПолучениеОстатков
	|				ТОГДА ВТ_Документ.КоличествоМест * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество
	|			ИНАЧЕ ВТ_Документ.КоличествоМест
	|		КОНЕЦ) КАК КоличествоМестОстаток
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПолучениеОстатков
	|				ТОГДА ВТ_Документ.КоличествоОстаток > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Груз,
	|	ВТ_Документ.ЕдиницаИзмерения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокГрузовПоОстаткамДляПодбора()

// Функция предназначена для получения списка грузов по остаткам к размещению для формы подбора заказов.
//
Функция ПолучитьСписокГрузовПоОстаткамКРазмещениюДляПодбора(ЗаказГрузоотправителя, СкладДляОтбора, АктОтгрузки, ТабПодобранныхГрузов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя",               ЗаказГрузоотправителя);
	Запрос.УстановитьПараметр("ТекущийАктОтгрузки",                  АктОтгрузки);
	Запрос.УстановитьПараметр("СкладДляОтбора",                      СкладДляОтбора);
	Запрос.УстановитьПараметр("ТабПодобранныхГрузов",                ТабПодобранныхГрузов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодобранныеГрузы.Груз КАК Груз,
	|	ПодобранныеГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПодобранныеГрузы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодобранныеГрузы
	|ИЗ
	|	&ТабПодобранныхГрузов КАК ПодобранныеГрузы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Груз,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК Груз,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток * уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток / уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток
	|			КОНЕЦ, 0)) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(
	|			,
	|			Склад = &СкладДляОтбора
	|				И ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки
	|ГДЕ
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ),
	|	СУММА(ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток, 0))
	|ИЗ
	|	РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(
	|			,
	|			Склад = &СкладДляОтбора
	|				И ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, Заказ = &ЗаказГрузоотправителя) КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто = уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто
	|ГДЕ
	|	ВЫРАЗИТЬ(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).Контейнер
	|	И ВЫРАЗИТЬ(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).УникальноеГрузовоеМесто
	|	И ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ГрузовоеМесто КАК Груз,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.КоличествоРасход * уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ГрузовоеМесто.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.КоличествоРасход / уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ЕдиницаИзмерения.Коэффициент * уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ГрузовоеМесто.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.КоличествоРасход
	|			КОНЕЦ, 0)) КАК КоличествоРасход
	|ПОМЕСТИТЬ ВТ_ОборотТекАкт
	|ИЗ
	|	РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Обороты(, , Регистратор, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОбороты
	|ГДЕ
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.Регистратор = &ТекущийАктОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ГрузовоеМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабГрузов.Груз КАК Груз,
	|	СУММА(ТабГрузов.Количество) КАК Количество,
	|	СУММА(ТабГрузов.КоличествоОстаток) КАК КоличествоОстаток,
	|	ТабГрузов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТабГрузов.ВесБрутто) КАК ВесБрутто,
	|	СУММА(ТабГрузов.Объем) КАК Объем,
	|	СУММА(ТабГрузов.КоличествоМест) КАК КоличествоМест
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНаТСТовары.Номенклатура КАК Груз,
	|		ЗаказНаТСТовары.Количество КАК Количество,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекАкт.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0) КАК КоличествоОстаток,
	|		ЗаказНаТСТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНаТСТовары.ВесБрутто КАК ВесБрутто,
	|		ЗаказНаТСТовары.Объем КАК Объем,
	|		ЗаказНаТСТовары.КоличествоМест КАК КоличествоМест
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|				ПО (уатЗаказГрузоотправителяТовары.Ссылка = &ЗаказГрузоотправителя)
	|					И уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|					И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения) КАК ЗаказНаТСТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_Остатки.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекАкт КАК ВТ_ОборотТекАкт
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_ОборотТекАкт.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО ЗаказНаТСТовары.Номенклатура = ВТ_ПодобранныеГрузы.Груз
	|				И ЗаказНаТСТовары.ЕдиницаИзмерения = ВТ_ПодобранныеГрузы.ЕдиницаИзмерения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказНаТСГрузы.ГрузовоеМесто,
	|		ЗаказНаТСГрузы.КоличествоМест,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекАкт.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0),
	|		ЗаказНаТСГрузы.ВидУпаковки,
	|		ЗаказНаТСГрузы.ВесБрутто,
	|		ЗаказНаТСГрузы.Объем,
	|		ЗаказНаТСГрузы.КоличествоМест
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ВидУпаковки,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест) КАК КоличествоМест
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|				ПО (уатЗаказГрузоотправителяГрузовойСостав.Ссылка = &ЗаказГрузоотправителя)
	|					И уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|					И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки) КАК ЗаказНаТСГрузы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_Остатки.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекАкт КАК ВТ_ОборотТекАкт
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_ОборотТекАкт.Груз
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО ЗаказНаТСГрузы.ГрузовоеМесто = ВТ_ПодобранныеГрузы.Груз
	|				И ЗаказНаТСГрузы.ВидУпаковки = ВТ_ПодобранныеГрузы.ЕдиницаИзмерения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка),
	|		1,
	|		ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ОборотТекАкт.КоличествоРасход, 0) - ЕСТЬNULL(ВТ_ПодобранныеГрузы.Количество, 0),
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	|		уатЗаказГрузоотправителя.ВесБрутто,
	|		уатЗаказГрузоотправителя.Объем,
	|		уатЗаказГрузоотправителя.КоличествоМест
	|	ИЗ
	|		Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|			ПО (ВТ_Остатки.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_Остатки.Груз = NULL
	|					ИЛИ ВТ_Остатки.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_Остатки.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотТекАкт КАК ВТ_ОборотТекАкт
	|			ПО (ВТ_ОборотТекАкт.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_ОборотТекАкт.Груз = NULL
	|					ИЛИ ВТ_ОборотТекАкт.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_ОборотТекАкт.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы
	|			ПО (ВТ_ПодобранныеГрузы.Груз = НЕОПРЕДЕЛЕНО
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = NULL
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ ВТ_ПодобранныеГрузы.Груз = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|	ГДЕ
	|		уатЗаказГрузоотправителя.Ссылка = &ЗаказГрузоотправителя
	|		И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)) КАК ТабГрузов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабГрузов.Груз,
	|	ТабГрузов.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Документ.Груз КАК Груз,
	|	СУММА(ВТ_Документ.КоличествоОстаток) КАК КоличествоОстаток,
	|	ВТ_Документ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВТ_Документ.ВесБрутто * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество) КАК ВесБруттоОстаток,
	|	СУММА(ВТ_Документ.Объем * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество) КАК ОбъемОстаток,
	|	СУММА(ВТ_Документ.КоличествоМест * ВТ_Документ.КоличествоОстаток / ВТ_Документ.Количество) КАК КоличествоМестОстаток
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|ГДЕ
	|	ВТ_Документ.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Груз,
	|	ВТ_Документ.ЕдиницаИзмерения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокГрузовПоОстаткамДляПодбора()

// Функция - Это число
//
// Параметры:
//  ПроверяемоеЗначение	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЭтоЧисло(Знач ПроверяемоеЗначение) Экспорт
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЭтоЧисло = ОписаниеТипаЧисло.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	ЭтоНоль  = Ложь;
	Если НЕ ЭтоЧисло Тогда
		СтрДлина = СтрДлина(ПроверяемоеЗначение);
		Строка   = ПроверяемоеЗначение;
		Для сч = 1 По СтрДлина Цикл
			Строка = СтрЗаменить(Строка,"0", "");
		КонецЦикла;
		ЭтоНоль = Строка = "";
	КонецЕсли;
	
	Возврат ЭтоЧисло ИЛИ ЭтоНоль;
		
КонецФункции

Процедура ВыполнитьУстановкуСтатусаЗаявкиНаРемонт(ДокументСсылка, Параметры, Отказ) Экспорт
	
	Если Отказ
		ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗакрытиеЗаявокНаРемонты") Тогда
		Для Каждого ТекЗаявка Из ДокументСсылка.Заявки Цикл
			ДокОб = ТекЗаявка.ЗаявкаНаРемонт.ПолучитьОбъект();
			ДокОб.СтатусВыполнения = Справочники.уатСтатусы_уэ.Отклонен;
			ДокОб.ОбменДанными.Загрузка = Истина;
			Попытка
				ДокОб.Записать();
				Если Параметры.Свойство("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт") Тогда
					Параметры.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = ДокОб.Ссылка;
				Иначе
					Параметры.Вставить("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт", ДокОб.Ссылка);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатВыдачаРасходныхМатериалов") Тогда
		ЗаявкаНаРемонт = ДокументСсылка.ДокументОснование;
		СтатусЗР       = Справочники.уатСтатусы_уэ.МатериалыВыданы;
		Если ЗаявкаНаРемонт.СтатусВыполнения <> СтатусЗР Тогда
			ДокОб = ЗаявкаНаРемонт.ПолучитьОбъект();
			ДокОб.СтатусВыполнения = СтатусЗР;
			ДокОб.ОбменДанными.Загрузка = Истина;
			Попытка
				ДокОб.Записать();
				Если Параметры.Свойство("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт") Тогда
					Параметры.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = ДокОб.Ссылка;
				Иначе
					Параметры.Вставить("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт", ДокОб.Ссылка);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;

		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
		ЗаявкаНаРемонт = ДокументСсылка.ЗаявкаНаРемонт;
		Если ЗначениеЗаполнено(ДокументСсылка.ЗаявкаНаРемонт) Тогда
			Если ДокументСсылка.Выполнен Тогда
				СтатусЗР = Справочники.уатСтатусы_уэ.РемонтВыполнен;
			Иначе
				СтатусЗР = Справочники.уатСтатусы_уэ.НазначенРемонт;
			КонецЕсли;
			Если ЗаявкаНаРемонт.СтатусВыполнения <> СтатусЗР Тогда
				ДокОб = ЗаявкаНаРемонт.ПолучитьОбъект();
				ДокОб.СтатусВыполнения = СтатусЗР;
				Если ДокОб.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис
					И НЕ ЗначениеЗаполнено(ДокОб.ДоговорКонтрагента) Тогда
					ТекстНСТР = НСтр("en='The document ""% 1"" is not filled in the contract under which the repair is carried out!';ru='В докумете ""%1"" не заполнен договор, по которому осуществляется ремонт!'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ДокОб.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				КонецЕсли;
				
				ДокОб.ОбменДанными.Загрузка = Истина;
				Попытка
					ДокОб.Записать();
					Если Параметры.Свойство("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт") Тогда
						Параметры.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = ДокОб.Ссылка;
					Иначе
						Параметры.Вставить("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт", ДокОб.Ссылка);
					КонецЕсли;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("уатОбщегоНазначенияСервер.Пауза", Параметры);
	КонецЕсли;
		
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

// Функция возвращает метаданные документа УАТ
//  по предопределенному элементу справочника НаборыДополнительныхРеквизитовИСведений
//
// Параметры:
//  НаборДополнительныхРеквизитов - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
// 
// Возвращаемое значение:
//  ОбъектМетаданных.Документ - соответствующий набору доп. реквизитов объект метаданных.
//   Если объект метаданных не найден, возвращается Неопределено
//
Функция МетаданныеДокументаПоНаборуДопРеквизитов(НаборДополнительныхРеквизитов) Экспорт
	
	ИмяМетаданных = СтрЗаменить(НаборДополнительныхРеквизитов.ИмяПредопределенныхДанных, "Документ_", "");
	Результат = Метаданные.Документы.Найти(ИмяМетаданных);
	Возврат Результат;
	
КонецФункции

// Функция возвращает уровень доступа внешних пользователей, соответсвующих контрагенту, к табличным частям услуг
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, от имени которого работает внешний пользователь
// 
// Возвращаемое значение:
//  Структура - 
//
Функция УровеньДоступаКонтрагентаКУслугам(Контрагент) Экспорт
	
	Результат = Новый Структура("РедактированиеРасходов,
		|СозданиеПроизвольныхПоступленийУслуг, РедактированиеПоступленийУслуг, РедактированиеСчетовНаОплату");
	Результат.СозданиеПроизвольныхПоступленийУслуг = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент КАК Контрагент,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеРасходов КАК РедактированиеРасходов,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеПоступленийУслуг КАК РедактированиеПоступленийУслуг,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеСчетовНаОплату КАК РедактированиеСчетовНаОплату,
	|	уатСведенияОКонтрагентах_уэ.СозданиеПроизвольныхПоступленийУслуг КАК СозданиеПроизвольныхПоступленийУслуг
	|ИЗ
	|	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	|ГДЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.РедактированиеРасходов               = Выборка.РедактированиеРасходов;
		Результат.СозданиеПроизвольныхПоступленийУслуг = Выборка.СозданиеПроизвольныхПоступленийУслуг;
		Результат.РедактированиеПоступленийУслуг       = Выборка.РедактированиеПоступленийУслуг;
		Результат.РедактированиеСчетовНаОплату         = Выборка.РедактированиеСчетовНаОплату;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.РедактированиеРасходов) Тогда
		Результат.РедактированиеРасходов = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.РедактированиеПоступленийУслуг) Тогда
		Результат.РедактированиеПоступленийУслуг = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.РедактированиеСчетовНаОплату) Тогда
		Результат.РедактированиеСчетовНаОплату = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АвторизованВнещнийПеревозчик() Экспорт
	
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", АвторизованныйКонтрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСведенияОКонтрагентах_уэ.Перевозчик КАК Перевозчик
	|ИЗ
	|	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	|ГДЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Перевозчик;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПеренестиДополнительныеРеквизиты(ДокументПриемник, ДокументИсточник)
	
	МетаданныеПриемника = ДокументПриемник.Метаданные();
	МетаданныеИсточника = ДокументИсточник.Метаданные();
	ИмяТабличнойЧасти = "ДополнительныеРеквизиты";
	Если МетаданныеИсточника.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		// Дополнительных реквизитов нет, ничего делать не требуется.
		Возврат;
	КонецЕсли;
	
	НаборДопРеквизитовПриемника = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	НаборДопРеквизитовИсточника = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	Попытка
		НаборДопРеквизитовПриемника
			= Справочники.НаборыДополнительныхРеквизитовИСведений[СтрШаблон("Документ_%1", МетаданныеПриемника.Имя)];
		НаборДопРеквизитовИсточника
			= Справочники.НаборыДополнительныхРеквизитовИСведений[СтрШаблон("Документ_%1", МетаданныеИсточника.Имя)];
	Исключение
		// Не найден подходящий элемент справочника "Наборы дополнительных реквизитов и сведений".
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОснованиеДополнительныеРеквизиты.Значение КАК Значение,
	|	ОснованиеДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ОснованиеДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока,
	|	уатПереносДополнительныхРеквизитов.РеквизитПриемника КАК РеквизитПриемника
	|ИЗ
	|	Документ.%1.ДополнительныеРеквизиты КАК ОснованиеДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПереносДополнительныхРеквизитов КАК уатПереносДополнительныхРеквизитов
	|		ПО ОснованиеДополнительныеРеквизиты.Свойство = уатПереносДополнительныхРеквизитов.ДополнительныйРеквизитИсточника
	|ГДЕ
	|	ОснованиеДополнительныеРеквизиты.Ссылка = &Ссылка
	|	И уатПереносДополнительныхРеквизитов.ДокументИсточник = &ДокументИсточник
	|	И уатПереносДополнительныхРеквизитов.ДокументПриемник = &ДокументПриемник", МетаданныеИсточника.Имя);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",           ДокументИсточник);
	Запрос.УстановитьПараметр("ДокументИсточник", НаборДопРеквизитовИсточника);
	Запрос.УстановитьПараметр("ДокументПриемник", НаборДопРеквизитовПриемника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.РеквизитПриемника) = Тип("Строка") Тогда
			ДокументПриемник[Выборка.РеквизитПриемника] = Выборка.Значение;
		Иначе
			СтрокаДопРеквизита = ДокументПриемник.ДополнительныеРеквизиты.Найти(Выборка.РеквизитПриемника, "Свойство");
			Если СтрокаДопРеквизита = Неопределено Тогда
				СтрокаДопРеквизита = ДокументПриемник.ДополнительныеРеквизиты.Добавить();
			КонецЕсли;
			СтрокаДопРеквизита.Значение        = Выборка.Значение;
			СтрокаДопРеквизита.Свойство        = Выборка.РеквизитПриемника;
			СтрокаДопРеквизита.ТекстоваяСтрока = Выборка.ТекстоваяСтрока;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВводНаОснованииЗаказаНаТС(ДокументОбъект, ДанныеЗаполнения)
	
	Если Не уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		
		ЗаполнениеЭтапаПоРодительскомуЗаказу = ДокументОбъект.ДополнительныеСвойства.Свойство("ЗаполнениеЭтапаПоРодительскомуЗаказу")
			И ДокументОбъект.ДополнительныеСвойства.ЗаполнениеЭтапаПоРодительскомуЗаказу;
		
		Если ДанныеЗаполнения.ЭтоШаблонПеревозки
			И Не ЗаполнениеЭтапаПоРодительскомуЗаказу Тогда
		
			ТекстОшибки = НСтр("ru = 'Непосредстванный ввод документов на основании Заказов на ТС с установленным флагом ""Шаблон"" запрещен.'");
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
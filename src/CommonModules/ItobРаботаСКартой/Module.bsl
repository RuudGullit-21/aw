
#Область ПрограммныйИнтерфейс

// Возвращает ближайший заданным координатам объект из классификатора карты.
// 	Сперва пытается подобрать пункт назначения по координатам и георамке. Если не удалось - пытается подобрать геозону по попаданию в координаты.
//	Если строгий поиск не удался, пытается подобрать ближайший объект по геоклассификатору.
//	Если и это не удалось, делает поиск ближайшего объекта (прямое геокодирование).
//
// Параметры:
//  Широта		 - Число - Географическая широта.
//  Долгота		 - Число - Географическая долгота.
//	РадиусФиксацииПоУмолчанию - Число -  Для ускорения расчетов рекомендуется передать извне значение радиуса прихода на точку по умолчанию
//							    		(см. ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку()).
//  ТекстОшибки	 - Строка	 - Текст ошибки.
// 
// Возвращаемое значение:
//  Неопределено, Строка - Ближайший объект на карте (строковое представление).
//
Функция ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота, РадиусФиксацииПоУмолчанию = Неопределено, ТекстОшибки = "") Экспорт
	
	ТочностьОкругленияКоординат = 4;
		
	// Пытаемся найти точное попадание в ПН (по координатам и георамке).
	ПунктНазначения = ItobПунктыНазначения.СтрогийПоискПунктаНазначения(Широта, Долгота, РадиусФиксацииПоУмолчанию);
	Если НЕ ПунктНазначения = Неопределено Тогда
		Возврат Строка(ПунктНазначения);
	КонецЕсли;
	
	// Пытаемся найти точное попадание в геозону (по координатам и георамке).
	ГеографическаяЗона = ItobГеографическиеЗоны.СтрогийПоискГеозоны(Широта, Долгота);
	Если НЕ ГеографическаяЗона = Неопределено Тогда
		Возврат Строка(ГеографическаяЗона);
	КонецЕсли;
	
	// Поиск в кэше
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Окр(Широта, ТочностьОкругленияКоординат));
	Запрос.УстановитьПараметр("Долгота", Окр(Долгота, ТочностьОкругленияКоординат));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическийКлассификатор.Представление
	               |ИЗ
	               |	РегистрСведений.ItobКэшГеокодера КАК ItobКэшГеокодера
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |		ПО (ItobКэшГеокодера.ГеоКладрШирота = ItobГеографическийКлассификатор.Широта
	               |				И ItobКэшГеокодера.ГеоКладрДолгота = ItobГеографическийКлассификатор.Долгота
	               |				И ItobКэшГеокодера.ГеоКладрТочность = ItobГеографическийКлассификатор.Точность)
	               |ГДЕ
	               |	ItobКэшГеокодера.Широта = &Широта
	               |	И ItobКэшГеокодера.Долгота = &Долгота";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Возврат	Выборка.Представление;		
	КонецЕсли;
	
	// Поиск в гео классификаторе	
	АдресИзГеоКладра = ПолучитьАдресИзГеографическогоКлассификатора(Широта,Долгота);
	Если НЕ ПустаяСтрока(АдресИзГеоКладра) Тогда
		Возврат АдресИзГеоКладра;	
	КонецЕсли;
	
	// Адрес в кэше не найден, обращаемся к географическому сервису.
	РезультатГеокодированияГеосервис = ItobГеографическиеСервисы.ОбратноеГеокодирование(Широта, Долгота, ТекстОшибки);
	Если РезультатГеокодированияГеосервис = Неопределено Тогда
		РезультатГеокодированияГеосервис = "";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	
	Возврат РезультатГеокодированияГеосервис; 
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАдресИзГеографическогоКлассификатора(Широта,Долгота)

	МаксимальноеРасстояниеДоТочки = 100;
	
	// Поиск в гео классификаторе	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Широта", Широта);
	Запрос.УстановитьПараметр("Долгота", Долгота);
	Запрос.УстановитьПараметр("Дельта", 0.1);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическийКлассификатор.Точность КАК Точность,
	               |	ItobГеографическийКлассификатор.Широта КАК Широта,
	               |	ItobГеографическийКлассификатор.Долгота КАК Долгота,
	               |	ItobГеографическийКлассификатор.Представление КАК Представление,
	               |	(ItobГеографическийКлассификатор.Широта - &Широта) * (ItobГеографическийКлассификатор.Широта - &Широта) + (ItobГеографическийКлассификатор.Долгота - &Долгота) * (ItobГеографическийКлассификатор.Долгота - &Долгота) КАК Расстояние
	               |ПОМЕСТИТЬ ТочкиОкрестности
	               |ИЗ
	               |	РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |ГДЕ
	               |	ItobГеографическийКлассификатор.Широта >= &Широта-&Дельта
	               |	И ItobГеографическийКлассификатор.Широта <= &Широта+&Дельта
	               |	И ItobГеографическийКлассификатор.Долгота >= &Долгота-&Дельта
	               |	И ItobГеографическийКлассификатор.Долгота <= &Долгота+&Дельта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Расстояние
	               |;";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Пробуем с дельтой 0.2
		Запрос.УстановитьПараметр("Дельта", 0.2);
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		// Пробуем с дельтой 0.5
		Запрос.УстановитьПараметр("Дельта", 0.5);
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
					   
	Запрос.Текст = "
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 100
	               |	ТочкиОкрестности.Точность КАК Точность,
	               |	ТочкиОкрестности.Широта,
	               |	ТочкиОкрестности.Долгота,
	               |	ТочкиОкрестности.Представление,
	               |	ТочкиОкрестности.Расстояние КАК Расстояние
	               |ПОМЕСТИТЬ БлижайшиеТочки
	               |ИЗ
	               |	ТочкиОкрестности КАК ТочкиОкрестности
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Расстояние
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Точность,
	               |	Расстояние
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БлижайшиеТочки.Точность КАК Точность,
	               |	БлижайшиеТочки.Широта,
	               |	БлижайшиеТочки.Долгота,
	               |	БлижайшиеТочки.Представление,
	               |	БлижайшиеТочки.Расстояние
	               |ИЗ
	               |	БлижайшиеТочки КАК БлижайшиеТочки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	БлижайшиеТочки.Точность УБЫВ,
	               |	БлижайшиеТочки.Расстояние
	               |ИТОГИ ПО
	               |	Точность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТочкиОкрестности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ БлижайшиеТочки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДетали = Выборка.Выбрать();
		Если ВыборкаДетали.Количество() > 0 Тогда
			ВыборкаДетали.Следующий();
			
			Если Окр(ВыборкаДетали.Расстояние,6) = 0 Тогда
				Возврат	ВыборкаДетали.Представление;
				
			КонецЕсли;
			
			Расстояние = ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(Широта,Долгота,ВыборкаДетали.Широта,ВыборкаДетали.Долгота);
			
			Если Расстояние <= МаксимальноеРасстояниеДоТочки Тогда
				Возврат	ВыборкаДетали.Представление;
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЦикла;
	
	Возврат "";

КонецФункции

#КонецОбласти

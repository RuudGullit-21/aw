
#Область ПрограммныйИнтерфейс

// Обновляет таблицу с реперами маршрута.
//
// Параметры:
//  ТекущийОбъект	 - ДокументОбъект.ItobПутевойЛист	 - Исходный документ.
//
Процедура ОбновитьТаблицуРеперыМаршрута(ТекущийОбъект) Экспорт

	ТабПункты = Новый ТаблицаЗначений;
	ТабПункты.Колонки.Добавить("Пункт");
	
	Если НЕ ТекущийОбъект.ТочкаНачалаМаршрута.Пустая() Тогда
		НовСтрокаПунктов = ТабПункты.Добавить();
		НовСтрокаПунктов.Пункт = ТекущийОбъект.ТочкаНачалаМаршрута;		
	КонецЕсли;
	
	ИмяСправочникаПункты = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПунктыНазначения");
	
	Для каждого СтрЭтапы Из ТекущийОбъект.Состав Цикл
		Если ТипЗнч(СтрЭтапы.Адрес) = Тип("СправочникСсылка."+ИмяСправочникаПункты)
			И (НЕ СтрЭтапы.Адрес.Пустая()) Тогда
			
			ПараметрыПункта = ПолучитьПараметрыПунктаНазначения(СтрЭтапы.Адрес);
			Если (НЕ ПараметрыПункта.Широта = 0) 
				И (НЕ ПараметрыПункта.Долгота = 0) Тогда
			
				НовСтрокаПунктов = ТабПункты.Добавить();
				НовСтрокаПунктов.Пункт = СтрЭтапы.Адрес;
			
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ТекущийОбъект.ТочкаКонцаМаршрута.Пустая() Тогда
		НовСтрокаПунктов = ТабПункты.Добавить();
		НовСтрокаПунктов.Пункт = ТекущийОбъект.ТочкаКонцаМаршрута;		
	КонецЕсли;
	
	ТабПунктыРеперы = ТекущийОбъект.РеперыМаршрута.Выгрузить();
	ТабПунктыКопия = ТабПункты.Скопировать();
	ЕстьОтличияТаблиц = Ложь;
	// Проверяем соответствие таблицы
	Для каждого СтрТабРеперы Из ТабПунктыРеперы Цикл
		Если ТабПунктыКопия.Количество()=0 Тогда		
			Прервать;
		
		КонецЕсли;
		
		Если НЕ СтрТабРеперы.Пункт.Пустая() Тогда
			Если ТабПунктыКопия[0].Пункт = СтрТабРеперы.Пункт Тогда
				ТабПунктыКопия.Удалить(ТабПунктыКопия[0]);	
					
			Иначе				
				// Таблицы отличаются
				ЕстьОтличияТаблиц = Истина;
				Прервать;
			
			КонецЕсли;	
		
		КонецЕсли;		
	
	КонецЦикла;
	
	МассивДопТочек = ТабПунктыРеперы.НайтиСтроки(Новый Структура("Пункт", Справочники[ИмяСправочникаПункты].ПустаяСсылка()));
	Для каждого ДопТочка Из МассивДопТочек Цикл
		ТабПунктыРеперы.Удалить(ДопТочка);	
	КонецЦикла;
	
	Если ТабПунктыРеперы.Количество() <> ТабПункты.Количество() Тогда
		ЕстьОтличияТаблиц = Истина;	
	КонецЕсли;
	
	Если ЕстьОтличияТаблиц Тогда
		ТекущийОбъект.РеперыМаршрута.Очистить();
		Для каждого СтрПункт Из ТабПункты Цикл
			НовСтрокаРеперы = ТекущийОбъект.РеперыМаршрута.Добавить();
			НовСтрокаРеперы.Пункт = СтрПункт.Пункт;
			ПараметрыПункта = ПолучитьПараметрыПунктаНазначения(СтрПункт.Пункт);
			НовСтрокаРеперы.Широта = ПараметрыПункта.Широта;
			НовСтрокаРеперы.Долгота = ПараметрыПункта.Долгота;			
		
		КонецЦикла;
		
	ИначеЕсли ТабПунктыКопия.Количество() > 0 Тогда
		// Были добавлены в конце пункты
		Для каждого СтрПункт Из ТабПунктыКопия Цикл
			НовСтрокаРеперы = ТекущийОбъект.РеперыМаршрута.Добавить();
			НовСтрокаРеперы.Пункт = СтрПункт.Пункт;
			ПараметрыПункта = ПолучитьПараметрыПунктаНазначения(СтрПункт.Пункт);
			НовСтрокаРеперы.Широта = ПараметрыПункта.Широта;
			НовСтрокаРеперы.Долгота = ПараметрыПункта.Долгота;			
		
		КонецЦикла;		
	
	КонецЕсли;
КонецПроцедуры

// Собирает данные по маршруту.
//
// Параметры:
//  ТекущийОбъект	 - СправочникОбъект.ItobПунктыНазначения, ДокументОбъект.ItobПутевойЛист - Исходные объект.
// 
// Возвращаемое значение:
//  Структура - Данные по маршруту.
//
Функция СобратьДанныеМаршрута(ТекущийОбъект) Экспорт

	МассивТочекМаршрута = Новый Массив;
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект." + ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПунктыНазначения")) Тогда
		Расстояние = ТекущийОбъект.Расстояние;
	ИначеЕсли ТипЗнч(ТекущийОбъект) =  Тип("ДокументОбъект." + ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПутевойЛист")) Тогда
		Расстояние = ТекущийОбъект.ДлинаПутиПлан; 
	Иначе
		Расстояние = 0;
	КонецЕсли;
	ЗаписатьПоследнююТочку = Ложь;
	ПредыдущийИндексТочкиМаршрута = Неопределено;
	ДанныеМаршрута = Неопределено;
	ТрекМаршрута = РегистрыСведений.ItobТрекМаршрута.Выбрать(Новый Структура("МаршрутноеЗадание", ТекущийОбъект.Ссылка));
	Пока ТрекМаршрута.Следующий() Цикл
		Если (НЕ ТрекМаршрута.ИндексТочкиМаршрута = ПредыдущийИндексТочкиМаршрута) Тогда
			Если ТрекМаршрута.Порядок > 0 Тогда
				МассивТочекМаршрута.Добавить(ДанныеМаршрута);				
			
			КонецЕсли;			
			
			ДанныеМаршрута = Новый Структура("Lat,Lon,Index,Length,Duration,Path");
			ДанныеМаршрута.Length = ?(ТрекМаршрута.Порядок = 0, Расстояние*1000, 0);
			ДанныеМаршрута.Path = Новый Массив;
		
		КонецЕсли;
		
		ДанныеМаршрута.Path.Добавить(Новый Структура("Lat,Lon", ТрекМаршрута.Широта, ТрекМаршрута.Долгота));
		
		ПредыдущийИндексТочкиМаршрута = ТрекМаршрута.ИндексТочкиМаршрута;
		ЗаписатьПоследнююТочку = Истина;
	КонецЦикла; 
	
	Если ЗаписатьПоследнююТочку Тогда
		МассивТочекМаршрута.Добавить(ДанныеМаршрута);	
	КонецЕсли;
	
	МассивРеперовМаршрута = Новый Массив;
	Для каждого РеперМаршрута Из ТекущийОбъект.РеперыМаршрута Цикл
		ДанныеРепера = Новый Структура("Пункт,Широта,Долгота,ПрибытиеПланСек");
		ЗаполнитьЗначенияСвойств(ДанныеРепера, РеперМаршрута);
		МассивРеперовМаршрута.Добавить(ДанныеРепера);	
	КонецЦикла;
	
	Результат = Новый Структура("РеперыМаршрута,ТочкиМаршрута", МассивРеперовМаршрута, МассивТочекМаршрута);	
		
	Возврат Результат;

КонецФункции // СобратьДанныеМаршрута()

// Строит маршрут для путевого листа.
//
// Параметры:
//  Рез			 - Структура				 - Исходные данные.
//  Объект		 - ДокументОбъект.ItobПутевойЛист	 - Исходный документ.
//  ДатаВыезда	 - Дата								 - Дата выезда.
//
Процедура ПостроитьМаршрутДляПутевогоЛиста(Рез, Объект, ДатаВыезда = '00010101070000') Экспорт

	ТекИндексСтрокиСостав = 0;
	ТекущееДатаВремя = ДатаВыезда;
	
	Объект.РеперыМаршрута.Очистить();
	Для Каждого РеперМаршрута Из Рез.РеперыМаршрута Цикл
		
		НовСтрокаРеперы = Объект.РеперыМаршрута.Добавить();
		Если НЕ РеперМаршрута.Пункт.Пустая() Тогда
			НовСтрокаРеперы.Пункт = РеперМаршрута.Пункт;
			
			ИндексСтроки = Рез.РеперыМаршрута.Найти(РеперМаршрута);
			Если ИндексСтроки > 0 И ИндексСтроки < Рез.РеперыМаршрута.Количество()-1 Тогда
				// Эту точку можно отнести к составу.
				// Проверка.
				Если Объект.Состав.Количество() < ТекИндексСтрокиСостав+1
					ИЛИ (НЕ Объект.Состав[ТекИндексСтрокиСостав].Адрес = РеперМаршрута.Пункт) Тогда
					
					ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка синхронизации таблиц состава с реперами маршрута'"));
					
				Иначе
					
					Объект.Состав[ТекИндексСтрокиСостав].ПрибытиеПлан = ТекущееДатаВремя+РеперМаршрута.ПрибытиеПланСек;
					ТекущееДатаВремя = Объект.Состав[ТекИндексСтрокиСостав].ПрибытиеПлан+(Объект.Состав[ТекИндексСтрокиСостав].ПребываниеПлан-'00010101');
					Объект.Состав[ТекИндексСтрокиСостав].УбытиеПлан = ТекущееДатаВремя;						
				
				КонецЕсли;					
				
				ТекИндексСтрокиСостав = ТекИндексСтрокиСостав+1;
				
			КонецЕсли;
			
			
		КонецЕсли;			
		ЗаполнитьЗначенияСвойств(НовСтрокаРеперы, РеперМаршрута, "Широта,Долгота,ПрибытиеПланСек");
	
	КонецЦикла;
	
	// Записываем данные по треку маршрута в регистр сведений.	
	ТрекПоМаршруту = РегистрыСведений.ItobТрекМаршрута.СоздатьНаборЗаписей();
	ТрекПоМаршруту.Отбор.МаршрутноеЗадание.Установить(Объект.Ссылка);
	ТрекПоМаршруту.Прочитать();
	ТрекПоМаршруту.Очистить();
	ТекНомерУчастка = 1;
	ОбщийПробег = 0;
	ОбщееВремя = 0;
	ПорядокТочкиТрека = 0;
	Для каждого УчастокМаршрута Из Рез.ТочкиМаршрута Цикл
		Для каждого КоординатаМаршрута Из УчастокМаршрута.Path Цикл
			НовСтрокаМаршрута = ТрекПоМаршруту.Добавить();
			НовСтрокаМаршрута.Порядок = ПорядокТочкиТрека;
			НовСтрокаМаршрута.МаршрутноеЗадание = Объект.Ссылка;
			НовСтрокаМаршрута.ИндексТочкиМаршрута = ТекНомерУчастка;
			НовСтрокаМаршрута.Широта  = КоординатаМаршрута.Lat;
			НовСтрокаМаршрута.Долгота = КоординатаМаршрута.Lon;				
			ПорядокТочкиТрека = ПорядокТочкиТрека + 1;
		КонецЦикла;
		
		ТекНомерУчастка = ТекНомерУчастка+1;
		ОбщийПробег = ОбщийПробег+УчастокМаршрута.Length;
		ОбщееВремя = ОбщееВремя+?(УчастокМаршрута.Duration = Неопределено, 0, УчастокМаршрута.Duration);
	КонецЦикла;
	ТрекПоМаршруту.Записать(Истина);
	
	Объект.ДлинаПутиПлан = ОбщийПробег/1000;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает свойства пункта назначения из регистра сведений.
//
Функция ПолучитьПараметрыПунктаНазначения(ПунктСсылка)
	
	Результат = Новый Структура("Широта,Долгота,РадиусФиксацииПосещения",0,0,0);
	
	Выборка = РегистрыСведений["ItobСвойстваПунктовНазначения"].Выбрать(Новый Структура("ПунктНазначения",ПунктСсылка));
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,Выборка);	
	КонецЕсли;
	
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти 
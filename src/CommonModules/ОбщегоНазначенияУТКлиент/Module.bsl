
#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтерактивныеДействия

// Функция разбития строки табличной части по количеству
Функция РазбитьСтрокуТЧ(ТЧ, ДанныеФормы, ИмяПоляКоличество = "", Заголовок = "", РазрешитьНулевоеКоличество = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
		ИмяПоляКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	ТекущаяСтрока	= ДанныеФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	ТекстЗаголовка	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, НСтр("en='Enter goods quantity in the new line';ru='Введите количество товара в новой строке'"));
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='To execute command, it is necessary to select line of tabular section.';ru='Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат Неопределено;
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] = 0
		И Не РазрешитьНулевоеКоличество Тогда
		ТекстНСТР = НСтр("en='It is impossible to break the line with a zero quantity.';ru='Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущаяСтрока[ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Пока Количество = Неопределено Цикл
			Количество = ТекущаяСтрока[ИмяПоляКоличество];
			ЧислоВведено = ВвестиЧисло(Количество, ТекстЗаголовка, 15, 3);
			
			Если Не ЧислоВведено Тогда
				Возврат Неопределено;
			ИначеЕсли Количество = 0
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстНСТР = НСтр("en='Quantity in new line can not be zero.';ru='Количество в новой строке не может быть равно нулю.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество < 0 Тогда
				ТекстНСТР = НСтр("en='Quantity in new line cannot be negative.';ru='Количество в новой строке не может быть отрицательным.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество > 0 Тогда
				ТекстНСТР = НСтр("en='Quantity in new line can not be positive.';ru='Количество в новой строке не может быть положительным.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество >  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстНСТР = НСтр("en='Quantity in new line can not be more than quantity in current.';ru='Количество в новой строке не может быть больше количества в текущей.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество <  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстНСТР = НСтр("en='Number in the new line cannot be less than the number in current.';ru='Количество в новой строке не может быть меньше количества в текущей.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			ИначеЕсли Количество =  ТекущаяСтрока[ИмяПоляКоличество]
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстНСТР = НСтр("en='Quantity in new line must be different from quantity in current.';ru='Количество в новой строке должно отличаться от количества в текущей.'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Количество = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Количество = 0;
	КонецЕсли;
		
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ИмяПоляКоличество]      = Количество;
	ТекущаяСтрока[ИмяПоляКоличество] 	= ТекущаяСтрока[ИмяПоляКоличество] - НоваяСтрока[ИмяПоляКоличество];
	
	ДанныеФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

// Функция проверяет возможность заполнения табличной части документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//	ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//	ПроверятьПроведенность - Булево - Необходимость проверки того, что документ не проведен
//
// Возвращаемое значение:
//	Булево - Признак возможности заполнения табличной части
//
Функция ВозможноЗаполнениеТабличнойЧасти(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ПроверятьПроведенность = Истина) Экспорт
	
	ЗаполнятьТабличнуюЧасть = Истина;
	
	Если ПроверятьПроведенность И Форма.Объект.Проведен Тогда
		
		КодОтвета = Вопрос(НСтр("en='Filling is only possible in the unposted document, cancel posting?';ru='Заполнение возможно только в непроведенном документе, отменить проведение?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Если Не Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
				ТекстНСТР = НСтр("en='Failed to cancel posting document';ru='Не удалось отменить проведение документа'");
				ПоказатьПредупреждение(, ТекстНСТР);
				ЗаполнятьТабличнуюЧасть = Ложь;
			КонецЕсли;
		Иначе
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Неопределено И ЗаполнятьТабличнуюЧасть И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстНСТР = НСтр("en='Table will be cleared, continue?';ru='Табличная часть будет очищена, продолжить?'");
		КодОтвета = Вопрос(ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Нет Тогда
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов <> Неопределено И ЗаполнятьТабличнуюЧасть Тогда
		ЗаполнятьТабличнуюЧасть = РеквизитыОбъектаЗаполнены(Форма.Объект, СтруктураРеквизитов);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть И Не Форма.Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ЗаполнятьТабличнуюЧасть;
	
КонецФункции

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Позволяет выбрать период из выпадающего списка
//
// Параметры:
//  Форма				- Форма - форма, в которой выполняется выбор периода
//  Элемент				- ЭлементФормы - элемент, рядом с которым нужно открыть выпадающий список
//	ВидПериода			- ПеречислениеСсылка.ДоступныеПериодыОтчета - вид выбираемого периода
//	ОбработчикВыбора	- ОписаниеОповещения - обработчик, расположенный в форме, который будет вызван после выбора
//
Процедура ВыбратьПериодИзСписка(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора) Экспорт
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОбщегоНазначенияУТКлиентСервер.НачалоПериодаОтчета(ВидПериода, ТекущаяДата());
	КонецЕсли;
	
	ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора);
	
КонецПроцедуры

Функция ВыбратьПериодОтчетаПоПараметрам(Форма, Элемент, СтандартнаяОбработка, ВидПериода, НачалоПериода)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	ВыбранныйПериод = Форма.ВыбратьИзСписка(Список, Элемент, ЭлементСписка);
	
	Если ВыбранныйПериод = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = Список.Количество() - 1 тогда
		ВыбранныйПериод = ВыбратьПериодОтчетаПоПараметрам(Форма, Элемент, СтандартнаяОбработка, ВидПериода, ВыбранныйПериод.Значение);
	КонецЕсли;
	
	Возврат ВыбранныйПериод;
	
КонецФункции

// Процедура вызывается при событии "Начало выбора" в бюджетировании
Процедура ПериодНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВидПериода, Период, НачалоПериода, КонецПериода) Экспорт
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ТекущаяДата());
	КонецЕсли;
	ВыбранныйПериод      = ВыбратьПериодОтчетаПоПараметрам(Форма, Элемент, СтандартнаяОбработка, ВидПериода, НачалоПериода);
	СтандартнаяОбработка = Ложь;
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранныйПериод.Представление;
	
	НачалоПериода = ВыбранныйПериод.Значение;
	КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, ВыбранныйПериод.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий
//
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Форма.Объект.Согласован = Ложь;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолеВнутриТаблицы(Форма, Элемент)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель;
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПолеВнутриТаблицы(Форма, Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

// Вызывается в формах документов и справочников для отказа от изменения значения реквизита.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// в механизме контроля несогласованных изменений.// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура ВернутьПредыдущееЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Данные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента];
		ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Таблица.ТекущиеДанные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяТаблицы][СтрокаМассива];
			Прервать;
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников для сохранения предыдущего значения элемента.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура СохранитьЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Возврат;
		Иначе
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента] = Данные[СтрокаМассива];
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

// Проверяет заполненность реквизитов, необходимых для копирования
//
// Параметры:
//	ТекущаяСтрока                    - Элемент табличной части, которую надо проверить на заполненность
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены
//
Функция ВозможноКопированиеСтрок(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='To execute command, it is necessary to select line of tabular section.';ru='Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается в формах документов и справочников при копировании строк.
// 
// Параметры:
//     КоличествоВыделенных          - количество выделенных строк табличной части
//
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоВыделенных) Экспорт
	
	ТекстНСТР = НСтр("en='(%КоличествоВыделенных%) lines copied to clipboard';ru='В буфер обмена скопировано строк (%КоличествоВыделенных%)'");
	ТекстНСТР = СтрЗаменить(ТекстНСТР, "%КоличествоВыделенных%", КоличествоВыделенных);
	
	ТекстЗаголовка = НСтр("en='Lines copied';ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстНСТР, БиблиотекаКартинок.Информация32);
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры //ОповеститьПользователяОКопированииСтрок()

// Вызывается в формах документов и справочников при вставке строк.
// 
// Параметры:
//     КоличествоВставленных         - количество вставленных строк в табличноую часть
//
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоВставленных) Экспорт
	
	ТекстНСТР = НСтр("en='From clipboard is inserted lines (%КоличествоВставленных%)';ru='Из буфера обмена вставлено строк (%КоличествоВставленных%)'");
	ТекстНСТР = СтрЗаменить(ТекстНСТР, "%КоличествоВставленных%", КоличествоВставленных);
	
	ТекстЗаголовка = НСтр("en='Rows inserted';ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстНСТР, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры //ОповеститьПользователяОВставкеСтрок()

#КонецОбласти

#Область РедакторированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//     ЭтаФорма              - Форма объекта
//     ИмяФормыРазблокировки - Имя формы разблокировки
//     ОповещениеОРазблокировке - Описание оповещения после разблокировки
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Форма, Знач ИмяФормыРазблокировки = "", ОповещениеОРазблокировке = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Форма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтрСоединить(МассивИмениФормы, ".");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",Форма);
		Если ОповещениеОРазблокировке <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОповещениеОРазблокировке",ОповещениеОРазблокировке);
		КонецЕсли; 
		Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыРазблокировки, 
			Новый Структура("Объект", Форма.Объект.Ссылка),
			,
			,
			,
			,
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура.
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		
		ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(Форма);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(Форма, ЗаблокированныеРеквизиты);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОРазблокировке") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОРазблокировке, Результат);
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыОбъектаЗаполнены(Объект, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			ТекстНСТР = НСтр("en='Field ""% 1"" is empty';ru='Поле ""%1"" не заполнено'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстНСТР,
				?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле = Элемент.Ключ;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

#Область РаботаСПериодомРегистрации

// Возвращает строковое представление периода.
//
// Параметры:
//  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
//  КалендарныйПериод - Строка - "Месяц" или "Квартал"
//
// Возвращаемое значение:
//  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации
//
&НаКлиенте
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") Экспорт

	Если КалендарныйПериод = "Месяц" Тогда
		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'")
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		Возврат ПредставлениеПериода(НачалоКвартала(ПериодРегистрации), КонецКвартала(ПериодРегистрации));
	КонецЕсли;

КонецФункции

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент              - Поле формы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации    - Дата       - Переменная, в которую помещается выбранное значение
//  ЭтаФорма             - УправляемаяФорма - Управляемая форма, в которой происходит событие "Начало выбора"
//  НачальноеЗначение    - Дата       - Начальная дата для выбора периода
//  КалендарныйПериод    - Строка     - "Месяц" или "Квартал" - шаг периода
//
&НаКлиенте
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") Экспорт

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для а = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение, КалендарныйПериод);
		Возврат;
	КонецЕсли;

	ПериодРегистрации = ВыбранныйЭлемент.Значение;

КонецПроцедуры

#КонецОбласти

#Область ВыборПериодаИзСписка

Процедура ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	ДополнительныеПараметры.Вставить("НачалоПериода", НачалоПериода);
	ДополнительныеПараметры.Вставить("Список", Список);
	ДополнительныеПараметры.Вставить("ОбработчикВыбора", ОбработчикВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

Процедура ВыбратьПериодОтчетаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 тогда
		ВыбратьПериодОтчета(ДополнительныеПараметры.Форма, 
							ДополнительныеПараметры.Элемент, 
							ДополнительныеПараметры.ВидПериода, 
							ВыбранныйПериод.Значение, 
							ДополнительныеПараметры.ОбработчикВыбора);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикВыбора, ВыбранныйПериод);
	
КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения.
// 
// Содержит код, используемый в варианте поставке ПРОФ, КОРП
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ФактическоеПосещениеПунктовПоДаннымМониторинга

// Процедура предназначена для заполнения документа данными по фактическому посещению пунктов
// согласно данным систем спутникового мониторинга.
//
Процедура ФактическоеПосещениеПунктовПоДаннымССМ(Знач Объект, Данные, АдресРезультата, 
	ЗаполнениеИзАРМКонтрольПеревозок = Ложь, ЗадаватьВопросОчищатьФактическиеДанные = Истина) Экспорт
	
	флОшибка = Ложь;
	ДанныеПоМаршрутномуДокументу = ПодготовитьСтрДанныхДляОпределенияФактПосещениеПунктовПоДаннымССМ(Объект,
		Данные, ЗаполнениеИзАРМКонтрольПеревозок, флОшибка);
		
	Если флОшибка Тогда
		ПоместитьВоВременноеХранилище(Новый Массив(), АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеПоМаршрутномуДокументу.Вставить("АдресРезультата", АдресРезультата);
	
	флОшибка = ПроверитьЗаполненостьНеобходимыхРеквизитов(ДанныеПоМаршрутномуДокументу.ТипОбъекта,
		ДанныеПоМаршрутномуДокументу.ТС, ДанныеПоМаршрутномуДокументу.ДатаС, ДанныеПоМаршрутномуДокументу.ДатаПо);
	Если флОшибка Тогда
		ПоместитьВоВременноеХранилище(Новый Массив(), АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	уатЗащищенныеФункцииСервер_проф.АнализФактическихКоординат(ДанныеПоМаршрутномуДокументу, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПоместитьВоВременноеХранилище(Новый Массив(), АдресРезультата);
		Возврат;
	КонецЕсли;
	
	флНеобходимаОчистка = ЗадаватьВопросОчищатьФактическиеДанные 
		И ПроверитьНеобходимостьОчисткиТЧ(ДанныеПоМаршрутномуДокументу.Данные);
	Если флНеобходимаОчистка Тогда 
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактПосещениеОтвет", ЭтотОбъект, ДанныеПоМаршрутномуДокументу);
		ТекстНСТР = НСтр("en='The actual time of visiting the destinations will be downloaded from the satellite monitoring data."
		"Before downloading the flag ""Completed"" and the actual execution time will be cleared in all rows."
		"Continue?';ru='Фактическое время посещения пунктов назначения будет загружено по данным спутникового мониторинга."
		"Перед загрузкой флаг ""Выполнен"" и фактическое время выполнения будет очищено во всех строках."
		"Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		
		ЗаполнитьФактПосещениеПоДаннымССМ(ДанныеПоМаршрутномуДокументу);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Функция - Уат использовать учет билетов и выручки
// 
// Возвращаемое значение:
//   - 
//
Функция ИспользоватьУчетБилетовИВыручки() Экспорт
	
	Возврат уатОбщегоНазначенияПовтИсп_проф.уатИспользоватьУчетБилетовИВыручки();
	
КонецФункции // уатИспользоватьУчетБилетовИВыручки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФактическоеПосещениеПунктовПоДаннымМониторинга

// Функция формирует структуру данных необходимых для выполнения процедуры 
// уатОбщегоНазначенияКлиент_уэ.ФактическоеПосещениеПунктовПоДаннымМониторинга
//
Функция ПодготовитьСтрДанныхДляОпределенияФактПосещениеПунктовПоДаннымССМ(Знач Объект, ДанныеОбъекта, ЗаполнениеИзАРМКонтрольПеревозок, флОшибка = Ложь)
	
	Ссылка		 = Объект.Ссылка;
	ТипОбъекта	 = ТипЗнч(Ссылка);
	
	ДанныеПоМаршрутномуДокументу = Новый Структура();

	Если НЕ ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") И НЕ ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист")Тогда
		ТекстНСТР = НСтр("en='This type of document is not supported.';ru='Данный вид документа не поддерживается.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		флОшибка = Истина;
		Возврат ДанныеПоМаршрутномуДокументу;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		ТС		 = Объект.ТранспортноеСредство;
		ДатаС	 = Объект.ДатаВыезда;
		ДатаПо	 = Объект.ДатаВозвращения;
	Иначе
		ТС		 = Объект.ТС;
		
		ПлановоеВремяМаршрутногоЛиста = уатОбщегоНазначения_проф.ПолучитьПлановоеВремяМаршрутногоЛиста(Ссылка);
		ДатаС	 = ПлановоеВремяМаршрутногоЛиста.ОтправлениеПлан;
		ДатаПо	 = ПлановоеВремяМаршрутногоЛиста.ПрибытиеПлан;
	КонецЕсли;
	
	УчетПланФактаВПутевыхЛистах = Ложь;
	Если ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		УчетПланФактаВПутевыхЛистах = уатОбщегоНазначения_проф.УчетПланФактаВПутевыхЛистах();
	КонецЕсли;
	Данные = Новый Массив();
	Для Каждого ТекСтрока Из ДанныеОбъекта Цикл
		СтруктураДанных = Новый Структура("МаршрутныйДокумент, НомерЕздки, НомерСтроки, Выполнен, ПрибытиеФакт, УбытиеФакт,
		|АдресПрибытия, АдресУбытия, ПрибытиеПлан, УбытиеПлан");
		Если ЗаполнениеИзАРМКонтрольПеревозок Тогда
			СтруктураДанных.МаршрутныйДокумент	 = Ссылка;
			СтруктураДанных.НомерЕздки			 = ТекСтрока.НомерЕздки;
			СтруктураДанных.НомерСтроки			 = ТекСтрока.НомерСтроки;
			СтруктураДанных.Выполнен			 = ТекСтрока.Выполнен;
			СтруктураДанных.ПрибытиеФакт		 = ТекСтрока.ПрибытиеФакт;
			СтруктураДанных.УбытиеФакт			 = ТекСтрока.УбытиеФакт;
			СтруктураДанных.АдресПрибытия		 = ТекСтрока.Пункт;
			СтруктураДанных.АдресУбытия			 = ТекСтрока.АдресУбытия;
			СтруктураДанных.ПрибытиеПлан		 = ТекСтрока.ПрибытиеПлан;
			СтруктураДанных.УбытиеПлан			 = ТекСтрока.УбытиеПлан;
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			СтруктураДанных.МаршрутныйДокумент	 = Ссылка;
			СтруктураДанных.НомерСтроки			 = ТекСтрока.GUIDСтроки;
			СтруктураДанных.Выполнен			 = ТекСтрока.Выполнен;
			СтруктураДанных.ПрибытиеФакт		 = ТекСтрока.ПрибытиеФакт;
			СтруктураДанных.УбытиеФакт			 = ТекСтрока.УбытиеФакт;
			СтруктураДанных.АдресПрибытия		 = ТекСтрока.Пункт;
			СтруктураДанных.ПрибытиеПлан		 = ТекСтрока.ПрибытиеПлан;
			СтруктураДанных.УбытиеПлан			 = ТекСтрока.УбытиеПлан;
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			СтруктураДанных.МаршрутныйДокумент	 = Ссылка;
			СтруктураДанных.НомерЕздки			 = ТекСтрока.НомерЕздки;
			СтруктураДанных.НомерСтроки			 = ТекСтрока.НомерСтроки;
			СтруктураДанных.Выполнен			 = ТекСтрока.Выполнено;
			Если УчетПланФактаВПутевыхЛистах Тогда
				СтруктураДанных.ПрибытиеФакт	 = ТекСтрока.ВремяПрибытияФакт;
				СтруктураДанных.УбытиеФакт		 = ТекСтрока.ВремяУбытияФакт;
				СтруктураДанных.ПрибытиеПлан	 = ТекСтрока.ВремяПрибытия;
				СтруктураДанных.УбытиеПлан		 = ТекСтрока.ВремяУбытия;
			Иначе
				СтруктураДанных.ПрибытиеФакт	 = ТекСтрока.ВремяПрибытия;
				СтруктураДанных.УбытиеФакт		 = ТекСтрока.ВремяУбытия;
			КонецЕсли;
			СтруктураДанных.АдресПрибытия		 = ТекСтрока.АдресПрибытия;
			СтруктураДанных.АдресУбытия			 = ТекСтрока.АдресУбытия;
		КонецЕсли;
		Данные.Добавить(СтруктураДанных);
	КонецЦикла;
	
	ДанныеПоМаршрутномуДокументу.Вставить("ТипОбъекта",						 ТипОбъекта);
	ДанныеПоМаршрутномуДокументу.Вставить("Ссылка",							 Ссылка);
	ДанныеПоМаршрутномуДокументу.Вставить("ТС",								 ТС);
	ДанныеПоМаршрутномуДокументу.Вставить("ДатаС",							 ДатаС);
	ДанныеПоМаршрутномуДокументу.Вставить("ДатаПо",							 ДатаПо);
	ДанныеПоМаршрутномуДокументу.Вставить("Данные",							 Данные);
	
	Возврат ДанныеПоМаршрутномуДокументу;

КонецФункции

// Функция проверяет необходимость очистки табличной части объекта.
//
// Параметры:
// Объект - ДокументОбъект.уатМаршрутныйЛист; ДокументОбъект.уатПутевойЛист - объект, для которого производим оптимизацию.
//
Функция ПроверитьНеобходимостьОчисткиТЧ(Данные)
	
	флНеобходимаОчистка	 = Ложь;
	Для Каждого ТекСтрока Из Данные Цикл 
		Если ТекСтрока.Выполнен Или ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) Или ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) Тогда 
			флНеобходимаОчистка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флНеобходимаОчистка;
	
КонецФункции

Функция ПроверитьЗаполненостьНеобходимыхРеквизитов(ТипОбъекта, ТС, ДатаВыезда, ДатаВозвращения)
	
	флОшибка = Ложь;
	
	Если Не ЗначениеЗаполнено(ТС) Тогда 
		ТекстНСТР = НСтр("en='You must select vehicle.';ru='Необходимо выбрать транспортное средство.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, флОшибка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТС, "ИсточникФактическихДанныхДляКартографии")) Тогда 
		ТекстНСТР = НСтр("en='Vehicle does not specify the source of actual data.';ru='У транспортного средства не указан источник фактических данных.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, флОшибка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВыезда) Тогда
		Если ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ТекстНСТР = НСтр("en='It is to fill planned date of departure on routing list.';ru='Необходимо заполнить плановую дату отправления по маршрутному листу.'");
		Иначе
			ТекстНСТР = НСтр("en='It is necessary to specify date of departure on waybill.';ru='Необходимо указать дату выезда по путевому листу.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, флОшибка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВозвращения) Тогда 
		Если ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ТекстНСТР = НСтр("en='It is necessary to fill planned date of arrival on routing list.';ru='Необходимо заполнить плановую дату прибытия по маршрутному листу.'");
		Иначе
			ТекстНСТР = НСтр("en='It is necessary to specify return date on waybill.';ru='Необходимо указать дату возвращения по путевому листу.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, флОшибка);
	КонецЕсли;
	
	Если ДатаВозвращения <= ДатаВыезда Тогда 
		Если ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ТекстНСТР = НСтр("en='Arrival date cannot be less than departure date.';ru='Дата прибытия не может быть меньше даты отправления.'");
		Иначе
			ТекстНСТР = НСтр("en='Return date cannot be less than departure date.';ru='Дата возвращения не может быть меньше даты выезда.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, флОшибка);
	КонецЕсли;
	
	Возврат флОшибка;
	
КонецФункции

Процедура ЗаполнитьФактПосещениеОтвет(РезультатВопроса, ДанныеПоМаршрутномуДокументу) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоместитьВоВременноеХранилище(Новый Массив(), ДанныеПоМаршрутномуДокументу.АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Данные = ДанныеПоМаршрутномуДокументу.Данные;
	
	Для Каждого ТекСтрока Из Данные Цикл 
		ТекСтрока.Выполнен     = Ложь;
		ТекСтрока.ПрибытиеФакт = '00010101000000';
		ТекСтрока.УбытиеФакт   = '00010101000000';
	КонецЦикла;
	
	ЗаполнитьФактПосещениеПоДаннымССМ(ДанныеПоМаршрутномуДокументу);
	
КонецПроцедуры

Процедура ЗаполнитьФактПосещениеПоДаннымССМ(ДанныеПоМаршрутномуДокументу)
	
	ТекстОшибки = "";
	
	Если Не уатЗащищенныеФункцииСервер_проф.ПолучитьФактическоеПосещениеПунктовПоДаннымGPS(ДанныеПоМаршрутномуДокументу, ТекстОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если ДанныеПоМаршрутномуДокументу.АдресРезультата = Неопределено Тогда
			уатОбщегоНазначения_проф.СохранитьИзмененияВДокументе(ДанныеПоМаршрутномуДокументу.МаршрутныйДокумент, ДанныеПоМаршрутномуДокументу);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Переопределяет открытие формы подбора товаров в обработке ПечатьЭтикетокИЦенников.
//
// Параметры:
//  ПараметрыОткрытия - Структура:
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Форма владелец.
//   * ОбработчикЗакрытия - ОписаниеОповещения - оповещение о закрытии формы.
//   * РежимБлокировки - РежимОткрытияОкнаФормы - режим блокировки окна формы владельца.
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектБПО - торговый объект для определения свойств товаров.
//
Процедура ОткрытьФормуПодбораПечатиЭтикеток(ПараметрыОткрытия) Экспорт
	
	ЗаголовокПодбора = СтрШаблон(НСтр("en='Selection products and services in Sticker printing (Goods)';ru='Подбор номенклатуры в Печать этикеток (Товары)'"), );
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЕстьКоличество",    Истина);
	ПараметрыПодбора.Вставить("Заголовок",         ЗаголовокПодбора);
	ПараметрыПодбора.Вставить("ИмяТаблицы",        "Товары");
	ПараметрыПодбора.Вставить("ПоказыватьОстатки", Истина);
	ПараметрыПодбора.Вставить("Организация",       Неопределено);
		
	уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ПараметрыОткрытия.ФормаВладелец, ПараметрыПодбора,
		ПараметрыОткрытия.ФормаВладелец.УникальныйИдентификатор);
	
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПечатиЭтикеток(Товары, ЗначениеВыбора) Экспорт
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = уатОбщегоНазначения_проф.ПолучитьТоварыИзВременногоХранилищаПечатьЭтикеток(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = уатОбщегоНазначения_проф.ПолучитьТоварыИзВременногоХранилищаПечатьЭтикеток(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;

	Для Каждого ТекСтрока из МассивТоваров Цикл
		ДобавитьНоменклатуруВТЧПечатьЭтикеток(Товары, ТекСтрока.Номенклатура, ТекСтрока.Количество);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьНоменклатуруВТЧПечатьЭтикеток(Товары, Номенклатура, Количество = 1) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
		
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура("НоменклатураБПО", Номенклатура);
	
	МассивСтрок = Товары.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Выбран = Истина;
		СтрокаТабличнойЧасти.НоменклатураБПО = Номенклатура;
		СтрокаТабличнойЧасти.Количество      = Количество;
		
		мсвШтрихкоды = уатЗащищенныеФункцииСервер_проф.ПолучитьШтрихкодыОбъекта(СтрокаТабличнойЧасти.НоменклатураБПО);
		Если мсвШтрихкоды.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.Штрихкод = мсвШтрихкоды[0];
		Иначе
			СтрокаТабличнойЧасти.Штрихкод = "";
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.НоменклатураБПО,
		"ПечатьЭтикетокДляКаждойЕдиницыНоменклатуры") = ЛОЖЬ Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

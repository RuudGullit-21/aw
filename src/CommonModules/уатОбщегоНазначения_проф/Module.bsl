////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения.
// 
// Содержит код, используемый в варианте поставке ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ГСМ

// Возвращает результат запроса по остаткам ГСМ по партиям 
// 
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ОстаткиГСМ.Колонна КАК Колонна,
	|	ОстаткиГСМ.Организация КАК Организация,
	|	ОстаткиГСМ.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр,
	|	ОстаткиГСМ.СуммаНДСОстаток КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|		&Момент,
	|		ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0
	|";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	// получаем аналоги
	тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ);
	
	// добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Колонна");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Организация");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Подразделение");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СуммаНДС");
	
	Если ПоДокументу Тогда
		// Заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаЗакрытия КАК Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатПутевойЛистРасходГСМ.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен", Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			РезультатЗапросаПоГСМ.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли уатРаботаСМетаданными.уатЕстьДокумент("уатТехнологическийПутевойЛист")
			И ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	&ДатаЗакрытия КАК Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатТехнологическийПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатПутевойЛистРасходГСМ.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			РезультатЗапросаПоГСМ.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаВозвращения) Тогда
				Если ДокументОбъект.ДатаВозвращения > ДокументОбъект.ДатаВыезда Тогда
					РезультатЗапросаПоГСМ.УстановитьПараметр("ДатаЗакрытия", ДокументОбъект.ДатаВозвращения-1);
					МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаВозвращения-1, ВидГраницы.Исключая);
				Иначе
					РезультатЗапросаПоГСМ.УстановитьПараметр("ДатаЗакрытия", ДокументОбъект.ДатаВозвращения);
					МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаВозвращения, ВидГраницы.Исключая);
				КонецЕсли;
			КонецЕсли;
			
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
			
			тблВыборкаЗапросаПоГСМ = ДокументОбъект.РасходГСМ.Выгрузить();
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Дата");
			тблВыборкаЗапросаПоГСМ.Колонки.РасходПоФакту.Имя = "СписываемоеКоличество";
			тблВыборкаЗапросаПоГСМ.ЗаполнитьЗначения(ДокументОбъект.ДатаЗакрытия, "Дата");
			// добавление колонны
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Колонна");
			Для Каждого ТекСтрока Из тблВыборкаЗапросаПоГСМ Цикл
				ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ДокументОбъект.МоментВремени()).Колонна;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатСливГСМ.ТС = уатМестонахождениеТС.ТС
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент", 1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		КонецЕсли;	
		
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		// Перебираем строки ГСМ, который надо списать
		Для Каждого ВыборкаЗапросаПоГСМ Из тблВыборкаЗапросаПоГСМ Цикл
			НадоСписатьКоличество = ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			// Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			ВыборкаЗапросаПартииГСМ		= РезультатЗапросаПартииГСМ.Выбрать();
			
			//КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(),
			//	ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
			//		+ ", остаток: " + КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				НадоСписатьСуммуНДС = 0;
				
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
						НадоСписатьСуммуНДС = мТаблицаДляСуммы.Итог("СуммаНДС") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость    = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
							мСуммаНДС     = Мин(НадоСписатьСуммуНДС, ВыборкаЗапросаПартииГСМ.СуммаНДС);
						Иначе
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 Или ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость    = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
								мСуммаНДС     = ВыборкаЗапросаПартииГСМ.СуммаНДС;
							Иначе	
								мСтоимость    = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.Стоимость / ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СтоимостьУпр / ВыборкаЗапросаПартииГСМ.Количество;
								// мСтоимостьУпр = мСтоимость;
								мСуммаНДС     = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СуммаНДС / ВыборкаЗапросаПартииГСМ.Количество;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Колонна = ВыборкаЗапросаПартииГСМ.Колонна;
							НоваяСтрока.Организация = ВыборкаЗапросаПартииГСМ.Организация;
							НоваяСтрока.Подразделение = ВыборкаЗапросаПартииГСМ.Подразделение;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							НоваяСтрока.СуммаНДС = мСуммаНДС;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") Тогда
								
								НоваяСтрока.Склад		= ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура= ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		= мСтоимость;
								НоваяСтрока.Коэффициент	= ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
						НадоСписатьСуммуНДС = НадоСписатьСуммуНДС - мСуммаНДС;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						НоваяСтрока.СуммаНДС = НадоСписатьСуммуНДС;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		// Заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Колонна,
		|	уатОстаткиГСМнаТС.Организация,
		|	уатОстаткиГСМнаТС.Подразделение,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр,
		|	уатОстаткиГСМнаТС.СуммаНДС
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		// Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
			НоваяСтрока.Организация = ВыборкаЗапросаПоГСМ.Организация;
			НоваяСтрока.Подразделение = ВыборкаЗапросаПоГСМ.Подразделение;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
			НоваяСтрока.СуммаНДС = ВыборкаЗапросаПоГСМ.СуммаНДС;
		КонецЦикла; 
		
	КонецЕсли;
	
	// округляем до точности хранения остатков ГСМ в ТС
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из ТаблицаДляСписанияГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

// Функция возвращает выборку результата запроса со структурой норм расхода ГСМ
// на указанную дату среза
//
Функция ПолучитьНормыРасходаГСМ(ТС, ГСМ, ПараметрыРасчета) ЭКСПОРТ
	
	Организация = ПараметрыРасчета.Организация;
	 
	УстановитьПривилегированныйРежим(Истина);
	
	// Список ГСМ с учетом аналогов.
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	
	ТаблицаГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
		СписокГСМ.Добавить(ТекСтрока.Аналог);
	КонецЦикла;
	
	// Запрос по ТС.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &ТС
	|		    И РаботаНаДвухВидахТопливаОдновременно = &РаботаНаДвухВидахТопливаОдновременно
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.ДатаРасчета);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("РаботаНаДвухВидахТопливаОдновременно", ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно);
	тблНормыТС = Запрос.Выполнить().Выгрузить();
	
	// Отбор по организации - чистим лишние строки.
	Сч = тблНормыТС.Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		
		ТекСтрока = тблНормыТС[сч];
		Если Не ЗначениеЗаполнено(ПараметрыРасчета.Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			тблНормыТС.Удалить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыРасчета.Организация) И ЗначениеЗаполнено(ТекСтрока.Организация)
			И ПараметрыРасчета.Организация <> ТекСтрока.Организация Тогда
			тблНормыТС.Удалить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыРасчета.Организация) И Не ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			СтрокаПоискаДоп = тблНормыТС.Найти(ПараметрыРасчета.Организация, "Организация");
			Если СтрокаПоискаДоп <> Неопределено И СтрокаПоискаДоп <> ТекСтрока Тогда
				тблНормыТС.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если по конкретному ТС не найдены нормы ГСМ, то ищем нормы по модели ТС.
	Если тблНормыТС.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НормыРасходаГСМ.*
		|ИЗ
		|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
		|		&Период,
		|		МодельТС = &МодельТС
		|		    И РаботаНаДвухВидахТопливаОдновременно = &РаботаНаДвухВидахТопливаОдновременно
		|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
		Запрос.УстановитьПараметр("Период", ПараметрыРасчета.ДатаРасчета);
		Запрос.УстановитьПараметр("МодельТС", ТС.Модель);
		Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
		Запрос.УстановитьПараметр("РаботаНаДвухВидахТопливаОдновременно", ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно);
		тблНормыТС = Запрос.Выполнить().Выгрузить();
	
		// Отбор по организации - чистим лишние строки.
		Сч = тблНормыТС.Количество();
		Пока Сч >= 1 Цикл
			Сч = Сч - 1;
			
			ТекСтрока = тблНормыТС[сч];
			Если Не ЗначениеЗаполнено(ПараметрыРасчета.Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				тблНормыТС.Удалить(ТекСтрока);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыРасчета.Организация) И ЗначениеЗаполнено(ТекСтрока.Организация)
				И ПараметрыРасчета.Организация <> ТекСтрока.Организация Тогда
				тблНормыТС.Удалить(ТекСтрока);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыРасчета.Организация) И Не ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				СтрокаПоискаДоп = тблНормыТС.Найти(ПараметрыРасчета.Организация, "Организация");
				Если СтрокаПоискаДоп <> Неопределено И СтрокаПоискаДоп <> ТекСтрока Тогда
					тблНормыТС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличНорм = тблНормыТС.Количество();
	
	НормаРасхода = Новый Структура;
	
	Для Каждого ТекКолонка Из тблНормыТС.Колонки Цикл
		Если КоличНорм = 0 ИЛИ НЕ ЗначениеЗаполнено(тблНормыТС[0][ТекКолонка.Имя]) Тогда
			Если ТекКолонка.Имя = "ГСМ" Тогда
				НормаРасхода.Вставить("ГСМ", Справочники.Номенклатура.ПустаяСсылка());
			ИначеЕсли ТекКолонка.Имя = "МодельТС" Тогда
				НормаРасхода.Вставить("МодельТС", Неопределено);
			ИначеЕсли ТекКолонка.Имя = "Организация" Тогда
				НормаРасхода.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ИначеЕсли СтрНайти(ТекКолонка.Имя, "СпециальнаяРабота") <> 0 Тогда
				НормаРасхода.Вставить(ТекКолонка.Имя, Справочники.уатПараметрыВыработки.ПустаяСсылка());
			ИначеЕсли ТекКолонка.Имя = "УчитыватьПростоиДляРасчетаНормыМоточасов" Тогда
				НормаРасхода.Вставить("УчитыватьПростоиДляРасчетаНормыМоточасов", Ложь);
			ИначеЕсли ТекКолонка.Имя = "АлгоритмРасчета" Тогда
				НормаРасхода.Вставить("АлгоритмРасчета", Новый ХранилищеЗначения(Неопределено));
			Иначе
				НормаРасхода.Вставить(ТекКолонка.Имя, 0);
			КонецЕсли;
		Иначе
			НормаРасхода.Вставить(ТекКолонка.Имя, ?(ЗначениеЗаполнено(тблНормыТС[0][ТекКолонка.Имя]), тблНормыТС[0][ТекКолонка.Имя], 0));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ЭтоПЛ Тогда
		НормаРасхода.СезоннаяНадбавка = 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НормаРасхода;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Функция возвращает строку для подстановки в условие запроса и от вида сравнения 
// заполняет структуру параметров.
// Если не задан параметр ПутьКДанным, то надо заменить "#" на имя поля,
//
// Параметры:
//	СтрокаОтбора - ЭлементОтбора - текущая строка отбора
//	Параметры	 - Структура	 - Структура параметров запроса или построителя запроса
//	ПутьКДанным	 - Строка		 - Путь к полю в запросе (ИмяТаблицы.Номенклатура.Код)
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса
//
Функция СформироватьСтрокуОтбора(СтрокаОтбора, Параметры=Неопределено, ПутьКДанным="#") Экспорт
	
	СтрокаУсловия="";
	Попытка
		ИмяПараметра	= СтрЗаменить(СтрокаОтбора.ПутьКДанным,".", "");
		ВидСравн		= СтрокаОтбора.ВидСравнения;
	Исключение
		Возврат СтрокаУсловия;
	КонецПопытки;
	
	Если ТипЗнч(Параметры)<>Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ПутьКДанным)<>Тип("Строка") Тогда
		ПутьКДанным = "#";
	КонецЕсли;
	
	ТипПараметра = 1;
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = ПутьКДанным+" = &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = ПутьКДанным+" <> &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = ПутьКДанным+" В (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = ПутьКДанным+">&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+">=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = ПутьКДанным+"<&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+"<=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Содержит Тогда
		СтрокаУсловия = ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.НеСодержит Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра+")";
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.Интервал Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	КонецЕсли;
	
	Если ТипПараметра=1 Тогда
		Параметры.Вставить(ИмяПараметра, СтрокаОтбора.Значение);
	ИначеЕсли ТипПараметра=2 Тогда
		Параметры.Вставить(ИмяПараметра, "%"+СтрокаОтбора.Значение+"%");
	ИначеЕсли ТипПараметра=3 Тогда
		Параметры.Вставить(ИмяПараметра+"С", СтрокаОтбора.ЗначениеС);
		Параметры.Вставить(ИмяПараметра+"По", СтрокаОтбора.ЗначениеПо);
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // отСформироватьСтрокуОтбора()

#КонецОбласти

#Область ПутевыеЛисты

// Функция возвращает Истина в случае использования ТС какой-либо системы GPS
//
// Параметры:
//  ТС - Ссылка на транспортное средство
Функция уатПроверитьИспользованиеGPS(ТС) ЭКСПОРТ
	
	флИспользование = Ложь;
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(ТС) Тогда
		Возврат флИспользование;
	КонецЕсли;
	
	Если Константы.уатИспользоватьЦСМ.Получить() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ItobПривязкиТрекеровСрезПоследних.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(, Объект = &ТС) КАК ItobПривязкиТрекеровСрезПоследних
		|ГДЕ
		|	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен";
		Запрос.УстановитьПараметр("ТС", ТС);
		Результат = Запрос.Выполнить().Выгрузить();
		
		флИспользование = (Результат.Количество() > 0);
	КонецЕсли;
	
	Если Не флИспользование Тогда
		Если Константы.уатИспользоватьOmnicomm.Получить()
				Или Константы.уатИспользоватьWialon.Получить()
				Или Константы.уатИспользоватьАвтоГРАФ.Получить()
				Или Константы.уатИспользоватьСКАУТ.Получить() Тогда
			
			флИспользование = ЗначениеЗаполнено(ТС.ИДвСистемеНавигации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат флИспользование;
	
КонецФункции

// Обработчик регламентного задания ФормированиеТехнологическихПЛ
//
Процедура уатАвтоматическоеСозданиеТехнологическихПЛ() Экспорт
	ПараметрыСоздания = Константы.уатПараметрыРеглЗаданияАвтосозданиеТехПЛ.Получить().Получить();
	
	Если ПараметрыСоздания = Неопределено Тогда
		ПараметрыСоздания = Новый Структура;
	КонецЕсли;
	ПараметрыСоздания.Вставить("ВидПЛприПоискеПЛдляЗаправки", 1);
	ПараметрыСоздания.Вставить("ЭтоРегламентноеЗадание", Истина);
	
	СоздатьТехнологическиеПЛ(ПараметрыСоздания);
КонецПроцедуры

// Процедура создает технологические ПЛ и связанные заправки ГСМ, согласно входящей структуре параметров
//
Процедура СоздатьТехнологическиеПЛ(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("СозданныеДокументы") Тогда
		СтруктураПараметров.Вставить("СозданныеДокументы", Новый Массив);
	КонецЕсли;
		
	Если НЕ СтруктураПараметров.Свойство("ТС") Тогда
		СтруктураПараметров.Вставить("ТС", СписокТСДляАвтоформированияТехПЛ());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("РасчетФактРасходаГСМ") Тогда
		СтруктураПараметров.Вставить("РасчетФактРасходаГСМ", Перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("СозданиеЗаправокГСМ") Тогда
		СтруктураПараметров.Вставить("ИспользоватьДанныеПЦ", СтруктураПараметров.СозданиеЗаправокГСМ = 2 ИЛИ СтруктураПараметров.СозданиеЗаправокГСМ = 3);
		СтруктураПараметров.Вставить("ИспользоватьДанныеССМ", СтруктураПараметров.СозданиеЗаправокГСМ = 1 ИЛИ СтруктураПараметров.СозданиеЗаправокГСМ = 3);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ИспользоватьДанныеПЦ") Тогда
		СтруктураПараметров.Вставить("ИспользоватьДанныеПЦ", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ИспользоватьДанныеССМ") Тогда
		СтруктураПараметров.Вставить("ИспользоватьДанныеССМ", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("АЗСМониторинг") Тогда
		СтруктураПараметров.Вставить("АЗСМониторинг", Справочники.уатАЗС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидЗаправкиМониторинг") Тогда
		СтруктураПараметров.Вставить("ВидЗаправкиМониторинг", Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ДатаНач") Тогда
		СтруктураПараметров.Вставить("ДатаНач", НачалоДня(ТекущаяДата()-24*3600));
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ДатаКон") Тогда
		СтруктураПараметров.Вставить("ДатаКон", НачалоДня(ТекущаяДата()-24*3600));
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ЭтоРегламентноеЗадание") Тогда
		СтруктураПараметров.Вставить("ЭтоРегламентноеЗадание", Ложь);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("СообщенияОбОшибках") Тогда
		СтруктураПараметров.Вставить("СообщенияОбОшибках", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("РасчетИтогов") Тогда
		СтруктураПараметров.Вставить("РасчетИтогов", Ложь);
	КонецЕсли;
	
	// Если создание заправок не нужно, то сразу проводим документ
	// если нужно, то просто записываем,
	// проведение будет выполняться после создания заправок, чтобы исключить отрицательные остатки
	Если СтруктураПараметров.СозданиеЗаправокГСМ = 0 Тогда
		мРежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		мРежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	КоличТПЛ = ((НачалоДня(СтруктураПараметров.ДатаКон) - НачалоДня(СтруктураПараметров.ДатаНач))/(24*3600) + 1) * СтруктураПараметров.ТС.Количество();
	СчТПЛ = 0;
	тблСозданныеТПЛ = ПолучитьСозданныеТПЛ(СтруктураПараметров);
	
	ТекДата = СтруктураПараметров.ДатаНач;
	Пока ТекДата <= СтруктураПараметров.ДатаКон Цикл
		Для Каждого ТекТС Из СтруктураПараметров.ТС Цикл
			СчТПЛ = СчТПЛ + 1;
			
			ТекстСообщения = "Формирование документов ""Технологический путевой лист""";
			ДлительныеОперации.СообщитьПрогресс(Окр(СчТПЛ/КоличТПЛ*100), ТекстСообщения);
			
			МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекТС);
			
			// Проверка на уже созданные ТПЛ по соответствию ТС и интервала ТПЛ.
			// Если ТПЛ существует, то новый ТПЛ не создаётся
			СуществующийТПЛ = НайтиСозданныйТПЛ(тблСозданныеТПЛ, ТекДата, ТекТС, МестонахождениеТС);
			Если ЗначениеЗаполнено(СуществующийТПЛ) Тогда
				ТекстОшибки = СтрШаблон("Для ТС ""%1"" на дату %2 найден уже созданный ""%3""",
					ТекТС, Формат(ТекДата, "ДФ=dd.MM.yyyy"), СуществующийТПЛ);
				СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
				Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
					ЗаписьЖурналаРегистрации(
						"Документ. " + ?(мРежимЗаписи = РежимЗаписиДокумента.Запись, "Запись", "Проведение"),
						УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
						СуществующийТПЛ,
						ТекстОшибки);
				КонецЕсли;
				
				Продолжить;	
			КонецЕсли;
			
			НовыйТПЛ = Документы.уатТехнологическийПутевойЛист.СоздатьДокумент();
			НовыйТПЛ.Дата = ТекДата;
			НовыйТПЛ.Ответственный = СтруктураПараметров.Ответственный;
			
			// в фоновом задании пользователь не определен
			//уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(НовыйТПЛ, ПользователиКлиентСервер.АвторизованныйПользователь());
			
			НовыйТПЛ.ТС = ТекТС;
			НовыйТПЛ.Организация   = МестонахождениеТС.Организация;
			НовыйТПЛ.Подразделение = МестонахождениеТС.Подразделение;
			
			уатПутевыеЛисты.УстановитьДатыВыездаВозвращения(НовыйТПЛ, Истина);
			НовыйТПЛ.Дата = НовыйТПЛ.ДатаВыезда;
			
			СтруктураОбъектовНастроек = Новый Структура("Организация, Подразделение");
			ЗаполнитьЗначенияСвойств(СтруктураОбъектовНастроек, НовыйТПЛ);
			
			//НовыйТПЛ.РасчетФактРасходаГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			//	ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
			НовыйТПЛ.РасчетФактРасходаГСМ = СтруктураПараметров.РасчетФактРасходаГСМ;
			
			НовыйТПЛ.ИнициализацияДанныхАвтомобиля();
			
			НовыйТПЛ.ОдометрВозвращения = ПолучитьОдометрВозвращенияТСПоДаннымМониторинга(НовыйТПЛ);
			Если ЗначениеЗаполнено(НовыйТПЛ.ОдометрВозвращения) Тогда
				НовыйТПЛ.ПробегПоGPS = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(НовыйТПЛ.ОдометрВыезда, НовыйТПЛ.ОдометрВозвращения);
			Иначе
				НовыйТПЛ.ПробегПоGPS = 0;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
				уатОбщегоНазначения.уатНайтиПланЗатрат(НовыйТПЛ.ПланЗатрат, НовыйТПЛ.Организация, НовыйТПЛ.ТС, НовыйТПЛ.ТС.Колонна);
			КонецЕсли;
			
			Если СтруктураПараметров.СозданиеЗаправокГСМ <> 0 Тогда
				НовыйТПЛ.УчитыватьГСМ = Истина;
			КонецЕсли;
			
			АвтообновлениеПЛпоGPS = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, 
				ПланыВидовХарактеристик.уатПраваИНастройки.АвтообновлениеПЛпоGPS);
			Если НЕ АвтообновлениеПЛпоGPS Тогда
				ЗаполнитьРасходГСМПоДаннымМониторинга(НовыйТПЛ);
			КонецЕсли;
			
			Если СтруктураПараметров.РасчетИтогов Тогда
				Попытка
					флОтказ = Истина;
					НовыйТПЛ.РасчетИтогов(флОтказ, Ложь);
				Исключение
					ТекстСообщения = СтрШаблон("Ошибка при расчете итогов в документе ""%2""", НовыйТПЛ);
					СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстСообщения);
					Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
						ЗаписьЖурналаРегистрации("Расчет итогов в технологическом ПЛ после расчета ГСМ",
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
						НовыйТПЛ,
						ТекстСообщения + ОписаниеОшибки());
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
						
			Попытка
				НовыйТПЛ.Записать(мРежимЗаписи);
				СтруктураПараметров.СозданныеДокументы.Добавить(НовыйТПЛ.Ссылка);
			Исключение
				ТекстОшибки = СтрШаблон("Ошибка при записи документа ""%1""", НовыйТПЛ);
				СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
				Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
					ЗаписьЖурналаРегистрации("Документ. " + ?(мРежимЗаписи = РежимЗаписиДокумента.Запись, "Запись", "Проведение"),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
						НовыйТПЛ,
						ТекстОшибки + ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		ТекДата = ТекДата + 24*3600;
	КонецЦикла;

	// загрузка заправок ГСМ по данным ПЦ и мониторинга и "привязка" их к созданным ТПЛ
	Если СтруктураПараметров.ИспользоватьДанныеПЦ ИЛИ СтруктураПараметров.ИспользоватьДанныеССМ Тогда
		СтруктураПараметров.Вставить("АвтосозданиеТПЛ", Истина);
		уатЗагрузкаПЦ.СоздатьЗаправкиГСМпоДаннымПЦиССМ(СтруктураПараметров, АдресРезультата);
		
		// проведение ТПЛ после создания заправок
		КоличТПЛ = СтруктураПараметров.СозданныеДокументы.Количество();
		СчТПЛ = 0;
		Для Каждого ТекДок Из СтруктураПараметров.СозданныеДокументы Цикл
			СчТПЛ = СчТПЛ + 1;
			
			ТекстСообщения = "Проведение документов ""Технологический путевой лист"" после создания Заправок ГСМ";
			ДлительныеОперации.СообщитьПрогресс(Окр(СчТПЛ/КоличТПЛ*100), ТекстСообщения);
			
			Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
				Попытка
					ТекДок.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = СтрШаблон("Ошибка при проведении документа ""%1""", ТекДок);
					СтруктураПараметров.СообщенияОбОшибках.Добавить(ТекстОшибки);
					Если СтруктураПараметров.ЭтоРегламентноеЗадание Тогда
						ЗаписьЖурналаРегистрации("Документ. Проведение",
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ,
							ТекДок,
							ТекстОшибки + ОписаниеОшибки());
					КонецЕсли;
			КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ОбработанныеДокументы, ПроцентВыполнения, СообщенияОбОшибках",
			"", СтруктураПараметров.СозданныеДокументы, 100, СтруктураПараметров.СообщенияОбОшибках),
			АдресРезультата);
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает список ТС, по которым осуществляется автосоздание ТПЛ
//
Функция СписокТСДляАвтоформированияТехПЛ() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ПометкаУдаления
	|	И НЕ уатТС.ЭтоГруппа
	|	И уатТС.ИспользоватьПриАвтоматическомСозданииТехПЛ");
	мсвТС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мсвТС;
КонецФункции

// Функция получает значение одометра возвращения ПЛ по данным мониторинга
//
Функция ПолучитьОдометрВозвращенияТСПоДаннымМониторинга(ДокументОбъект)
	
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("ТС",      ДокументОбъект.ТС);
	//Запрос.УстановитьПараметр("ДатаНач", ДокументОбъект.ДатаВыезда);
	//Запрос.УстановитьПараметр("ДатаКон", ДокументОбъект.ДатаВозвращения);
	//
	//Если ТС.ИспользоватьДанныеCANшиныОдометр Тогда
	//	Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	уатПробегРасходПоМониторингу.ЗначениеОдометра КАК Пробег
	//	|ИЗ
	//	|	РегистрСведений.уатПробегРасходПоМониторингу.СрезПоследних(&ДатаКон, ТС = &ТС) КАК уатПробегРасходПоМониторингу";
	//Иначе
	//	Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЕСТЬNULL(СУММА(уатПробегРасходПоМониторингу.Пробег), 0) КАК Пробег
	//	|ИЗ
	//	|	РегистрСведений.уатПробегРасходПоМониторингу КАК уатПробегРасходПоМониторингу
	//	|ГДЕ
	//	|	уатПробегРасходПоМониторингу.Период МЕЖДУ &ДатаНач И &ДатаКон
	//	|	И уатПробегРасходПоМониторингу.ТС = &ТС";
	//КонецЕсли;
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	Если ДокументОбъект.ТС.ИспользоватьДанныеCANшиныОдометр Тогда
	//		Возврат Выборка.Пробег;
	//	Иначе
	//		Возврат ДокументОбъект.ОдометрВыезда + Выборка.Пробег;
	//	КонецЕсли;
	//Иначе
	//	Возврат ДокументОбъект.ОдометрВыезда;
	//КонецЕсли;
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",          ДокументОбъект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство", ДокументОбъект.ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда",           ДокументОбъект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",      ДокументОбъект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",      ДокументОбъект.ОдометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения", ДокументОбъект.ОдометрВозвращения);
	ОбъектСтруктура.Вставить("Прицепы",              Новый Массив);
		
	РезультатСтруктура = Новый Структура;
	
	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		Возврат РезультатСтруктура.СчетчикВозвращения;
	Иначе
		Возврат ДокументОбъект.ОдометрВыезда;
	КонецЕсли;
КонецФункции

// Функция получает значение расхода ГСМ в ПЛ по данным мониторинга
// здесь используются только данные регистра сведений уатПробегРасходПоМониторингу
Процедура ЗаполнитьРасходГСМПоДаннымМониторинга(ТПЛобъект) Экспорт
	Для Каждого СтрокаРасхода Из ТПЛобъект.РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС) И ЗначениеЗаполнено(ТекОсновноеТопливо) И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТС",      СтрокаРасхода.ТС);
			Запрос.УстановитьПараметр("ДатаНач", ТПЛобъект.ДатаВыезда);
			Запрос.УстановитьПараметр("ДатаКон", ТПЛобъект.ДатаВозвращения);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(уатПробегРасходПоМониторингу.РасходТоплива) КАК РасходТоплива
			|ИЗ
			|	РегистрСведений.уатПробегРасходПоМониторингу КАК уатПробегРасходПоМониторингу
			|ГДЕ
			|	уатПробегРасходПоМониторингу.Период МЕЖДУ &ДатаНач И &ДатаКон
			|	И уатПробегРасходПоМониторингу.ТС = &ТС";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				СтрокаРасхода.РасходПоGPS = Выборка.РасходТоплива;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция получает таблицу созданных ТПЛ по ТС за указанный период
//
Функция ПолучитьСозданныеТПЛ(СтруктураПараметров)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТехнологическийПутевойЛист.Ссылка КАК Ссылка,
	|	уатТехнологическийПутевойЛист.ТС КАК ТС,
	|	уатТехнологическийПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатТехнологическийПутевойЛист.ДатаВозвращения КАК ДатаВозвращения
	|ИЗ
	|	Документ.уатТехнологическийПутевойЛист КАК уатТехнологическийПутевойЛист
	|ГДЕ
	|	НЕ уатТехнологическийПутевойЛист.ПометкаУдаления
	|	И уатТехнологическийПутевойЛист.ТС В(&мсвТС)
	|	И уатТехнологическийПутевойЛист.Дата МЕЖДУ &ДатаНач И &ДатаКон");
	//Если СтруктураПараметров.СозданиеЗаправокГСМ = 0 Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	//		"НЕ уатТехнологическийПутевойЛист.ПометкаУдаления", "уатТехнологическийПутевойЛист.Проведен");
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("мсвТС",   СтруктураПараметров.ТС);
	Запрос.УстановитьПараметр("ДатаНач", СтруктураПараметров.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(СтруктураПараметров.ДатаКон));
		
	тблТПЛ = Запрос.Выполнить().Выгрузить();
	
	Возврат тблТПЛ;
КонецФункции

// Функция ищет ТПЛ в таблице созданных ТПЛ и возвращает ссылку на него
//
Функция НайтиСозданныйТПЛ(тблСозданныеТПЛ, ТекДата, ТекТС, МестонахождениеТС)
	СтруктураТПЛ = Новый Структура;
	СтруктураТПЛ.Вставить("Ссылка",            Документы.уатТехнологическийПутевойЛист.ПустаяСсылка());
	СтруктураТПЛ.Вставить("ДокументОснование", Неопределено);
	СтруктураТПЛ.Вставить("Организация",       МестонахождениеТС.Организация);
	СтруктураТПЛ.Вставить("Подразделение",     МестонахождениеТС.Подразделение);
	СтруктураТПЛ.Вставить("Дата",              ТекДата);
	СтруктураТПЛ.Вставить("ТС",                ТекТС);
	СтруктураТПЛ.Вставить("ДатаВыезда",        '00010101');
	СтруктураТПЛ.Вставить("ДатаВозвращения",   '00010101');
	
	уатПутевыеЛисты.УстановитьДатыВыездаВозвращения(СтруктураТПЛ, Истина);
	
	СтруктураПоиск = Новый Структура("ТС, ДатаВыезда, ДатаВозвращения",
		ТекТС, СтруктураТПЛ.ДатаВыезда, СтруктураТПЛ.ДатаВозвращения);
	мсвСтрокиПоиск = тблСозданныеТПЛ.НайтиСтроки(СтруктураПоиск);
	
	Если мсвСтрокиПоиск.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат мсвСтрокиПоиск[0].Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДенежныеСредстваИВзаиморасчеты

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт
	
	Если ВидОперации = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.уатВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами
		
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыСКонтрагентами()

Функция ПолучитьДолгиПоКонтрагенту(Контагент, Дата = Неопределено) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, Контрагент = &Контрагент) КАК уатВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	Если НЕ ЗначениеЗаполнено(Дата) тогда
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст,"&ДатаКон","");
	Иначе
		мЗапрос.УстановитьПараметр("ДатаКон",Конецдня(Дата));
	КонецЕсли;
	мЗапрос.УстановитьПараметр("Контрагент",Контагент);
	Возврат мЗапрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПревышениеДопустимогоДолга(ДоговорКонтрагента) Экспорт
	флОтказ = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекДолг = уатОбщегоНазначенияТиповые_проф.ТекущийДолг(ДоговорКонтрагента, Неопределено, Неопределено);
		Если ДоговорКонтрагента.КонтролироватьСуммуЗадолженности И ТекДолг > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности тогда
			ТекстНСТР = НСтр(
				"en='The current debt of сounterparty ""%1"" (%2%4) exceeds the allowable value (%3%4).';"
				"ru='Текущий долг контрагента ""%1"" (%2%4) превышает допустимую сумму (%3%4).'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ДоговорКонтрагента.Владелец, ТекДолг,
				ДоговорКонтрагента.ДопустимаяСуммаЗадолженности,
				ДоговорКонтрагента.ВалютаВзаиморасчетов);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, флОтказ, , СтатусСообщения.Важное);
			
			Если НЕ ДоговорКонтрагента.ЗапрещатьПроведениеПриЗадолженности Тогда
				флОтказ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат флОтказ;
КонецФункции

	
// Возвращает список заказов для выбора в поле Сделка документов Поступление, Реализация, ПКО, РКО, ППВ, ППИ
//
Функция ПолучитьЗаказыПоДоговору(Договор, ПолучательКонтрагент = Истина) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПредоставленныеУслугиОбороты.ЗаказНаТС КАК ЗаказНаТС
	|ИЗ
	|	РегистрНакопления.уатПредоставленныеУслуги.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И ПолучательУслуг = &ПолучательУслуг) КАК уатПредоставленныеУслугиОбороты");
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("ПолучательУслуг", ?(ПолучательКонтрагент, Перечисления.уатПолучателиУслуг.Контрагент, Перечисления.уатПолучателиУслуг.НашаОрганизация));
	мсвЗаказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС");
	
	Возврат мсвЗаказы;
КонецФункции

// Рассчитывает сумму строки в валюте взаиморасчетов. Используется при формировании движений по регистру Взаиморасчеты
//
Функция СуммаВзаиморасчетовСтроки(СуммаСтроки, СуммаВалютнаяСтроки, ВалютаСтроки, ДополнительныеСвойства) Экспорт
	Если НЕ ДополнительныеСвойства.Свойство("ОкруглятьРезультат") Тогда
		ДополнительныеСвойства.Вставить("ОкруглятьРезультат", Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.МноговалютныйУчет Тогда
		Если ДополнительныеСвойства.ВалютаВзаиморасчетов = ДополнительныеСвойства.ВалютаДокумента Тогда
			Рез = СуммаСтроки;
		ИначеЕсли ДополнительныеСвойства.ВалютаВзаиморасчетов = ВалютаСтроки Тогда
			Рез = СуммаВалютнаяСтроки;
		Иначе
			Рез = СуммаСтроки * ДополнительныеСвойства.КроссКурсВзаиморасчетов;
		КонецЕсли;
	Иначе
		Если ДополнительныеСвойства.ВалютаВзаиморасчетов = ДополнительныеСвойства.ВалютаДокумента Тогда
			Рез = СуммаСтроки;
		Иначе
			Рез = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаСтроки,
				ДополнительныеСвойства.ВалютаДокумента,    ДополнительныеСвойства.ВалютаВзаиморасчетов,
				ДополнительныеСвойства.КурсДокумента,      ДополнительныеСвойства.КурсВзаиморасчетов,
				ДополнительныеСвойства.КратностьДокумента, ДополнительныеСвойства.КратностьВзаиморасчетов,
				ДополнительныеСвойства.ОкруглятьРезультат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Рассчитывает сумму строки в валюте упр. учета. Используется при формировании движений по регистру Взаиморасчеты
//
Функция СуммаУпрСтроки(СуммаСтроки, СуммаВалютнаяСтроки, ВалютаСтроки, ДополнительныеСвойства) Экспорт
	Если НЕ ДополнительныеСвойства.Свойство("ОкруглятьРезультат") Тогда
		ДополнительныеСвойства.Вставить("ОкруглятьРезультат", Истина);
	КонецЕсли;
			
	Если ДополнительныеСвойства.ВалютаУпрУчета = ДополнительныеСвойства.ВалютаДокумента Тогда
		Рез = СуммаСтроки;
	ИначеЕсли ДополнительныеСвойства.ВалютаУпрУчета = ВалютаСтроки Тогда
		Рез = СуммаВалютнаяСтроки;
	Иначе
		Рез = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаСтроки,
			ДополнительныеСвойства.ВалютаДокумента,    ДополнительныеСвойства.ВалютаУпрУчета,
			ДополнительныеСвойства.КурсДокумента,      ДополнительныеСвойства.КурсУпр,
			ДополнительныеСвойства.КратностьДокумента, ДополнительныеСвойства.КратностьУпр,
			ДополнительныеСвойства.ОкруглятьРезультат);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Рассчитывает итоговую сумму взаиморасчетов по документу
//
Функция СуммаВзаиморасчетовДокумента(ДокументОбъект) Экспорт
	Рез = 0;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ДокументОбъект.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	ДатаКурса = ?(ДокументОбъект.ДатаКурса = '00010101', ДокументОбъект.Дата, ДокументОбъект.ДатаКурса);
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса);
	
	СтруктураДополнительныеСвойства = Новый Структура;
	СтруктураДополнительныеСвойства.Вставить("МноговалютныйУчет",       ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет"));
	СтруктураДополнительныеСвойства.Вставить("КроссКурсВзаиморасчетов", ?(ДокументОбъект.КроссКурс = 0, 1, ДокументОбъект.КроссКурс));
	СтруктураДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов",    ВалютаВзаиморасчетов);
	СтруктураДополнительныеСвойства.Вставить("КурсВзаиморасчетов",      СтруктураКурсаВзаиморасчетов.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
	СтруктураДополнительныеСвойства.Вставить("ВалютаДокумента",         ДокументОбъект.ВалютаДокумента);
	СтруктураДополнительныеСвойства.Вставить("КурсДокумента",           ДокументОбъект.КурсВзаиморасчетов);
	СтруктураДополнительныеСвойства.Вставить("КратностьДокумента",      ДокументОбъект.КратностьВзаиморасчетов);
		
	Для Каждого ТекСтрока Из ДокументОбъект.Услуги Цикл		
		ТекСумма = ТекСтрока.Сумма;
		ТекСуммаВалютная = ТекСтрока.СуммаВалютная;
		Если ДокументОбъект.УчитыватьНДС И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
			ТекСумма = ТекСумма + ТекСтрока.СуммаНДС;
			ТекСуммаВалютная = ТекСуммаВалютная + ТекСтрока.СуммаНДСвалютная;
		КонецЕсли;
		
		Рез = Рез + СуммаВзаиморасчетовСтроки(ТекСумма, ТекСуммаВалютная, ТекСтрока.Валюта, СтруктураДополнительныеСвойства);
	КонецЦикла;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПоступлениеТоваровУслуг") Тогда
		Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл		
			ТекСумма = ТекСтрока.Сумма;
			Если ДокументОбъект.УчитыватьНДС И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
				ТекСумма = ТекСумма + ТекСтрока.СуммаНДС;
			КонецЕсли;
			
			Рез = Рез + СуммаВзаиморасчетовСтроки(ТекСумма, ТекСумма,
				ДокументОбъект.ВалютаДокумента, СтруктураДополнительныеСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции
	
#КонецОбласти

#Область ПлатежныйКалендарь

// Получает плановую дату платежа из регистра сведений "Даты Платежей"
// для отображения в документах Поступление товаров и услуг и Реализация услуг
//
Функция ДатаПлатежаПоРегистру(мсвСделки, ПолучательУслугНашаОрганизация = Ложь) Экспорт
	// удаление незаполненных сделок из отбора для ускорения запроса
	Сч = мсвСделки.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(мсвСделки[Сч]) Тогда
			мсвСделки.Удалить(Сч);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если ПолучательУслугНашаОрганизация Тогда
		ПолучательУслуг = Перечисления.уатПолучателиУслуг.НашаОрганизация;
	Иначе
		ПолучательУслуг = Перечисления.уатПолучателиУслуг.Контрагент;
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатДатыПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	уатДатыПлатежей.ЗаказНаТС.Номер КАК ЗаказНаТСНомер,
	|	уатДатыПлатежей.ЗаказНаТС.Дата КАК ЗаказНаТСДата
	|ИЗ
	|	РегистрСведений.уатДатыПлатежей КАК уатДатыПлатежей
	|ГДЕ
	|	уатДатыПлатежей.Сделка В (&мсвСделки)
	|	И уатДатыПлатежей.ПолучательУслуг = &ПолучательУслуг");
	Запрос.УстановитьПараметр("мсвСделки", мсвСделки);
	Запрос.УстановитьПараметр("ПолучательУслуг", ПолучательУслуг);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат '00010101';
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.ДатаПлатежа;
	Иначе
		ДатыСтрока = "";
		Пока Выборка.Следующий() Цикл
			ДатыСтрока = ДатыСтрока + "
				|Заказ на ТС №" + Выборка.ЗаказНаТСНомер + " от " + Формат(Выборка.ЗаказНаТСДата, "ДФ=dd.MM.yyyy")
				+ " - " + Формат(Выборка.ДатаПлатежа, "ДФ=dd.MM.yyyy");
		КонецЦикла;
		ДатыСтрока = Сред(ДатыСтрока, 2);
		Возврат ДатыСтрока;
	КонецЕсли;
КонецФункции

// Возвращает флаг наличия накладной (поступление или реализация) с указанной вручную датой платежа.
// Функция вызывается при попытке установки даты платежа в накладной для обеспечения наличия
// не более одной накладной с ручным изменением даты платежа по Заказу/Договору
// Параметры:
//
//
Функция ЕстьНакладнаяСРучнойДатойПлатежа(ДокументОбъект, ТекстСообщения) Экспорт
	Рез = Ложь;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатРеализацияУслуг") Тогда
		ВидДокумента = 1;
	Иначе
		ВидДокумента = 2;
	КонецЕсли;
		
	мсвЗаказыТС = Новый Массив;
	Для Каждого ТекСтрока Из ДокументОбъект.Услуги Цикл
		Если ВидДокумента = 1 Тогда
			Если мсвЗаказыТС.Найти(ТекСтрока.Заказ) = Неопределено Тогда
				мсвЗаказыТС.Добавить(ТекСтрока.Заказ);
			КонецЕсли;
		Иначе
			Если мсвЗаказыТС.Найти(ТекСтрока.ЗаказНаТС) = Неопределено Тогда
				мсвЗаказыТС.Добавить(ТекСтрока.ЗаказНаТС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	Если ВидДокумента = 1 Тогда //реализация
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатРеализацияУслугУслуги.Ссылка.Номер КАК Номер,
		|	уатРеализацияУслугУслуги.Ссылка.Дата КАК Дата,
		|	уатРеализацияУслугУслуги.Заказ КАК ЗаказНаТС
		|ИЗ
		|	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
		|ГДЕ
		|	уатРеализацияУслугУслуги.Ссылка.Проведен
		|	И уатРеализацияУслугУслуги.Заказ В(&мсвЗаказыТС)
		|	И уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И уатРеализацияУслугУслуги.Ссылка.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|	И уатРеализацияУслугУслуги.Ссылка <> &ТекущийДокумент");
	Иначе //поступление
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатПоступлениеТоваровУслугУслуги.Ссылка.Номер КАК Номер,
		|	уатПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Дата,
		|	уатПоступлениеТоваровУслугУслуги.ЗаказНаТС КАК ЗаказНаТС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	уатПоступлениеТоваровУслугУслуги.Ссылка.Проведен
		|	И уатПоступлениеТоваровУслугУслуги.ЗаказНаТС В (&мсвЗаказыТС)
		|	И уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И уатПоступлениеТоваровУслугУслуги.Ссылка.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|	И уатПоступлениеТоваровУслугУслуги.Ссылка <> &ТекущийДокумент");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("мсвЗаказыТС",        мсвЗаказыТС);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ДокументОбъект.Ссылка);
	
	тблВведенныеДокументы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекЗаказНаТС Из мсвЗаказыТС Цикл
		мсвДругиеДокументы = тблВведенныеДокументы.НайтиСтроки(Новый Структура("ЗаказНаТС", ТекЗаказНаТС));
		Если мсвДругиеДокументы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокументы = "";
		Для Каждого ТекДок Из мсвДругиеДокументы Цикл
			ПредставлениеДокументы = ПредставлениеДокументы + "№" + ТекДок.Номер + " от " + Формат(ТекДок.Дата, "ДФ=dd.MM.yyyy") + ", ";
		КонецЦикла;
		ПредставлениеДокументы = Лев(ПредставлениеДокументы, СтрДлина(ПредставлениеДокументы)-2);
			
		ТекстСообщения = СтрШаблон("По заказу ""%1"" и договору ""%2"" уже введены документы (%3) с указанием даты платежа вручную!",
			ТекЗаказНаТС, ДокументОбъект.ДоговорКонтрагента, ПредставлениеДокументы);
		
		Рез = Истина;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Выполняется проверка наличия предоплат по условиям договора
Процедура ПроверкаПредоплатыПоЗаказам(МаршрутныйЛист, Отказ) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		Если ТекСтрока.Выполнен И мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	мсвСостояниеОплатыПоЗаказам = СостояниеОплатыПоЗаказам(мсвЗаказы);
	Для Каждого ПараметрыЗаказа Из мсвСостояниеОплатыПоЗаказам Цикл
		Если ПараметрыЗаказа.ПроцентПредоплаты > 0 И ПараметрыЗаказа.СуммаОплатыФакт < ПараметрыЗаказа.СуммаПредоплаты Тогда
			ТекстСообщения = СтрШаблон("Недостаточно оплаты для отправки ""%1"": оплачено %2 %3(%4), требуется %5 %3(%6)",
				ТекСтрока.ЗаказГрузоотправителя,
				Формат(ПараметрыЗаказа.СуммаОплатыФакт, "ЧДЦ=2; ЧН=0"),
				ПараметрыЗаказа.Валюта,
				"" + Окр(ПараметрыЗаказа.ПроцентОплатыФакт) + "%",
				Формат(ПараметрыЗаказа.СуммаПредоплаты, "ЧДЦ=2; ЧН=0"),
				"" + Окр(ПараметрыЗаказа.ПроцентПредоплаты) + "%");
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СостояниеОплатыПоЗаказам(Знач мсвЗаказы) Экспорт
	
	мсвРез = Новый Массив;
	
	мсвЗаказыСвернутый = Новый Массив;
	флЕстьПустойЗаказ = Ложь;
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		Если ТекЗаказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка() Тогда
			флЕстьПустойЗаказ = Истина;
			Продолжить;
		КонецЕсли;
		Если мсвЗаказыСвернутый.Найти(ТекЗаказ) = Неопределено Тогда
			мсвЗаказыСвернутый.Добавить(ТекЗаказ);
		КонецЕсли;
	КонецЦикла;
	Если флЕстьПустойЗаказ Тогда
		Рез = Новый Структура(
			"ЗаказНаТС, Сумма, ПроцентПредоплаты, СуммаПредоплаты, Валюта, СуммаОплатыФакт, ПроцентОплатыФакт",
			Документы.уатЗаказГрузоотправителя.ПустаяСсылка(), 0, 0, 0, Неопределено, 0, 0);
		мсвРез.Добавить(Рез);
	КонецЕсли;
	Если мсвЗаказыСвернутый.Количество() = 0 Тогда
		Возврат мсвРез;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// для мультимодальных заказов нужно добавить подчиненные этапы
	мсвЗаказыСЭтапами = Новый Массив;
	Для Каждого ТекЗаказ Из мсвЗаказыСвернутый Цикл
		мсвЗаказыСЭтапами.Добавить(ТекЗаказ);
	КонецЦикла;
	ЗапросЭтапы = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.РодительскийЗаказ КАК РодительскийЗаказ,
	|	уатЗаказГрузоотправителя.Ссылка КАК Этап
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Проведен
	|	И уатЗаказГрузоотправителя.РодительскийЗаказ <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатЗаказГрузоотправителя.РодительскийЗаказ В(&мсвЗаказы)");
	ЗапросЭтапы.УстановитьПараметр("мсвЗаказы", мсвЗаказыСвернутый);
	тблЭтапы = ЗапросЭтапы.Выполнить().Выгрузить();
	Для Каждого ТекЭтап Из тблЭтапы Цикл
		Если мсвЗаказыСЭтапами.Найти(ТекЭтап.Этап) = Неопределено Тогда
			мсвЗаказыСЭтапами.Добавить(ТекЭтап.Этап);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПлатежныйКалендарьОбороты.ЗаказНаТС КАК ЗаказНаТС,
	|	уатПлатежныйКалендарьОбороты.Валюта КАК Валюта,
	|	0 КАК СуммаПриход,
	|	0 КАК СуммаПриходРегл,
	|	уатПлатежныйКалендарьОбороты.СуммаРасходОборот КАК СуммаРасход,
	|	уатПлатежныйКалендарьОбороты.СуммаРасходУпрОборот КАК СуммаРасходУпр
	|ПОМЕСТИТЬ ВТ_Услуги
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказНаТС В (&мсвЗаказы)
	|				И ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)) КАК уатПлатежныйКалендарьОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПредоставленныеУслугиОбороты.ЗаказНаТС,
	|	уатПредоставленныеУслугиОбороты.Валюта,
	|	уатПредоставленныеУслугиОбороты.СуммаОборот,
	|	уатПредоставленныеУслугиОбороты.СуммаРеглОборот,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.уатПредоставленныеУслуги.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказНаТС В (&мсвЗаказы)
	|				И ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)) КАК уатПредоставленныеУслугиОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Услуги.ЗаказНаТС КАК ЗаказНаТС,
	|	ВТ_Услуги.Валюта КАК Валюта,
	|	СУММА(ВТ_Услуги.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ВТ_Услуги.СуммаПриходРегл) КАК СуммаПриходРегл,
	|	СУММА(ВТ_Услуги.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ВТ_Услуги.СуммаРасходУпр) КАК СуммаРасходУпр
	|ИЗ
	|	ВТ_Услуги КАК ВТ_Услуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Услуги.ЗаказНаТС,
	|	ВТ_Услуги.Валюта");
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказыСЭтапами);
			
	тблДанные = Запрос.Выполнить().Выгрузить();
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		
	Для Каждого ТекЗаказ Из мсвЗаказыСвернутый Цикл
		Рез = Новый Структура("ЗаказНаТС, Сумма, ПроцентПредоплаты, СуммаПредоплаты, Валюта, СуммаОплатыФакт, ПроцентОплатыФакт",
			ТекЗаказ, 0, 0, 0, ТекЗаказ.ВалютаДокумента, 0, 0);
		
		СтрокаЭтапПредоплата = ТекЗаказ.ДоговорКонтрагента.ГрафикОплаты.Найти(
			Перечисления.уатВариантыОтсчетаДатыПлатежа.ДоОтправленияПоЗаказу, "ВариантОтсчета");
			
		Если СтрокаЭтапПредоплата = Неопределено Тогда
			Рез.ПроцентПредоплаты = 0;
		Иначе
			Рез.ПроцентПредоплаты = СтрокаЭтапПредоплата.Процент;
		КонецЕсли;

		мсвСтрокиПоЗаказу = тблДанные.НайтиСтроки(Новый Структура("ЗаказНаТС", ТекЗаказ));
		
		// для мультимодального заказа добавляем данные по подчиненным заказам (этапам)
		Если ТекЗаказ.Мультимодальный Тогда
			мсвЭтапыМультимодальногоЗаказа = тблЭтапы.НайтиСтроки(Новый Структура("РодительскийЗаказ", ТекЗаказ));
			Для Каждого ТекЭтап Из мсвЭтапыМультимодальногоЗаказа Цикл
				мсвСтрокиПоЭтапу = тблДанные.НайтиСтроки(Новый Структура("ЗаказНаТС", ТекЭтап.Этап));
				Для Каждого ТекСтрокаЭтап Из мсвСтрокиПоЭтапу Цикл
					мсвСтрокиПоЗаказу.Добавить(ТекСтрокаЭтап);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СуммаВыставленныхУслуг = 0;
		СуммаПредоплатыФакт = 0;
		
		Для Каждого ТекСтрокаВалюта Из мсвСтрокиПоЗаказу Цикл
			Если ТекСтрокаВалюта.Валюта = ТекЗаказ.ВалютаДокумента Тогда
				СуммаВыставленныхУслуг = СуммаВыставленныхУслуг + ТекСтрокаВалюта.СуммаПриход;
			ИначеЕсли ВалютаРегл = ТекЗаказ.ВалютаДокумента Тогда
				СуммаВыставленныхУслуг = СуммаВыставленныхУслуг + ТекСтрокаВалюта.СуммаПриходРегл;
			Иначе
				СуммаВыставленныхУслуг = СуммаВыставленныхУслуг + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
					ТекСтрокаВалюта.СуммаПриход,
					ТекСтрокаВалюта.Валюта, ТекЗаказ.ВалютаДокумента,
					ТекЗаказ.Дата, ТекЗаказ.Дата);
			КонецЕсли;
			Если ТекСтрокаВалюта.Валюта = ТекЗаказ.ВалютаДокумента Тогда
				СуммаПредоплатыФакт    = СуммаПредоплатыФакт    + ТекСтрокаВалюта.СуммаРасход;
			ИначеЕсли ВалютаУпр = ТекЗаказ.ВалютаДокумента Тогда
				СуммаПредоплатыФакт    = СуммаПредоплатыФакт    + ТекСтрокаВалюта.СуммаРасходУпр;
			Иначе
				СуммаПредоплатыФакт    = СуммаПредоплатыФакт    + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
					ТекСтрокаВалюта.СуммаРасход,
					ТекСтрокаВалюта.Валюта, ТекЗаказ.ВалютаДокумента,
					ТекЗаказ.Дата, ТекЗаказ.Дата);
			КонецЕсли;
		КонецЦикла;
		
		Рез.СуммаОплатыФакт   = СуммаПредоплатыФакт;
		Рез.ПроцентОплатыФакт = ?(СуммаВыставленныхУслуг = 0, 0, СуммаПредоплатыФакт / СуммаВыставленныхУслуг * 100);
		Рез.Сумма             = СуммаВыставленныхУслуг;
	    Рез.СуммаПредоплаты   = СуммаВыставленныхУслуг * Рез.ПроцентПредоплаты / 100;
		
		мсвРез.Добавить(Рез);
	КонецЦикла;
		
	Возврат мсвРез;
КонецФункции
	
#КонецОбласти

#Область Мониторинг

// Функция возвращает признак использования системы ЦСМ.
//
Функция ИспользованиеЦСМ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат (Константы.уатИспользоватьЦСМ.Получить() = Истина);
	
КонецФункции

// Функция предназначена для определения факта попадания времени посещения пункта по заказу в отведенное
// на это временное окно.
//
// Параметры:
//  ВремяПосещения         - Время - Плановое время приезда в пункт.
//  НачалоОкна             - Время - Время начала временного окна.
//  ОкончаниеОкна          - Время - Время окончания временного окна.
//  ОжиданиеПопаданияВОкно - Число - Требуемое время ожидания, которое необходимо для того,
//                                   чтобы время посещения попадало в отведенное временное окно.
// 
// Возвращаемое значение:
//   - Булево - Плановое время приезда попадает во временное окно.
//
Функция ВремяПосещенияВПределахОкна(Знач ВремяПосещения, Знач НачалоОкна, Знач ОкончаниеОкна, ОжиданиеПопаданияВОкно=Неопределено) Экспорт
	
	Если Не ОжиданиеПопаданияВОкно = Неопределено Тогда 
		ОжиданиеПопаданияВОкно = 0;
	КонецЕсли;
	
	ВремяПосещенияВПериоде = Ложь;
	
	ВремяПосещения = '00010101' + (ВремяПосещения - НачалоДня(ВремяПосещения));
	
	Если НачалоОкна > ОкончаниеОкна Тогда // Период, переходящий через полночь.
		Если ВремяПосещения >= НачалоОкна Или ВремяПосещения <= ОкончаниеОкна Тогда 
			ВремяПосещенияВПериоде = Истина;
			
		ИначеЕсли Не ОжиданиеПопаданияВОкно = Неопределено Тогда 
			ОжиданиеМинДоОкр = (НачалоОкна - ВремяПосещения) / 60;
			ОжиданиеМин = Цел(ОжиданиеМинДоОкр);
			ОжиданиеМин = ОжиданиеМин + ?((ОжиданиеМинДоОкр - ОжиданиеМин) > 0, 1, 0);
			ОжиданиеПопаданияВОкно = Цел(ОжиданиеМин / 60) + (ОжиданиеМин - Цел(ОжиданиеМин / 60) * 60) / 100;
			ВремяПосещенияВПериоде = Истина;
		КонецЕсли;
		
	Иначе 
		Если ВремяПосещения >= НачалоОкна И ВремяПосещения <= ОкончаниеОкна Тогда 
			ВремяПосещенияВПериоде = Истина;
			
		ИначеЕсли Не ОжиданиеПопаданияВОкно = Неопределено Тогда 
			Если ВремяПосещения < НачалоОкна Тогда 
				ОжиданиеМинДоОкр = (НачалоОкна - ВремяПосещения) / 60;
				ОжиданиеМин = Цел(ОжиданиеМинДоОкр);
				ОжиданиеМин = ОжиданиеМин + ?((ОжиданиеМинДоОкр - ОжиданиеМин) > 0, 1, 0);
				ОжиданиеПопаданияВОкно = Цел(ОжиданиеМин / 60) + (ОжиданиеМин - Цел(ОжиданиеМин / 60) * 60) / 100;
				ВремяПосещенияВПериоде = Истина;
				
			Иначе 
				ОжиданиеМинДоОкр = ('00010101235959' - ВремяПосещения) / 60;
				ОжиданиеМинДоОкр = ОжиданиеМинДоОкр + ((НачалоОкна - '00010101000000') / 60);
				ОжиданиеМин = Цел(ОжиданиеМинДоОкр);
				ОжиданиеМин = ОжиданиеМин + ?((ОжиданиеМинДоОкр - ОжиданиеМин) > 0, 1, 0);
				ОжиданиеПопаданияВОкно = Цел(ОжиданиеМин / 60) + (ОжиданиеМин - Цел(ОжиданиеМин / 60) * 60) / 100;
				ВремяПосещенияВПериоде = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВремяПосещенияВПериоде;
	
КонецФункции // ВремяПосещенияЗаПределамиОкна()

#КонецОбласти

#Область ФактическоеПосещениеПунктовПоДаннымМониторинга

// Процедура выполняет регламентное задание ЗаполнениеФактическогоПосещенияПунктов.
//
Процедура ЗаполнениеФактическогоПосещенияПунктов() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Filling the actual visit points in the route lists';ru='Заполнение фактического посещения пунктов в маршрутных листах'");
	
	ИнтервалПоиска = ТекущаяДата() - (86400 * 3);
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода",        ?(НачалоДня(ТекущаяДата()) = '00010101', '00010101', НачалоДня(ТекущаяДата()) - (86400 * 3)));
	Запрос.УстановитьПараметр("КонецПериода",         ?(НачалоДня(ТекущаяДата()) = '00010101', '39991231', КонецДня(ТекущаяДата())));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|			И (уатМаршрутныйЛист.Проведен)
	|			И (НЕ уатМаршрутныйЛист.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА уатМаршрутныйЛист.ТС.ИсточникФактическихДанныхДляКартографии <> ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ уатМаршрутныйЛистЗаказы.ПрибытиеПлан <= &КонецПериода
	|					И уатМаршрутныйЛистЗаказы.ПрибытиеПлан >= &НачалоПериода
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйДокумент,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Проведен
	|			ТОГДА 1
	|		КОГДА уатМаршрутныйЛист.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокумента,
	|	уатМаршрутныйЛист.Номер КАК НомерДокумента,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛист.Прицеп1 КАК Прицеп1,
	|	уатМаршрутныйЛист.Прицеп2 КАК Прицеп2,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = ВТ_Документы.Ссылка
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Выполнен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйДокумент,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СтатусДокумента),
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(ТС),
	|	МАКСИМУМ(Водитель),
	|	МАКСИМУМ(Прицеп1),
	|	МАКСИМУМ(Прицеп2)
	|ПО
	|	МаршрутныйДокумент";
	
	ДанныеПоПунктам = Новый ТаблицаЗначений();
	ДанныеПоПунктам.Колонки.Добавить("МаршрутныйДокумент", Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
	ДанныеПоПунктам.Колонки.Добавить("Выполнен", Новый ОписаниеТипов("Булево"));
	ДанныеПоПунктам.Колонки.Добавить("СтатусДокумента", Новый ОписаниеТипов("Число"));
	ДанныеПоПунктам.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("НомерПункта", Новый ОписаниеТипов("Число"));
	ДанныеПоПунктам.Колонки.Добавить("Пункт", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ДанныеПоПунктам.Колонки.Добавить("ПрибытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("УбытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("ПрибытиеФакт", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("УбытиеФакт", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("ТС", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ДанныеПоПунктам.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеПоПунктам.Колонки.Добавить("Заказы", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("Прицепы", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("ЗаказыКонтрагенты", Новый ОписаниеТипов("СписокЗначений"));
	ДанныеПоПунктам.Колонки.Добавить("НомерЕздки", Новый ОписаниеТипов("Число"));
	ДанныеПоПунктам.Колонки.Добавить("АдресУбытия", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	
	НовДанныеПоПунктам = ДанныеПоПунктам.Скопировать();
	
	ВыборкаМЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМЛ.Следующий() Цикл 
		СчПунктов = 0;
		ТаблицаПунктов = ПолучитьДанныеПоПунктамМЛ(ВыборкаМЛ.Выбрать(), ВыборкаМЛ.МаршрутныйДокумент);
		
		Для Каждого ТекСтрока Из ТаблицаПунктов Цикл 
			СчПунктов = СчПунктов + 1;
			
			НовСтрока = НовДанныеПоПунктам.Добавить();
			НовСтрока.МаршрутныйДокумент = ВыборкаМЛ.МаршрутныйДокумент;
			НовСтрока.Выполнен           = ТекСтрока.Выполнен;
			НовСтрока.СтатусДокумента    = ВыборкаМЛ.СтатусДокумента;
			НовСтрока.НомерДокумента     = ВыборкаМЛ.НомерДокумента;
			НовСтрока.НомерПункта        = СчПунктов;
			НовСтрока.Пункт              = ТекСтрока.Пункт;
			НовСтрока.ПрибытиеПлан       = ТекСтрока.ПрибытиеПлан;
			НовСтрока.УбытиеПлан         = ТекСтрока.УбытиеПлан;
			НовСтрока.ПрибытиеФакт       = ТекСтрока.ПрибытиеФакт;
			НовСтрока.УбытиеФакт         = ТекСтрока.УбытиеФакт;
			НовСтрока.ТС                 = ВыборкаМЛ.ТС;
			НовСтрока.Водитель           = ВыборкаМЛ.Водитель;
			НовСтрока.Заказы             = ТекСтрока.Заказы;
			НовСтрока.Контрагент         = ТекСтрока.Контрагент;
			НовСтрока.НомерСтроки        = ТекСтрока.НомерСтроки;
			
			Для Каждого ТекЗаказ Из ТекСтрока.ЗаказыКонтрагенты Цикл 
				НовСтрока.ЗаказыКонтрагенты.Добавить(ТекЗаказ.Значение, ТекЗаказ.Представление);
			КонецЦикла;
				
			Если ЗначениеЗаполнено(ВыборкаМЛ.Прицеп1) Тогда 
				НовСтрока.Прицепы = ВыборкаМЛ.Прицеп1;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаМЛ.Прицеп2) Тогда 
				НовСтрока.Прицепы = НовСтрока.Прицепы + ?(НовСтрока.Прицепы="", "", ", ") + ВыборкаМЛ.Прицеп2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КолонкиСопоставления = Новый Массив();
	КолонкиСопоставления.Добавить("МаршрутныйДокумент");
	КолонкиСопоставления.Добавить("Выполнен");
	КолонкиСопоставления.Добавить("СтатусДокумента");
	КолонкиСопоставления.Добавить("НомерДокумента");
	КолонкиСопоставления.Добавить("НомерПункта");
	КолонкиСопоставления.Добавить("Пункт");
	КолонкиСопоставления.Добавить("ПрибытиеПлан");
	КолонкиСопоставления.Добавить("УбытиеПлан");
	КолонкиСопоставления.Добавить("ПрибытиеФакт");
	КолонкиСопоставления.Добавить("УбытиеФакт");
	КолонкиСопоставления.Добавить("ТС");
	КолонкиСопоставления.Добавить("Заказы");
	КолонкиСопоставления.Добавить("Водитель");
	КолонкиСопоставления.Добавить("Контрагент");
	КолонкиСопоставления.Добавить("АдресУбытия");
	КолонкиСопоставления.Добавить("НомерСтроки");
	
	мсвУдаляемыеСтроки = Новый Массив();
	Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
		СтрокаПроверена = Ложь;
		
		Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаПроверена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаПроверена Тогда 
			мсвУдаляемыеСтроки.Добавить(СтараяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСтроки Цикл 
		ДанныеПоПунктам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
		СтрокаНайдена = Ложь;
		
		Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаНайдена Тогда 
			ДобСтрока = ДанныеПоПунктам.Добавить();
			ЗаполнитьЗначенияСвойств(ДобСтрока, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоПунктам.Сортировать("ПрибытиеПлан");
	
	МЛ = ДанныеПоПунктам.Скопировать();
	МЛ.Свернуть("МаршрутныйДокумент");
	
	ИмяКлючевойОперации = "уатОперации.ФактическоеПосещениеПунктов.МаршрутныйЛистАвтоматически";
	Для Каждого ТекМЛ Из МЛ Цикл
		МаршрутныйДокумент  = ТекМЛ.МаршрутныйДокумент;
		Данные = ДанныеПоПунктам.НайтиСтроки(Новый Структура("МаршрутныйДокумент", МаршрутныйДокумент));
		ФактическоеПосещениеПунктовПоДаннымССМсервер(МаршрутныйДокумент, Данные, ИмяКлючевойОперации);
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗаполнениеФактическогоПосещенияПунктовПЛ.
//
Процедура ЗаполнениеФактическогоПосещенияПунктовПЛ() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Filling the actual visit points in the travel lists';ru='Заполнение фактического посещения пунктов в путевых листах'");
	
	ИнтервалПоиска = ТекущаяДата() - (86400 * 3);
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода",        ?(НачалоДня(ТекущаяДата()) = '00010101', '00010101', НачалоДня(ТекущаяДата()) - (86400 * 3)));
	Запрос.УстановитьПараметр("КонецПериода",         ?(НачалоДня(ТекущаяДата()) = '00010101', '39991231', КонецДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("ИспользоватьПланФакт", Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить());
	Запрос.УстановитьПараметр("ПустаяДата",           '00010101');
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗадание.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|			И (уатПутевойЛист.Проведен)
	|			И (НЕ уатПутевойЛист.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА уатПутевойЛист.ТранспортноеСредство.ИсточникФактическихДанныхДляКартографии <> ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатПутевойЛистЗадание.Выполнено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ уатПутевойЛистЗадание.ВремяУбытия <= &КонецПериода
	|					И уатПутевойЛистЗадание.ВремяПрибытия >= &НачалоПериода
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистЗадание.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистЗадание.Ссылка КАК МаршрутныйДокумент,
	|	уатПутевойЛистЗадание.Выполнено КАК Выполнен,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.Проведен
	|			ТОГДА 1
	|		КОГДА уатПутевойЛист.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокумента,
	|	уатПутевойЛист.Номер КАК НомерДокумента,
	|	уатПутевойЛистЗадание.АдресПрибытия КАК Пункт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяПрибытияФакт
	|		ИНАЧЕ уатПутевойЛистЗадание.ВремяПрибытия
	|	КОНЕЦ КАК ПрибытиеФакт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяУбытияФакт
	|		ИНАЧЕ уатПутевойЛистЗадание.ВремяУбытия
	|	КОНЕЦ КАК УбытиеФакт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяПрибытия
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ПрибытиеПлан,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяУбытия
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК УбытиеПлан,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛистЗадание.Контрагент КАК Контрагент,
	|	уатПутевойЛистЗадание.АдресУбытия КАК АдресУбытия,
	|	уатПутевойЛистЗадание.НомерСтроки КАК НомерСтроки,
	|	уатПутевойЛист.ОборудованиеПрицеп1 КАК Прицеп1,
	|	уатПутевойЛист.ОборудованиеПрицеп2 КАК Прицеп2,
	|	уатПутевойЛистЗадание.НомерЕздки КАК НомерЕздки
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО уатПутевойЛистЗадание.Ссылка = ВТ_Документы.Ссылка
	|ГДЕ
	|	уатПутевойЛистЗадание.Выполнено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйДокумент,
	|	НомерСтроки";
	
	ДанныеПоПунктам = Новый ТаблицаЗначений();
	ДанныеПоПунктам.Колонки.Добавить("МаршрутныйДокумент", Новый ОписаниеТипов("ДокументСсылка.уатПутевойЛист"));
	ДанныеПоПунктам.Колонки.Добавить("Выполнен", Новый ОписаниеТипов("Булево"));
	ДанныеПоПунктам.Колонки.Добавить("СтатусДокумента", Новый ОписаниеТипов("Число"));
	ДанныеПоПунктам.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("НомерПункта", Новый ОписаниеТипов("Число"));
	ДанныеПоПунктам.Колонки.Добавить("Пункт", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ДанныеПоПунктам.Колонки.Добавить("ПрибытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("УбытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("ПрибытиеФакт", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("УбытиеФакт", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДанныеПоПунктам.Колонки.Добавить("ТС", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ДанныеПоПунктам.Колонки.Добавить("Водитель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеПоПунктам.Колонки.Добавить("Заказы", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("Прицепы", Новый ОписаниеТипов("Строка"));
	ДанныеПоПунктам.Колонки.Добавить("ЗаказыКонтрагенты", Новый ОписаниеТипов("СписокЗначений"));
	ДанныеПоПунктам.Колонки.Добавить("АдресУбытия", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ДанныеПоПунктам.Колонки.Добавить("НомерЕздки", Новый ОписаниеТипов("Число"));
		
	НовДанныеПоПунктам = ДанныеПоПунктам.Скопировать();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		НовСтрока = НовДанныеПоПунктам.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка,, "НомерСтроки");
		НовСтрока.НомерПункта = Выборка.НомерСтроки;
		НовСтрока.НомерСтроки = Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ=0");
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
			НовСтрока.ЗаказыКонтрагенты.Добавить(Выборка.Контрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Прицеп1) Тогда 
			НовСтрока.Прицепы = Выборка.Прицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Прицеп2) Тогда 
			НовСтрока.Прицепы = НовСтрока.Прицепы + ?(НовСтрока.Прицепы="", "", ", ") + Выборка.Прицеп2;
		КонецЕсли;
	КонецЦикла;
	
	КолонкиСопоставления = Новый Массив();
	КолонкиСопоставления.Добавить("МаршрутныйДокумент");
	КолонкиСопоставления.Добавить("Выполнен");
	КолонкиСопоставления.Добавить("СтатусДокумента");
	КолонкиСопоставления.Добавить("НомерДокумента");
	КолонкиСопоставления.Добавить("НомерПункта");
	КолонкиСопоставления.Добавить("Пункт");
	КолонкиСопоставления.Добавить("ПрибытиеПлан");
	КолонкиСопоставления.Добавить("УбытиеПлан");
	КолонкиСопоставления.Добавить("ПрибытиеФакт");
	КолонкиСопоставления.Добавить("УбытиеФакт");
	КолонкиСопоставления.Добавить("ТС");
	КолонкиСопоставления.Добавить("Заказы");
	КолонкиСопоставления.Добавить("Водитель");
	КолонкиСопоставления.Добавить("Контрагент");
	КолонкиСопоставления.Добавить("АдресУбытия");
	КолонкиСопоставления.Добавить("НомерСтроки");
	КолонкиСопоставления.Добавить("НомерЦветаТекстаСтроки");
	
	мсвУдаляемыеСтроки = Новый Массив();
	Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
		СтрокаПроверена = Ложь;
		
		Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаПроверена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаПроверена Тогда 
			мсвУдаляемыеСтроки.Добавить(СтараяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСтроки Цикл 
		ДанныеПоПунктам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
		СтрокаНайдена = Ложь;
		
		Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаНайдена Тогда 
			ДобСтрока = ДанныеПоПунктам.Добавить();
			ЗаполнитьЗначенияСвойств(ДобСтрока, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоПунктам.Сортировать("ПрибытиеПлан");
	
	ПЛ = ДанныеПоПунктам.Скопировать();
	ПЛ.Свернуть("МаршрутныйДокумент");
	
	ИмяКлючевойОперации = "уатОперации.ФактическоеПосещениеПунктов.ПутевойЛистАвтоматически";
	Для Каждого ТекПЛ Из ПЛ Цикл
		МаршрутныйДокумент	 = ТекПЛ.МаршрутныйДокумент;
		Данные				 = ДанныеПоПунктам.НайтиСтроки(Новый Структура("МаршрутныйДокумент", МаршрутныйДокумент));
		ФактическоеПосещениеПунктовПоДаннымССМсервер(МаршрутныйДокумент, Данные, ИмяКлючевойОперации);
	КонецЦикла;

	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура предназначена для заполнения документа данными по фактическому посещению пунктов
// согласно данным систем спутникового мониторинга.
//
Процедура ФактическоеПосещениеПунктовПоДаннымССМсервер(Знач Объект, Данные, ИмяКлючевойОперации = "")
	
	флОшибка = Ложь;
	ДанныеПоМаршрутномуДокументу = ПодготовитьСтрДанныхДляОпределенияФактПосещениеПунктовПоДаннымССМСервер(Объект,
		Данные, флОшибка);
		
	Если флОшибка Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПоМаршрутномуДокументу.Вставить("АдресРезультата", Неопределено);
	
	Для Каждого ТекСтрока Из Данные Цикл 
		ТекСтрока.Выполнен     = Ложь;
		ТекСтрока.ПрибытиеФакт = '00010101000000';
		ТекСтрока.УбытиеФакт   = '00010101000000';
	КонецЦикла;
	ЗаполнитьФактПосещениеПоДаннымССМСервер(ДанныеПоМаршрутномуДокументу, ИмяКлючевойОперации);
	
КонецПроцедуры

// Функция предназначена для получения таблицы пунктов маршрутного листа.
//
Функция ПолучитьДанныеПоПунктамМЛ(ВыборкаСтрок, МаршрутныйЛист) Экспорт
	
	ТаблицаПунктов = Новый ТаблицаЗначений();
	ТаблицаПунктов.Колонки.Добавить("Пункт",             Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеПлан",      Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеПлан",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеФакт",      Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеФакт",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("Выполнен",          Новый ОписаниеТипов("Булево"));
	ТаблицаПунктов.Колонки.Добавить("Заказы",            Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("Контрагент",        Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("НомерСтроки",       Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("ЗаказыКонтрагенты", Новый ОписаниеТипов("СписокЗначений"));
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеФакт",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеФакт",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаИзПункта",        Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выполнен",               Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("НомерСтроки",            Новый ОписаниеТипов("Строка"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Пока ВыборкаСтрок.Следующий() Цикл
		//пункт
		Если ВыборкаСтрок.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ВыборкаСтрок.Пункт), ВыборкаСтрок.Пункт, ВыборкаСтрок.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ВыборкаСтрок.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ВыборкаСтрок.Пункт), ВыборкаСтрок.Пункт, ВыборкаСтрок.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ВыборкаСтрок.Пункт;
		КонецЕсли;
		
		Если ВыборкаСтрок.ЗаказГрузоотправителя.Пустая() Или ВыборкаСтрок.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ВыборкаСтрок.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ВыборкаСтрок.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ВыборкаСтрок.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ВыборкаСтрок.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ВыборкаСтрок.Выполнен;
			НовСтрокаПункт.НомерСтроки            = НовСтрокаПункт.НомерСтроки + ?(НовСтрокаПункт.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ВыборкаСтрок.Время;
			новСтрокаПункт.ПрибытиеПлан           = ВыборкаСтрок.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ВыборкаСтрок.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ВыборкаСтрок.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ВыборкаСтрок.Выполнен;
			НовСтрокаПункт.СтоянкаИзПункта        = ВыборкаСтрок.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ВыборкаСтрок.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ВыборкаСтрок.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыборкаСтрок.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.Стоянка                = ВыборкаСтрок.Стоянка;
				НовСтрокаЗаказ.СтоянкаИзПункта        = ВыборкаСтрок.СтоянкаИзПункта;
				НовСтрокаЗаказ.НомерСтроки            = НовСтрокаЗаказ.НомерСтроки + ?(НовСтрокаЗаказ.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
				
				ПредЗаказ     = ВыборкаСтрок.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
		Иначе 
			НовСтрокаЗаказ.НомерСтроки = НовСтрокаЗаказ.НомерСтроки + ?(НовСтрокаЗаказ.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
		КонецЕсли;
		
		ПредСтрока = ВыборкаСтрок;
	КонецЦикла;
	
	ПредВремяОтпр     = Неопределено;
	ПредПунктСтрока   = Неопределено;
	ОбщееВремяСтоянок = 0;
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		СуммарноеВремяСтоянки = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	Для Каждого ТекПункт Из ДеревоЗаказов.Строки Цикл 
		НовСтрока = ТаблицаПунктов.Добавить();
		НовСтрока.Пункт        = ТекПункт.ПунктЗаказНоменклатура;
		НовСтрока.ПрибытиеПлан = ТекПункт.ПрибытиеПлан;
		НовСтрока.УбытиеПлан   = ТекПункт.УбытиеПлан;
		НовСтрока.ПрибытиеФакт = ТекПункт.ПрибытиеФакт;
		НовСтрока.УбытиеФакт   = ТекПункт.УбытиеФакт;
		НовСтрока.Выполнен     = ТекПункт.Выполнен;
		
		мсвЗаказы = Новый Массив();
		Если ТекПункт.Строки.Количество() Тогда 
			Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл 
				Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура) И мсвЗаказы.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено Тогда 
					мсвЗаказы.Добавить(ТекЗаказ.ПунктЗаказНоменклатура);
				КонецЕсли;
				
				НовСтрока.НомерСтроки = НовСтрока.НомерСтроки + ?(НовСтрока.НомерСтроки="","",",") + Строка(ТекЗаказ.НомерСтроки);
			КонецЦикла;
		Иначе 
			НовСтрока.НомерСтроки = НовСтрока.НомерСтроки + ?(НовСтрока.НомерСтроки="","",",") + Строка(ТекПункт.НомерСтроки);
		КонецЕсли;
		
		мсвКонтрагенты = Новый Массив();
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
			НовСтрока.Заказы = НовСтрока.Заказы + ?(НовСтрока.Заказы="","",", ") + Строка(ТекЗаказ.Номер) + " от " + Формат(ТекЗаказ.Дата, "ДФ=dd.MM.yy");
			
			мсвКонтрагентыЗаказа = Новый ТаблицаЗначений();
			мсвКонтрагентыЗаказа.Колонки.Добавить("Контрагент");
			
			Если ЗначениеЗаполнено(ТекЗаказ.Контрагент) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказ.Контрагент) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказ.Контрагент);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказ.Контрагент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекЗаказ.Грузоотправитель) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказ.Грузоотправитель) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказ.Грузоотправитель);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказ.Грузоотправитель;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекЗаказ.Грузополучатель) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказ.Грузополучатель) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказ.Грузополучатель);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказ.Грузополучатель;
			КонецЕсли;
			
			мсвКонтрагентыЗаказа.Свернуть("Контрагент");
			СтрокаКонтрагента = "";
			Для Каждого ТекКонтрагентСтрока Из мсвКонтрагентыЗаказа Цикл 
				СтрокаКонтрагента = СтрокаКонтрагента + ?(СтрокаКонтрагента="","", ", ") + ТекКонтрагентСтрока.Контрагент;
			КонецЦикла;
			
			ПредставлениеЗаказа = Строка(ТекЗаказ.Номер) + " (" + СтрокаКонтрагента + ")";
			НовСтрока.ЗаказыКонтрагенты.Добавить(ТекЗаказ, ПредставлениеЗаказа);
		КонецЦикла;
		
		Для Каждого ТекКонтрагент Из мсвКонтрагенты Цикл 
			НовСтрока.Контрагент = НовСтрока.Контрагент + ?(НовСтрока.Контрагент="","",", ") + Строка(ТекКонтрагент);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПунктов;
	
КонецФункции

Процедура СохранитьИзмененияВДокументе(Знач ДокументСсылка, Знач ДанныеДляИзменения, ИмяКлючевойОперации = "") Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
		ДокОб = ДокументСсылка.ПолучитьОбъект();
		
		флИспользоватьПланФактВремени = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
		
		Если ДанныеДляИзменения.Свойство("МассивДанныхДляИзменения") Тогда
			Для Каждого ТекСтрока Из ДанныеДляИзменения.МассивДанныхДляИзменения Цикл
				
				ТекСтрока.НомерСтроки = СтрЗаменить(ТекСтрока.НомерСтроки, " ", "");
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрока.НомерСтроки, ",");
				Для Каждого мТекСтрока Из МассивСтрок Цикл
					Попытка
						НомерСтроки = Число(СокрЛП(мТекСтрока));
					Исключение
						Прервать;
					КонецПопытки;
					
					СтрокаДляОбновления = ДокОб.Заказы.Найти(НомерСтроки, "НомерСтроки");
					Если СтрокаДляОбновления <> Неопределено Тогда 
						СтрокаДляОбновления.Выполнен = ТекСтрока.Выполнен;
						Если флИспользоватьПланФактВремени Тогда
							СтрокаДляОбновления.ПрибытиеФакт   = ТекСтрока.ПрибытиеФакт;
							СтрокаДляОбновления.УбытиеФакт     = ТекСтрока.УбытиеФакт;
							СтрокаДляОбновления.СтоянкаФакт    = ТекСтрока.СтоянкаФакт;
							СтрокаДляОбновления.РасстояниеФакт = ТекСтрока.РасстояниеФакт;
							СтрокаДляОбновления.ВремяФакт      = ТекСтрока.ВремяФакт;

						ИначеЕсли ТипЗнч(ТекСтрока) = Тип("Структура")
							И ТекСтрока.Свойство("ПрибытиеПлан") И Не ТекСтрока.Свойство("ПрибытиеФакт") Тогда
							// Изменение документа через АРМ Контроль перевозок
							СтрокаДляОбновления.ПрибытиеПлан = ТекСтрока.ПрибытиеПлан;
							СтрокаДляОбновления.УбытиеПлан   = ТекСтрока.УбытиеПлан;
							СтрокаДляОбновления.Стоянка      = ТекСтрока.Стоянка;
							СтрокаДляОбновления.Расстояние   = ТекСтрока.Расстояние;
							СтрокаДляОбновления.Время        = ТекСтрока.Время;
						Иначе
							СтрокаДляОбновления.ПрибытиеПлан = ТекСтрока.ПрибытиеФакт;
							СтрокаДляОбновления.УбытиеПлан   = ТекСтрока.УбытиеФакт;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ДанныеДляИзменения.Свойство("НомерСтроки") Тогда
			НомераСтрок = СтрЗаменить(ДанныеДляИзменения.НомерСтроки, ",", Символы.ПС);
			Для Сч = 1 По СтрЧислоСтрок(НомераСтрок) Цикл 
				Попытка
					НомерСтроки = Число(СокрЛП(СтрПолучитьСтроку(НомераСтрок, Сч)));
				Исключение
					Прервать;
				КонецПопытки;
				
				СтрокаДляОбновления = ДокОб.Заказы.Найти(НомерСтроки, "НомерСтроки");
				Если Не СтрокаДляОбновления = Неопределено Тогда 
					Если ДанныеДляИзменения.Свойство("Выполнен") Тогда 
						СтрокаДляОбновления.Выполнен = ДанныеДляИзменения.Выполнен;
					КонецЕсли;
					Если ДанныеДляИзменения.Свойство("ПрибытиеФакт") Тогда 
						Если флИспользоватьПланФактВремени Тогда
							СтрокаДляОбновления.ПрибытиеФакт = ДанныеДляИзменения.ПрибытиеФакт;
						Иначе
							СтрокаДляОбновления.ПрибытиеПлан = ДанныеДляИзменения.ПрибытиеФакт;
						КонецЕсли;
					КонецЕсли;
					Если ДанныеДляИзменения.Свойство("УбытиеФакт") Тогда 
						Если флИспользоватьПланФактВремени Тогда
							СтрокаДляОбновления.УбытиеФакт = ДанныеДляИзменения.УбытиеФакт;
						Иначе
							СтрокаДляОбновления.УбытиеПлан = ДанныеДляИзменения.УбытиеФакт;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ДокОб, ДанныеДляИзменения, "ФормироватьУведомленияОбОпозданияхВРейсе");
		КонецЕсли;
		
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
			Если ЗначениеЗаполнено(ИмяКлючевойОперации) Тогда
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
			КонецЕсли;
		Исключение
		КонецПопытки;
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
		ДокОб = ДокументСсылка.ПолучитьОбъект();
		
		флИспользоватьПланФактВремени = Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
		
		Если ДанныеДляИзменения.Свойство("МассивДанныхДляИзменения") Тогда
			Для Каждого ТекСтрока Из ДанныеДляИзменения.МассивДанныхДляИзменения Цикл
				
				Попытка
					НомерСтроки = Число(СокрЛП(ТекСтрока.НомерСтроки));
				Исключение
					Прервать;
				КонецПопытки;
				
				СтрокаДляОбновления = ДокОб.Задание.Найти(НомерСтроки, "НомерСтроки");
				Если Не СтрокаДляОбновления = Неопределено Тогда 
					СтрокаДляОбновления.Выполнено = ТекСтрока.Выполнен;
					Если флИспользоватьПланФактВремени Тогда
						СтрокаДляОбновления.ВремяПрибытияФакт = ТекСтрока.ПрибытиеФакт;
						СтрокаДляОбновления.ВремяУбытияФакт   = ТекСтрока.УбытиеФакт;
					Иначе
						СтрокаДляОбновления.ВремяПрибытия     = ТекСтрока.ПрибытиеФакт;
						СтрокаДляОбновления.ВремяУбытия       = ТекСтрока.УбытиеФакт;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НомераСтрок = СтрЗаменить(ДанныеДляИзменения.НомерСтроки, ",", Символы.ПС);
			Для Сч = 1 По СтрЧислоСтрок(НомераСтрок) Цикл 
				Попытка
					НомерСтроки = Число(СокрЛП(СтрПолучитьСтроку(НомераСтрок, Сч)));
				Исключение
					Прервать;
				КонецПопытки;
				
				СтрокаДляОбновления = ДокОб.Задание.Найти(НомерСтроки, "НомерСтроки");
				Если Не СтрокаДляОбновления = Неопределено Тогда 
					Если ДанныеДляИзменения.Свойство("Выполнен") Тогда 
						СтрокаДляОбновления.Выполнено = ДанныеДляИзменения.Выполнен;
					КонецЕсли;
					Если ДанныеДляИзменения.Свойство("ПрибытиеФакт") Тогда 
						Если флИспользоватьПланФактВремени Тогда
							СтрокаДляОбновления.ВремяПрибытияФакт = ДанныеДляИзменения.ПрибытиеФакт;
						Иначе
							СтрокаДляОбновления.ВремяПрибытия = ДанныеДляИзменения.ПрибытиеФакт;
						КонецЕсли;
					КонецЕсли;
					Если ДанныеДляИзменения.Свойство("УбытиеФакт") Тогда 
						Если флИспользоватьПланФактВремени Тогда
							СтрокаДляОбновления.ВремяУбытияФакт = ДанныеДляИзменения.УбытиеФакт;
						Иначе
							СтрокаДляОбновления.ВремяУбытия = ДанныеДляИзменения.УбытиеФакт;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
			Если ЗначениеЗаполнено(ИмяКлючевойОперации) Тогда
				ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетПланФактаВПутевыхЛистах() Экспорт
	Возврат Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
КонецФункции

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование
//
Процедура НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ТипыПодключенногоОборудования = уатОбщегоНазначенияПовтИсп_проф.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = уатОбщегоНазначенияПовтИсп_проф.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
	
КонецФункции

// Устанавливает размер шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма для изменения шрифта заголовков групп;
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма) Экспорт
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Для Каждого Элемент Из Форма.Элементы Цикл 
			Если Тип(Элемент) = Тип("ГруппаФормы")
				И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
				И Элемент.ОтображатьЗаголовок 
				И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
				Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда 
					Элемент.ШрифтЗаголовка = ЖирныйШрифт;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает данные для построения шаблонов и печатных форм.
// 
// Параметры:
//  ПараметрыПечати - Структура - ПоляДляЗаполнения - Массив -
//  ПоляДляЗаполнения - Массив Из Структура - Поля для заполнения
//  ТоварыДляПечати - МассивИз Структура
// 
// Возвращаемое значение:
//  Массив из Структура - Данные для формирования печатных форм
Функция ДанныеДляФормированияПечатныхФормЭтикеток(ПараметрыПечати, ПоляДляЗаполнения, ТоварыДляПечати = Неопределено) Экспорт

	СписокПредопределенныхПолей = ПечатьЭтикетокИЦенниковБПОКлиентСервер.СписокПредопределенныхПолей();
	
	//НастройкиПечати = Обработки.ПечатьЭтикетокИЦенников.НовыеНастройкиПечати();
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ИсходныеДанные", Неопределено); // Таблица с произвольными данными.
	НастройкиПечати.Вставить("ОбязательныеПоля", Новый Массив);
	НастройкиПечати.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие);
	НастройкиПечати.Вставить("ПараметрыДанных", Новый Структура);
	НастройкиПечати.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	НастройкиПечати.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	НастройкиПечати.ОбязательныеПоля.Добавить("Организация");
	
	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПоУмолчанию";
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИсходныеДанные.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенниковБПО"));
	ИсходныеДанные.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(128)));
	//ИсходныеДанные.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка"));
	ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Для Каждого Товар Из ПараметрыПечати.Товары Цикл
		Если Товар.Выбран Тогда
			Строка = ИсходныеДанные.Добавить();
			Строка.Номенклатура = Товар.НоменклатураБПО;
			Строка.ШаблонЭтикетки = Товар.ШаблонЦенникаЭтикетки;
			Строка.КоличествоЭтикеток = Товар.Количество;
			Строка.Штрихкод = Товар.Штрихкод;
			Строка.Организация = Товар.ОрганизацияБПО;
			//Строка.ШтрихАвтопроверки = Товар.ШтрихАвтопроверки;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиПечати.ИсходныеДанные = ИсходныеДанные;
	//ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	//Если Не ЗначениеЗаполнено(ПараметрыПечати.ТорговыйОбъект) Тогда
	//	Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");
	//Иначе
	//	Организация = ПараметрыПечати.ТорговыйОбъект;
	//КонецЕсли;
	
	//НастройкиПечати.ПараметрыДанных.Вставить("Организация", Организация);
	
	ДанныеНоменклатурыДляФормированияПечатныхФорм = Новый Массив;
	Для Каждого Шаблон Из ПоляДляЗаполнения Цикл;
		ШаблонМакета = Шаблон.Ключ;
		СписокПолей = Шаблон.Значение;
		
		ДобавленныеПоля = Новый Массив;
		СтруктураШаблона = Новый Структура;
		СтруктураШаблона.Вставить("Шаблон", ШаблонМакета);
		СтруктураШаблона.Вставить("ИмяКолонкиШаблон", "ШаблонЭтикетки");
		Если НЕ ПустаяСтрока(ШаблонМакета.ТипЦенника) Тогда
			НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = МакетСхемыКомпоновкиДанныхПечатиЭтикеток(ШаблонМакета.ТипЦенника);
		КонецЕсли;
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого Поле Из СписокПолей Цикл
			Если Не ЗначениеЗаполнено(ДобавленныеПоля.Найти(Поле.Значение)) Тогда
				НастройкиПечати.ОбязательныеПоля.Добавить(Поле);
				ДобавленныеПоля.Добавить(Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДанных = ПодготовитьДанныеДляПечати(НастройкиПечати, СтруктураШаблона);
		//КолонкаИзображений = ТаблицаДанных.ТаблицаТоваров.Колонки.Найти("НоменклатураФайлКартинки");
		//Если КолонкаИзображений <> Неопределено Тогда
		//	МассивФайлов = ТаблицаДанных.ТаблицаТоваров.ВыгрузитьКолонку("НоменклатураФайлКартинки");
		//	ЗаголовокКолонки = КолонкаИзображений.Заголовок;
		//	ТаблицаДанных.ТаблицаТоваров.Колонки.Удалить("НоменклатураФайлКартинки");
		//	ТаблицаДанных.ТаблицаТоваров.Колонки.Добавить("НоменклатураФайлКартинки", Новый ОписаниеТипов("Строка"), ЗаголовокКолонки);
		//	ИндексКартинки = 0;
		//	Для Каждого ФайлКартинки Из МассивФайлов Цикл
		//		Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		//			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		//			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		//			СтрокаBase64 = Base64Строка(ДвоичныеДанныеКартинки);
		//			СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
		//			ТаблицаДанных.ТаблицаТоваров[ИндексКартинки].НоменклатураФайлКартинки = СтрокаBase64;
		//		Иначе
		//			ТаблицаДанных.ТаблицаТоваров[ИндексКартинки].НоменклатураФайлКартинки = "";
		//		КонецЕсли;
		//		ИндексКартинки = ИндексКартинки + 1;
		//	КонецЦикла;
		//КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Шаблон", ШаблонМакета);
		СтруктураДанных.Вставить("ТаблицаНоменклатуры", ТаблицаДанных.ТаблицаТоваров);
		ДанныеНоменклатурыДляФормированияПечатныхФорм.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеНоменклатурыДляФормированияПечатныхФорм;
	
КонецФункции

// Возвращает Макет стандартный схемы компоновки данных для обработки и печати данных.
//  Параметры:
//   ТипЦенника - Строка
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных.
Функция МакетСхемыКомпоновкиДанныхПечатиЭтикеток(ТипЦенника = "") Экспорт
	
	Макет = Обработки.ПечатьЭтикетокИЦенниковБПО.ПолучитьМакет("ПоляШаблонаПоУмолчанию");
	Возврат Макет;
	
КонецФункции

// Вызывается при создании формы обработки ПечатьЭтикетокИЦенниковБПО.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки
//
Процедура ФормаПечатьЭтикетокИЦенниковПриСозданииНаСервере(Форма) Экспорт
	
	// Видимость/доступность элементов формы
	Форма.Элементы.Группа2.Видимость = Ложь;
	Форма.Элементы.РежимПечати.Видимость = Ложь;
	Форма.Элементы.ЦеныНаДату.Видимость = Ложь;
	Форма.Элементы.КаждаяЭтикеткаНаНовомЛисте.Видимость = Ложь;
	Форма.Элементы.ЗаполнитьПоОтбору.Видимость = Ложь;
	Форма.Элементы.Отбор.Видимость = Ложь;
	Форма.Элементы.ПодобратьТовары.Заголовок = "Подбор";
	Форма.Элементы.ПодобратьТовары.Картинка = БиблиотекаКартинок.уатПодбор;
	Форма.Элементы.ПоискПоШтрихкоду.Картинка = БиблиотекаКартинок.уатНовыйПоШтрихкоду;
	Форма.Элементы.ПоискПоШтрихкоду.Отображение = ОтображениеКнопки.Картинка;
	Форма.Элементы.НовыйШтрихкод.Видимость = Ложь;
	Форма.Элементы.ТоварыХарактеристикаБПО.Видимость = Ложь;
	Форма.Элементы.ТоварыУпаковкаБПО.Видимость = Ложь;
	Форма.Элементы.ТоварыЦена.Видимость = Ложь;
	Форма.Элементы.ТоварыУстановитьКоличествоПечати.Заголовок = "Количество этикеток";
	Форма.Элементы.ТоварыУстановитьШаблонПечати.Заголовок = "Шаблон этикеток";
		
	// Заполнение таблицы товаров при открытии из документа
	Если ЭтоАдресВременногоХранилища(Форма.Параметры.АдресВХранилище) Тогда
		СтруктураДанных = ПолучитьИзВременногоХранилища(Форма.Параметры.АдресВХранилище);
		
		Если СтруктураДанных.Свойство("Товары") Тогда
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Выбран",               Новый ОписаниеТипов("Булево"));
			Товары.Колонки.Добавить("НоменклатураБПО",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			Товары.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка"));
			Товары.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			Товары.Колонки.Добавить("ОрганизацияБПО",       Новый ОписаниеТипов("СправочникСсылка.Организации"));
					
			Для Каждого СтрокаТоваров Из СтруктураДанных.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Выбран          = Истина;
				НоваяСтрока.НоменклатураБПО = СтрокаТоваров.Номенклатура;
				НоваяСтрока.Количество      = ?(СтрокаТоваров.Номенклатура.ПечатьЭтикетокДляКаждойЕдиницыНоменклатуры,
					СтрокаТоваров.КоличествоВДокументе, 1);
				
				мсвШтрихкоды = уатЗащищенныеФункцииСервер_проф.ПолучитьШтрихкодыОбъекта(НоваяСтрока.НоменклатураБПО);
				Если мсвШтрихкоды.Количество() > 0 Тогда
					НоваяСтрока.Штрихкод = мсвШтрихкоды[0];
				Иначе
					НоваяСтрока.Штрихкод = "";
				КонецЕсли;
				
				СтруктураДанных.Свойство("Организация", НоваяСтрока.ОрганизацияБПО);
			КонецЦикла;
			
			СтруктураДанных.Товары = Товары.Скопировать();
		
			Форма.Объект.Товары.Загрузить(СтруктураДанных.Товары);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТоварыИзВременногоХранилищаПечатьЭтикеток(ЗначениеВыбора) Экспорт
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",		 ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",	 ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",		 ТекСтрока.Количество);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции

#Область ИнтеграцияПечатиЭтикетокИЦенниковУНФ

// Подготавливает данные, необходимые для печати ценников и этикеток.
// 
// Параметры:
// 	НастройкиПечати - Структура
// 	ОписаниеШаблона - Структура
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
Функция ПодготовитьДанныеДляПечати(НастройкиПечати, ОписаниеШаблона = Неопределено)
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если ОписаниеШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(ОписаниеШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, ОписаниеШаблона.Шаблон);
		ТаблицаИсходныеДанные = НастройкиПечати.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров" , Неопределено);
	Результат.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенниковБПО.ПолучитьМакет(НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если НастройкиПечати.КомпоновщикНастроек <> Неопределено Тогда
		
		// Удаление некорректных отборов.
		Количество = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			
			ЭлементОтбора = НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПараметрТипШтрихкода(ЭлементОтбора) И ЭлементОтбора.Использование Тогда
				ПараметрТипШтрихкода = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
		СкопироватьЭлементыОтбора(Компоновщик.Настройки.Отбор, НастройкиПечати.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из НастройкиПечати.ОбязательныеПоля Цикл
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") И ОбязательноеПоле.Значение <> "" Тогда
			ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле.Значение);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
				ВыбранноеПоле.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		Иначе
			ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из НастройкиПечати.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	//УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(ПараметрТипШтрихкода) Тогда
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТипШтрихкода", ПараметрТипШтрихкода);
	КонецЕсли;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// {УАТ}
	Для Каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Поле.ПутьКДанным, Поле.Имя);
	КонецЦикла;
	// {/УАТ}
	
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("Номенклатура", "Номенклатура");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("КоличествоЭтикетокДляПечати", "КоличествоЭтикетокДляПечати");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("ШаблонЭтикеткиДляПечати", "ШаблонЭтикеткиДляПечати");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("КоличествоЦенниковДляПечати", "КоличествоЦенниковДляПечати");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("ШаблонЦенникаДляПечати", "ШаблонЦенникаДляПечати");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("Штрихкод", "Штрихкод");
	//Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить("Организация", "Организация");
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные);
	
	Результат.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Таблица = Результат.ТаблицаТоваров;
	Для Каждого ОбязательноеПоле Из НастройкиПечати.ОбязательныеПоля Цикл
		
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") Тогда
			СтрокаПоиска = ОбязательноеПоле.Значение;
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ".", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "[", ""); 
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "]", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, " ", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "%", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ",", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "(", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ")", "_");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", "_");
			Колонка = Таблица.Колонки.Найти(СтрокаПоиска);
			Если Колонка <> Неопределено Тогда
				Колонка.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено)
	
	Если Кэш <> Неопределено Тогда
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЕсли;
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Получает полное имя поля по частям.
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	МассивЧастей = Новый Массив;
	ИмяДляОбработки = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено)
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заменяет текст вложенного запроса в скобках `(ВЫБРАТЬ...) КАК ИсходныеДанные` именем параметра "&Таблица" 
// 
// Параметры:
// 	Запрос - запрос, текст которого преобразуется
// 	ТаблицаИсходныеДанные - таблица с исходными данными
Процедура ПодготовитьЗапросДляИспользованияТаблицыИсходныеДанные(Запрос, ТаблицаИсходныеДанные)

	Если ТаблицаИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачПозиция = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
	Если НачПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонПозиция = СтрНайти(Запрос.Текст, ") КАК ИсходныеДанные");
	Если КонПозиция = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон("%1&Таблица%2",
		Сред(Запрос.Текст, 1, НачПозиция - 1),
		Сред(Запрос.Текст, КонПозиция + 1));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
	
	Если ТаблицаИсходныеДанные.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТаблицаИсходныеДанные.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);	
		
КонецПроцедуры

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

Процедура СкопироватьЭлементыОтбора(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ЭтоПараметрТипШтрихкода(ЭлементИсточник) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции.
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементыОтбора(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Позволяет определить ПараметрДанных.ТипШтрихкода и пропустить его при установке отборов.
// Данный параметр добавлен в таблицу отборов, чтобы не добавлять новые элементы на форму.
// Установка этого параметра в свойстве компоновщика "Отбор" приводит к ошибке 
// "Глобальные элементы отбора обязательно должны использовать поля".
// Поэтому данный параметр при копировании отборов пропускается, а в коде устанавливается с помощью
// УстановитьЗначениеПараметраСКД(Компоновщик, "ТипШтрихкода", ПараметрТипШтрихкода). 
Функция ЭтоПараметрТипШтрихкода(Знач ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ТипШтрихкода");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокСсылка) Экспорт
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокСсылка);
	СтруктураШапкиДокумента.Вставить("Дата", ДокСсылка.Дата);
	Для каждого Реквизит Из ДокСсылка.Метаданные().Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокСсылка[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Функция возвращает струткуру с наименованием и должностью контактного лица контрагента
Функция ПолучитьДолжностьИНаименованиеКонтрагента(Знач мКонтрагент) Экспорт 
	
	Результат = Новый Структура("Наименование, Должность", "", "");
	
	мЗапрос = Новый Запрос;
	
	Если уатРаботаСМетаданными.ЕстьСправочник("КонтактныеЛицаКонтрагентов") Тогда
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_иректор""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтрагентов.Ссылка,
		|	2
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_л% бухгалтер""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.ОсновноеКонтактноеЛицо,
		|	3
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Владелец
		|	И Контрагенты.ОсновноеКонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)
		|	И Контрагенты.ОсновноеКонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|	И Контрагенты.ОсновноеКонтактноеЛицо <> НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	Иначе
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.ОбъектВладелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_иректор""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтрагентов.Ссылка,
		|	2
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.ОбъектВладелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_л% бухгалтер""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.ОсновноеКонтактноеЛицо,
		|	3
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Владелец
		|	И Контрагенты.ОсновноеКонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|	И Контрагенты.ОсновноеКонтактноеЛицо <> НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	КонецЕсли;
	
	мЗапрос.УстановитьПараметр("Владелец", мКонтрагент);
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		Результат.Наименование = мВыборка.Ссылка.Наименование;
		Результат.Должность    = мВыборка.Ссылка.Должность;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеКонтрагентаДляЭСМ7()

#КонецОбласти

#Область ТерминалПутевыхЛистов

// Функция предназначена для определения необходимости отрыть форму обработки "уатТерминалПриемаИВыдачиПутевыхЛистов"
// при старте системы.
//
// Возвращаемое значение:
//   Булево   - признак необходимости открытия обработки "уатТерминалПриемаИВыдачиПутевыхЛистов".
//
Функция НеобходимоОткрытиеТерминалаПЛприСтарте() Экспорт
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.уатТерминалПутевыхЛистов)
			И Не ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.ПолныеПрава)
			И Константы.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов.Получить() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // НеобходимоОткрытиеТерминалаПЛприСтарте()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияОтчетовOMNICOMM

Функция СтартФоновогоЗаданияНаСервере(ПараметрыФормированияОтчета, ИмяМетода, ФоновоеЗаданиеАдресХранилища, ФоновоеЗаданиеИдентификатор, ИдентификаторФормы) Экспорт
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru='Выполнение отчета Omnicomm';en='Report execution Omnicomm'");
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПараметрыЗапуска.ОжидатьЗавершение = 4;
	Иначе
		ПараметрыЗапуска.ОжидатьЗавершение = 2;
	КонецЕсли;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыФормированияОтчета, ПараметрыЗапуска);
		
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	ЗаданиеЗапущено = ?(РезультатФоновогоЗадания.Статус = "Выполнено", Ложь, Истина);
	Возврат ЗаданиеЗапущено;
	
КонецФункции

Функция ФоновоеЗаданиеПроверитьНаСервере(ОтчетТабличныйДокумент, ОтчетСформирован, ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища) Экспорт
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат(ОтчетСформирован, ОтчетТабличныйДокумент, ФоновоеЗаданиеАдресХранилища);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

Процедура ФоновоеЗаданиеЗагрузитьРезультат(ОтчетСформирован, ОтчетТабличныйДокумент, ФоновоеЗаданиеАдресХранилища)
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
	Если Успех <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЕщеОбновляются = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "ДанныеЕщеОбновляются", Ложь);
	Если ДанныеЕщеОбновляются Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВариантыОтчетов.СообщениеДанныеЕщеОбновляются());
	КонецЕсли;
	
	ОтчетТабличныйДокумент = РезультатФормирования.ТабличныйДокумент;
	
	ОтчетСформирован = Истина;
	
КонецПроцедуры

Функция Omnicom_ПолучитьНастройки(Ключ)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		Ключ, 
		"ФормаНастроекОтчета",,Пользователи.АвторизованныйПользователь());
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура();
		СтруктураНастроек.Вставить("УчетнаяЗапись", Неопределено);
		СтруктураНастроек.Вставить("movementAndWorkingParams", Истина);
		СтруктураНастроек.Вставить("mileage", Истина);
		СтруктураНастроек.Вставить("mileageAverage", Истина);
		СтруктураНастроек.Вставить("mileageSpeeding", Истина);
		СтруктураНастроек.Вставить("speedAverage", Истина);
		СтруктураНастроек.Вставить("speedMax", Истина);
		СтруктураНастроек.Вставить("movementTimeTOtal", Истина);
		СтруктураНастроек.Вставить("movementTime", Истина);
		СтруктураНастроек.Вставить("engineOperationTime", Истина);
		СтруктураНастроек.Вставить("engineOperationTimeInMovement", Истина);
		СтруктураНастроек.Вставить("engineOperationTimeWithoutMovement", Истина);
		СтруктураНастроек.Вставить("engineIdlingTime", Истина);
		СтруктураНастроек.Вставить("engineOperationTimeNormalSpeed", Истина);
		СтруктураНастроек.Вставить("engineOperationTimeMaxSpeed", Истина);
		СтруктураНастроек.Вставить("engineOffTime", Истина);
		СтруктураНастроек.Вставить("odometerInitial", Истина);
		СтруктураНастроек.Вставить("odometerFinal", Истина);
		
		СтруктураНастроек.Вставить("fuelParams", Истина);	
		СтруктураНастроек.Вставить("fuelVolumeInitial", Истина);
		СтруктураНастроек.Вставить("fuelVolumeFinal", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActual", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualAverage", Истина);
		СтруктураНастроек.Вставить("fuellingsVolume", Истина);
		СтруктураНастроек.Вставить("fillsVolume", Истина);
		СтруктураНастроек.Вставить("drainingsVolume", Истина);
		СтруктураНастроек.Вставить("fuelDispensingVolume", Истина);
		СтруктураНастроек.Вставить("possibleDrainOrExcess", Истина);
		СтруктураНастроек.Вставить("fuelVolumeMin", Истина);
		СтруктураНастроек.Вставить("fuelVolumeMax", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualPer100km", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualInMovementPer100km", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualInMovement", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualWithoutMovement", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionRatedPer100km", Истина);
		СтруктураНастроек.Вставить("fuelVolumeCalculatedByFuelConsumptionRatedPer100km", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionDeviationInPercentPer100km", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionDeviationPer100km", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualPer1HourEngineOperation", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualPer1HourEngineOperationWithoutMovement", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionRatedPer1HourEngineOperation", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionRatedByPeriod", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionDeviationInPercentPer1HourEngineOperation", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionDeviationPer1HourEngineOperation", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualInMovementIdleEngineSpeed", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualWithoutMovementIdleEngineSpeed", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualInMovementNormalEngineSpeed", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualWithoutMovementNormalEngineSpeed", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualInMovementMaxEngineSpeed", Истина);
		СтруктураНастроек.Вставить("fuelConsumptionActualWithoutMovementMaxEngineSpeed", Истина);
		СтруктураНастроек.Вставить("engineIdleFuelConsumptionDeviationFromRatedPer1Hour", Истина);
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция Omnicom_ВывестиСообщениеОтчет(Макет, Текст) Экспорт
	
	тдРезультат = Новый ТабличныйДокумент();
	ОбластьСообщения = Макет.ПолучитьОбласть("ШапкаОтчетаСообщение");
	ОбластьСообщения.Параметры.ТекстСообщения = Текст;
	тдРезультат.Вывести(ОбластьСообщения);
	
	Возврат тдРезультат;
	
КонецФункции

// Считывает состояние фонового задания по переданному идентификатору.
//
// Параметры:
//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
//
// Возвращаемое значение:
//   Неопределено - Задание не найдено.
//   Структура - Сведения о задании.
//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
//
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура Omnicomm_СформироватьСводныйОтчетВФоне(Параметры, АдресХранилища) Экспорт

	Формирование = Omnicomm_СформироватьСводныйОтчет(Параметры);
	
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|Успех, ТекстОшибки, ДанныеЕщеОбновляются");
	ЗаполнитьЗначенияСвойств(Результат, Формирование);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция Omnicomm_СформироватьСводныйОтчет(Знач Параметры) Экспорт
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|ТекстОшибки, Успех, ДанныеЕщеОбновляются");
	
	Результат.Успех = Ложь;
	Результат.ТабличныйДокумент    = Новый ТабличныйДокумент;
	Результат.ДанныеЕщеОбновляются = Ложь;
	
	Если Параметры.Свойство("ДатаНачОтчет") Тогда
		ДатаНачОтчет = Параметры.ДатаНачОтчет;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаКонОтчет") Тогда
		ДатаКонОтчет = Параметры.ДатаКонОтчет;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.Свойство("мсвОтмеченныеТС") Тогда
		мсвОтмеченныеТС = Параметры.мсвОтмеченныеТС;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Макет = Отчеты.уатСводныйОтчетOmnicomm.ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатТС.Представление КАК Представление,
		|	уатТС.ИДвСистемеНавигации КАК ИДвСистемеНавигации,
		|	уатТС.Ссылка КАК Ссылка,
		|	уатТС.Подразделение КАК Подразделение,
		|	уатТС.УчетнаяЗаписьСистемыМониторинга КАК УчетнаяЗаписьСистемыМониторинга
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.ИспользуемаяСистемаGPS = &ИспользуемаяСистемаGPS
		|	И уатТС.ИДвСистемеНавигации <> """"
		|	И уатТС.ИДвСистемеНавигации <> НЕОПРЕДЕЛЕНО
		|	И уатТС.Ссылка В(&мсвОтмеченныеТС)";
	
	Запрос.УстановитьПараметр("мсвОтмеченныеТС", мсвОтмеченныеТС);
	Запрос.УстановитьПараметр("ИспользуемаяСистемаGPS", Справочники.уатВнешниеСистемы.Omnicomm);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОтмеченныеТС     = Новый Соответствие();
	ОтмеченныеСсылка = Новый Соответствие();
	мсвТС        = Новый Массив();
	Пока Выборка.Следующий() Цикл
		мсвТС.Добавить(Выборка.Ссылка);
		ОтмеченныеТС.Вставить(Выборка.ИДвСистемеНавигации, Новый Структура("Ссылка, Подразделение, Представление, Группа", Выборка.Ссылка, Выборка.Подразделение, Выборка.Представление, ""));
		ОтмеченныеСсылка.Вставить(Выборка.Ссылка,
			Новый Структура("ИДвСистемеНавигации, Подразделение, Представление, Группа",
			Выборка.ИДвСистемеНавигации, Выборка.Подразделение, Выборка.Представление, ""));
	КонецЦикла;
	
	ТекстОшибки = "";
	ДокументРезультат = Новый ТабличныйДокумент();
	
	Если ОтмеченныеТС.Количество() = 0 Тогда
		ДокументРезультат = Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Необходимо выбрать ТС для отображения данных'"));
		Результат.ТабличныйДокумент    = ДокументРезультат;
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;

	МассивДней = Новый Массив();
	КолВоДней = (НачалоДня(ДатаКонОтчет)-НачалоДня(ДатаНачОтчет))/86400;
	
	Дата = ДатаНачОтчет;
	Для Сч = 0 По КолВоДней Цикл
		МассивДней.Добавить(Дата);
		Дата = Дата + 60 * 60 * 24;
	КонецЦикла;
	
	ТаблицаПараметры = Новый ТаблицаЗначений();
	ТаблицаПараметры.Колонки.Добавить("ТС");
	ТаблицаПараметры.Колонки.Добавить("ГруппаТС");
	ТаблицаПараметры.Колонки.Добавить("Дата");
	ТаблицаПараметры.Колонки.Добавить("ГруппаПараметра");
	ТаблицаПараметры.Колонки.Добавить("ГруппаПараметраДополнение");
	ТаблицаПараметры.Колонки.Добавить("НомерСтроки");
	ТаблицаПараметры.Колонки.Добавить("Параметр");
	ТаблицаПараметры.Колонки.Добавить("НаименованиеГруппыПараметра");
	ТаблицаПараметры.Колонки.Добавить("НаименованиеПараметра");
	ТаблицаПараметры.Колонки.Добавить("Значение");
	ТаблицаПараметры.Колонки.Добавить("ЗначениеСтрока");
	ТаблицаПараметры.Колонки.Добавить("ЗначениеПроцентОт");
	ТаблицаПараметры.Колонки.Добавить("Выводить");
	ТаблицаПараметры.Колонки.Добавить("ЭтоВремя");
	ТаблицаПараметры.Колонки.Добавить("ФункцияИтогов");

	МассивДанных = уатМониторинг.РазбитьМассивТСНаРазличныеУчетныеЗаписи(мсвТС);
	
	СтрокаТС = "";
	Для Каждого ТекСтрокаУчетка Из МассивДанных Цикл
		
		УчетнаяЗаписьСистемыМониторинга = ТекСтрокаУчетка.УчетнаяЗаписьСистемыМониторинга;
		СпособРеализацииВебСервиса      = УчетнаяЗаписьСистемыМониторинга.СпособРеализацииВебСервиса;
		
		Для Каждого ТекТССсылка Из ТекСтрокаУчетка.МассивТС Цикл
			ТекТС = ОтмеченныеСсылка.Получить(ТекТССсылка);
			Если ТекТС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТС     = ТекТС.Представление;
			Группа = ТекТС.Группа;
			Ссылка = ТекТССсылка;
			
			СтрокаТС = ?(ЗначениеЗаполнено(СтрокаТС), СтрокаТС + ", ", СтрокаТС) + ТекТС.Представление;
			
			Индекс = 1;
			Для Каждого ТекДата Из МассивДней Цикл
				Если Индекс = МассивДней.Количество() Тогда
					ДатаОкончания = КонецДня(ТекДата) - 59;
				Иначе
					ДатаОкончания = КонецДня(ТекДата);
				КонецЕсли;
				Индекс = Индекс + 1;

				ДанныеПоОтчету = уатИнтеграцияМониторингOmnicomm.Omnicomm_ПолучитьОтчетСтатистика(ТекДата, ДатаОкончания, Ссылка, ТекстОшибки,, УчетнаяЗаписьСистемыМониторинга);
				Если ДанныеПоОтчету <> Неопределено Тогда
					Statistics = ДанныеПоОтчету.return.statistics;
					Если Statistics <> Неопределено Тогда
						movementAndWorkingParams = Statistics.movementAndWorkingParams;
						optionalEquipmentParams  = Statistics.optionalEquipmentParams;
						CANDataParams            = Statistics.CANDataParams;
						addDataParams            = Statistics.addDataParams;
						fuelParams               = Statistics.fuelParams[0];
						fuelParams2              = Неопределено;
						Если Statistics.fuelParams.Количество() > 1 Тогда
							fuelParams2          = Statistics.fuelParams[1];
						КонецЕсли;
						
						СтруктураНастроек = Omnicom_ПолучитьНастройки("уатСводныйОтчетOmnicomm.ФормаНастроекОтчета");
						
						Если СтруктураНастроек.Свойство("movementAndWorkingParams")
							И movementAndWorkingParams <> Неопределено Тогда
							Если ТипЗнч(movementAndWorkingParams) = Тип("Структура") Тогда
								СвойстваParams = movementAndWorkingParams;
								Ключ           = "Ключ";
							Иначе
								СвойстваParams = movementAndWorkingParams.Свойства();
								Ключ           = "Имя";
							КонецЕсли;
							Для Каждого ТекСтрока Из СвойстваParams Цикл
								ЗначениеПараметра = movementAndWorkingParams[ТекСтрока[Ключ]];
								Если ЗначениеПараметра = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								СтрокаПараметров = ТаблицаПараметры.Добавить();
								СтрокаПараметров.ТС       = ТС;
								СтрокаПараметров.ГруппаТС = Группа;
								СтрокаПараметров.Дата     = ТекДата;
								СтрокаПараметров.ГруппаПараметра = "movementAndWorkingParams";
								СтрокаПараметров.ГруппаПараметраДополнение = "";
								СтрокаПараметров.Параметр = ТекСтрока[Ключ];
								СтрокаПараметров.Значение = ЗначениеПараметра;
								СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
							КонецЦикла;
						КонецЕсли;
						
						Если СтруктураНастроек.Свойство("fuelParams") Тогда
							Если fuelParams <> Неопределено Тогда
								Если ТипЗнч(fuelParams) = Тип("Структура") Тогда
									СвойстваParams = fuelParams;
									Ключ           = "Ключ";
								Иначе
									СвойстваParams = fuelParams.Свойства();
									Ключ           = "Имя";
								КонецЕсли;
								Для Каждого ТекСтрока Из СвойстваParams Цикл
									ЗначениеПараметра = fuelParams[ТекСтрока[Ключ]];
									Если ТекСтрока[Ключ] = "tankNumber" ИЛИ ЗначениеПараметра = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									СтрокаПараметров = ТаблицаПараметры.Добавить();
									СтрокаПараметров.ТС       = ТС;
									СтрокаПараметров.ГруппаТС = Группа;
									СтрокаПараметров.Дата     = ТекДата;
									СтрокаПараметров.ГруппаПараметра = "fuelParams";
									СтрокаПараметров.ГруппаПараметраДополнение = Нстр("ru = '(основная ёмкость)'");
									СтрокаПараметров.Параметр = ТекСтрока[Ключ];
									СтрокаПараметров.Значение = ЗначениеПараметра;
									СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
								КонецЦикла;
							КонецЕсли;
							
							Если fuelParams2 <> Неопределено Тогда
								Если ТипЗнч(fuelParams2) = Тип("Структура") Тогда
									СвойстваParams = fuelParams2;
									Ключ           = "Ключ";
								Иначе
									СвойстваParams = fuelParams2.Свойства();
									Ключ           = "Имя";
								КонецЕсли;
								Для Каждого ТекСтрока Из СвойстваParams Цикл
									ЗначениеПараметра = fuelParams2[ТекСтрока[Ключ]];
									Если ТекСтрока[Ключ] = "tankNumber" ИЛИ ЗначениеПараметра = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									СтрокаПараметров = ТаблицаПараметры.Добавить();
									СтрокаПараметров.ТС       = ТС;
									СтрокаПараметров.ГруппаТС = Группа;
									СтрокаПараметров.Дата     = ТекДата;
									СтрокаПараметров.ГруппаПараметра = "fuelParams";
									СтрокаПараметров.ГруппаПараметраДополнение = Нстр("ru = '(дополнительная ёмкость)'");
									СтрокаПараметров.Параметр = ТекСтрока[Ключ];
									СтрокаПараметров.Значение = ЗначениеПараметра;
									СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
						мОборудования = Новый Массив();
						Если optionalEquipmentParams <> Неопределено Тогда
							Если ТипЗнч(optionalEquipmentParams) = Тип("Структура") Тогда
								Ключ           = "Ключ";
							Иначе
								Ключ           = "Имя";
							КонецЕсли;

							КоличествоОборудования = optionalEquipmentParams.Количество();
							Для Каждого ТекОборудование Из optionalEquipmentParams Цикл
								univInputName = ТекОборудование["univInputName"];
								СвойстваParams = ТекОборудование.Свойства();
								Для Каждого ТекСтрока Из СвойстваParams Цикл
									ЗначениеПараметра = ТекОборудование[ТекСтрока[Ключ]];
									Если ТекСтрока[Ключ] = "univInputName" 
										ИЛИ ТекСтрока[Ключ] = "univInputId" ИЛИ ЗначениеПараметра = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									СтрокаПараметров = ТаблицаПараметры.Добавить();
									СтрокаПараметров.ТС       = ТС;
									СтрокаПараметров.ГруппаТС = Группа;
									СтрокаПараметров.Дата     = ТекДата;
									СтрокаПараметров.ГруппаПараметра = "optionalEquipmentParams";
									СтрокаПараметров.ГруппаПараметраДополнение = univInputName;
									СтрокаПараметров.Параметр = ТекСтрока[Ключ];
									СтрокаПараметров.Значение = ЗначениеПараметра;
									СтрокаПараметров.Выводить = Истина;
								КонецЦикла;
								мОборудования.Добавить(univInputName);
							КонецЦикла;
						КонецЕсли;
						
						Если CANDataParams <> Неопределено Тогда
							Если ТипЗнч(CANDataParams) = Тип("Структура") Тогда
								СвойстваParams = CANDataParams;
								Ключ           = "Ключ";
							Иначе
								СвойстваParams = CANDataParams.Свойства();
								Ключ           = "Имя";
							КонецЕсли;
							Для Каждого ТекСтрока Из СвойстваParams Цикл
								ЗначениеПараметра = CANDataParams[ТекСтрока[Ключ]];
								Если ЗначениеПараметра = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								СтрокаПараметров = ТаблицаПараметры.Добавить();
								СтрокаПараметров.ТС       = ТС;
								СтрокаПараметров.ГруппаТС = Группа;
								СтрокаПараметров.Дата     = ТекДата;
								СтрокаПараметров.ГруппаПараметра = "CANDataParams";
								СтрокаПараметров.ГруппаПараметраДополнение = "";
								СтрокаПараметров.Параметр = ТекСтрока[Ключ];
								СтрокаПараметров.Значение = ЗначениеПараметра;
								СтрокаПараметров.Выводить = Истина;
							КонецЦикла;
						КонецЕсли;
					Иначе
						СтрокаПараметров = ТаблицаПараметры.Добавить();
						СтрокаПараметров.ТС       = ТС;
						СтрокаПараметров.ГруппаТС = Группа;
						СтрокаПараметров.Дата     = ТекДата;
						
						мОборудования = Новый Массив();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ТаблицаПараметры.Количество() = 0 Тогда
		ДокументРезультат = Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Данные по ТС не найдены'"));
		Результат.ТабличныйДокумент    = ДокументРезультат;
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтчета = Макет.ПолучитьОбласть("ШапкаОтчетаПараметры");
	ПараметрыОтчета.Параметры.ДатаНачала    = ДатаНачОтчет;
	ПараметрыОтчета.Параметры.ДатаОкончания = ДатаКонОтчет;
		
	ПараметрыОтчета.Параметры.ТС = СтрокаТС;
	ДокументРезультат.Вывести(ПараметрыОтчета);
	
	ИмяМакета = "НастройкиПоУмолчанию";
	МакетНастройки	 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.уатНастройкиОтчетовПоУмолчаниюOmnicomm");
	Группа			 = "";
	Для НомерСтроки = 1 По МакетНастройки.ВысотаТаблицы Цикл
		
		ЭтоГруппа	 = Ложь;
		ИмяПараметра = СокрЛП(МакетНастройки.Область(НомерСтроки, 1).Текст);
		Если СтрНайти(ИмяПараметра, "ИмяГруппыПараметра") <> 0 Тогда
			ИмяПараметра	 = СтрЗаменить(СокрЛП(ИмяПараметра), "ИмяГруппыПараметра_", "");
			Группа			 = ИмяПараметра;
			ЭтоГруппа		 = Истина;
		Иначе
			ИмяПараметра	 = СтрЗаменить(СокрЛП(МакетНастройки.Область(НомерСтроки, 1).Текст), "ИмяПараметра_", "");
		КонецЕсли;
		
		СтрНаименование		 = СокрЛП(МакетНастройки.Область(НомерСтроки, 2).Текст);
		
		Если ЭтоГруппа Тогда
			мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра", ИмяПараметра));
			Для Каждого ТекПараметр Из мПараметров Цикл
				ТекПараметр.НаименованиеГруппыПараметра = СтрНаименование + " " + ТекПараметр.ГруппаПараметраДополнение;
			КонецЦикла;
		Иначе
			НаименованиеНесколькоОбъектов	 = СокрЛП(МакетНастройки.Область(НомерСтроки, 3).Текст);
			ФункцияИтогов					 = СокрЛП(МакетНастройки.Область(НомерСтроки, 7).Текст);
			ЭтоВремя						 = СокрЛП(МакетНастройки.Область(НомерСтроки, 4).Текст)= "1";
			ПроцентОт						 = СтрЗаменить(СокрЛП(МакетНастройки.Область(НомерСтроки, 5).Текст), "ИмяПараметра_", "");
			Номер							 = Число(СокрЛП(МакетНастройки.Область(НомерСтроки, 6).Текст));
			мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра, Параметр", Группа, ИмяПараметра));
			Для Каждого ТекПараметр Из мПараметров Цикл
				Если ЭтоВремя Тогда
					ТекПараметр.ЭтоВремя = Истина;
					ВсегоСекунды = ТекПараметр.Значение;
					Часы     = Цел(ВсегоСекунды/3600);
					Минуты   = Цел((ВсегоСекунды - Часы*3600)/60);
					Секунды  = ВсегоСекунды - Часы*3600 - Минуты*60;
					Значение = Строка(Часы) +":" + Строка(Минуты) + ":" + Строка(Секунды);
					
					Если ПроцентОт <> "" Тогда
						Если ПроцентОт = "ПериодОтчета" Тогда
							Timestamp = ДатаКонОтчет - ДатаНачОтчет;
							Процент  = Окр(((ВсегоСекунды * 100)/Timestamp), 1);
							Значение = Значение + " (" + Процент + ")";
							ТекПараметр.ЗначениеПроцентОт = Timestamp;
						Иначе
							мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра, Параметр", Группа, ПроцентОт));
							Если мПараметров.Количество() <> 0 Тогда
								Если мПараметров[0].Значение = 0 Тогда
									Процент  = 0;
								Иначе
									Процент  = Окр(((ВсегоСекунды * 100)/мПараметров[0].Значение), 1);
								КонецЕсли;
								Значение = Значение + " (" + Процент + ")";
								ТекПараметр.ЗначениеПроцентОт = мПараметров[0].Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = ТекПараметр.Значение;
				КонецЕсли;
				ТекПараметр.ФункцияИтогов         = ФункцияИтогов;
				ТекПараметр.ЗначениеСтрока        = Значение;
				ТекПараметр.НаименованиеПараметра = СтрНаименование;
				ТекПараметр.НомерСтроки           = Номер;
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
	тзВывода = Новый Соответствие();
	НомерКолонки = 1;
	ТаблицаПараметрыШапка = ТаблицаПараметры.Скопировать();
	ТаблицаПараметрыШапка.Свернуть("Выводить, ГруппаПараметра, ГруппаПараметраДополнение, Параметр, НомерСтроки, НаименованиеПараметра, НаименованиеГруппыПараметра");
	ТаблицаПараметрыШапка.Сортировать("ГруппаПараметра, НомерСтроки");
	
	ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ОбщиеПараметрыГруппа");
	ДокументРезультат.Вывести(ОбластьШапкаФакт);

	ДанныеMovementAndWorkingParams	 = ТаблицаПараметрыШапка.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра", Истина, "movementAndWorkingParams"));
	ДанныеfuelParams				 = ТаблицаПараметрыШапка.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "fuelParams", Нстр("ru = '(основная ёмкость)'")));
	Если fuelParams2 <> Неопределено Тогда 
		ДанныеfuelParams2 = ТаблицаПараметрыШапка.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "fuelParams", Нстр("ru = '(дополнительная ёмкость)'")));
	Конецесли;
	optionalEquipmentParams = Новый Массив();
	Для Каждого ТекСтрока Из мОборудования Цикл
		optionalEquipmentParams.Добавить(ТаблицаПараметрыШапка.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "optionalEquipmentParams", ТекСтрока)));
	КонецЦикла;
	
	CANDataParams = ТаблицаПараметрыШапка.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра", Истина, "CANDataParams"));
	
	Если ДанныеMovementAndWorkingParams.Количество() <> 0 Тогда
		ОбластьШапкаФакт = Макет.Область("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.ШиринаКолонки = ДанныеMovementAndWorkingParams.Количество() * 20;
		
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.Параметры.ОбщиеПараметры = ДанныеMovementAndWorkingParams[0].НаименованиеГруппыПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
	КонецЕсли;
	
	Если ДанныеfuelParams.Количество() <> 0 Тогда
		ОбластьШапкаФакт = Макет.Область("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.ШиринаКолонки = ДанныеfuelParams.Количество() * 20;
		
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.Параметры.ОбщиеПараметры = ДанныеfuelParams[0].НаименованиеГруппыПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
	КонецЕсли;
	
	Если fuelParams2 <> Неопределено И ДанныеfuelParams2.Количество() <> 0 Тогда
		ОбластьШапкаФакт = Макет.Область("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.ШиринаКолонки = ДанныеfuelParams2.Количество() * 20;
		
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.Параметры.ОбщиеПараметры = ДанныеfuelParams2[0].НаименованиеГруппыПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
	Конецесли;
	
	Если optionalEquipmentParams.Количество() <> 0 Тогда
		Для Каждого ТекСтрока Из optionalEquipmentParams Цикл
			Если ТекСтрока.Количество() <> 0  Тогда
				ОбластьШапкаФакт = Макет.Область("ГруппаПараметровОбщие|ПараметрГруппа");
				ОбластьШапкаФакт.ШиринаКолонки = ТекСтрока.Количество() * 20;
				
				ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ПараметрГруппа");
				ОбластьШапкаФакт.Параметры.ОбщиеПараметры = ТекСтрока[0].НаименованиеГруппыПараметра;
				ДокументРезультат.Присоединить(ОбластьШапкаФакт);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если CANDataParams.Количество() <> 0 Тогда
		ОбластьШапкаФакт = Макет.Область("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.ШиринаКолонки = CANDataParams.Количество() * 20;
		
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметровОбщие|ПараметрГруппа");
		ОбластьШапкаФакт.Параметры.ОбщиеПараметры = CANDataParams[0].НаименованиеГруппыПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
	КонецЕсли;
	
	ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|ОбщиеПараметры");
	ДокументРезультат.Вывести(ОбластьШапкаФакт);
	
	ОбластьШапкаФакт = Макет.Область("ГруппаПараметров|Параметр");
	ОбластьШапкаФакт.ШиринаКолонки = 20;
	
	КолВоДанныеMovementAndWorkingParams = ДанныеMovementAndWorkingParams.Количество();
	Для Каждого ТекСтрока Из ДанныеMovementAndWorkingParams Цикл
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|Параметр");
		ОбластьШапкаФакт.Параметры.НаименованиеПараметра = ТекСтрока.НаименованиеПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
		тзВывода.Вставить(ТекСтрока.Параметр, НомерКолонки);
		НомерКолонки = НомерКолонки + 1;

	КонецЦикла;
	
	КолВоДанныеfuelParams = ДанныеfuelParams.Количество();
	Для Каждого ТекСтрока Из ДанныеfuelParams Цикл
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|Параметр");
		ОбластьШапкаФакт.Параметры.НаименованиеПараметра = ТекСтрока.НаименованиеПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
		тзВывода.Вставить(ТекСтрока.Параметр + ТекСтрока.ГруппаПараметраДополнение, НомерКолонки);
		НомерКолонки = НомерКолонки + 1;

	КонецЦикла;
	
	КолВоДанныеfuelParams2 = 0;
	Если fuelParams2 <> Неопределено Тогда
		КолВоДанныеfuelParams2 = ДанныеfuelParams2.Количество();
		Для Каждого ТекСтрока Из ДанныеfuelParams2 Цикл
			ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|Параметр");
			ОбластьШапкаФакт.Параметры.НаименованиеПараметра = ТекСтрока.НаименованиеПараметра;
			ДокументРезультат.Присоединить(ОбластьШапкаФакт);
			
			тзВывода.Вставить(ТекСтрока.Параметр + ТекСтрока.ГруппаПараметраДополнение, НомерКолонки);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
	КонецЕсли;
	
	КолВоoptionalEquipmentParams = Новый Массив();
	Для Каждого ТекСтрока Из optionalEquipmentParams Цикл
		КолВоoptionalEquipmentParams.Добавить(ТекСтрока.Количество());
		Для Каждого ТекПараметр Из ТекСтрока Цикл
			ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|Параметр");
			ОбластьШапкаФакт.Параметры.НаименованиеПараметра = ТекПараметр.НаименованиеПараметра;
			ДокументРезультат.Присоединить(ОбластьШапкаФакт);
			
			тзВывода.Вставить(ТекПараметр.Параметр + ТекПараметр.ГруппаПараметраДополнение, НомерКолонки);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
	КонецЦикла;
	
	КолВоCANDataParams = CANDataParams.Количество();
	Для Каждого ТекСтрока Из CANDataParams Цикл
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("ГруппаПараметров|Параметр");
		ОбластьШапкаФакт.Параметры.НаименованиеПараметра = ТекСтрока.НаименованиеПараметра;
		ДокументРезультат.Присоединить(ОбластьШапкаФакт);
		
		тзВывода.Вставить(ТекСтрока.Параметр, НомерКолонки);
		НомерКолонки = НомерКолонки + 1;

	КонецЦикла;
	
	НомерСтроки = 1;
	Для Каждого ТекТС Из ОтмеченныеТС Цикл
		КоличествоДней	 = МассивДней.Количество();
		ТС				 = ТекТС.Значение.Представление;
		
		ОбластьШапка = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыТС");
		ОбластьШапка.Параметры.Номер				 = НомерСтроки;
		ОбластьШапка.Параметры.НаименоваТС			 = ТС;
		ОбластьШапка.Параметры.ГруппаТС				 = ТекТС.Значение.Группа;
		ДокументРезультат.Вывести(ОбластьШапка);
		
		МассивИтогов = Новый Соответствие();
		ПерваяСтрока = Истина;
		Для Каждого ТекДата Из МассивДней Цикл
			НомерКолонки = 1;
			Если НЕ ПерваяСтрока Тогда
				ОбластьШапка = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыТС");
				ДокументРезультат.Вывести(ОбластьШапка);
			КонецЕсли;
			ПерваяСтрока = Ложь;
			
			ОбластьШапка = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыДата");
			ОбластьШапка.Параметры.Дата = ТекДата;
			ДокументРезультат.Присоединить(ОбластьШапка);
			
			ТаблицаПараметры.Сортировать("ГруппаПараметра, НомерСтроки");
			ДанныеMovementAndWorkingParams	 = ТаблицаПараметры.НайтиСтроки(Новый Структура("ТС, Дата, Выводить, ГруппаПараметра", ТС, ТекДата, Истина, "movementAndWorkingParams"));
			ДанныеfuelParams				 = ТаблицаПараметры.НайтиСтроки(Новый Структура("ТС, Дата, Выводить, ГруппаПараметра, ГруппаПараметраДополнение", ТС, ТекДата, Истина, "fuelParams", Нстр("ru = '(основная ёмкость)'")));
			Если fuelParams2 <> Неопределено Тогда 
				ДанныеfuelParams2 = ТаблицаПараметры.НайтиСтроки(Новый Структура("ТС, Дата, Выводить, ГруппаПараметра, ГруппаПараметраДополнение", ТС, ТекДата, Истина, "fuelParams", Нстр("ru = '(дополнительная ёмкость)'")));
			Конецесли;
			optionalEquipmentParams = Новый Массив();
			Для Каждого ТекСтрока Из мОборудования Цикл
				optionalEquipmentParams.Добавить(ТаблицаПараметры.НайтиСтроки(Новый Структура("ТС, Дата, Выводить, ГруппаПараметра, ГруппаПараметраДополнение", ТС, ТекДата, Истина, "optionalEquipmentParams", ТекСтрока)));
			КонецЦикла;
			
			CANDataParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("ТС, Дата, Выводить, ГруппаПараметра", ТС, ТекДата, Истина, "CANDataParams"));
			
			Если ДанныеMovementAndWorkingParams.Количество() = 0 Тогда
				Для Сч = 1 По КолВоДанныеMovementAndWorkingParams Цикл
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДанныеMovementAndWorkingParams Цикл
				НомерКолонкиПараметра = тзВывода.Получить(ТекСтрока.Параметр);
				Если НомерКолонкиПараметра > НомерКолонки Тогда
					Пока НомерКолонки <> НомерКолонкиПараметра Цикл
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					КонецЦикла;
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Параметр = МассивИтогов.Получить(НомерКолонки - 1);
				Если Параметр = Неопределено Тогда
					Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
				Иначе
					Если ТекСтрока.ФункцияИтогов = "0" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение + ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
						
					ИначеЕсли ТекСтрока.ФункцияИтогов = "1" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Макс(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					ИначеЕсли ТекСтрока.ФункцияИтогов = "2" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Мин(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					ИначеЕсли ТекСтрока.ФункцияИтогов = "5" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение, ТекСтрока.ЭтоВремя = Истина);
					Иначе
						Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
					КонецЕсли;
				КонецЕсли;
				МассивИтогов.Вставить(НомерКолонки - 1, Значение);
			КонецЦикла;
			
			Если ДанныеfuelParams.Количество() = 0 Тогда
				Для Сч = 1 По КолВоДанныеfuelParams Цикл
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДанныеfuelParams Цикл
				НомерКолонкиПараметра = тзВывода.Получить(ТекСтрока.Параметр + ТекСтрока.ГруппаПараметраДополнение);
				Если НомерКолонкиПараметра > НомерКолонки Тогда
					Пока НомерКолонки <> НомерКолонкиПараметра Цикл
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					КонецЦикла;
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Параметр = МассивИтогов.Получить(НомерКолонки - 1);
				Если Параметр = Неопределено Тогда
					Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
				Иначе
					Если ТекСтрока.ФункцияИтогов = "0" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение + ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
						
					ИначеЕсли ТекСтрока.ФункцияИтогов = "1" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Макс(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					ИначеЕсли ТекСтрока.ФункцияИтогов = "2" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Мин(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					ИначеЕсли ТекСтрока.ФункцияИтогов = "5" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение, ТекСтрока.ЭтоВремя = Истина);
					Иначе
						Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
					КонецЕсли;

				КонецЕсли;
				МассивИтогов.Вставить(НомерКолонки - 1, Значение);
				
				
			КонецЦикла;
			
			Если fuelParams2 <> Неопределено Тогда
				
				Если ДанныеfuelParams2.Количество() = 0 Тогда
					Для Сч = 1 По КолВоДанныеfuelParams2 Цикл
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					КонецЦикла;
				КонецЕсли;
			
				Для Каждого ТекСтрока Из ДанныеfuelParams2 Цикл
					НомерКолонкиПараметра = тзВывода.Получить(ТекСтрока.Параметр + ТекСтрока.ГруппаПараметраДополнение);
					Если НомерКолонкиПараметра > НомерКолонки Тогда
						Пока НомерКолонки <> НомерКолонкиПараметра Цикл
							ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
							ДокументРезультат.Присоединить(ОбластьШапкаФакт);
							НомерКолонки = НомерКолонки + 1;
						КонецЦикла;
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					Иначе
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					
					Параметр = МассивИтогов.Получить(НомерКолонки - 1);
					Если Параметр = Неопределено Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
					Иначе
						Если ТекСтрока.ФункцияИтогов = "0" Тогда
							Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение + ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
							
						ИначеЕсли ТекСтрока.ФункцияИтогов = "1" Тогда
							Значение = Новый Структура("Значение, ЭтоВремя", Макс(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
						ИначеЕсли ТекСтрока.ФункцияИтогов = "2" Тогда
							Значение = Новый Структура("Значение, ЭтоВремя", Мин(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
						ИначеЕсли ТекСтрока.ФункцияИтогов = "5" Тогда
							Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение, ТекСтрока.ЭтоВремя = Истина);
						Иначе

							Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
						КонецЕсли;

					КонецЕсли;
					МассивИтогов.Вставить(НомерКолонки - 1, Значение);
					
				КонецЦикла;
			Конецесли;
			
			Если optionalEquipmentParams.Количество() <> 0 Тогда
				НомерОборудования = 0;
				Для Каждого ТекСтрока Из optionalEquipmentParams Цикл
					Если ТекСтрока.Количество() = 0 Тогда
						Для Сч = 1 По КолВоoptionalEquipmentParams[НомерОборудования] Цикл
							ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
							ДокументРезультат.Присоединить(ОбластьШапкаФакт);
							НомерКолонки = НомерКолонки + 1;
						КонецЦикла;
					КонецЕсли;
					
					НомерОборудования = НомерОборудования + 1;
					Для Каждого ТекПараметр Из ТекСтрока Цикл
						НомерКолонкиПараметра = тзВывода.Получить(ТекПараметр.Параметр + ТекПараметр.ГруппаПараметраДополнение);
						Если НомерКолонкиПараметра > НомерКолонки Тогда
							Пока НомерКолонки <> НомерКолонкиПараметра Цикл
								ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
								ДокументРезультат.Присоединить(ОбластьШапкаФакт);
								НомерКолонки = НомерКолонки + 1;
							КонецЦикла;
							ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
							ОбластьШапкаФакт.Параметры.Параметр =ТекПараметр.ЗначениеСтрока;
							ДокументРезультат.Присоединить(ОбластьШапкаФакт);
							НомерКолонки = НомерКолонки + 1;
						Иначе
							ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
							ОбластьШапкаФакт.Параметры.Параметр =ТекПараметр.ЗначениеСтрока;
							ДокументРезультат.Присоединить(ОбластьШапкаФакт);
							НомерКолонки = НомерКолонки + 1;
						КонецЕсли;
						
						Параметр = МассивИтогов.Получить(НомерКолонки - 1);
						Если Параметр = Неопределено Тогда
							Значение = Новый Структура("Значение, ЭтоВремя", ТекПараметр.Значение, ТекПараметр.ЭтоВремя = Истина);
						Иначе
							Если ТекПараметр.ФункцияИтогов = "0" Тогда
								Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение + ТекПараметр.Значение, ТекПараметр.ЭтоВремя = Истина);
								
							ИначеЕсли ТекПараметр.ФункцияИтогов = "1" Тогда
								Значение = Новый Структура("Значение, ЭтоВремя", Макс(Параметр.Значение, ТекПараметр.Значение), ТекПараметр.ЭтоВремя = Истина);
							ИначеЕсли ТекПараметр.ФункцияИтогов = "2" Тогда
								Значение = Новый Структура("Значение, ЭтоВремя", Мин(Параметр.Значение, ТекПараметр.Значение), ТекПараметр.ЭтоВремя = Истина);
							Иначе
								Значение = Новый Структура("Значение, ЭтоВремя", ТекПараметр.Значение, ТекПараметр.ЭтоВремя = Истина);
							КонецЕсли;

						КонецЕсли;
						МассивИтогов.Вставить(НомерКолонки - 1, Значение);
						
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если CANDataParams.Количество() = 0 Тогда
				Для Сч = 1 По КолВоCANDataParams Цикл
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла;
			КонецЕсли;
					
			Для Каждого ТекСтрока Из CANDataParams Цикл
				НомерКолонкиПараметра = тзВывода.Получить(ТекСтрока.Параметр);
				Если НомерКолонкиПараметра > НомерКолонки Тогда
					Пока НомерКолонки <> НомерКолонкиПараметра Цикл
						ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
						ДокументРезультат.Присоединить(ОбластьШапкаФакт);
						НомерКолонки = НомерКолонки + 1;
					КонецЦикла;
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметров|ОбщиеПараметрыПараметр");
					ОбластьШапкаФакт.Параметры.Параметр =ТекСтрока.ЗначениеСтрока;
					ДокументРезультат.Присоединить(ОбластьШапкаФакт);
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Параметр = МассивИтогов.Получить(НомерКолонки - 1);
				Если Параметр = Неопределено Тогда
					Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
				Иначе
					Если ТекСтрока.ФункцияИтогов = "0" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Параметр.Значение + ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
						
					ИначеЕсли ТекСтрока.ФункцияИтогов = "1" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Макс(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					ИначеЕсли ТекСтрока.ФункцияИтогов = "2" Тогда
						Значение = Новый Структура("Значение, ЭтоВремя", Мин(Параметр.Значение, ТекСтрока.Значение), ТекСтрока.ЭтоВремя = Истина);
					Иначе
						Значение = Новый Структура("Значение, ЭтоВремя", ТекСтрока.Значение, ТекСтрока.ЭтоВремя = Истина);
					КонецЕсли;

				КонецЕсли;
				МассивИтогов.Вставить(НомерКолонки - 1, Значение);
			КонецЦикла;
		КонецЦикла;
		
		ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметровИтого|ОбщиеПараметрыИтоги");
		ДокументРезультат.Вывести(ОбластьШапкаФакт);
		Для Сч = 1 По НомерКолонки - 1 Цикл
			
			Параметр = МассивИтогов.Получить(Сч);
			
			Если Параметр <> Неопределено Тогда
				Если Параметр.ЭтоВремя Тогда
					ВсегоСекунды = Параметр.Значение;
					Часы     = Цел(ВсегоСекунды/3600);
					Минуты   = Цел((ВсегоСекунды - Часы*3600)/60);
					Секунды  = ВсегоСекунды - Часы*3600 - Минуты*60;
					Параметр = Строка(Часы) +":" + Строка(Минуты) + ":" + Строка(Секунды);
				Иначе
					Параметр = Параметр.Значение;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьШапкаФакт = Макет.ПолучитьОбласть("СтрокаПараметровИтого|Итоги");
			ОбластьШапкаФакт.Параметры.Параметр = Параметр;
			ДокументРезультат.Присоединить(ОбластьШапкаФакт);
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ФиксацияСлева  = 4;
	ДокументРезультат.ФиксацияСверху = 4;
	Результат.ТабличныйДокумент = ДокументРезультат;
	Результат.Успех = Истина;
	
	Возврат Результат;
КонецФункции

Процедура Omnicomm_СформироватьОтчетСтатистикаВФоне(Параметры, АдресХранилища) Экспорт

	Формирование = Omnicomm_СформироватьОтчетСтатистика(Параметры);
	
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|Успех, ТекстОшибки, ДанныеЕщеОбновляются");
	ЗаполнитьЗначенияСвойств(Результат, Формирование);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, мParams, ДокументРезультат, Макет)
	
	КолВоЭлементов = мParams.Количество();
	Если КолВоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолВоСтрок = КолВоЭлементов / 3;
	ЦелаяЧасть = Цел(КолВоСтрок);
	ДробнаяЧасть = КолВоСтрок - ЦелаяЧасть;
	КолВоСтрок = ?(ДробнаяЧасть = 0,ЦелаяЧасть,ЦелаяЧасть + 1);
		
	ТаблицаОбласть = Новый ТаблицаЗначений();
	ТаблицаОбласть.Колонки.Добавить("НомерСтроки");
	ТаблицаОбласть.Колонки.Добавить("НаименованиеПараметра1");
	ТаблицаОбласть.Колонки.Добавить("Параметр1");
	ТаблицаОбласть.Колонки.Добавить("НаименованиеПараметра2");
	ТаблицаОбласть.Колонки.Добавить("Параметр2");
	ТаблицаОбласть.Колонки.Добавить("НаименованиеПараметра3");
	ТаблицаОбласть.Колонки.Добавить("Параметр3");
	
	СчЭл = 0;
	ГруппаПараметровНаименование = "";
	// 1 колонка
	Для Сч = 1 По КолВоСтрок Цикл
		НоваяСтрока = ТаблицаОбласть.Добавить();
		НоваяСтрока.НомерСтроки = Сч;
		Если СчЭл < КолВоЭлементов Тогда
			Если НЕ ЗначениеЗаполнено(ГруппаПараметровНаименование) Тогда
				ГруппаПараметровНаименование = мParams[СчЭл].НаименованиеГруппыПараметра;
			КонецЕсли;
			НоваяСтрока.НаименованиеПараметра1 = мParams[СчЭл].НаименованиеПараметра;
			НоваяСтрока.Параметр1 = мParams[СчЭл].ЗначениеСтрока;
			СчЭл = СчЭл + 1;
		КонецЕсли;
	КонецЦикла;
	
	// 2 колонка
	Для Сч = 1 По КолВоСтрок Цикл
		НоваяСтрока = ТаблицаОбласть.НайтиСтроки(Новый Структура("НомерСтроки", Сч));
		Если СчЭл < КолВоЭлементов Тогда
			НоваяСтрока[0].НаименованиеПараметра2 = мParams[СчЭл].НаименованиеПараметра;
			НоваяСтрока[0].Параметр2 = мParams[СчЭл].ЗначениеСтрока;
			СчЭл = СчЭл + 1;
		КонецЕсли;
	КонецЦикла;
	
	// 3 колонка
	Для Сч = 1 По КолВоСтрок Цикл
		НоваяСтрока = ТаблицаОбласть.НайтиСтроки(Новый Структура("НомерСтроки", Сч));
		Если СчЭл < КолВоЭлементов Тогда
			НоваяСтрока[0].НаименованиеПараметра3 = мParams[СчЭл].НаименованиеПараметра;
			НоваяСтрока[0].Параметр3 = мParams[СчЭл].ЗначениеСтрока;
			СчЭл = СчЭл + 1;
		КонецЕсли;
	КонецЦикла;
	
	Интервал = Макет.ПолучитьОбласть("ОбластьИнтервал");
	ДокументРезультат.Вывести(Интервал);
	ГруппаПараметров = Макет.ПолучитьОбласть("ГруппаПараметров");
	ГруппаПараметров.Параметры.ГруппаПарметров = ГруппаПараметровНаименование;
	ДокументРезультат.Вывести(ГруппаПараметров);
	Интервал = Макет.ПолучитьОбласть("ОбластьИнтервал");
	ДокументРезультат.Вывести(Интервал);
	СтрокаПараметров = Макет.ПолучитьОбласть("СтрокаПараметров");

	Для Каждого ТекСтрока Из ТаблицаОбласть Цикл
		СтрокаПараметров.Параметры.НаименованиеПараметра1 = ТекСтрока.НаименованиеПараметра1;
		СтрокаПараметров.Параметры.Параметр1              = ТекСтрока.Параметр1;
		СтрокаПараметров.Параметры.НаименованиеПараметра2 = ТекСтрока.НаименованиеПараметра2;
		СтрокаПараметров.Параметры.Параметр2              = ТекСтрока.Параметр2;
		СтрокаПараметров.Параметры.НаименованиеПараметра3 = ТекСтрока.НаименованиеПараметра3;
		СтрокаПараметров.Параметры.Параметр3              = ТекСтрока.Параметр3;
		
		ДокументРезультат.Вывести(СтрокаПараметров);
		Интервал = Макет.ПолучитьОбласть("ОбластьИнтервал");
		ДокументРезультат.Вывести(Интервал);
	КонецЦикла;

КонецПроцедуры

Функция Omnicomm_СформироватьОтчетСтатистика(Знач Параметры)
	
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|ТекстОшибки, Успех, ДанныеЕщеОбновляются");

	Результат.Успех = Ложь;
	Результат.ТабличныйДокумент    = Новый ТабличныйДокумент;
	Результат.ДанныеЕщеОбновляются = Ложь;
	
	Если Параметры.Свойство("ДатаНачОтчет") Тогда
		ДатаНачОтчет = Параметры.ДатаНачОтчет;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаКонОтчет") Тогда
		ДатаКонОтчет = Параметры.ДатаКонОтчет;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.Свойство("мсвОтмеченныеТС") Тогда
		мсвОтмеченныеТС = Параметры.мсвОтмеченныеТС;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Макет = Отчеты.уатСтатистикаOmnicomm.ПолучитьМакет("Макет");
	
	ТекстОшибки = "";
	ДокументРезультат = Новый ТабличныйДокумент();
	
	Если мсвОтмеченныеТС.Количество() = 0 Тогда
		ДокументРезультат = Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Необходимо выбрать ТС для отображения данных'"));
		Результат.ТабличныйДокумент    = ДокументРезультат;
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТС.Представление КАК Представление,
	|	уатТС.ИДвСистемеНавигации КАК ИДвСистемеНавигации,
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Подразделение КАК Подразделение,
	|	уатТС.УчетнаяЗаписьСистемыМониторинга КАК УчетнаяЗаписьСистемыМониторинга
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ИспользуемаяСистемаGPS = &ИспользуемаяСистемаGPS
	|	И уатТС.ИДвСистемеНавигации <> """"
	|	И уатТС.ИДвСистемеНавигации <> НЕОПРЕДЕЛЕНО
	|	И уатТС.Ссылка В(&мсвОтмеченныеТС)";
	
	Запрос.УстановитьПараметр("мсвОтмеченныеТС", мсвОтмеченныеТС);
	Запрос.УстановитьПараметр("ИспользуемаяСистемаGPS", Справочники.уатВнешниеСистемы.Omnicomm);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОтмеченныеТС     = Новый Соответствие();
	ОтмеченныеСсылка = Новый Соответствие();
	мсвТС        = Новый Массив();
	Пока Выборка.Следующий() Цикл
		мсвТС.Добавить(Выборка.Ссылка);
		ОтмеченныеТС.Вставить(Выборка.ИДвСистемеНавигации, Новый Структура("Ссылка, Подразделение, Представление, Группа", Выборка.Ссылка, Выборка.Подразделение, Выборка.Представление, ""));
		ОтмеченныеСсылка.Вставить(Выборка.Ссылка,
		Новый Структура("ИДвСистемеНавигации, Подразделение, Представление, Группа",
		Выборка.ИДвСистемеНавигации, Выборка.Подразделение, Выборка.Представление, ""));
	КонецЦикла;
		
	ТаблицаПараметры = Новый ТаблицаЗначений();
	ТаблицаПараметры.Колонки.Добавить("ГруппаПараметра");
	ТаблицаПараметры.Колонки.Добавить("ГруппаПараметраДополнение");
	ТаблицаПараметры.Колонки.Добавить("НомерСтроки");
	ТаблицаПараметры.Колонки.Добавить("Параметр");
	ТаблицаПараметры.Колонки.Добавить("НаименованиеГруппыПараметра");
	ТаблицаПараметры.Колонки.Добавить("НаименованиеПараметра");
	ТаблицаПараметры.Колонки.Добавить("Значение");
	ТаблицаПараметры.Колонки.Добавить("ЗначениеСтрока");
	ТаблицаПараметры.Колонки.Добавить("ЗначениеПроцентОт");
	ТаблицаПараметры.Колонки.Добавить("Выводить");

	СтрокаТС = "";
	МассивДанных = уатМониторинг.РазбитьМассивТСНаРазличныеУчетныеЗаписи(мсвОтмеченныеТС);
	Для Каждого ТекСтрокаУчетка Из МассивДанных Цикл
		
		УчетнаяЗаписьСистемыМониторинга = ТекСтрокаУчетка.УчетнаяЗаписьСистемыМониторинга;
		
		Для Каждого ТекТССсылка Из ТекСтрокаУчетка.МассивТС Цикл
			
			ТекТС = ОтмеченныеСсылка.Получить(ТекТССсылка);
			Если ТекТС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТС     = ТекТС.Представление;
			Группа = ТекТС.Группа;
			Ссылка = ТекТССсылка;
			
			СтрокаТС = ?(ЗначениеЗаполнено(СтрокаТС), СтрокаТС + ", ", СтрокаТС) + ТекТС.Представление;
			
			ДанныеПоОтчету = уатИнтеграцияМониторингOmnicomm.Omnicomm_ПолучитьОтчетСтатистика(ДатаНачОтчет, ДатаКонОтчет, Ссылка, ТекстОшибки,, УчетнаяЗаписьСистемыМониторинга);
			
			Если ДанныеПоОтчету = Неопределено Тогда
				ДокументРезультат = Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru='Для выбранных ТС неверно указан ID в системе мониторинга'"));
				Результат.ТабличныйДокумент    = ДокументРезультат;
				Результат.Успех = Истина;
				Возврат Результат;
			КонецЕсли;
					
			ПараметрыОтчета = Макет.ПолучитьОбласть("ШапкаОтчетаПараметры");
			ПараметрыОтчета.Параметры.ДатаНачала    = ДатаНачОтчет;
			ПараметрыОтчета.Параметры.ДатаОкончания = ДатаКонОтчет;
			
			ПараметрыОтчета.Параметры.ТС = СтрокаТС;
			ДокументРезультат.Вывести(ПараметрыОтчета);
			
			Statistics               = ДанныеПоОтчету.return.statistics;
			
			Если Statistics = Неопределено Тогда
				ДокументРезультат = Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Для выбранных ТС отсутствуют данные'"));
				Результат.ТабличныйДокумент    = ДокументРезультат;
				Результат.Успех = Истина;
				Возврат Результат;
			КонецЕсли;
			
			movementAndWorkingParams = Statistics.movementAndWorkingParams;
			optionalEquipmentParams  = Statistics.optionalEquipmentParams;
			CANDataParams            = Statistics.CANDataParams;
			addDataParams            = Statistics.addDataParams;
			fuelParams               = Statistics.fuelParams[0];
			fuelParams2              = Неопределено;
			Если Statistics.fuelParams.Количество() > 1 Тогда
				fuelParams2          = Statistics.fuelParams[1];
			КонецЕсли;
			
			СтруктураНастроек = Omnicom_ПолучитьНастройки("уатСтатистикаOmnicomm.ФормаНастроекОтчета");
			
			Если СтруктураНастроек.Свойство("movementAndWorkingParams") И СтруктураНастроек.movementAndWorkingParams = Истина
				И movementAndWorkingParams <> Неопределено Тогда
				Если ТипЗнч(movementAndWorkingParams) = Тип("Структура") Тогда
					СвойстваParams = movementAndWorkingParams;
					Ключ           = "Ключ";
				Иначе
					СвойстваParams = movementAndWorkingParams.Свойства();
					Ключ           = "Имя";
				КонецЕсли;
				Для Каждого ТекСтрока Из СвойстваParams Цикл
					ЗначениеПараметра = movementAndWorkingParams[ТекСтрока[Ключ]];
					Если ЗначениеПараметра = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПараметров = ТаблицаПараметры.Добавить();
					СтрокаПараметров.ГруппаПараметра = "movementAndWorkingParams";
					СтрокаПараметров.ГруппаПараметраДополнение = "";
					СтрокаПараметров.Параметр = ТекСтрока[Ключ];
					СтрокаПараметров.Значение = ЗначениеПараметра;
					СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("fuelParams") И СтруктураНастроек.movementAndWorkingParams = Истина Тогда
				Если fuelParams <> Неопределено Тогда
					Если ТипЗнч(fuelParams) = Тип("Структура") Тогда
						СвойстваParams = fuelParams;
						Ключ           = "Ключ";
					Иначе
						СвойстваParams = fuelParams.Свойства();
						Ключ           = "Имя";
					КонецЕсли;
					Для Каждого ТекСтрока Из СвойстваParams Цикл
						ЗначениеПараметра = fuelParams[ТекСтрока[Ключ]];
						Если ТекСтрока[Ключ] = "tankNumber" ИЛИ ЗначениеПараметра = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаПараметров = ТаблицаПараметры.Добавить();
						СтрокаПараметров.ГруппаПараметра = "fuelParams";
						СтрокаПараметров.ГруппаПараметраДополнение = Нстр("ru = '(основная ёмкость)'");
						СтрокаПараметров.Параметр = ТекСтрока[Ключ];
						СтрокаПараметров.Значение = ЗначениеПараметра;
						СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
					КонецЦикла;
				КонецЕсли;
				
				Если fuelParams2 <> Неопределено Тогда
					Если ТипЗнч(fuelParams2) = Тип("Структура") Тогда
						СвойстваParams = fuelParams2;
						Ключ           = "Ключ";
					Иначе
						СвойстваParams = fuelParams2.Свойства();
						Ключ           = "Имя";
					КонецЕсли;
					Для Каждого ТекСтрока Из СвойстваParams Цикл
						ЗначениеПараметра = fuelParams2[ТекСтрока[Ключ]];
						Если ТекСтрока[Ключ] = "tankNumber" ИЛИ ЗначениеПараметра = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаПараметров = ТаблицаПараметры.Добавить();
						СтрокаПараметров.ГруппаПараметра = "fuelParams";
						СтрокаПараметров.ГруппаПараметраДополнение = Нстр("ru = '(дополнительная ёмкость)'");
						СтрокаПараметров.Параметр = ТекСтрока[Ключ];
						СтрокаПараметров.Значение = ЗначениеПараметра;
						СтрокаПараметров.Выводить = СтруктураНастроек.Свойство(ТекСтрока[Ключ]) И СтруктураНастроек[ТекСтрока[Ключ]];
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			мОборудования = Новый Массив();
			Если optionalEquipmentParams <> Неопределено Тогда
				Если ТипЗнч(optionalEquipmentParams) = Тип("Структура") Тогда
					Ключ           = "Ключ";
				Иначе
					Ключ           = "Имя";
				КонецЕсли;
				КоличествоОборудования = optionalEquipmentParams.Количество();
				Для Каждого ТекОборудование Из optionalEquipmentParams Цикл
					univInputName = ТекОборудование["univInputName"];
					СвойстваParams = ТекОборудование.Свойства();
					Для Каждого ТекСтрока Из СвойстваParams Цикл
						ЗначениеПараметра = ТекОборудование[ТекСтрока[Ключ]];
						Если ТекСтрока[Ключ] = "univInputName" 
							ИЛИ ТекСтрока[Ключ] = "univInputId" ИЛИ ЗначениеПараметра = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаПараметров = ТаблицаПараметры.Добавить();
						СтрокаПараметров.ГруппаПараметра = "optionalEquipmentParams";
						СтрокаПараметров.ГруппаПараметраДополнение = univInputName;
						СтрокаПараметров.Параметр = ТекСтрока[Ключ];
						СтрокаПараметров.Значение = ЗначениеПараметра;
						СтрокаПараметров.Выводить = Истина;
					КонецЦикла;
					мОборудования.Добавить(univInputName);
				КонецЦикла;
			КонецЕсли;
			
			Если CANDataParams <> Неопределено Тогда
				Если ТипЗнч(CANDataParams) = Тип("Структура") Тогда
					СвойстваParams = CANDataParams;
					Ключ           = "Ключ";
				Иначе
					СвойстваParams = CANDataParams.Свойства();
					Ключ           = "Имя";
				КонецЕсли;
				Для Каждого ТекСтрока Из СвойстваParams Цикл
					ЗначениеПараметра = CANDataParams[ТекСтрока[Ключ]];
					Если ЗначениеПараметра = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПараметров = ТаблицаПараметры.Добавить();
					СтрокаПараметров.ГруппаПараметра = "CANDataParams";
					СтрокаПараметров.ГруппаПараметраДополнение = "";
					СтрокаПараметров.Параметр = ТекСтрока[Ключ];
					СтрокаПараметров.Значение = ЗначениеПараметра;
					СтрокаПараметров.Выводить = Истина;
				КонецЦикла;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Прервать;
	КонецЦикла;

	ИмяМакета = "НастройкиПоУмолчанию";
	МакетНастройки	 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.уатНастройкиОтчетовПоУмолчаниюOmnicomm");
	Группа			 = "";
	Для НомерСтроки = 1 По МакетНастройки.ВысотаТаблицы Цикл
		
		ЭтоГруппа	 = Ложь;
		ИмяПараметра = СокрЛП(МакетНастройки.Область(НомерСтроки, 1).Текст);
		Если СтрНайти(ИмяПараметра, "ИмяГруппыПараметра") <> 0 Тогда
			ИмяПараметра	 = СтрЗаменить(СокрЛП(ИмяПараметра), "ИмяГруппыПараметра_", "");
			Группа			 = ИмяПараметра;
			ЭтоГруппа		 = Истина;
		Иначе
			ИмяПараметра	 = СтрЗаменить(СокрЛП(МакетНастройки.Область(НомерСтроки, 1).Текст), "ИмяПараметра_", "");
		КонецЕсли;
		
		СтрНаименование		 = СокрЛП(МакетНастройки.Область(НомерСтроки, 2).Текст);
		
		Если ЭтоГруппа Тогда
			мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра", ИмяПараметра));
			Для Каждого ТекПараметр Из мПараметров Цикл
				ТекПараметр.НаименованиеГруппыПараметра = СтрНаименование + " " + ТекПараметр.ГруппаПараметраДополнение;
			КонецЦикла;
		Иначе
			НаименованиеНесколькоОбъектов	 = СокрЛП(МакетНастройки.Область(НомерСтроки, 3).Текст);
			ЭтоВремя						 = СокрЛП(МакетНастройки.Область(НомерСтроки, 4).Текст)= "1";
			ПроцентОт						 = СтрЗаменить(СокрЛП(МакетНастройки.Область(НомерСтроки, 5).Текст), "ИмяПараметра_", "");
			Номер							 = Число(СокрЛП(МакетНастройки.Область(НомерСтроки, 6).Текст));
			мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра, Параметр", Группа, ИмяПараметра));
			Для Каждого ТекПараметр Из мПараметров Цикл
				Если ЭтоВремя Тогда
					ВсегоСекунды = ТекПараметр.Значение;
					Часы     = Цел(ВсегоСекунды/3600);
					Минуты   = Цел((ВсегоСекунды - Часы*3600)/60);
					Секунды  = ВсегоСекунды - Часы*3600 - Минуты*60;
					Значение = Строка(Часы) +":" + Строка(Минуты) + ":" + Строка(Секунды);
					
					Если ПроцентОт <> "" Тогда
						Если ПроцентОт = "ПериодОтчета" Тогда
							Timestamp = ДатаКонОтчет - ДатаНачОтчет;
							Процент  = Окр(((ВсегоСекунды * 100)/Timestamp), 1);
							Значение = Значение + " (" + Процент + ")";
							ТекПараметр.ЗначениеПроцентОт = Timestamp;
						Иначе
							мПараметров = ТаблицаПараметры.НайтиСтроки(Новый Структура("ГруппаПараметра, Параметр", Группа, ПроцентОт));
							Если мПараметров.Количество() <> 0 Тогда
								Процент  = Окр(((ВсегоСекунды * 100)/ ?(мПараметров[0].Значение = 0, 1, мПараметров[0].Значение)), 1);
								Значение = Значение + " (" + Процент + ")";
								ТекПараметр.ЗначениеПроцентОт = мПараметров[0].Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = ТекПараметр.Значение;
				КонецЕсли;
				ТекПараметр.ЗначениеСтрока        = Значение;
				ТекПараметр.НаименованиеПараметра = СтрНаименование;
				ТекПараметр.НомерСтроки           = Номер;
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметры.Сортировать("ГруппаПараметра, НомерСтроки");
	ДанныеMovementAndWorkingParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра", Истина, "movementAndWorkingParams"));
	Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, ДанныеMovementAndWorkingParams, ДокументРезультат, Макет);
	
	ДанныеfuelParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "fuelParams", Нстр("ru = '(основная ёмкость)'")));
	Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, ДанныеfuelParams, ДокументРезультат, Макет);
	
	Если fuelParams2 <> Неопределено Тогда 
		ДанныеfuelParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "fuelParams", Нстр("ru = '(дополнительная ёмкость)'")));
		Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, ДанныеfuelParams, ДокументРезультат, Макет);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из мОборудования Цикл
		optionalEquipmentParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра, ГруппаПараметраДополнение", Истина, "optionalEquipmentParams", ТекСтрока));
		Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, optionalEquipmentParams, ДокументРезультат, Макет);
	КонецЦикла;

	ДанныеfuelParams = ТаблицаПараметры.НайтиСтроки(Новый Структура("Выводить, ГруппаПараметра", Истина, "CANDataParams"));
	Omnicom_СформироватьОтчетСтатистикаЗаполнитьОбласть(ДатаНачОтчет, ДатаКонОтчет, ДанныеfuelParams, ДокументРезультат, Макет);
	
	Результат.ТабличныйДокумент = ДокументРезультат;
	Результат.Успех = Истина;
	
	Возврат Результат;

КонецФункции

Функция Omnicom_ПолучитьМакетОтчета(ИмяОтчета) Экспорт
	
	Если Метаданные.Отчеты.Найти(ИмяОтчета) = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат Отчеты[ИмяОтчета].ПолучитьМакет("Макет");
	
КонецФункции

#КонецОбласти

#Область ПрогнозированиеОпозданийПоМаршрутнымЛистам

// Процедура выполняет регламентное задание уатПрогнозированиеОпозданийПоМаршрутнымЛистам.
//
Процедура ПрогнозированиеОпозданийПоМаршрутнымЛистам() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Lateness prediction in the routing lists';ru='Прогнозирование опозданий в маршрутных листах'");
	ТекстНСТР = НСтр("en='Start of lateness prediction';ru='Начало прогнозирования опозданий'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаДляОпозданий();
	
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаПолученияДанных);
	// Маршрутные листы, по которым плановая дата выполнения больше 1 месяца назад, считаются неактуальными
	// и прогнозирование для них не выполняется
	Запрос.УстановитьПараметр("МинимальнаяДатаВыполненияМаршрутногоЛиста", ДобавитьМесяц(ДатаПолученияДанных, -1));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	
	// Координаты, которые старше 12 часов, будут игнорироваться
	ВремяАктуальностиКоординат = 43200;
	СекундВМинуте = 60;
	
	ДопустимоеОпоздание = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Константы.уатДопустимоеОтклонениеОтВремениПрибытия.Получить() * СекундВМинуте);
	ИспользоватьУведомления = ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
	УчетПланФакта = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	кэшHTTPСоединение = Неопределено;
	
	СредняяСкоростьДвижения = РегистрыСведений.уатСредняяСкоростьДвижения.СредняяСкоростьПоездки();
	// Скорость переводится из км/ч в м/с.
	СредняяСкоростьДвижения = СредняяСкоростьДвижения / 3.6;
		
	НаборЗаписейТекущиеОпоздания = РегистрыСведений.уатТекущиеОпоздания.СоздатьНаборЗаписей();
	НаборЗаписейТекущиеОпоздания.Прочитать();
	// Старые записи об опозданиях оставляем только в регистре "История опозданий"
	НаборЗаписейТекущиеОпоздания.Очистить();
	
	НаборЗаписейИсторияОпозданий = РегистрыСведений.уатИсторияОпозданий.СоздатьНаборЗаписей();
	НаборЗаписейИсторияОпозданий.Отбор.Период.Установить(ДатаПолученияДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТС") Цикл
		// Если для 1 ТС есть одновременно 2 открытых, но не выполненных маршрутных листа, то это некорректная ситуация.
		// Игнорируем все, кроме одного - используем Выборка.СледующийПоЗначениюПоля("ТС").
		Если УчетПланФакта И ЗначениеЗаполнено(Выборка.УбытиеПредыдущийПунктФакт)
			И Выборка.УбытиеПредыдущийПунктФакт > Выборка.ДатаПолученияКоординат Тогда
			ДатаОтправления = Выборка.УбытиеПредыдущийПунктФакт;
			ЛатОтправления = Выборка.ЛатПредыдущийПункт;
			ЛонОтправления = Выборка.ЛонПредыдущийПункт;
		ИначеЕсли УчетПланФакта И ЗначениеЗаполнено(Выборка.ПрибытиеПредыдущийПунктФакт)
			И Выборка.ПрибытиеПредыдущийПунктФакт > Выборка.ДатаПолученияКоординат Тогда
			ДатаОтправления = Выборка.ПрибытиеПредыдущийПунктФакт;
			ЛатОтправления = Выборка.ЛатПредыдущийПункт;
			ЛонОтправления = Выборка.ЛонПредыдущийПункт;
		Иначе
			ДатаОтправления = Выборка.ДатаПолученияКоординат;
			ЛатОтправления = Выборка.Лат;
			ЛонОтправления = Выборка.Лон;
		КонецЕсли;
		
		ПрибытиеПрогноз = Дата(1, 1, 1);
		ОпозданиеПрогноз = 0;
		Если (ДатаПолученияДанных - ДатаОтправления > ВремяАктуальностиКоординат) Или (ЛатОтправления = 0 И ЛонОтправления = 0) Тогда
			ТекстНСТР = НСтр("en='For vehicle %1 no current coordinates found. Lateness prediction in routing list %2 cancelled';
				|ru='Для транспортного средства %1 не найдены актуальные координаты. Прогнозирование опоздания по маршрутному листу %2 отменено'");
			ТекстНСтр = СтрШаблон(ТекстНСТР, Выборка.ТС, Выборка.МаршрутныйЛист);
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Предупреждение,,, ТекстНСТР);
		ИначеЕсли Выборка.ЛатСледующийПункт = 0 И Выборка.ЛонСледующийПункт = 0 Тогда
			ТекстНСТР = НСтр("en='No coordinates found for point %1. Lateness prediction in routing list %2 cancelled';
				|ru='Для пункта %1 не заполнены координаты. Прогнозирование опоздания по маршрутному листу %2 отменено'");
			ТекстНСтр = СтрШаблон(ТекстНСТР, Выборка.СледующийПункт, Выборка.МаршрутныйЛист);
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Предупреждение,,, ТекстНСТР);
		Иначе
			// Все корректно - выполняем прогнозирование
			мсвТочкиМаршрута = Новый Массив();
			мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ЛатОтправления, ЛонОтправления));
			мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", Выборка.ЛатСледующийПункт, Выборка.ЛонСледующийПункт));
			ДанныеМаршрута = Неопределено;
			ТекстОшибкиOSM = "";
			Если уатЗащищенныеФункцииСервер.РассчитатьМаршрут(мсвТочкиМаршрута, ДанныеМаршрута, ТекстОшибкиOSM, кэшHTTPСоединение) Тогда 
				Если СредняяСкоростьДвижения = 0 Тогда
					ВремяВПути = ДанныеМаршрута.Время;
				Иначе
					ВремяВПути = ДанныеМаршрута.Расстояние / СредняяСкоростьДвижения;
				КонецЕсли;
				ПрибытиеПрогноз = ДатаОтправления + ВремяВПути;
				ОпозданиеПрогноз = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ПрибытиеПрогноз - Выборка.ПрибытиеСледующийПунктПлан);
			Иначе
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибкиOSM);
			КонецЕсли;
		КонецЕсли;
		
		// Регистрируем информацию об опоздании (или его отсутствии, для отчета уатТекущиеОпоздания)
		ЗаписьТекущееОпоздание = НаборЗаписейТекущиеОпоздания.Добавить();
		ЗаписьТекущееОпоздание.МаршрутныйЛист  = Выборка.МаршрутныйЛист;
		ЗаписьТекущееОпоздание.ТС              = Выборка.ТС;
		ЗаписьТекущееОпоздание.ВремяОпоздания  = ОпозданиеПрогноз;
		ЗаписьТекущееОпоздание.ПрибытиеПлан    = Выборка.ПрибытиеСледующийПунктПлан;
		ЗаписьТекущееОпоздание.ПрибытиеПрогноз = ПрибытиеПрогноз;
		ЗаписьТекущееОпоздание.Пункт           = Выборка.СледующийПункт;
		ЗаписьТекущееОпоздание.GUIDСтрокиМЛ    = Выборка.GUIDСтроки;
		
		Если ЗаписьТекущееОпоздание.ВремяОпоздания > ДопустимоеОпоздание Тогда
			ЗаписьИсторияОпозданий = НаборЗаписейИсторияОпозданий.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИсторияОпозданий, ЗаписьТекущееОпоздание);
			ЗаписьИсторияОпозданий.Период = ДатаПолученияДанных;
			
			Если ИспользоватьУведомления 
				И Выборка.ФормироватьУведомления Тогда
				ДопПараметры = Новый Структура("GUIDСтроки", Выборка.GUIDСтроки);
				уатОбщегоНазначения_уэ.СформироватьУведомление(
				Выборка.МаршрутныйЛист, 
				Перечисления.уатТипыСобытийДляУведомления_уэ.ПрогнозОпозданияПоМаршрутномуЛисту, 
				ДопПараметры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейТекущиеОпоздания.Записать();
	НаборЗаписейИсторияОпозданий.Записать();
	
	ТекстНСТР = НСтр("en='End of lateness prediction';ru='Окончание прогнозирования опозданий'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура устанавливает для всех ТС (кроме помеченных на удаление)
// флаг "Формировать уведомления об опозданиях в рейсе" в значение Истина
Процедура УстановитьФлагФормироватьУведомленияОбОпозданияхДляТС() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ПометкаУдаления = ЛОЖЬ
	|	И уатТС.ЭтоГруппа = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТСОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТСОбъект.ФормироватьУведомленияОбОпозданияхВРейсе = Истина;
		ТСОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаДляОпозданий()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.ФормироватьУведомленияОбОпозданияхВРейсе
	|		И уатМаршрутныйЛист.ТС.ФормироватьУведомленияОбОпозданияхВРейсе КАК ФормироватьУведомления,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	ЕСТЬNULL(уатТекущееМестоположениеТСПоМониторингу.Широта, ЕСТЬNULL(уатТекущиеКоординатыМП.Лат, 0)) КАК Лат,
	|	ЕСТЬNULL(уатТекущееМестоположениеТСПоМониторингу.Долгота, ЕСТЬNULL(уатТекущиеКоординатыМП.Лон, 0)) КАК Лон,
	|	ЕСТЬNULL(уатТекущееМестоположениеТСПоМониторингу.Дата, ЕСТЬNULL(уатТекущиеКоординатыМП.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПолученияКоординат
	|ПОМЕСТИТЬ втМаршрутныеЛисты
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущиеКоординатыМП КАК уатТекущиеКоординатыМП
	|		ПО (уатМаршрутныйЛист.ТС.ИсточникФактическихДанныхДляКартографии = ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение))
	|			И уатМаршрутныйЛист.ТС = уатТекущиеКоординатыМП.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущееМестоположениеТСПоМониторингу КАК уатТекущееМестоположениеТСПоМониторингу
	|		ПО (уатМаршрутныйЛист.ТС.ИсточникФактическихДанныхДляКартографии = ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.СистемаСпутниковогоМониторинга))
	|			И уатМаршрутныйЛист.ТС = уатТекущееМестоположениеТСПоМониторингу.ТС
	|ГДЕ
	|	уатМаршрутныйЛист.Проведен = ИСТИНА
	|	И уатМаршрутныйЛист.ДатаИВремяОтправленияПлан < &ТекущаяДата
	|	И уатМаршрутныйЛист.ДатаИВремяВыполненияПлан > &МинимальнаяДатаВыполненияМаршрутногоЛиста
	|	И уатМаршрутныйЛист.Выполнен = ЛОЖЬ
	|	И уатМаршрутныйЛист.ДатаИВремяОтправления <> &ПустаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|				ТОГДА уатМаршрутныйЛистЗаказы.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПоследняяВыполненнаяСтрока
	|ПОМЕСТИТЬ втПоследниеВыполненныеСтроки
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка В
	|			(ВЫБРАТЬ
	|				втМаршрутныеЛисты.МаршрутныйЛист КАК МаршрутныйЛист
	|			ИЗ
	|				втМаршрутныеЛисты КАК втМаршрутныеЛисты)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныеЛисты.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втМаршрутныеЛисты.ТС КАК ТС,
	|	втМаршрутныеЛисты.Лат КАК Лат,
	|	втМаршрутныеЛисты.Лон КАК Лон,
	|	втМаршрутныеЛисты.ДатаПолученияКоординат КАК ДатаПолученияКоординат,
	|	втПоследниеВыполненныеСтроки.ПоследняяВыполненнаяСтрока КАК ПоследняяВыполненнаяСтрока,
	|	втПоследниеВыполненныеСтроки.ПоследняяВыполненнаяСтрока + 1 КАК ПерваяНеВыполненнаяСтрока,
	|	втМаршрутныеЛисты.ФормироватьУведомления КАК ФормироватьУведомления
	|ПОМЕСТИТЬ втМаршрутныеЛистыСНомерамиСтрок
	|ИЗ
	|	втМаршрутныеЛисты КАК втМаршрутныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследниеВыполненныеСтроки КАК втПоследниеВыполненныеСтроки
	|		ПО втМаршрутныеЛисты.МаршрутныйЛист = втПоследниеВыполненныеСтроки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМаршрутныеЛистыСНомерамиСтрок.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втМаршрутныеЛистыСНомерамиСтрок.ТС КАК ТС,
	|	втМаршрутныеЛистыСНомерамиСтрок.Лат КАК Лат,
	|	втМаршрутныеЛистыСНомерамиСтрок.Лон КАК Лон,
	|	втМаршрутныеЛистыСНомерамиСтрок.ДатаПолученияКоординат КАК ДатаПолученияКоординат,
	|	ВыполненнаяСтрока.Пункт.Лат КАК ЛатПредыдущийПункт,
	|	ВыполненнаяСтрока.Пункт.Лон КАК ЛонПредыдущийПункт,
	|	ВыполненнаяСтрока.ПрибытиеФакт КАК ПрибытиеПредыдущийПунктФакт,
	|	ВыполненнаяСтрока.УбытиеФакт КАК УбытиеПредыдущийПунктФакт,
	|	НеВыполненнаяСтрока.Пункт КАК СледующийПункт,
	|	НеВыполненнаяСтрока.Пункт.Лат КАК ЛатСледующийПункт,
	|	НеВыполненнаяСтрока.Пункт.Лон КАК ЛонСледующийПункт,
	|	НеВыполненнаяСтрока.ПрибытиеПлан КАК ПрибытиеСледующийПунктПлан,
	|	НеВыполненнаяСтрока.GUIDСтроки КАК GUIDСтроки,
	|	втМаршрутныеЛистыСНомерамиСтрок.ФормироватьУведомления КАК ФормироватьУведомления
	|ИЗ
	|	втМаршрутныеЛистыСНомерамиСтрок КАК втМаршрутныеЛистыСНомерамиСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК ВыполненнаяСтрока
	|		ПО втМаршрутныеЛистыСНомерамиСтрок.МаршрутныйЛист = ВыполненнаяСтрока.Ссылка
	|			И втМаршрутныеЛистыСНомерамиСтрок.ПоследняяВыполненнаяСтрока = ВыполненнаяСтрока.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК НеВыполненнаяСтрока
	|		ПО втМаршрутныеЛистыСНомерамиСтрок.МаршрутныйЛист = НеВыполненнаяСтрока.Ссылка
	|			И втМаршрутныеЛистыСНомерамиСтрок.ПерваяНеВыполненнаяСтрока = НеВыполненнаяСтрока.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТС,
	|	ПрибытиеСледующийПунктПлан УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Если есть документы ТТД, связанные с переданным документом, то возврат "Истина", иначе "Ложь"
//
Функция ПроверитьНаличиеСвязанныхТТД(СсылкаНаДокумент) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СвязанныеДокументы.Ссылка КАК СвязанныйДокумент
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатТТД)
	|	И СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьВремяДоступностиПункта(Пункт, Контрагент = Неопределено) Экспорт
	ВремяДоступности = Новый Структура("ВремяДоступностиС, ВремяДоступностиПо", Дата(1,1,1,0,0,0), Дата(1,1,1,0,0,0));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Пункт", Пункт);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КонтрагентыПунктыНазначения.ДоступенС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				И ЕСТЬNULL(КонтрагентыПунктыНазначения.ДоступенПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА уатПунктыНазначения.ВремяДоступностиС
	               |		ИНАЧЕ КонтрагентыПунктыНазначения.ДоступенС
	               |	КОНЕЦ КАК ВремяДоступностиС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КонтрагентыПунктыНазначения.ДоступенС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				И ЕСТЬNULL(КонтрагентыПунктыНазначения.ДоступенПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА уатПунктыНазначения.ВремяДоступностиПо
	               |		ИНАЧЕ КонтрагентыПунктыНазначения.ДоступенПо
	               |	КОНЕЦ КАК ВремяДоступностиПо
	               |ИЗ
	               |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	               |		ПО (КонтрагентыПунктыНазначения.Ссылка = &Контрагент)
	               |			И (КонтрагентыПунктыНазначения.ПунктНазначения = &Пункт)
	               |ГДЕ
	               |	уатПунктыНазначения.Ссылка = &Пункт
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтрагентыПунктыНазначения.Основной,
	               |	КонтрагентыПунктыНазначения.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВремяДоступности, Выборка);
	КонецЕсли;
	
	Возврат ВремяДоступности;
	
КонецФункции

// Функция возвращает текстовое представление отрезка пути
Функция ПолучитьПредставлениеОтрезкаПути(ПунктОт, ПунктДо, НомерПунктаОт = Неопределено, НомерПунктаДо = Неопределено) Экспорт
	Если НомерПунктаОт = Неопределено Или НомерПунктаДо = Неопределено Тогда
		ПредставлениеОтрезка = СтрШаблон("Из ""%1"" в ""%3""", ПунктОт, НомерПунктаОт, ПунктДо, НомерПунктаДо);
	Иначе
		ПредставлениеОтрезка = СтрШаблон("Из ""%1"" (%2) в ""%3"" (%4)", ПунктОт, НомерПунктаОт, ПунктДо, НомерПунктаДо);
	КонецЕсли;
	Возврат ПредставлениеОтрезка
КонецФункции

// Функция определяет для каждого груза, откуда и куда он перевозится (по таблице отрезков пути FTL-заказа)
Функция ПолучитьНачальныеКонечныеПунктыГрузов(ОтрезкиПути, КоличествоГрузов, КоличествоПунктов) Экспорт
	
	мсвОтрезки = Новый Массив;
	
	Если КоличествоГрузов = 0 Или КоличествоПунктов = 0 Тогда
		Возврат мсвОтрезки;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоГрузов Цикл
		мсвОтрезки.Добавить(Новый Структура("От, До", КоличествоПунктов+1, -1));
	КонецЦикла;
	Для Каждого ТекСтрока Из ОтрезкиПути Цикл
		// Некорректный груз игнорируется
		Если ТекСтрока.Груз > КоличествоГрузов Или ТекСтрока.Груз <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекОтрезок = мсвОтрезки[ТекСтрока.Груз-1];
		Если ТекСтрока.ПунктОтправления < ТекОтрезок.От Тогда
			ТекОтрезок.От = ТекСтрока.ПунктОтправления;
		КонецЕсли;
		Если ТекСтрока.ПунктНазначения > ТекОтрезок.До Тогда
			ТекОтрезок.До = ТекСтрока.ПунктНазначения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОтрезок Из мсвОтрезки Цикл
		Если ТекОтрезок.До > КоличествоПунктов Тогда
			ТекОтрезок.До = -1;
		КонецЕсли;
		Если ТекОтрезок.От > КоличествоПунктов Тогда
			ТекОтрезок.От = -1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсвОтрезки;
	
КонецФункции

Функция ПроверитьЗаполнениеПароля(ВладелецПароля) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецПароля);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПарольУстановлен = Пароль <> "" И Пароль <> Неопределено;
	Возврат ПарольУстановлен;
	
КонецФункции

#КонецОбласти

#Область ПутевыеЛисты

// Возвращает таблицу заполнения Задания в ПЛ по входящему Заказу ТС
//
Процедура ЗаполнитьЗаданиеПоЗаказам(ДанныеЗаказов, ДокументОбъект) Экспорт
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	флЗаказыВПЛ = ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах");
	флВводНаОсновании = (ТипЗнч(ДанныеЗаказов) <> Тип("Структура"));
	МаксНомерЕздки = 0;
	
	Если флВводНаОсновании Тогда // ввод ПЛ на основании Заказа
		СтруктураЗаказа = Новый Структура;
		СтруктураЗаказа.Вставить("Заказ",        ДанныеЗаказов);
		СтруктураЗаказа.Вставить("Номенклатура", Неопределено);
		СтруктураЗаказа.Вставить("Количество",   0);
		СтруктураЗаказа.Вставить("Вес",          0);
		СтруктураЗаказа.Вставить("Объем",        0);
				
		мсвЗаказы = Новый Массив;
		мсвЗаказы.Добавить(СтруктураЗаказа);
		
		// Настройки детализации данных по строкам заказов:
		// 0 - одной строкой по заказу, 1 - по товарам или отрезкам пути FTL
		СтруктураНастроекПодборЗаказов = ХранилищеНастроекДанныхФорм.Загрузить(
			"ОбщаяФорма.уатПодборЗаказов", "ОбщиеНастройкиПодбора"); 
		
		Если СтруктураНастроекПодборЗаказов = Неопределено Тогда
			СтруктураНастроекПодборЗаказов = Новый Структура;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураНастроекПодборЗаказов) = Тип("Структура") Тогда
			Если СтруктураНастроекПодборЗаказов.Свойство("ЗаполнениеПЛ_FTL") Тогда
				ЗаполнениеПЛ_FTL = СтруктураНастроекПодборЗаказов.ЗаполнениеПЛ_FTL;
			Иначе
				ЗаполнениеПЛ_FTL = 0;
			КонецЕсли;
			Если СтруктураНастроекПодборЗаказов.Свойство("ЗаполнениеПЛ_Товары") Тогда
				ЗаполнениеПЛ_Товары = СтруктураНастроекПодборЗаказов.ЗаполнениеПЛ_Товары;
			Иначе
				ЗаполнениеПЛ_Товары = 0;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // подбор по заказам в Задание
		мсвЗаказы           = ДанныеЗаказов.ПодобранныеЗаказы;
		ЗаполнениеПЛ_FTL    = ДанныеЗаказов.ЗаполнениеПЛ_FTL;
		ЗаполнениеПЛ_Товары = ДанныеЗаказов.ЗаполнениеПЛ_Товары;
		
		Для Каждого ТекСтрока Из ДокументОбъект.Задание Цикл
			МаксНомерЕздки = Макс(МаксНомерЕздки, ТекСтрока.НомерЕздки);
		КонецЦикла;
		
		// Нужно свернуть строки по заказам с детализацией по грузовым местам потому, что в Задании ПЛ
		// не предусмотен учет грузовых мест и все грузовые места подбираются одной строкой
		// также свертку выполняем в случае подбора в Задание по заказам с детализацией по товарам
		соотвУчтенныеЗаказы = Новый Соответствие;
		списИндексыУдалить  = Новый СписокЗначений;
		Сч = 0;
		Для Каждого СтруктураЗаказ Из мсвЗаказы Цикл
			Если СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
				ИЛИ ((НЕ СтруктураЗаказ.Заказ.FTL ИЛИ ЗаполнениеПЛ_FTL = 0) И НЕ флВводНаОсновании И ЗаполнениеПЛ_Товары = 0
				И СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам) Тогда
				
				ИндексЗаказа = соотвУчтенныеЗаказы.Получить(СтруктураЗаказ.Заказ);
				Если ИндексЗаказа = Неопределено Тогда
					соотвУчтенныеЗаказы.Вставить(СтруктураЗаказ.Заказ, Сч);
				Иначе
					ТекЗаказ = мсвЗаказы[ИндексЗаказа];
					ТекЗаказ.Вес   = ТекЗаказ.Вес   + СтруктураЗаказ.Вес;
					ТекЗаказ.Объем = ТекЗаказ.Объем + СтруктураЗаказ.Объем;
					списИндексыУдалить.Добавить(Сч);
				КонецЕсли;
			КонецЕсли;
		
			Сч = Сч + 1;
		КонецЦикла;
		списИндексыУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого ТекИндексУдалить Из списИндексыУдалить Цикл
			мсвЗаказы.Удалить(ТекИндексУдалить.Значение);
		КонецЦикла;
	КонецЕсли;
	
	тблДанныеЗаполнения = Новый ТаблицаЗначений();
	тблДанныеЗаполнения.Колонки.Добавить("АдресПрибытия");
	тблДанныеЗаполнения.Колонки.Добавить("ВремяПрибытия");
	тблДанныеЗаполнения.Колонки.Добавить("АдресУбытия");
	тблДанныеЗаполнения.Колонки.Добавить("ВремяУбытия");
	тблДанныеЗаполнения.Колонки.Добавить("ЗаказНаТС");
	тблДанныеЗаполнения.Колонки.Добавить("Номенклатура");
	тблДанныеЗаполнения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблДанныеЗаполнения.Колонки.Добавить("КоличествоТонн", Новый ОписаниеТипов("Число"));
	тблДанныеЗаполнения.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	тблДанныеЗаполнения.Колонки.Добавить("КоличествоКмГруз", Новый ОписаниеТипов("Число"));
	тблДанныеЗаполнения.Колонки.Добавить("КоличествоЧасов", Новый ОписаниеТипов("Число"));
	тблДанныеЗаполнения.Колонки.Добавить("Контрагент");
	тблДанныеЗаполнения.Колонки.Добавить("Подразделение");
	тблДанныеЗаполнения.Колонки.Добавить("Маршрут");
	тблДанныеЗаполнения.Колонки.Добавить("ОбъектСтроительства");
	тблДанныеЗаполнения.Колонки.Добавить("ВидПеревозки");
	тблДанныеЗаполнения.Колонки.Добавить("НаправлениеПеревозки");
	тблДанныеЗаполнения.Колонки.Добавить("НомерЕздки", Новый ОписаниеТипов("Число"));
	
	// промежуточная таблица для FTL заказов
	тблОтрезкиПутиИГрузы = Новый ТаблицаЗначений;
	тблОтрезкиПутиИГрузы.Колонки.Добавить("АдресПрибытия");
	тблОтрезкиПутиИГрузы.Колонки.Добавить("ВремяПрибытия");
	тблОтрезкиПутиИГрузы.Колонки.Добавить("АдресУбытия");
	тблОтрезкиПутиИГрузы.Колонки.Добавить("ВремяУбытия");
	тблОтрезкиПутиИГрузы.Колонки.Добавить("Номенклатура");
	тблОтрезкиПутиИГрузы.Колонки.Добавить("Количество",       Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("КоличествоТонн",   Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("Объем",            Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("КоличествоКмГруз", Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("КоличествоЧасов",  Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("НомерОтрезка",     Новый ОписаниеТипов("Число"));
	тблОтрезкиПутиИГрузы.Колонки.Добавить("НомерГруза",       Новый ОписаниеТипов("Число"));
	
	Для Каждого СтруктураЗаказ Из мсвЗаказы Цикл
		Если НЕ СтруктураЗаказ.Заказ.FTL ИЛИ (ЗаполнениеПЛ_FTL = 0 И ЗаполнениеПЛ_Товары = 0) Тогда
			ВремяПрибытия = СтруктураЗаказ.Заказ.ОтправлениеС;
			ВремяУбытия   = СтруктураЗаказ.Заказ.ДоставкаПо;
			Если СтруктураЗаказ.Заказ.FTL И СтруктураЗаказ.Заказ.ПромежуточныеПункты.Количество() > 0 Тогда
				ВремяПрибытия = СтруктураЗаказ.Заказ.ПромежуточныеПункты[0].УбытиеПлан;
				ВремяУбытия   = СтруктураЗаказ.Заказ.ПромежуточныеПункты[СтруктураЗаказ.Заказ.ПромежуточныеПункты.Количество()-1].ПрибытиеПлан;
			КонецЕсли;
			
			Если СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам И ЗаполнениеПЛ_Товары = 1 Тогда
				Если флВводНаОсновании Тогда
					Для Каждого ТекТовар Из СтруктураЗаказ.Заказ.Товары Цикл
						Если ТекТовар.ПричинаЗакрытия <> Справочники.уатПричиныЗакрытияЗаказов.Отклонен Тогда
							НоваяСтрока = тблДанныеЗаполнения.Добавить();
							НоваяСтрока.АдресПрибытия    = СтруктураЗаказ.Заказ.АдресОтправления;
							НоваяСтрока.ВремяПрибытия    = ВремяПрибытия;
							НоваяСтрока.АдресУбытия      = СтруктураЗаказ.Заказ.АдресНазначения;
							НоваяСтрока.ВремяУбытия      = ВремяУбытия;
							НоваяСтрока.Номенклатура     = ТекТовар.Номенклатура;
							НоваяСтрока.Количество       = ТекТовар.Количество;
							НоваяСтрока.КоличествоТонн   = ТекТовар.ВесБрутто / КоэфВеса;
							НоваяСтрока.Объем            = ТекТовар.Объем / КоэфОбъема;
							НоваяСтрока.КоличествоКмГруз = СтруктураЗаказ.Заказ.Расстояние;
							НоваяСтрока.КоличествоЧасов  = уатОбщегоНазначения.уатВремяВСекунды(СтруктураЗаказ.Заказ.Время);
							НоваяСтрока.НомерЕздки       = МаксНомерЕздки + 1;
							
							ЗаполнитьАналитикиИзЗаказа(НоваяСтрока, СтруктураЗаказ.Заказ, флЗаказыВПЛ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					НоваяСтрока = тблДанныеЗаполнения.Добавить();
					НоваяСтрока.АдресПрибытия    = СтруктураЗаказ.Заказ.АдресОтправления;
					НоваяСтрока.ВремяПрибытия    = ВремяПрибытия;
					НоваяСтрока.АдресУбытия      = СтруктураЗаказ.Заказ.АдресНазначения;
					НоваяСтрока.ВремяУбытия      = ВремяУбытия;
					НоваяСтрока.Номенклатура     = СтруктураЗаказ.Номенклатура;
					НоваяСтрока.Количество       = СтруктураЗаказ.Количество;
					НоваяСтрока.КоличествоТонн   = СтруктураЗаказ.Вес / КоэфВеса;
					НоваяСтрока.Объем            = СтруктураЗаказ.Объем / КоэфОбъема;
					НоваяСтрока.КоличествоКмГруз = СтруктураЗаказ.Заказ.Расстояние;
					НоваяСтрока.КоличествоЧасов  = уатОбщегоНазначения.уатВремяВСекунды(СтруктураЗаказ.Заказ.Время);
					НоваяСтрока.НомерЕздки       = МаксНомерЕздки + 1;
					
					ЗаполнитьАналитикиИзЗаказа(НоваяСтрока, СтруктураЗаказ.Заказ, флЗаказыВПЛ);
				КонецЕсли;
			Иначе
				НоваяСтрока = тблДанныеЗаполнения.Добавить();
				НоваяСтрока.АдресПрибытия    = СтруктураЗаказ.Заказ.АдресОтправления;
				НоваяСтрока.ВремяПрибытия    = ВремяПрибытия;
				НоваяСтрока.АдресУбытия      = СтруктураЗаказ.Заказ.АдресНазначения;
				НоваяСтрока.ВремяУбытия      = ВремяУбытия;
				НоваяСтрока.КоличествоТонн   = СтруктураЗаказ.Заказ.ВесБрутто / КоэфВеса;
				НоваяСтрока.Объем            = СтруктураЗаказ.Заказ.Объем / КоэфОбъема;
				НоваяСтрока.КоличествоКмГруз = СтруктураЗаказ.Заказ.Расстояние;
				НоваяСтрока.КоличествоЧасов  = уатОбщегоНазначения.уатВремяВСекунды(СтруктураЗаказ.Заказ.Время);
				
				ЗаполнитьАналитикиИзЗаказа(НоваяСтрока, СтруктураЗаказ.Заказ, флЗаказыВПЛ);
			КонецЕсли;
			
		Иначе // FTL заказ
			Если СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
				И СтруктураЗаказ.Заказ.ОтрезкиПути.Количество() = 0 Тогда
				// По заказу вцелом, но грузовых мест нет, отрезки пути собираем на лету по ТЧ Пунктов
				Для Сч = 0 По СтруктураЗаказ.Заказ.ПромежуточныеПункты.Количество() - 2 Цикл
					ТекПромежуточныйПункт  = СтруктураЗаказ.Заказ.ПромежуточныеПункты[Сч];
					СледПромежуточныйПункт = СтруктураЗаказ.Заказ.ПромежуточныеПункты[Сч+1];
					
					НоваяСтрока                  = тблОтрезкиПутиИГрузы.Добавить();
					НоваяСтрока.АдресПрибытия    = ТекПромежуточныйПункт.Пункт;
					НоваяСтрока.ВремяПрибытия    = ТекПромежуточныйПункт.УбытиеПлан;
					НоваяСтрока.АдресУбытия      = СледПромежуточныйПункт.Пункт;
					НоваяСтрока.ВремяУбытия      = СледПромежуточныйПункт.ПрибытиеПлан;
					НоваяСтрока.КоличествоТонн   = СтруктураЗаказ.Заказ.ВесБрутто / КоэфВеса;
					НоваяСтрока.Объем            = СтруктураЗаказ.Заказ.Объем / КоэфОбъема;
					НоваяСтрока.КоличествоКмГруз = ТекПромежуточныйПункт.Расстояние;
					НоваяСтрока.КоличествоЧасов  = уатОбщегоНазначения.уатВремяВСекунды(ТекПромежуточныйПункт.Время);
					НоваяСтрока.НомерОтрезка     = Сч + 1;
				КонецЦикла;
				
			Иначе
				Для Сч = 0 По СтруктураЗаказ.Заказ.ОтрезкиПути.Количество() - 1 Цикл
					ТекОтрезокПути = СтруктураЗаказ.Заказ.ОтрезкиПути[Сч];
					
					ТекТовар = Неопределено;
					ТекГруз  = Неопределено;
					Если СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
						ТекТовар = СтруктураЗаказ.Заказ.Товары[ТекОтрезокПути.Груз-1];
						Если НЕ флВводНаОсновании И ТекТовар.Номенклатура <> СтруктураЗаказ.Номенклатура Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						// Это может быть детализация "По заказу" и "По грузовым местам"
						// При детализации "По заказу" грузовой состав нужно тоже учесть, так как он вводится по отрезкам пути
						ТекГруз = СтруктураЗаказ.Заказ.ГрузовойСостав[ТекОтрезокПути.Груз-1];
						Если НЕ флВводНаОсновании И ТекГруз.ГрузовоеМесто <> СтруктураЗаказ.Номенклатура Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ТекПромежуточныйПункт  = СтруктураЗаказ.Заказ.ПромежуточныеПункты[ТекОтрезокПути.ПунктОтправления - 1];
					СледПромежуточныйПункт = СтруктураЗаказ.Заказ.ПромежуточныеПункты[ТекОтрезокПути.ПунктНазначения  - 1];
					
					НоваяСтрока                  = тблОтрезкиПутиИГрузы.Добавить();
					НоваяСтрока.АдресПрибытия    = ТекПромежуточныйПункт.Пункт;
					НоваяСтрока.ВремяПрибытия    = ТекПромежуточныйПункт.УбытиеПлан;
					НоваяСтрока.АдресУбытия      = СледПромежуточныйПункт.Пункт;
					НоваяСтрока.ВремяУбытия      = СледПромежуточныйПункт.ПрибытиеПлан;
					НоваяСтрока.КоличествоКмГруз = ТекПромежуточныйПункт.Расстояние;
					НоваяСтрока.КоличествоЧасов  = уатОбщегоНазначения.уатВремяВСекунды(ТекПромежуточныйПункт.Время);
					
					СтрокаПоискНомераОтрезка     = СтруктураЗаказ.Заказ.ОтрезкиПути.Найти(ТекОтрезокПути.id, "id");
					НоваяСтрока.НомерОтрезка     = СтрокаПоискНомераОтрезка.НомерСтроки;
					
					Если СтруктураЗаказ.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
						НоваяСтрока.Номенклатура   = ТекТовар.Номенклатура;
						НоваяСтрока.Количество     = ТекТовар.Количество;
						НоваяСтрока.КоличествоТонн = ТекТовар.ВесБрутто / КоэфВеса;
						НоваяСтрока.Объем          = ТекТовар.Объем / КоэфОбъема;
						НоваяСтрока.НомерГруза     = ТекТовар.НомерСтроки;
					Иначе
					    НоваяСтрока.КоличествоТонн = ТекГруз.ВесБрутто / КоэфВеса;
						НоваяСтрока.Объем          = ТекГруз.Объем / КоэфОбъема;
						НоваяСтрока.НомерГруза     = ТекГруз.НомерСтроки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Свертка таблицы FTL заказа тблОтрезкиПутиИГрузы в зависимости от настроек подбора
	Если тблОтрезкиПутиИГрузы.Количество() > 0 Тогда
		Если ЗаполнениеПЛ_FTL = 1 И ЗаполнениеПЛ_Товары = 0 Тогда
			тблОтрезкиПутиИГрузы.Свернуть("АдресПрибытия, ВремяПрибытия, АдресУбытия, ВремяУбытия, КоличествоКмГруз, КоличествоЧасов, НомерОтрезка", "КоличествоТонн, Объем");
			тблОтрезкиПутиИГрузы.Сортировать("НомерОтрезка");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("Номенклатура");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("НомерГруза", Новый ОписаниеТипов("Число"));
			тблОтрезкиПутиИГрузы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ИначеЕсли ЗаполнениеПЛ_FTL = 0 И ЗаполнениеПЛ_Товары = 1 Тогда
			тблОтрезкиПутиИГрузы.Свернуть("Номенклатура, КоличествоТонн, Объем, НомерГруза, Количество", "КоличествоКмГруз, КоличествоЧасов");
			тблОтрезкиПутиИГрузы.Сортировать("НомерГруза");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("АдресПрибытия");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("ВремяПрибытия");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("АдресУбытия");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("ВремяУбытия");
			тблОтрезкиПутиИГрузы.ЗаполнитьЗначения(СтруктураЗаказ.Заказ.АдресОтправления, "АдресПрибытия");
			тблОтрезкиПутиИГрузы.ЗаполнитьЗначения(СтруктураЗаказ.Заказ.ОтправлениеС, "ВремяПрибытия");
			тблОтрезкиПутиИГрузы.ЗаполнитьЗначения(СтруктураЗаказ.Заказ.АдресНазначения, "АдресУбытия");
			тблОтрезкиПутиИГрузы.ЗаполнитьЗначения(СтруктураЗаказ.Заказ.ДоставкаПо, "ВремяУбытия");
			тблОтрезкиПутиИГрузы.Колонки.Добавить("НомерОтрезка", Новый ОписаниеТипов("Число"));
		Иначе
			тблОтрезкиПутиИГрузы.Свернуть("АдресПрибытия, ВремяПрибытия, АдресУбытия, ВремяУбытия, КоличествоКмГруз, КоличествоЧасов, НомерОтрезка, НомерГруза, Номенклатура", "Количество, КоличествоТонн, Объем");
			тблОтрезкиПутиИГрузы.Сортировать("НомерОтрезка, НомерГруза");
		КонецЕсли;
		
		ТекНомерОтрезкаПути = Неопределено;
		Для Каждого ТекОтрезокГруз Из тблОтрезкиПутиИГрузы Цикл
			НоваяСтрока = тблДанныеЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекОтрезокГруз);
			ЗаполнитьАналитикиИзЗаказа(НоваяСтрока, СтруктураЗаказ.Заказ, флЗаказыВПЛ);
			
			Если ТекНомерОтрезкаПути = Неопределено Тогда
				ТекНомерОтрезкаПути = ТекОтрезокГруз.НомерОтрезка;
			ИначеЕсли ТекНомерОтрезкаПути <> ТекОтрезокГруз.НомерОтрезка Тогда
				ТекНомерОтрезкаПути = ТекОтрезокГруз.НомерОтрезка;
				МаксНомерЕздки = МаксНомерЕздки + 1;
			КонецЕсли;
			НоваяСтрока.НомерЕздки = МаксНомерЕздки + 1;
		КонецЦикла;
	КонецЕсли;
			
	// заливка промежуточной таблицы данных в ТЧ Задание ПЛ
	Для Каждого СтрокаЗаполнения Из тблДанныеЗаполнения Цикл 
		НоваяСтрока = ДокументОбъект.Задание.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполнения);
		НоваяСтрока.КоличествоЧасов = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаЗаполнения.КоличествоЧасов);
		НоваяСтрока.КоличествоЕздок = 1;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗаданиеПоЗаказам()

Процедура ЗаполнитьАналитикиИзЗаказа(СтрокаЗадания, ЗаказНаТС, флЗаказыВПЛ)
	СтрокаЗадания.Контрагент           = ЗаказНаТС.Контрагент;
	Если ТипЗнч(ЗаказНаТС.Контрагент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтрокаЗадания.Подразделение    = ЗаказНаТС.Контрагент;
	Иначе
		СтрокаЗадания.Подразделение    = ЗаказНаТС.Подразделение;
	КонецЕсли;
	СтрокаЗадания.Маршрут              = ЗаказНаТС.Маршрут;
	СтрокаЗадания.ОбъектСтроительства  = ЗаказНаТС.ОбъектСтроительства;
	СтрокаЗадания.НаправлениеПеревозки = ЗаказНаТС.НаправлениеПеревозки;
	Если флЗаказыВПЛ Тогда
		СтрокаЗадания.ЗаказНаТС        = ЗаказНаТС;
	КонецЕсли;
						
	Если ЗначениеЗаполнено(ЗаказНаТС.ВидПеревозки) Тогда
		СтрокаЗадания.ВидПеревозки = ЗаказНаТС.ВидПеревозки;
	Иначе
		СтрокаЗадания.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ЗаказНаТС.Организация, "ОсновнойВидПеревозок");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФактическоеПосещениеПунктовПоДаннымМониторинга

// Функция формирует структуру данных необходимых для выполнения процедуры 
// уатОбщегоНазначенияКлиент_уэ.ФактическоеПосещениеПунктовПоДаннымМониторинга
//
Функция ПодготовитьСтрДанныхДляОпределенияФактПосещениеПунктовПоДаннымССМСервер(Знач Объект, ДанныеОбъекта, флОшибка = Ложь)
	
	Ссылка		 = Объект.Ссылка;
	ТипОбъекта	 = ТипЗнч(Ссылка);
	
	ДанныеПоМаршрутномуДокументу = Новый Структура();
	
	Если НЕ ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") И НЕ ТипОбъекта = Тип("ДокументСсылка.уатМаршрутныйЛист")Тогда
		флОшибка = Истина;
		Возврат ДанныеПоМаршрутномуДокументу;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		ТС		 = Объект.ТранспортноеСредство;
		ДатаС	 = Объект.ДатаВыезда;
		ДатаПо	 = Объект.ДатаВозвращения;
	Иначе
		ТС		 = Объект.ТС;
		
		ПлановоеВремяМаршрутногоЛиста = уатОбщегоНазначения_проф.ПолучитьПлановоеВремяМаршрутногоЛиста(Ссылка);
		ДатаС	 = ПлановоеВремяМаршрутногоЛиста.ОтправлениеПлан;
		ДатаПо	 = ПлановоеВремяМаршрутногоЛиста.ПрибытиеПлан;
	КонецЕсли;
	
	Данные = Новый Массив();
	Для Каждого ТекСтрока Из ДанныеОбъекта Цикл
		СтруктураДанных = Новый Структура("МаршрутныйДокумент, НомерЕздки, НомерСтроки, Выполнен, ПрибытиеФакт, УбытиеФакт,
		|АдресПрибытия, АдресУбытия, ПрибытиеПлан, УбытиеПлан");
		СтруктураДанных.МаршрутныйДокумент	 = Ссылка;
		СтруктураДанных.НомерЕздки			 = ТекСтрока.НомерЕздки;
		СтруктураДанных.НомерСтроки			 = ТекСтрока.НомерСтроки;
		СтруктураДанных.Выполнен			 = ТекСтрока.Выполнен;
		СтруктураДанных.ПрибытиеФакт		 = ТекСтрока.ПрибытиеФакт;
		СтруктураДанных.УбытиеФакт			 = ТекСтрока.УбытиеФакт;
		СтруктураДанных.АдресПрибытия		 = ТекСтрока.Пункт;
		СтруктураДанных.АдресУбытия			 = ТекСтрока.АдресУбытия;
		СтруктураДанных.ПрибытиеПлан		 = ТекСтрока.ПрибытиеПлан;
		СтруктураДанных.УбытиеПлан			 = ТекСтрока.УбытиеПлан;
		Данные.Добавить(СтруктураДанных);
	КонецЦикла;
	
	ДанныеПоМаршрутномуДокументу.Вставить("ТипОбъекта",						 ТипОбъекта);
	ДанныеПоМаршрутномуДокументу.Вставить("Ссылка",							 Ссылка);
	ДанныеПоМаршрутномуДокументу.Вставить("ТС",								 ТС);
	ДанныеПоМаршрутномуДокументу.Вставить("ДатаС",							 ДатаС);
	ДанныеПоМаршрутномуДокументу.Вставить("ДатаПо",							 ДатаПо);
	ДанныеПоМаршрутномуДокументу.Вставить("Данные",							 Данные);
	
	Возврат ДанныеПоМаршрутномуДокументу;

КонецФункции

Процедура ЗаполнитьФактПосещениеПоДаннымССМСервер(ДанныеПоМаршрутномуДокументу, ИмяКлючевойОперации = "")
	
	ТекстОшибки = "";
	
	Если уатЗащищенныеФункцииСервер_проф.ПолучитьФактическоеПосещениеПунктовПоДаннымGPS(ДанныеПоМаршрутномуДокументу, ТекстОшибки) Тогда 
		ДанныеДляИзменения = Новый Структура();
		ДанныеДляИзменения.Вставить("МассивДанныхДляИзменения", ДанныеПоМаршрутномуДокументу.Данные);
		СохранитьИзмененияВДокументе(ДанныеПоМаршрутномуДокументу.Ссылка, ДанныеДляИзменения, ИмяКлючевойОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПлановоеВремяМаршрутногоЛиста(Объект) Экспорт
	
	Результат = Новый Структура("ОтправлениеПлан, ПрибытиеПлан", '00010101', '00010101');
	
	Результат.ОтправлениеПлан = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(Объект);
	Результат.ПрибытиеПлан    = Документы.уатМаршрутныйЛист.ПолучитьВремяВозвратаПлан(Объект);
	
	Возврат Результат;
	
КонецФункции

// Процедура сохраняет настройки видов контактной информации
// 
// Параметры:
//  стрНастроек	 - 	Структура
// 
Процедура СохранитьНастройкиВидовКонтактнойИнформации(Знач стрНастроек=Неопределено) Экспорт 
	
	Если Не стрНастроек = Неопределено Тогда 
		БазаНастроек = уатОбщегоНазначенияПовтИсп_проф.НастройкиВидовКонтактнойИнформацииПоУмолчанию();
		
		Для Каждого ТекНастройка Из БазаНастроек Цикл 
			Если стрНастроек.Свойство(ТекНастройка.Ключ) Тогда
				БазаНастроек.Вставить(ТекНастройка.Ключ, стрНастроек[ТекНастройка.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Константы.уатНастройкиВидовКонтактнойИнформации.Установить(Новый ХранилищеЗначения(БазаНастроек, Новый СжатиеДанных(9)));
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСодержанияУслуги

// Функция возвращает значение поля детализации для заполнения содержания услуги
//
Функция ПолучитьЗначениеДопПоля(СтрокаТаблицы, ИмяПоля, ДопТаблицыДанных, СтруктураПоиска, ТаблицаДанных) Экспорт
	
	ЗначениеДопПоля = "";
	ТаблицаДанных = Неопределено;
	
	Если ИмяПоля = "ТС" И ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ИмяПоля = "Прицепы" ИЛИ ИмяПоля = "Водитель" Тогда
		
		ТаблицаДанных = ДопТаблицыДанных.ТаблицаТСПрицепыВодители;
		
	ИначеЕсли ИмяПоля = "ТоварГруз" ИЛИ ИмяПоля = "ВидГруза" Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			СтруктураПоиска.Вставить("ЗаказНаТС", СтрокаТаблицы.Заказ);
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")
			И ЗначениеЗаполнено(СтрокаТаблицы.Регистратор.МаршрутныйЛист) Тогда
			
			СтруктураПоиска.Вставить("Регистратор", СтрокаТаблицы.Регистратор.МаршрутныйЛист);
		КонецЕсли;
		ТаблицаДанных = ДопТаблицыДанных.ТаблицаТоварГрузВидГруза;
		
	ИначеЕсли ИмяПоля = "ВсеПунктыПоЗаказу" Тогда
		//Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатТТД") И СтруктураПоиска.Свойство("НомерСтроки") Тогда
		//	СтруктураПоиска.Удалить("НомерСтроки");
		//КонецЕсли;
		ТекЗаказ = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ТекЗаказ = СтрокаТаблицы.Заказ;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ТекЗаказ = СтрокаТаблицы.Регистратор;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗаказ) Тогда
			СтруктураПоиска.Регистратор = СтрокаТаблицы.Заказ;
			ТаблицаДанных = ДопТаблицыДанных.ТаблицаВсеПунктыПоЗаказу;
		КонецЕсли;
				
	ИначеЕсли ИмяПоля = "ДатаНачалаПогрузки" ИЛИ ИмяПоля = "ДатаОкончанияПогрузки"
		ИЛИ ИмяПоля = "ДатаНачалаРазгрузки" ИЛИ ИмяПоля = "ДатаОкончанияРазгрузки" Тогда
		
		ТекЗаказ = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ТекЗаказ = СтрокаТаблицы.Заказ;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ТекЗаказ = СтрокаТаблицы.Регистратор;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗаказ) Тогда
			ТекМЛ = Неопределено;
			Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")
				И ЗначениеЗаполнено(СтрокаТаблицы.Регистратор.МаршрутныйЛист) Тогда
				ТекМЛ = СтрокаТаблицы.Регистратор.МаршрутныйЛист;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				ТекМЛ = СтрокаТаблицы.Регистратор;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекМЛ) Тогда
				мсвСтрокиПоиска = ДопТаблицыДанных.ТаблицаДатыПогрузкиРазгрузкиПоЗаказамИМЛ.НайтиСтроки(Новый Структура("МаршрутныйЛист, ЗаказНаТС", ТекМЛ, ТекЗаказ));
			Иначе
				мсвСтрокиПоиска = ДопТаблицыДанных.ТаблицаДатыПогрузкиРазгрузкиПоЗаказам.НайтиСтроки(Новый Структура("ЗаказНаТС", ТекЗаказ));
			КонецЕсли;
			Если мсвСтрокиПоиска.Количество() > 0 Тогда
				Если ИмяПоля = "ДатаНачалаПогрузки" Тогда
					ЗначениеДопПоля = мсвСтрокиПоиска[0].ДатаНачалаПогрузки;
				КонецЕсли;
				Если ИмяПоля = "ДатаОкончанияПогрузки" Тогда
					ЗначениеДопПоля = мсвСтрокиПоиска[0].ДатаОкончанияПогрузки;
				КонецЕсли;
				Если ИмяПоля = "ДатаНачалаРазгрузки" Тогда
					ЗначениеДопПоля = мсвСтрокиПоиска[0].ДатаНачалаРазгрузки;
				КонецЕсли;
				Если ИмяПоля = "ДатаОкончанияРазгрузки" Тогда
					ЗначениеДопПоля = мсвСтрокиПоиска[0].ДатаОкончанияРазгрузки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЗначениеДопПоля;
КонецФункции

// Функция получает дополнительные таблицы для заполнения по "виртуальным" реквизитам
//
Функция ПолучитьДопТаблицыДанных(ТабУслуг, Договор, ШаблонЗаполнения) Экспорт
	мсвЗаказыНаТС          = Новый Массив;
	мсвЗаказыПеревозчику   = Новый Массив;
	мсвМЛ                  = Новый Массив;
	мсвТТД                 = Новый Массив;
	мсвЗаказыНаТСВсеПункты = Новый Массив;
	
	Для Каждого ТекСтрока Из ТабУслуг Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") И мсвЗаказыНаТС.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвЗаказыНаТС.Добавить(ТекСтрока.Регистратор);
		ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И мсвЗаказыПеревозчику.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвЗаказыПеревозчику.Добавить(ТекСтрока.Регистратор);
		ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатМаршрутныйЛист") И мсвМЛ.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвМЛ.Добавить(ТекСтрока.Регистратор);
		ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатТТД") И мсвТТД.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвТТД.Добавить(ТекСтрока.Регистратор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Заказ) И мсвЗаказыНаТСВсеПункты.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			мсвЗаказыНаТСВсеПункты.Добавить(ТекСтрока.Заказ);
		КонецЕсли;
	КонецЦикла; 
	
	//Если мсвЗаказыНаТС.Количество() = 0 И мсвЗаказыПеревозчику.Количество() = 0
	//	И мсвМЛ.Количество() = 0 И мсвТТД.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	СтруктураРегистраторы = Новый Структура;
	СтруктураРегистраторы.Вставить("ЗаказНаТС",          мсвЗаказыНаТС);
	СтруктураРегистраторы.Вставить("ЗаказНаТСВсеПункты", мсвЗаказыНаТСВсеПункты);
	СтруктураРегистраторы.Вставить("ЗаказПеревозчику",   мсвЗаказыПеревозчику);
	СтруктураРегистраторы.Вставить("МЛ",                 мсвМЛ);
	СтруктураРегистраторы.Вставить("ТТД",                мсвТТД);
	
	ДопТаблицыДанных = Новый Структура;
	Если уатОбщегоНазначения.ВключеноПолеДетализации("ТоварГруз", ШаблонЗаполнения)
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("ВидГруза", ШаблонЗаполнения) Тогда
		ДопТаблицыДанных.Вставить("ТаблицаТоварГрузВидГруза", ПолучитьТаблицуТоварГрузВидГруза(СтруктураРегистраторы, Договор));
	КонецЕсли;
	Если (уатОбщегоНазначения.ВключеноПолеДетализации("ТС", ШаблонЗаполнения)
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("Водитель", ШаблонЗаполнения))
		И ШаблонЗаполнения.ИспользоватьДанныеЗаказНаТС
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("Прицепы", ШаблонЗаполнения) Тогда
		ДопТаблицыДанных.Вставить("ТаблицаТСПрицепыВодители", ПолучитьТаблицуТСПрицепыВодители(СтруктураРегистраторы));
	КонецЕсли;
	Если уатОбщегоНазначения.ВключеноПолеДетализации("ВсеПунктыПоЗаказу", ШаблонЗаполнения) Тогда
		ДопТаблицыДанных.Вставить("ТаблицаВсеПунктыПоЗаказу", ПолучитьТаблицуВсеПунктыПоЗаказу(СтруктураРегистраторы));
	КонецЕсли;
	Если уатОбщегоНазначения.ВключеноПолеДетализации("ДатаНачалаПогрузки", ШаблонЗаполнения)
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("ДатаНачалаРазгрузки", ШаблонЗаполнения)
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("ДатаОкончанияПогрузки", ШаблонЗаполнения)
		ИЛИ уатОбщегоНазначения.ВключеноПолеДетализации("ДатаОкончанияРазгрузки", ШаблонЗаполнения) Тогда
		
		СтруктураТаблицаДатыПогрузкиРазгрузки = ПолучитьТаблицуДатыПогрузкиРазгрузкиПоЗаказам(СтруктураРегистраторы);
		ДопТаблицыДанных.Вставить("ТаблицаДатыПогрузкиРазгрузкиПоЗаказам", СтруктураТаблицаДатыПогрузкиРазгрузки.ПоЗаказам);
		ДопТаблицыДанных.Вставить("ТаблицаДатыПогрузкиРазгрузкиПоЗаказамИМЛ", СтруктураТаблицаДатыПогрузкиРазгрузки.ПоЗаказамИМЛ);
	КонецЕсли;
	
	Возврат ДопТаблицыДанных;
КонецФункции

Функция ПолучитьТаблицуТоварГрузВидГруза(СтруктураРегистраторы, Договор)
	
	// Добавляем МЛ из ЗП, созданных по МЛ (в этом случае грузы берутся не из ЗП, а из МЛ)
	мсвМЛ = СтруктураРегистраторы.МЛ;
	Для Каждого ТекЗП Из СтруктураРегистраторы.ЗаказПеревозчику Цикл
		Если ЗначениеЗаполнено(ТекЗП.МаршрутныйЛист) И мсвМЛ.Найти(ТекЗП.МаршрутныйЛист) = Неопределено Тогда
			мсвМЛ.Добавить(ТекЗП.МаршрутныйЛист);
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   Договор);
	Запрос.УстановитьПараметр("мсвЗаказыНаТС",        СтруктураРегистраторы.ЗаказНаТС);
	Запрос.УстановитьПараметр("мсвЗаказыПеревозчику", СтруктураРегистраторы.ЗаказПеревозчику);
	Запрос.УстановитьПараметр("мсвМЛ",                мсвМЛ);
	Запрос.УстановитьПараметр("мсвТТД",               СтруктураРегистраторы.ТТД);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказНаТС
	|ПОМЕСТИТЬ ЗаказыПоМЛ
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка В(&мсвМЛ)
	|	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК ТоварГруз,
	|	СправочникНоменклатура.уатВидГруза КАК ВидГруза,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК Регистратор,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказНаТС,
	|	0 КАК НомерСтроки
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО уатЗаказГрузоотправителяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка В(&мсвЗаказыНаТС)
	|	И (уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|			ИЛИ уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(уатГрузовыеМеста_уэТоварныйСостав.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	уатГрузовыеМеста_уэ.ВидГруза,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка,
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ.ТоварныйСостав КАК уатГрузовыеМеста_уэТоварныйСостав
	|			ПО уатГрузовыеМеста_уэ.Ссылка = уатГрузовыеМеста_уэТоварныйСостав.Ссылка
	|		ПО уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = уатГрузовыеМеста_уэ.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка В(&мсвЗаказыНаТС)
	|	И (уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ИЛИ уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	СправочникНоменклатура.уатВидГруза,
	|	уатЗаказПеревозчику_уэГрузы.Ссылка,
	|	уатЗаказПеревозчику_уэГрузы.Заказ,
	|	0
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО уатЗаказГрузоотправителяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ПО (уатЗаказПеревозчику_уэГрузы.Ссылка В (&мсвЗаказыПеревозчику))
	|			И уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	|			И уатЗаказПеревозчику_уэГрузы.ГрузовоеМесто = уатЗаказГрузоотправителяТовары.Номенклатура
	|			И (уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(уатГрузовыеМеста_уэТоварныйСостав.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	уатГрузовыеМеста_уэ.ВидГруза,
	|	уатЗаказПеревозчику_уэГрузы.Ссылка,
	|	уатЗаказПеревозчику_уэГрузы.Заказ,
	|	0
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ.ТоварныйСостав КАК уатГрузовыеМеста_уэТоварныйСостав
	|				ПО уатГрузовыеМеста_уэ.Ссылка = уатГрузовыеМеста_уэТоварныйСостав.Ссылка
	|			ПО уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = уатГрузовыеМеста_уэ.Ссылка
	|		ПО (уатЗаказПеревозчику_уэГрузы.Ссылка В (&мсвЗаказыПеревозчику))
	|			И уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И уатЗаказПеревозчику_уэГрузы.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	|			И (уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	СправочникНоменклатура.уатВидГруза,
	|	уатЗаказПеревозчику_уэГрузы.Ссылка,
	|	уатЗаказПеревозчику_уэГрузы.Заказ,
	|	0
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО уатЗаказГрузоотправителяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ПО (уатЗаказПеревозчику_уэГрузы.Ссылка В (&мсвЗаказыПеревозчику))
	|			И уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	|			И (уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатГрузовыеМеста_уэТоварныйСостав.Номенклатура,
	|	уатГрузовыеМеста_уэ.ВидГруза,
	|	уатЗаказПеревозчику_уэГрузы.Ссылка,
	|	уатЗаказПеревозчику_уэГрузы.Заказ,
	|	0
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ.ТоварныйСостав КАК уатГрузовыеМеста_уэТоварныйСостав
	|				ПО уатГрузовыеМеста_уэ.Ссылка = уатГрузовыеМеста_уэТоварныйСостав.Ссылка
	|			ПО (уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = уатГрузовыеМеста_уэТоварныйСостав.Ссылка)
	|		ПО (уатЗаказПеревозчику_уэГрузы.Ссылка В (&мсвЗаказыПеревозчику))
	|			И уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И (уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	СправочникНоменклатура.уатВидГруза,
	|	ЗаказыПоМЛ.МаршрутныйЛист,
	|	ЗаказыПоМЛ.ЗаказНаТС,
	|	0
	|ИЗ
	|	ЗаказыПоМЛ КАК ЗаказыПоМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО ЗаказыПоМЛ.ЗаказНаТС = уатЗаказГрузоотправителяТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (уатЗаказГрузоотправителяТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	(уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|			ИЛИ уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(уатГрузовыеМеста_уэТоварныйСостав.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	уатГрузовыеМеста_уэ.ВидГруза,
	|	ЗаказыПоМЛ.МаршрутныйЛист,
	|	ЗаказыПоМЛ.ЗаказНаТС,
	|	0
	|ИЗ
	|	ЗаказыПоМЛ КАК ЗаказыПоМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО ЗаказыПоМЛ.ЗаказНаТС = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ.ТоварныйСостав КАК уатГрузовыеМеста_уэТоварныйСостав
	|			ПО уатГрузовыеМеста_уэ.Ссылка = уатГрузовыеМеста_уэТоварныйСостав.Ссылка
	|		ПО (уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = уатГрузовыеМеста_уэ.Ссылка)
	|ГДЕ
	|	(уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ИЛИ уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДСтоимость.Номенклатура,
	|	СправочникНоменклатура.уатВидГруза,
	|	уатТТДСтоимость.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТТДСтоимость.НомерСтроки
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО уатТТДСтоимость.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	уатТТДСтоимость.Ссылка В(&мсвТТД)";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТаблицуТСПрицепыВодители(СтруктураРегистраторы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мсвЗаказыНаТС",        СтруктураРегистраторы.ЗаказНаТС);
	Запрос.УстановитьПараметр("мсвЗаказыПеревозчику", СтруктураРегистраторы.ЗаказПеревозчику);
	Запрос.УстановитьПараметр("мсвМЛ",                СтруктураРегистраторы.МЛ);
	Запрос.УстановитьПараметр("мсвТТД",               СтруктураРегистраторы.ТТД);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Регистратор,
	|	0 КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.Ссылка.Водитель1 КАК Водитель,
	|	уатМаршрутныйЛистЗаказы.Ссылка.ТС КАК ТС,
	|	уатМаршрутныйЛистЗаказы.Ссылка.Прицеп1 КАК Прицепы
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка.Проведен
	|	И (уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя В (&мсвЗаказыНаТС)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.РодительскийЗаказ В (&мсвЗаказыНаТС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	0,
	|	уатМаршрутныйЛистЗаказы.Ссылка.Водитель2,
	|	уатМаршрутныйЛистЗаказы.Ссылка.ТС,
	|	уатМаршрутныйЛистЗаказы.Ссылка.Прицеп2
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка.Проведен
	|	И (уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя В (&мсвЗаказыНаТС)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.РодительскийЗаказ В (&мсвЗаказыНаТС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказПеревозчику_уэ.Ссылка,
	|	0,
	|	уатЗаказПеревозчику_уэ.Водитель,
	|	НЕОПРЕДЕЛЕНО,
	|	уатЗаказПеревозчику_уэ.Прицеп1
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.Ссылка В(&мсвЗаказыПеревозчику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказПеревозчику_уэ.Ссылка,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	уатЗаказПеревозчику_уэ.Прицеп2
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.Ссылка В(&мсвЗаказыПеревозчику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛист.Ссылка,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	уатМаршрутныйЛист.Прицеп1
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка В(&мсвМЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛист.Ссылка,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	уатМаршрутныйЛист.Прицеп2
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка В(&мсвМЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДСтоимость.Ссылка,
	|	уатТТДСтоимость.НомерСтроки,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	уатПутевойЛистПрицепы.ТС
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|		ПО уатТТДСтоимость.ПутЛист = уатПутевойЛистПрицепы.Ссылка
	|ГДЕ
	|	уатТТДСтоимость.Ссылка В(&мсвТТД)";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТаблицуВсеПунктыПоЗаказу(СтруктураРегистраторы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мсвЗаказыНаТС", СтруктураРегистраторы.ЗаказНаТСВсеПункты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Регистратор,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК Пункт,
	|	0 КАК ПриоритетПункта,
	|	0 КАК НомерЭтапа,
	|	0 КАК НомерПромежуточногоПункта
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказыНаТС)
	|	И НЕ уатЗаказГрузоотправителя.FTL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка.РодительскийЗаказ,
	|	уатЗаказГрузоотправителя.АдресОтправления,
	|	0,
	|	ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа, 0),
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка.РодительскийЗаказ В(&мсвЗаказыНаТС)
	|	И НЕ уатЗаказГрузоотправителя.FTL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.АдресНазначения,
	|	2,
	|	0,
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказыНаТС)
	|	И НЕ уатЗаказГрузоотправителя.FTL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка.РодительскийЗаказ,
	|	уатЗаказГрузоотправителя.АдресНазначения,
	|	2,
	|	ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа, 0),
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка.РодительскийЗаказ В(&мсвЗаказыНаТС)
	|	И НЕ уатЗаказГрузоотправителя.FTL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт,
	|	1,
	|	0,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка В(&мсвЗаказыНаТС)
	|	И уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.FTL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.РодительскийЗаказ,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт,
	|	1,
	|	ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа, 0),
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ПО уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка = уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.РодительскийЗаказ В(&мсвЗаказыНаТС)
	|	И уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.FTL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.Регистратор КАК Регистратор,
	|	ВремТаблица.Пункт КАК Пункт,
	|	"""" КАК ВсеПунктыПоЗаказу
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремТаблица.Регистратор,
	|	ВремТаблица.ПриоритетПункта,
	|	ВремТаблица.НомерЭтапа,
	|	ВремТаблица.НомерПромежуточногоПункта";
	
	тблВсеПунктыПоЗаказуПромежуточная = Запрос.ВыполнитьПакет()[1].Выгрузить();
	тблВсеПунктыПоЗаказу = Новый ТаблицаЗначений;
	тблВсеПунктыПоЗаказу.Колонки.Добавить("Регистратор");
	тблВсеПунктыПоЗаказу.Колонки.Добавить("ВсеПунктыПоЗаказу");
	
	СтрокаПункты = "";
	Для Сч = 0 По тблВсеПунктыПоЗаказуПромежуточная.Количество() - 1 Цикл
		ТекСтрока = тблВсеПунктыПоЗаказуПромежуточная[Сч];
		
		ПредРегистратор = ?(Сч = 0, Неопределено, тблВсеПунктыПоЗаказуПромежуточная[Сч-1].Регистратор);
		ПредПункт       = ?(Сч = 0, Неопределено, тблВсеПунктыПоЗаказуПромежуточная[Сч-1].Пункт);
		СледРегистратор = ?(Сч = тблВсеПунктыПоЗаказуПромежуточная.Количество()-1, Неопределено,
			тблВсеПунктыПоЗаказуПромежуточная[Сч+1].Регистратор);
		
		Если ТекСтрока.Регистратор = ПредРегистратор И ТекСтрока.Пункт = ПредПункт Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПункты = СтрокаПункты + ?(СтрокаПункты = "", "", " - ") + ТекСтрока.Пункт;
		
		Если СледРегистратор <> ТекСтрока.Регистратор Тогда
			НоваяСтрока = тблВсеПунктыПоЗаказу.Добавить();
			НоваяСтрока.Регистратор = ТекСтрока.Регистратор;
			НоваяСтрока.ВсеПунктыПоЗаказу = СтрокаПункты;
			СтрокаПункты = "";
		КонецЕсли;
	КонецЦикла;
	Если тблВсеПунктыПоЗаказуПромежуточная.Количество() > 0 Тогда
		НоваяСтрока = тблВсеПунктыПоЗаказу.Добавить();
		НоваяСтрока.Регистратор = ТекСтрока.Регистратор;
		НоваяСтрока.ВсеПунктыПоЗаказу = СтрокаПункты;
	КонецЕсли;
			
	Возврат тблВсеПунктыПоЗаказу;
КонецФункции

Функция ПолучитьТаблицуДатыПогрузкиРазгрузкиПоЗаказам(СтруктураРегистраторы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мсвЗаказыНаТС", СтруктураРегистраторы.ЗаказНаТСВсеПункты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1) КАК Прибытие,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1) КАК Убытие
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя В (&мсвЗаказыНаТС)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.РодительскийЗаказ В (&мсвЗаказыНаТС))";
	тблВрем = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВрем Цикл
		ТекСтрока.Прибытие = ?(ТекСтрока.ПрибытиеФакт = '00010101', ТекСтрока.ПрибытиеПлан, ТекСтрока.ПрибытиеФакт);
		ТекСтрока.Убытие   = ?(ТекСтрока.УбытиеФакт = '00010101',
			уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.Прибытие, ТекСтрока.Стоянка), ТекСтрока.УбытиеФакт);
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВремТаблица", тблВрем);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказНаТС КАК ЗаказНаТС,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Прибытие КАК Прибытие,
	|	уатМаршрутныйЛистЗаказы.Убытие КАК Убытие
	|ПОМЕСТИТЬ ВремТаблица1
	|ИЗ
	|	&ВремТаблица КАК уатМаршрутныйЛистЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказНаТС КАК ЗаказНаТС,
	|	МИНИМУМ(уатМаршрутныйЛистЗаказы.Прибытие) КАК ДатаНачалаПогрузки,
	|	МИНИМУМ(уатМаршрутныйЛистЗаказы.Убытие) КАК ДатаОкончанияПогрузки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаРазгрузки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияРазгрузки
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	ВремТаблица1 КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	(уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказНаТС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказНаТС,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	МАКСИМУМ(уатМаршрутныйЛистЗаказы.Прибытие),
	|	МАКСИМУМ(уатМаршрутныйЛистЗаказы.Убытие)
	|ИЗ
	|	ВремТаблица1 КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	(уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ТаблицаПоМЛ.ЗаказНаТС КАК ЗаказНаТС,
	|	МАКСИМУМ(ТаблицаПоМЛ.ДатаНачалаПогрузки) КАК ДатаНачалаПогрузкиДата,
	|	МАКСИМУМ(ТаблицаПоМЛ.ДатаОкончанияПогрузки) КАК ДатаОкончанияПогрузкиДата,
	|	МАКСИМУМ(ТаблицаПоМЛ.ДатаНачалаРазгрузки) КАК ДатаНачалаРазгрузкиДата,
	|	МАКСИМУМ(ТаблицаПоМЛ.ДатаОкончанияРазгрузки) КАК ДатаОкончанияРазгрузкиДата
	|ПОМЕСТИТЬ ВремТаблица2
	|ИЗ
	|	ВремТаблица КАК ТаблицаПоМЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоМЛ.МаршрутныйЛист,
	|	ТаблицаПоМЛ.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ТаблицаПоМЛ.ЗаказНаТС КАК ЗаказНаТС,
	|	ДатаНачалаПогрузкиДата КАК ДатаНачалаПогрузки,
	|	ДатаОкончанияПогрузкиДата КАК ДатаОкончанияПогрузки,
	|	ДатаНачалаРазгрузкиДата КАК ДатаНачалаРазгрузки,
	|	ДатаОкончанияРазгрузкиДата КАК ДатаОкончанияРазгрузки
	|ИЗ
	|	ВремТаблица2 КАК ТаблицаПоМЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоЗаказам.ЗаказНаТС КАК ЗаказНаТС,
	|	МИНИМУМ(ТаблицаПоЗаказам.ДатаНачалаПогрузкиДата) КАК ДатаНачалаПогрузки,
	|	МИНИМУМ(ТаблицаПоЗаказам.ДатаОкончанияПогрузкиДата) КАК ДатаОкончанияПогрузки,
	|	МАКСИМУМ(ТаблицаПоЗаказам.ДатаНачалаРазгрузкиДата) КАК ДатаНачалаРазгрузки,
	|	МАКСИМУМ(ТаблицаПоЗаказам.ДатаОкончанияРазгрузкиДата) КАК ДатаОкончанияРазгрузки
	|ИЗ
	|	ВремТаблица2 КАК ТаблицаПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоЗаказам.ЗаказНаТС";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Рез = Новый Структура;
	Рез.Вставить("ПоЗаказамИМЛ", РезультатЗапроса[3].Выгрузить());
	Рез.Вставить("ПоЗаказам",    РезультатЗапроса[4].Выгрузить());
	
	// форматирование дат
	//Рез.ПоЗаказамИМЛ.Колонки.Добавить("ДатаНачалаПогрузки");
	//Рез.ПоЗаказамИМЛ.Колонки.Добавить("ДатаОкончанияПогрузки");
	//Рез.ПоЗаказамИМЛ.Колонки.Добавить("ДатаНачалаРазгрузки");
	//Рез.ПоЗаказамИМЛ.Колонки.Добавить("ДатаОкончанияРазгрузки");
	//Для Каждого ТекСтрока Из Рез.ПоЗаказамИМЛ Цикл
	//	ТекСтрока.ДатаНачалаПогрузки     = Формат(ТекСтрока.ДатаНачалаПогрузкиДата,     "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаОкончанияПогрузки  = Формат(ТекСтрока.ДатаОкончанияПогрузкиДата,  "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаНачалаРазгрузки    = Формат(ТекСтрока.ДатаНачалаРазгрузкиДата,    "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаОкончанияРазгрузки = Формат(ТекСтрока.ДатаОкончанияРазгрузкиДата, "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//КонецЦикла;
	//Рез.ПоЗаказам.Колонки.Добавить("ДатаНачалаПогрузки");
	//Рез.ПоЗаказам.Колонки.Добавить("ДатаОкончанияПогрузки");
	//Рез.ПоЗаказам.Колонки.Добавить("ДатаНачалаРазгрузки");
	//Рез.ПоЗаказам.Колонки.Добавить("ДатаОкончанияРазгрузки");
	//Для Каждого ТекСтрока Из Рез.ПоЗаказам Цикл
	//	ТекСтрока.ДатаНачалаПогрузки     = Формат(ТекСтрока.ДатаНачалаПогрузкиДата,     "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаОкончанияПогрузки  = Формат(ТекСтрока.ДатаОкончанияПогрузкиДата,  "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаНачалаРазгрузки    = Формат(ТекСтрока.ДатаНачалаРазгрузкиДата,    "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//	ТекСтрока.ДатаОкончанияРазгрузки = Формат(ТекСтрока.ДатаОкончанияРазгрузкиДата, "ДФ='dd.MM.yyyy HH:mm'; ДП=' '");
	//КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Процедура выполняет дополнительную обработку таблицы данных перед заполнением ТЧ документа при вводе на основании
//
Процедура ПодготовитьТаблицуУслугПриВводеНаОсновании(ДанныеЗаполнения, мДокументОснование) Экспорт
	
	Если ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		ВидДокумента = 3;
		Если ЗначениеЗаполнено(мДокументОснование.МаршрутныйЛист) Тогда
			ОбъектСтроительства = мДокументОснование.МаршрутныйЛист.ОбъектСтроительства;
			Маршрут = мДокументОснование.МаршрутныйЛист.Маршрут;
		Иначе
			ОбъектСтроительства = Неопределено;
			Маршрут = Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатТТД") Тогда
		ВидДокумента = 2;
		ОбъектСтроительства = ДанныеЗаполнения[0].ОбъектСтроительства;
		Маршрут = ДанныеЗаполнения[0].Маршрут
	ИначеЕсли ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ВидДокумента = 1;
		ОбъектСтроительства = мДокументОснование.ОбъектСтроительства;
		Маршрут = мДокументОснование.Маршрут;
	Иначе //Заказ на ТС
		ВидДокумента = 0;
		ОбъектСтроительства = мДокументОснование.ОбъектСтроительства;
		Маршрут = мДокументОснование.Маршрут;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		ДанныеЗаполнения = уатОбщегоНазначенияСервер.ПреобразоватьМассивСтрокВТаблицу(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Колонки.Найти("Услуга") = Неопределено Тогда
		Если ДанныеЗаполнения.Колонки.Найти("Номенклатура") = Неопределено Тогда
			ДанныеЗаполнения.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Иначе
			ДанныеЗаполнения.Колонки.Номенклатура.Имя = "Услуга";
		КонецЕсли;
	КонецЕсли;
	
	флЕстьКолонкаТариф = (ДанныеЗаполнения.Колонки.Найти("Тариф") <> Неопределено);
		
	СписокКолонкиДобавить = Новый Структура("Регистратор, ОбъектСтроительства, Маршрут, ПараметрВыработки, ПунктОтправления, ПунктПрибытия, ТС, МодельТС, Водитель");
	Для Каждого ТекКолонка Из СписокКолонкиДобавить Цикл
		Если ДанныеЗаполнения.Колонки.Найти(ТекКолонка.Ключ) = Неопределено Тогда
			ДанныеЗаполнения.Колонки.Добавить(ТекКолонка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполнения.ЗаполнитьЗначения(мДокументОснование, "Регистратор");
	
	Если ДанныеЗаполнения.Колонки.Найти("ЗаказНаТС") = Неопределено
		И ДанныеЗаполнения.Колонки.Найти("Заказ") = Неопределено Тогда
		ДанныеЗаполнения.Колонки.Добавить("Заказ");
		Если ВидДокумента = 0 ИЛИ ВидДокумента = 3 Тогда
			ДанныеЗаполнения.ЗаполнитьЗначения(мДокументОснование, "Заказ");
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения.Колонки.Найти("ЗаказНаТС") <> Неопределено
		И ДанныеЗаполнения.Колонки.Найти("Заказ") = Неопределено Тогда
		ДанныеЗаполнения.Колонки.ЗаказНаТС.Имя = "Заказ";
	КонецЕсли;
		                                                       
	Для Каждого ТекУслуга Из ДанныеЗаполнения Цикл
		ТекУслуга.ОбъектСтроительства = ОбъектСтроительства;
		ТекУслуга.Маршрут             = Маршрут;
		
		Если флЕстьКолонкаТариф И ЗначениеЗаполнено(ТекУслуга.Тариф) Тогда
			ТекУслуга.ПараметрВыработки = ТекУслуга.Тариф.ПараметрВыработки;
		КонецЕсли;
		
		Если ВидДокумента = 1 ИЛИ ВидДокумента = 3 Тогда
			ТекУслуга.ТС = мДокументОснование.ТС;
		КонецЕсли;
		
		Если ВидДокумента = 1 Тогда
			ТекУслуга.Водитель = мДокументОснование.Водитель1;
		ИначеЕсли ВидДокумента = 3 Тогда
			ТекУслуга.Водитель = мДокументОснование.Водитель;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Функция возвращает данные для заполнения Акта КС-3
//
Функция ПолучитьДанныеДляАктаКС3(ДатаНач, ДатаКон, ДатаОстаткиНа, Макет, ДокументОснование_Организация,
	ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента, ШаблонЗаполнения) Экспорт
	
	мсвДанныеАктаКС3 = Новый Структура("ИзменитьДаты, ДатаНач, ДатаКон, СуммаЗаОтчетныйПериод,"
		" СуммаСНачалаГода, СуммаСНачалаПроведения, НДСЗаОтчетныйПериод, НДССНачалаГода, НДССНачалаПроведения");
	
	// установка параметров
	Если ШаблонЗаполнения.РежимЗаполнения = 1 Тогда
		мДатаНач = '00010101';
		мДатаКон = ДатаОстаткиНа;
	Иначе
		мДатаНач = ДатаНач;
		мДатаКон = ДатаКон;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мДатаКон) Тогда
		мДатаКон = '39991231';
	КонецЕсли;
	
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "НачПериода"; НовыйПараметр.Значение = мДатаНач;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "КонПериода"; НовыйПараметр.Значение = КонецДня(мДатаКон);
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "Организация"; НовыйПараметр.Значение = ДокументОснование_Организация;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "Контрагент"; НовыйПараметр.Значение  = ДокументОснование_Контрагент;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "ДоговорКонтрагента"; НовыйПараметр.Значение = ДокументОснование_ДоговорКонтрагента;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "ПоТТД"; НовыйПараметр.Значение = ШаблонЗаполнения.ИспользоватьДанныеТТД;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "ПоЗаказамГрузоотправителей"; НовыйПараметр.Значение = ШаблонЗаполнения.ИспользоватьДанныеЗаказНаТС;
	НовыйПараметр = Макет.ЗначенияПараметров.Добавить();
	НовыйПараметр.Имя = "ПоКорректировке"; НовыйПараметр.Значение = ШаблонЗаполнения.ИспользоватьДанныеКорректировкаЗаписей;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТабУслуг = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабУслуг);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТабУслуг.Количество() > 0 Тогда 
		ЗаполнитьЗначенияСвойств(мсвДанныеАктаКС3, ТабУслуг[0],
		"СуммаЗаОтчетныйПериод, СуммаСНачалаГода, СуммаСНачалаПроведения, НДСЗаОтчетныйПериод, НДССНачалаГода, НДССНачалаПроведения");
	Иначе 
		мсвДанныеАктаКС3.СуммаЗаОтчетныйПериод  = 0;
		мсвДанныеАктаКС3.СуммаСНачалаГода       = 0;
		мсвДанныеАктаКС3.СуммаСНачалаПроведения = 0;
		мсвДанныеАктаКС3.НДСЗаОтчетныйПериод    = 0;
		мсвДанныеАктаКС3.НДССНачалаГода         = 0;
		мсвДанныеАктаКС3.НДССНачалаПроведения   = 0;
	КонецЕсли;
	
	Если ШаблонЗаполнения.РежимЗаполнения = 1 Тогда
		мсвДанныеАктаКС3.ИзменитьДаты = Ложь;
	Иначе 
		мсвДанныеАктаКС3.ИзменитьДаты = Истина;
	КонецЕсли;
	мсвДанныеАктаКС3.ДатаНач = ДатаНач;
	мсвДанныеАктаКС3.ДатаКон = ДатаКон;
	
	Возврат мсвДанныеАктаКС3;
	
КонецФункции // ПолучитьДанныеДляАктаКС3()

#КонецОбласти

#Область Планирование

// Функция возвращает структуру характеристик сценария
//
Функция ЗаполнитьХарактеристикиСценария(Сценарий) Экспорт
	
	ФлагиРазделыПланирования  = "флПланированиеУслуг, флДоходыРасходы, флВыработка, флОбъемыПеревозок";
	
	ФлагиВключенияРазрезов    = "флПодразделение, флТС, флПараметрВыработки, флВидПеревозки, флКонтрагент,
	|флДоговор, флМаршрут, флОбъектСтроительства, флНаправлениеПеревозки, флНоменклатураГруза,
	|флУслуга, флСтатья";
	
	ФлагиПланированияПоГруппе = "флТСГруппы, флКолоннаГруппы, флВидПеревозкиГруппы, флКонтрагентГруппы,
	|флМаршрутГруппы, флОбъектСтроительстваГруппы, флНаправлениеПеревозкиГруппы,
	|флНоменклатураГрузаГруппы, флУслугаГруппы";
	
	ВариантыАналитик          = "ВариантАналитикиТС, ВариантАналитикиКонтрагент, ВариантАналитикиМаршрут,
	|ВариантАналитикиСтатья";
	
	РеквизитыСценария         = "Раздел, Периодичность, Валюта, ПолучательУслуг, ВедущийСценарий,
		|ВидПланирования, ИспользоватьКраткосрочноеПланирование, ПериодичностьКраткосрочногоПланирования,
		|ОтображатьНомерПериода, РежимЗаполненияВесаОбъемаГруза, ПланированиеОбъемовВПроцентах";
	
	ХарактеристикиСценарияСтрока = ФлагиРазделыПланирования + ", " + ФлагиВключенияРазрезов + ", " +
		ФлагиПланированияПоГруппе + ", " + ВариантыАналитик + ", " + РеквизитыСценария +
		", МассивПараметровВыработки";
	 
	ХарактеристикиСценария = Новый Структура(ХарактеристикиСценарияСтрока);
	
	
	// Заполним реквизиты сценария
	ЗначенияРеквизитов = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Сценарий, РеквизитыСценария);
	ЗаполнитьЗначенияСвойств(ХарактеристикиСценария, ЗначенияРеквизитов);
	
	// Заполним массив выбранных в сценарии параметров выработки
	МассивПараметровВыработки = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатСценарииПланированияРазрезыПоказателейПланирования.ПараметрВыработки КАК Ссылка
	               |ИЗ
	               |	Справочник.уатСценарииПланирования.РазрезыПоказателейПланирования КАК уатСценарииПланированияРазрезыПоказателейПланирования
	               |ГДЕ
	               |	уатСценарииПланированияРазрезыПоказателейПланирования.ПараметрВыработки.ИспользоватьПриПланировании = ИСТИНА
	               |	И НЕ уатСценарииПланированияРазрезыПоказателейПланирования.ПараметрВыработки.ПометкаУдаления
	               |	И уатСценарииПланированияРазрезыПоказателейПланирования.Ссылка = &Сценарий";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПараметровВыработки.Добавить(Выборка.Ссылка);
	КонецЦИкла;
	ХарактеристикиСценария.МассивПараметровВыработки = МассивПараметровВыработки;
	
	// Заполним флаги разделов планирования
	Раздел = ХарактеристикиСценария.Раздел;
	флПланированиеУслуг = Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги");
	флДоходыРасходы     = Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы");
	флВыработка         = Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.Выработка");
	флОбъемыПеревозок   = Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ОбъемыПеревозок");
	
	ХарактеристикиСценария.флПланированиеУслуг    = флПланированиеУслуг;
	ХарактеристикиСценария.флДоходыРасходы        = флДоходыРасходы;
	ХарактеристикиСценария.флВыработка            = флВыработка;
	ХарактеристикиСценария.флОбъемыПеревозок      = флОбъемыПеревозок;
	
	// Заполним флаги включения рарезов
	РазрезыПланирования = Сценарий.РазрезыПланирования;
	ЗаполнитьФлагиВключенияРазрезов(ХарактеристикиСценария, РазрезыПланирования);
	
	Возврат ХарактеристикиСценария;
	
КонецФункции

// Обработчик регламентного задания "Расчет фактических данных по долгосрочному планированию"
//
Процедура РасчетФактическихДанныхПоДолгосрочномуПланированию() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru = 'Расчет фактических данных по долгосрочному планированию'; en = 'Allocation of incomes and expenses'");
	
	ТекстНСТР = НСтр("en='Beginning of distribution';ru='Начало расчета'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСценарииПланирования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	               |ГДЕ
	               |	НЕ уатСценарииПланирования.ПометкаУдаления";
	МассивСценариев = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления";
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Дата = НачалоМесяца(НачалоДня(ТекущаяДатаСеанса())-1);
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрока Из МассивОрганизаций Цикл
		Для Каждого ТекСтрокаСценарий Из МассивСценариев Цикл
			Док = Документы.уатРасчетФактическихДанныхПоДолгосрочномуПланированию.СоздатьДокумент();
			уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, Док);
			
			Док.Организация   = ТекСтрока;
			Док.Сценарий      = ТекСтрокаСценарий;
			Док.ДатаНачала    = Дата;
			Док.ДатаОкончания = КонецМесяца(Дата);
			Док.УстановитьНовыйНомер();
			Док.Комментарий = НСтр("en='Document is automatically created when executing scheduled jobs';ru='Документ создан автоматически при выполнении регламентного задания'");
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
				ТекстНСТР = НСтр("en='Posted document';ru='Проведен документ'") + " """ + Док + """";
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
			Исключение
				ТекстНСТР = НСтр("en='During document posting';ru='При проведении документа'") + " """ + Док + " "" " + НСтр("en='errors occured:';ru='возникли ошибки:'") +" " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='End of distribution';ru='Окончание расчета'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
КонецПроцедуры

// Обработчик регламентного задания "Расчет сводных параметров выработкию"
//
Процедура РасчетСводныхПараметровВыработки() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru = 'Расчет фактических данных по долгосрочному планированию'; en = 'Allocation of incomes and expenses'");
	
	ТекстНСТР = НСтр("en='Beginning of distribution';ru='Начало расчета'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСценарииПланирования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	               |ГДЕ
	               |	НЕ уатСценарииПланирования.ПометкаУдаления";
	МассивСценариев = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления";
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Дата = НачалоМесяца(НачалоДня(ТекущаяДатаСеанса())-1);
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрока Из МассивОрганизаций Цикл
		Для Каждого ТекСтрокаСценарий Из МассивСценариев Цикл
			Док = Документы.уатРасчетСводныхПараметровВыработки.СоздатьДокумент();
			уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, Док);
			
			Док.Организация   = ТекСтрока;
			Док.Сценарий      = ТекСтрокаСценарий;
			Док.ДатаНачала    = Дата;
			Док.ДатаОкончания = КонецМесяца(Дата);
			Док.УстановитьНовыйНомер();
			Док.Комментарий = НСтр("en='Document is automatically created when executing scheduled jobs';ru='Документ создан автоматически при выполнении регламентного задания'");
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
				ТекстНСТР = НСтр("en='Posted document';ru='Проведен документ'") + " """ + Док + """";
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
			Исключение
				ТекстНСТР = НСтр("en='During document posting';ru='При проведении документа'") + " """ + Док + " "" " + НСтр("en='errors occured:';ru='возникли ошибки:'") +" " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='End of distribution';ru='Окончание расчета'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
КонецПроцедуры

Процедура ЗаполнитьФлагиВключенияРазрезов(ХарактеристикиСценария, РазрезыПланирования, ПараметрВыработки = Неопределено) Экспорт
	
	Если ПараметрВыработки = Неопределено Тогда
		РазрезыПланированияТС                   = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ТС));
		РазрезыПланированияКолонна              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Колонна));
		РазрезыПланированияПараметрВыработки    = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ПараметрВыработки));
		РазрезыПланированияВидПеревозки         = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ВидПеревозки));
		РазрезыПланированияКонтрагент           = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Контрагент));
		РазрезыПланированияДоговор              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Договор));
		РазрезыПланированияМаршрут              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Маршрут));
		РазрезыПланированияОбъектСтроительства  = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ОбъектСтроительства));
		РазрезыПланированияНаправлениеПеревозки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.НаправлениеПеревозки));
		РазрезыПланированияНоменклатураГруза    = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.НоменклатураГруза));
		РазрезыПланированияУслуга               = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Услуга));
		РазрезыПланированияСтатья               = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Статья));
	Иначе
		РазрезыПланированияТС                   = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.ТС, ПараметрВыработки));
		РазрезыПланированияКолонна              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Колонна, ПараметрВыработки));
		РазрезыПланированияПараметрВыработки    = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.ПараметрВыработки, ПараметрВыработки));
		РазрезыПланированияВидПеревозки         = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.ВидПеревозки, ПараметрВыработки));
		РазрезыПланированияКонтрагент           = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Контрагент, ПараметрВыработки));
		РазрезыПланированияДоговор              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Договор, ПараметрВыработки));
		РазрезыПланированияМаршрут              = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Маршрут, ПараметрВыработки));
		РазрезыПланированияОбъектСтроительства  = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.ОбъектСтроительства, ПараметрВыработки));
		РазрезыПланированияНаправлениеПеревозки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.НаправлениеПеревозки, ПараметрВыработки));
		РазрезыПланированияНоменклатураГруза    = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.НоменклатураГруза, ПараметрВыработки));
		РазрезыПланированияУслуга               = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Услуга, ПараметрВыработки));
		РазрезыПланированияСтатья               = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования, ПараметрВыработки", Перечисления.уатРазрезыПланирования.Статья, ПараметрВыработки));
	КонецЕсли;
	
	флТС                      = РазрезыПланированияТС.Количество() <> 0;
	флКолонна                 = РазрезыПланированияКолонна.Количество() <> 0;
	флПараметрВыработки       = РазрезыПланированияПараметрВыработки.Количество() <> 0;
	флВидПеревозки            = РазрезыПланированияВидПеревозки.Количество() <> 0;
	флКонтрагент              = РазрезыПланированияКонтрагент.Количество() <> 0;
	флДоговор                 = РазрезыПланированияДоговор.Количество() <> 0;
	флМаршрут                 = РазрезыПланированияМаршрут.Количество() <> 0;
	флОбъектСтроительства     = РазрезыПланированияОбъектСтроительства.Количество() <> 0;
	флНаправлениеПеревозки    = РазрезыПланированияНаправлениеПеревозки.Количество() <> 0;
	флНоменклатураГруза       = РазрезыПланированияНоменклатураГруза.Количество() <> 0;
	флУслуга                  = РазрезыПланированияУслуга.Количество() <> 0;
	флСтатья                  = РазрезыПланированияСтатья.Количество() <> 0;

	флТСГруппы                   = флТС           И РазрезыПланированияТС[0].ПланированиеПоГруппам;
	флКолоннаГруппы              = флКолонна      И РазрезыПланированияКолонна[0].ПланированиеПоГруппам;
	флВидПеревозкиГруппы         = флВидПеревозки И РазрезыПланированияВидПеревозки[0].ПланированиеПоГруппам;
	флКонтрагентГруппы           = флКонтрагент   И РазрезыПланированияКонтрагент[0].ПланированиеПоГруппам;
	флМаршрутГруппы              = флМаршрут      И РазрезыПланированияМаршрут[0].ПланированиеПоГруппам;
	флОбъектСтроительстваГруппы  = флОбъектСтроительства  И РазрезыПланированияОбъектСтроительства[0].ПланированиеПоГруппам;
	флНаправлениеПеревозкиГруппы = флНаправлениеПеревозки И РазрезыПланированияНаправлениеПеревозки[0].ПланированиеПоГруппам;
	флНоменклатураГрузаГруппы    = флНоменклатураГруза    И РазрезыПланированияНоменклатураГруза[0].ПланированиеПоГруппам;
	флУслугаГруппы               = флУслуга               И РазрезыПланированияУслуга[0].ПланированиеПоГруппам;
	
	ХарактеристикиСценария.флПодразделение        = Истина;
	ХарактеристикиСценария.флТС                   = флТС;
	ХарактеристикиСценария.флПараметрВыработки    = флПараметрВыработки;
	ХарактеристикиСценария.флВидПеревозки         = флВидПеревозки;
	Если ХарактеристикиСценария.флОбъемыПеревозок Тогда
		ХарактеристикиСценария.флКонтрагент       = Истина;
		ХарактеристикиСценария.флДоговор          = Истина;
	Иначе
		ХарактеристикиСценария.флКонтрагент       = флКонтрагент;
		ХарактеристикиСценария.флДоговор          = флДоговор;
	КонецЕсли;
	ХарактеристикиСценария.флМаршрут              = флМаршрут;
	ХарактеристикиСценария.флОбъектСтроительства  = флОбъектСтроительства;
	ХарактеристикиСценария.флНаправлениеПеревозки = флНаправлениеПеревозки;
	ХарактеристикиСценария.флНоменклатураГруза    = флНоменклатураГруза;
	ХарактеристикиСценария.флУслуга               = флУслуга;
	ХарактеристикиСценария.флСтатья               = флСтатья;
	
	ХарактеристикиСценария.флТСГруппы                   = флТСГруппы;
	ХарактеристикиСценария.флКолоннаГруппы              = флКолоннаГруппы;
	ХарактеристикиСценария.флВидПеревозкиГруппы         = флВидПеревозкиГруппы;
	ХарактеристикиСценария.флКонтрагентГруппы           = флКонтрагентГруппы;
	ХарактеристикиСценария.флМаршрутГруппы              = флМаршрутГруппы;
	ХарактеристикиСценария.флОбъектСтроительстваГруппы  = флОбъектСтроительстваГруппы;
	ХарактеристикиСценария.флНаправлениеПеревозкиГруппы = флНаправлениеПеревозкиГруппы;
	ХарактеристикиСценария.флНоменклатураГрузаГруппы    = флНоменклатураГрузаГруппы;
	ХарактеристикиСценария.флУслугаГруппы               = флУслугаГруппы;
	
	// Заполним выриант аналитики
	Если флТС 
		И ЗначениеЗаполнено(РазрезыПланированияТС[0].ВариантАналитики) Тогда
		ХарактеристикиСценария.ВариантАналитикиТС = РазрезыПланированияТС[0].ВариантАналитики;
	Иначе
		ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.ТС;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флКонтрагент
		И ХарактеристикиСценария.Раздел = Перечисления.уатРазделыПланирования.ОбъемыПеревозок Тогда
		ХарактеристикиСценария.ВариантАналитикиКонтрагент = Перечисления.уатВариантыАналитик.Перевозчик;
	ИначеЕсли флКонтрагент 
		И ЗначениеЗаполнено(РазрезыПланированияКонтрагент[0].ВариантАналитики) Тогда
		ХарактеристикиСценария.ВариантАналитикиКонтрагент = РазрезыПланированияКонтрагент[0].ВариантАналитики;
	Иначе
		ХарактеристикиСценария.ВариантАналитикиКонтрагент = Перечисления.уатВариантыАналитик.Заказчик;
	КонецЕсли;
	
	Если флМаршрут 
		И ЗначениеЗаполнено(РазрезыПланированияМаршрут[0].ВариантАналитики) Тогда
		ХарактеристикиСценария.ВариантАналитикиМаршрут = РазрезыПланированияМаршрут[0].ВариантАналитики;
	Иначе
		ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.Маршрут;
	КонецЕсли;
	
	Если флСтатья 
		И ЗначениеЗаполнено(РазрезыПланированияСтатья[0].ВариантАналитики) Тогда
		ХарактеристикиСценария.ВариантАналитикиСтатья = РазрезыПланированияСтатья[0].ВариантАналитики;
	Иначе
		ХарактеристикиСценария.ВариантАналитикиСтатья = Перечисления.уатВариантыАналитик.СтатьяДоходов;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоставПланаПериод(ЭтотОбъект, ДатаПланирования, ХарактеристикиСценария, КоличествоИнтервалов, ИмяТЧ = "СоставПланаПериоды") Экспорт
	
	Элементы         = ЭтотОбъект.Элементы;
	
	КоличествоИнтервалов = 0;
	
	ИспользоватьКраткосрочноеПланирование = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	Раздел                                = ХарактеристикиСценария.Раздел;
	ОтображатьНомерПериода                = ХарактеристикиСценария.ОтображатьНомерПериода;
	
	ОписаниеТипаСумма      = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаСтавка     = Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС");

	// Добавим итоговые реквизиты 
	ДобавляемыеКолонки = Новый Массив();
	
	Если ХарактеристикиСценария.ПланированиеОбъемовВПроцентах Тогда
		ИмяКолонкиКоличествоВсего = НСтр("ru='Процент'");
		ОписаниеТипаКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1));
	Иначе
		ИмяКолонкиКоличествоВсего = НСтр("ru='Количество'");
		ОписаниеТипаКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	КонецЕсли;
	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Количество_Всего",
		ОписаниеТипаКоличество, ИмяТЧ, ИмяКолонкиКоличествоВсего, Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Цена_Всего",
		ОписаниеТипаСумма, ИмяТЧ, НСтр("ru = 'Цена'; en = 'Price'"), Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Сумма_Всего",
		ОписаниеТипаСумма, ИмяТЧ, НСтр("ru = 'Сумма'; en = 'Sum'"), Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "СтавкаНДС_Всего",
		ОписаниеТипаСтавка, ИмяТЧ, НСтр("ru = 'Ставка НДС'; en = 'VAT rate'"), Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "СуммаНДС_Всего",
		ОписаниеТипаСумма, ИмяТЧ, НСтр("ru='Сумма НДС'"), Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "_Всего",
		ОписаниеТипаСумма, ИмяТЧ, НСтр("ru='Всего'"), Истина);
	ДобавляемыеКолонки.Добавить(НовыйРеквизит);
	
	ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеКолонки);
	
	НоваяГруппа = Элементы.Добавить(ИмяТЧ + "ГруппаВсего", Тип("ГруппаФормы"), Элементы[ИмяТЧ]);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.ОтображатьВШапке = ИспользоватьКраткосрочноеПланирование;
	НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
	НоваяГруппа.Заголовок        = НСтр("ru='Всего'");
	
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Количество_Всего", "Подключаемый_СоставПланаКоличествоПриИзменении", , ИмяТЧ);
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Цена_Всего", "Подключаемый_СоставПланаЦенаПриИзменении",, ИмяТЧ);
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Сумма_Всего", "Подключаемый_СоставПланаСуммаПриИзменении",, ИмяТЧ);
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "СтавкаНДС_Всего", "Подключаемый_СоставПланаСтавкаНДСПриИзменении",, ИмяТЧ);
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "СуммаНДС_Всего",,, ИмяТЧ);
	ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "_Всего",,, ИмяТЧ, Истина);
	
	Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
		Возврат;
	КонецЕсли;
	
	ПериодичностьКраткосрочногоПланирования = ХарактеристикиСценария.ПериодичностьКраткосрочногоПланирования;
	Периодичность                           = ХарактеристикиСценария.Периодичность;

	НачДата = ДатаПланирования;
	КонДата = ДатаПланирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Периодичность);

	ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(НачДата,    ПериодичностьКраткосрочногоПланирования);
	ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, ПериодичностьКраткосрочногоПланирования);

	Сч = 0;
	Пока ДобавлениеДатаНачала < КонецДня(КонДата) Цикл
		
		НоваяГруппа = Элементы.Добавить(ИмяТЧ + "ГруппаВсего" + Сч, Тип("ГруппаФормы"), Элементы[ИмяТЧ]);
		НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппа.ОтображатьВШапке = Истина;
		НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
		
		НоваяГруппа.Заголовок        = ПланированиеКлиентСервер.СформироватьЗаголовокПериода(ПериодичностьКраткосрочногоПланирования, ДобавлениеДатаНачала, ДобавлениеДатаОкончания, ОтображатьНомерПериода);
		
		ДобавляемыеКолонки = Новый Массив();
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Количество_" + Сч,
			ОписаниеТипаКоличество, ИмяТЧ, НСтр("ru='Количество'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Цена_" + Сч,
			ОписаниеТипаСумма, ИмяТЧ, НСтр("ru = 'Цена'; en = 'Price'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Сумма_" + Сч,
			ОписаниеТипаСумма, ИмяТЧ, НСтр("ru = 'Сумма'; en = 'Sum'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "СуммаНДС_" + Сч,
			ОписаниеТипаСумма, ИмяТЧ, НСтр("ru='Сумма НДС'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "СтавкаНДС_" + Сч,
			ОписаниеТипаСтавка, ИмяТЧ, НСтр("ru = 'Ставка НДС'; en = 'VAT rate'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяТЧ + "Всего_" + Сч,
			ОписаниеТипаСумма, ИмяТЧ, НСтр("ru='Всего'"), Истина);
		ДобавляемыеКолонки.Добавить(НовыйРеквизит);
		
		ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеКолонки);
		
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Количество_" + Сч, "Подключаемый_СоставПланаКоличествоПриИзменении",, ИмяТЧ);
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Цена_" + Сч, "Подключаемый_СоставПланаЦенаПриИзменении",, ИмяТЧ);
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Сумма_" + Сч, "Подключаемый_СоставПланаСуммаПриИзменении",, ИмяТЧ);
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "СтавкаНДС_" + Сч, "Подключаемый_СоставПланаСтавкаНДСПриИзменении",, ИмяТЧ);
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "СуммаНДС_" + Сч,,, ИмяТЧ);
		ДобавитьЭлементСоставПланаПериоды(Элементы, НоваяГруппа, "Всего_" + Сч,,, ИмяТЧ, Истина);
		
		ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания + 1 , ПериодичностьКраткосрочногоПланирования);
		ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаОкончания + 1, ПериодичностьКраткосрочногоПланирования);
		Сч = Сч + 1;
	КонецЦикла;
	КоличествоИнтервалов = Сч - 1;

КонецПроцедуры

Процедура ОчиститьСоставПланаПериод(ЭтотОбъект, ХарактеристикиСценария, КоличествоИнтервалов, ИмяТЧ = "СоставПланаПериоды") Экспорт

	Элементы         = ЭтотОбъект.Элементы;
	
	МассивКолонокСоставПланаПериод = Новый Массив();
	
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "_Всего");
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Количество_Всего");
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Цена_Всего");
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Сумма_Всего");
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "СуммаНДС_Всего");
	МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "СтавкаНДС_Всего");

	Элементы.Удалить(Элементы[ИмяТЧ + "ГруппаВсего"]);
	
	ИспользоватьКраткосрочноеПланирование = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
		ЭтотОбъект.ИзменитьРеквизиты(, МассивКолонокСоставПланаПериод);
		Возврат;
	КонецЕсли;

	Для Сч = 0 По КоличествоИнтервалов Цикл
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Количество_" + Сч);
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Цена_" + Сч);
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Сумма_" + Сч);
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "СтавкаНДС_" + Сч);
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "СуммаНДС_" + Сч);
		МассивКолонокСоставПланаПериод.Добавить(ИмяТЧ + "." + ИмяТЧ + "Всего_" + Сч);
		
		Элементы.Удалить(Элементы[ИмяТЧ + "ГруппаВсего" + Сч]);
		
	КонецЦикла;
	
	ЭтотОбъект.ИзменитьРеквизиты(, МассивКолонокСоставПланаПериод);


КонецПроцедуры

Процедура ДобавитьЭлементСоставПланаПериоды(Элементы, Родитель, ИмяКолонки, ИмяДействия = "", Ширина = 8, ИмяТЧ = "СоставПланаПериоды", ТолькоПросмотр = Ложь)
	
	НовыйЭлемент = Элементы.Добавить(ИмяТЧ + ИмяКолонки, Тип("ПолеФормы"), Родитель);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ИмяТЧ + "."+ ИмяТЧ + ИмяКолонки;
	НовыйЭлемент.Ширина      = Ширина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Истина;
	НовыйЭлемент.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(ИмяДействия) Тогда
		НовыйЭлемент.УстановитьДействие("ПриИзменении", ИмяДействия);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СопроводительныеДокументы

// Обработчик регламентного задания РасчетСтатусовОбработкиСДпоЗаказамНаТС
//
Процедура РасчетСтатусовОбработкиСДпоЗаказамНаТС() Экспорт
	ИмяСобытияВЖурналеРегистрации = "Расчет статусов обработки сопроводительных документов по Заказам на ТС";
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, "Начало расчета");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(
	|		&ДатаСреза,
	|		СопроводительныйДокумент.ВидДокумента.ВидВладельца = ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ДокументыПеревозчика)
	|		ИЛИ СопроводительныйДокумент.ВидДокумента.ВидВладельца = ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ОбщиеДокументы)) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -1) И &ДатаСреза");
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	ВыборкаСД = Запрос.Выполнить().Выбрать();
	
	мсвЗаказы = Новый Массив;
	Пока ВыборкаСД.Следующий() Цикл
		Если ТипЗнч(ВыборкаСД.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			мсвЗаказы.Добавить(ВыборкаСД.Основание);
		ИначеЕсли ТипЗнч(ВыборкаСД.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Для Каждого ТекЗаказМЛ Из ВыборкаСД.Основание.Заказы Цикл
				Если ЗначениеЗаполнено(ТекЗаказМЛ.ЗаказГрузоотправителя)
					И мсвЗаказы.Найти(ТекЗаказМЛ.ЗаказГрузоотправителя) = Неопределено Тогда
					мсвЗаказы.Добавить(ТекЗаказМЛ.ЗаказГрузоотправителя);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусОбработкиСДпоЗаказамНаТС.ЗаказНаТС КАК ЗаказНаТС,
	|	уатСтатусОбработкиСДпоЗаказамНаТС.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатСтатусОбработкиСДпоЗаказамНаТС.ДатаПолученияДокументов КАК ДатаПолученияДокументов,
	|	уатСтатусОбработкиСДпоЗаказамНаТС.ОбработкаДокументовПеревозчикаЗавершена КАК ОбработкаДокументовПеревозчикаЗавершена
	|ИЗ
	|	РегистрСведений.уатСтатусОбработкиСДпоЗаказамНаТС КАК уатСтатусОбработкиСДпоЗаказамНаТС
	|ГДЕ
	|	уатСтатусОбработкиСДпоЗаказамНаТС.ЗаказНаТС В(&мсвЗаказы)");
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	тблЗаписанныеСтатусы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		флВсеСДОбработаны = Истина;
		МаксДатаОбработкиСД = '00010101';
		
		мсвСДпоЗаказу   = ПолучитьВсеСДпоЗаказу(ТекЗаказ);
		МЛдляЗаказаНаТС = ПолучитьМЛдляЗаказаНаТС(ТекЗаказ);
		
		Для Каждого ТекСД Из мсвСДпоЗаказу Цикл
			ДатаОбработкиСД = ПолучитьДатуОбработкиСД(ТекСД);
			
			Если НЕ ЗначениеЗаполнено(ДатаОбработкиСД) Тогда
				флВсеСДОбработаны = Ложь;
			КонецЕсли;
			МаксДатаОбработкиСД = Макс(МаксДатаОбработкиСД, ДатаОбработкиСД);
		КонецЦикла;
		
		// Ищем запись в наборе записей с аналогичными значениями полей
		// если такая запись уже есть, то перезаписывать её не нужно
		СтрокаПоиска = тблЗаписанныеСтатусы.Найти(ТекЗаказ, "ЗаказНаТС");
		Если СтрокаПоиска <> Неопределено
			И СтрокаПоиска.ДатаПолученияДокументов = МаксДатаОбработкиСД
			И СтрокаПоиска.МаршрутныйЛист = МЛдляЗаказаНаТС
			И СтрокаПоиска.ОбработкаДокументовПеревозчикаЗавершена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусОбработкиЗапись = РегистрыСведений.уатСтатусОбработкиСДпоЗаказамНаТС.СоздатьМенеджерЗаписи();
		СтатусОбработкиЗапись.ЗаказНаТС = ТекЗаказ;
		
		Если флВсеСДОбработаны И МаксДатаОбработкиСД <> '00010101' Тогда
			СтатусОбработкиЗапись.ДатаПолученияДокументов = МаксДатаОбработкиСД;
			СтатусОбработкиЗапись.МаршрутныйЛист = МЛдляЗаказаНаТС;
			СтатусОбработкиЗапись.ОбработкаДокументовПеревозчикаЗавершена = Истина;
			
			Попытка
				СтатусОбработкиЗапись.Записать();
				
				ТекстСобытия = СтрШаблон("Записан статус завершения обработки сопроводительных документов по заказу %1", ТекЗаказ);
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстСобытия);
			Исключение
				ТекстСобытия = СтрШаблон("При записи статуса завершения обработки сопроводительных документов по заказу %1 возникли ошибки: %2", ТекЗаказ, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстСобытия);
			КонецПопытки;
		Иначе
			Попытка
				СтатусОбработкиЗапись.Удалить();
				
				ТекстСобытия = СтрШаблон("Удален статус завершения обработки сопроводительных документов по заказу %1", ТекЗаказ);
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстСобытия);
			Исключение
				ТекстСобытия = СтрШаблон("При удалении статуса завершения обработки сопроводительных документов по заказу %1 возникли ошибки: %2", ТекЗаказ, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстСобытия);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, "Окончание расчета");
КонецПроцедуры

Функция ПолучитьВсеСДпоЗаказу(ЗаказНаТС)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСопроводительныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И уатСопроводительныеДокументы.Основание = &Заказ
	|	И уатСопроводительныеДокументы.ВидДокумента.ВидВладельца <> ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ДокументыОрганизации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСопроводительныеДокументы.Ссылка
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И уатСопроводительныеДокументы.Основание.Заказы.ЗаказГрузоотправителя = &Заказ
	|	И уатСопроводительныеДокументы.ВидДокумента.ВидВладельца <> ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ДокументыОрганизации)");
	Запрос.УстановитьПараметр("Заказ", ЗаказНаТС);
	мсвСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мсвСД;
КонецФункции

Функция ПолучитьДатуОбработкиСД(СопроводительныйДокумент)
	ДатаОбработкиСД = '00010101';
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент = &СопроводительныйДокумент
	|	И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)");
	Запрос.УстановитьПараметр("СопроводительныйДокумент", СопроводительныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаОбработкиСД = Выборка.Период;
	КонецЕсли;
	
	Возврат ДатаОбработкиСД;
КонецФункции

// Функция возвращает МЛ по переданному Заказу на ТС
//
// Параметры:
//  ЗаказНаТС	 - Документ-ссылка - Заказ на ТС
//  ТолькоОдинМЛ - Булево - признак возврат только одного МЛ
// 
// Возвращаемое значение:
//  Документ-ссылка МЛ, массив - возвращается значение или массив МЛ в зависимости от параметра ТолькоОдинМЛ
//
Функция ПолучитьМЛдляЗаказаНаТС(ЗаказНаТС, ТолькоОдинМЛ = Истина) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя = &ЗаказНаТС
	|	И НЕ уатМаршрутныйЛист.ПометкаУдаления");
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТолькоОдинМЛ Тогда
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		мсвМЛ = Новый Массив;
		Пока Выборка.Следующий() Цикл
			мсвМЛ.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Возврат мсвМЛ;
	КонецЕсли;
КонецФункции

// Функция возвращает Заказы по переданному МЛ
//
// Параметры:
//  МЛ	 - Документ-ссылка или Документ-объект
// 
// Возвращаемое значение:
//  массив Заказов на ТС
//
Функция ПолучитьЗаказыМЛ(МЛ) Экспорт
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрока Из МЛ.Заказы Цикл
		Если мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсвЗаказы;
КонецФункции

// Устанавливает цвета фона для статусов сопроводительных документов
//
Процедура УстановитьУсловноеОформлениеСтатусовСД(УсловноеОформление, мсвПутиКДанным) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаСопроводительныеДокументы";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураПутьКДанным Из мсвПутиКДанным Цикл
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СтруктураПутьКДанным.Отбор);
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
			
			Если Не ЦветТекста = Неопределено Тогда 
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
			
			ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусов";
			ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
			
			ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтруктураПутьКДанным.Поле);
			ПолеОформления.Использование = Истина;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

// Функция получает итоговые статусы СД по списку оснований СД
//
Функция ПолучитьСоответствиеСтатусовСДпоДокументам(мсвОснования) Экспорт
	соотвСтатусыОснований = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена) КАК ОбработкаЗавершена,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание В(&мсвОснования)
	|ИТОГИ ПО
	|	Основание");
	Запрос.УстановитьПараметр("мсвОснования", мсвОснования);
	
	ВыборкаОснование = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОснование.Следующий() Цикл
		ВыборкаСД = ВыборкаОснование.Выбрать();
		
		СчВсегоДокументов = ВыборкаСД.Количество();
		СчВыполненные     = 0;
		
		Пока ВыборкаСД.Следующий() Цикл 
			Если ВыборкаСД.ОбработкаЗавершена Тогда 
				СчВыполненные = СчВыполненные + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если СчВсегоДокументов = 0 Тогда
			СтатусДокументов = 0;
		Иначе
			Если СчВыполненные = СчВсегоДокументов Тогда 
				СтатусДокументов = 3;
			ИначеЕсли СчВыполненные = 0 Тогда
				СтатусДокументов = 1;
			Иначе
				СтатусДокументов = 2;
			КонецЕсли;
		КонецЕсли;
		
		соотвСтатусыОснований.Вставить(ВыборкаОснование.Основание, СтатусДокументов);
	КонецЦикла;
	
	Возврат соотвСтатусыОснований;
КонецФункции

// Функция получает соответствие [Заказ, СтатусВыполненияСД] по дереву заказов в АРМ Логиста
//
Функция СоответствиеСтатусовДокументовПоЗаказамДереваЗаказовАРМЛогиста(ДеревоЗаказов, ИмяКолонкиЗаказ = "Этап") Экспорт
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот") = Ложь Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	мсвОснования = Новый Массив;
	ПолучитьСписокЗаказовДереваЗаказовАРМЛогиста(ДеревоЗаказов, ИмяКолонкиЗаказ, мсвОснования);
	
	соотвСтатусыОснований = ПолучитьСоответствиеСтатусовСДпоДокументам(мсвОснования);
	
	Возврат соотвСтатусыОснований;
КонецФункции

// Реккурсивный обход дерева
Процедура ПолучитьСписокЗаказовДереваЗаказовАРМЛогиста(ДеревоЗаказов, ИмяКолонкиЗаказ, мсвЗаказы)
	Для Каждого ТекСтрока Из ДеревоЗаказов.Строки Цикл
		ПолучитьСписокЗаказовДереваЗаказовАРМЛогиста(ТекСтрока, ИмяКолонкиЗаказ, мсвЗаказы);
		ТекЗаказ = ТекСтрока[ИмяКолонкиЗаказ];
		Если ТипЗнч(ТекЗаказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			мсвЗаказы.Добавить(ТекСтрока[ИмяКолонкиЗаказ]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Создает СД для указанного Заказа на ТС или МЛ по шаблону
// Для Заказа на ТС шаблоном является параметр Шаблон,
// для МЛ - заказы из него
Процедура СоздатьСопроводительныеДокументыПоШаблону(ДокументСсылка, ШаблонЗаказа) Экспорт
	флМЛ = ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист");
	
	мсвЗаказчики = Новый Массив;
	Если флМЛ Тогда
		мсвЗаказы = ПолучитьЗаказыМЛ(ДокументСсылка);
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл
			Если мсвЗаказчики.Найти(ТекЗаказ.Контрагент) = Неопределено Тогда
				мсвЗаказчики.Добавить(ТекЗаказ.Контрагент);
			КонецЕсли;
		КонецЦикла;
	Иначе
		мсвЗаказчики.Добавить(ДокументСсылка.Контрагент);
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСопроводительныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И уатСопроводительныеДокументы.ВидОснования = &ВидОснования
	|	И уатСопроводительныеДокументы.Основание = &ШаблонЗаказа");
	Запрос.УстановитьПараметр("ШаблонЗаказа", ШаблонЗаказа);
	Запрос.УстановитьПараметр("ВидОснования", ?(флМЛ,
		Перечисления.уатВидыОснованийСопроводительныхДокументов.МаршрутныйЛист,
		Перечисления.уатВидыОснованийСопроводительныхДокументов.ЗаказНаТС));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйСД = Выборка.Ссылка.Скопировать();
		НовыйСД.Шаблон = Ложь;
		
		НовыйСД.НомерДокумента = "<не заполнено>";
		НовыйСД.ДатаДокумента  = ДокументСсылка.Дата;
		НовыйСД.Наименование   = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
			"Справочник_уатСопроводительныеДокументы", НовыйСД);
		
		НовыйСД.Основание = ДокументСсылка;
		Если НовыйСД.ВидВладельца = Перечисления.уатВидыВладельцевСопроводительныхДокументов.ДокументыЗаказчика
			И мсвЗаказчики.Количество() = 1 Тогда
			НовыйСД.ВладелецДокумента = мсвЗаказчики[0];
		ИначеЕсли НовыйСД.ВидВладельца = Перечисления.уатВидыВладельцевСопроводительныхДокументов.ДокументыПеревозчика
			И флМЛ И ДокументСсылка.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			НовыйСД.ВладелецДокумента = ДокументСсылка.Контрагент;
		КонецЕсли;
		
		Попытка
			НовыйСД.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не удалось создать сопроводительный документ по шаблону %1 для %2",
				Выборка.Ссылка, ДокументСсылка));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать:
//  уатИнтеграции_проф.ПолучитьДанныеВсехТС.
//
Процедура ЗаполнитьСписокВнешняяСистемаСервер(Параметры, АдресХранилища) Экспорт
	
	уатИнтеграции_проф.ПолучитьДанныеВсехТС(Параметры, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции подсистемы ГСМ
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает остаток ТЖ на ТС
// Параметры: МоментВремени - время на которое определяется остаток
// ТС
// ТЖ
//
Функция ОстатокТЖнаТС(ТС, ТЖ, МоментВремени) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА (уатОстаткиТЖнаТС.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ уатОстаткиТЖнаТС.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(&Момент, ТЖ В (&ТЖ) И ТС = &ТС) КАК уатОстаткиТЖнаТС
	|
	|";
	
		// получаем аналоги
	тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТЖ);
	
	// добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ 			= ТЖ;
	НоваяСтрока.Аналог 			= ТЖ;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТЖ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТЖ", ТЖ);
	ЭлементБлокировки.УстановитьЗначение("ТС", ТС);
	Блокировка.Заблокировать();
	
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		Результат = 0;
	Иначе
		ВыборкаЗапроса = РезЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		Результат = ВыборкаЗапроса.Количество;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТЖ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияТЖ - Сформированная таблица значений,
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСписанияТЖ(ДокументОбъект, ТаблицаДляСписанияТЖ, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияТЖ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("ТЖ");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Организация");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Подразделение");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Колонна");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Стоимость");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("СуммаНДС");
	
	МоментВремениОстПартий = ДокументОбъект.МоментВремени();
	
	// Заполняем таблицу по данным документа. Рассчитываем стоимость ТЖ
	// получим результат запроса по таблице ТЖ в пут. листе
	РезультатЗапросаПоТЖ = Новый Запрос();
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		РезультатЗапросаПоТЖ.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходГСМ.ТС,
		|	РасходГСМ.ГСМ КАК ТЖ,
		|	РасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
		|	РасходГСМ.РасходПоФакту КАК Количество,
		|	&Коэффициент КАК Коэффициент,
		|	РасходГСМ.Ссылка.Дата
		|ИЗ
		|	Документ.уатПутевойЛист.РасходГСМ КАК РасходГСМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО РасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
		|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	РасходГСМ.Ссылка = &Ссылка";
		РезультатЗапросаПоТЖ.УстановитьПараметр("Коэффициент", 1);
		РезультатЗапросаПоТЖ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
		РезультатЗапросаПоТЖ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
			МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
		КонецЕсли;
		
	Иначе //Документ.уатОперацииСТехническимиЖидкостями
		РезультатЗапросаПоТЖ.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатОперацииСТехническимиЖидкостями.ТС,
		|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ТЖ,
		|	уатОперацииСТехническимиЖидкостями.Ссылка.Склад КАК Склад,
		|	уатОперацииСТехническимиЖидкостями.Количество КАК СписываемоеКоличество,
		|	уатОперацииСТехническимиЖидкостями.Количество КАК Количество,
		|	&Коэффициент КАК Коэффициент,
		|	уатОперацииСТехническимиЖидкостями.Ссылка.Дата
		|ИЗ
		|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
		|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
		РезультатЗапросаПоТЖ.УстановитьПараметр("Коэффициент", 1);
		РезультатЗапросаПоТЖ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
		РезультатЗапросаПоТЖ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		
	КонецЕсли;
		
	ВыборкаЗапросаПоТЖ = РезультатЗапросаПоТЖ.Выполнить().Выбрать();
		
	СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
	
	// Перебираем строки ГСМ, который надо списать
	Пока ВыборкаЗапросаПоТЖ.Следующий() Цикл
		НадоСписатьКоличество = ВыборкаЗапросаПоТЖ.СписываемоеКоличество;
		
		// Получение остатков ГСМ по партиям
		РезультатЗапросаПартииТЖ = ПолучитьОстаткиПартийТЖ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоТЖ.ТС, ВыборкаЗапросаПоТЖ.ТЖ);
		ВыборкаЗапросаПартииТЖ	 = РезультатЗапросаПартииТЖ.Выбрать();
		
		//КоличествоОстаток = ОстатокТЖнаТС(ДокументОбъект.МоментВремени(),
		//	ВыборкаЗапросаПоТЖ.ТС, ВыборкаЗапросаПоТЖ.ТЖ);
		//Если НадоСписатьКоличество > КоличествоОстаток Тогда
		//	//Расход по ТС превышает остаток
		//	ВсеОК=Ложь;
		//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
		//		+ ", остаток: " + КоличествоОстаток;
		//КонецЕсли; 
		
		Если ВсеОК Тогда
			
			НадоСписатьСумму = 0;
			НадоСписатьСуммуУпр = 0;
			НадоСписатьСуммуНДС = 0;
			Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
				Попытка
					мТаблицаДляСуммы	= РезультатЗапросаПартииТЖ.Выгрузить();
					НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					НадоСписатьСуммуНДС = мТаблицаДляСуммы.Итог("СуммаНДС") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
			Пока НадоСписатьКоличество > 0 Цикл
				Если ВыборкаЗапросаПартииТЖ.Следующий() Тогда
					мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииТЖ.Количество);
					мКоличество = ?(мКоличество < 0, 0, мКоличество);
					
					Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
						мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииТЖ.Стоимость);
						мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииТЖ.СтоимостьУпр);
						мСуммаНДС = Мин(НадоСписатьСуммуНДС, ВыборкаЗапросаПартииТЖ.СуммаНДС);
					Иначе
						Если ВыборкаЗапросаПартииТЖ.Количество = 0 Или ВыборкаЗапросаПартииТЖ.Количество < НадоСписатьКоличество Тогда
							мСтоимость = ВыборкаЗапросаПартииТЖ.Стоимость;
							мСтоимостьУпр = ВыборкаЗапросаПартииТЖ.СтоимостьУпр;
							мСуммаНДС = ВыборкаЗапросаПартииТЖ.СуммаНДС;
						Иначе	
							мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииТЖ.Стоимость / ВыборкаЗапросаПартииТЖ.Количество;
							мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииТЖ.СтоимостьУпр / ВыборкаЗапросаПартииТЖ.Количество;
							// мСтоимостьУпр = мСтоимость;
							мСуммаНДС = НадоСписатьКоличество * ВыборкаЗапросаПартииТЖ.СуммаНДС / ВыборкаЗапросаПартииТЖ.Количество;
						КонецЕсли;
						
					КонецЕсли;      
					
					Если мКоличество > 0 Тогда
						НоваяСтрока = ТаблицаДляСписанияТЖ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоТЖ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоТЖ.Дата;
						НоваяСтрока.Партия = ВыборкаЗапросаПартииТЖ.Партия;
						НоваяСтрока.Организация = ВыборкаЗапросаПартииТЖ.Организация;
						НоваяСтрока.Подразделение = ВыборкаЗапросаПартииТЖ.Подразделение;
						НоваяСтрока.Колонна = ВыборкаЗапросаПартииТЖ.Колонна;
						НоваяСтрока.ТЖ = ВыборкаЗапросаПартииТЖ.ТЖ;
						НоваяСтрока.Количество = мКоличество;
						НоваяСтрока.Стоимость = мСтоимость;	
						НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
						НоваяСтрока.СуммаНДС = мСуммаНДС;
						
						Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") И НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда 
							НоваяСтрока.Номенклатура = ВыборкаЗапросаПартииТЖ.ТЖ;
							НоваяСтрока.Склад		= ДокументОбъект.Склад;
							НоваяСтрока.Сумма		= мСтоимость;
						КонецЕсли;
						
						мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
						мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
					КонецЕсли;
					
					НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
					НадоСписатьСумму      = НадоСписатьСумму      - мСтоимость;
					НадоСписатьСуммуУпр   = НадоСписатьСуммуУпр   - мСтоимостьУпр;
					НадоСписатьСуммуНДС   = НадоСписатьСуммуНДС   - мСуммаНДС;
					
				Иначе
					НоваяСтрока = ТаблицаДляСписанияТЖ.Добавить();
					НоваяСтрока.ТС = ВыборкаЗапросаПоТЖ.ТС;
					НоваяСтрока.Дата = ВыборкаЗапросаПоТЖ.Дата;
					НоваяСтрока.Партия = Неопределено;
					НоваяСтрока.ТЖ = ВыборкаЗапросаПоТЖ.ТЖ;
					НоваяСтрока.Количество = НадоСписатьКоличество;
					НоваяСтрока.Стоимость = НадоСписатьСумму;	
					НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
					НоваяСтрока.СуммаНДС = НадоСписатьСуммуНДС;
					
					НадоСписатьКоличество = 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

// Функция возвращает флаг учета остатков по ТЖ на ТС
//
Функция УчитыватьОстаткиТЖ(ТЖ) Экспорт
	Рез = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура = &ТЖ");
	Запрос.УстановитьПараметр("ТЖ", ТЖ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Рез = (Выборка.ВестиУчетОстатковТЖ = Истина);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция возвращает истина если номенклатура является ТЖ
//
Функция ЭтоТехническаяЖидкость(Номенклатура) Экспорт
	Рез = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ КАК ВестиУчетОстатковТЖ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура = &Номенклатура
	|	И уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости)");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
КонецФункции

// Функция возвращает истина если номенклатура является ГСМ
//
Функция ЭтоГСМ(Номенклатура) Экспорт
	Рез = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ КАК ВестиУчетОстатковТЖ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура = &Номенклатура
	|	И (уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости)
	|			ИЛИ уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Топливо))");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
КонецФункции

// Процедура создает пакет документов Слив ГСМ по инвентаризациям
//
Процедура ПакетныйВводСливовГСМ(мсвДокументыИнвентаризации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мсвДокументыИнвентаризации", мсвДокументыИнвентаризации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка КАК Ссылка,
	|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ КАК ГСМ,
	|	уатИнвентаризацияГСМвТСГСМвТС.ТС КАК ТС,
	|	СУММА(уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество) КАК КоличествоОтклонениеИнвентаризации,
	|	уатИнвентаризацияГСМвТС.АЗС КАК АЗС,
	|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки КАК НомерСтроки,
	|	уатИнвентаризацияГСМвТС.Организация КАК Организация,
	|	уатИнвентаризацияГСМвТС.Подразделение КАК Подразделение,
	|	уатИнвентаризацияГСМвТС.Ответственный КАК Ответственный,
	|	уатИнвентаризацияГСМвТС.Дата КАК Дата
	|ПОМЕСТИТЬ ДокИнвентаризации
	|ИЗ
	|	Документ.уатИнвентаризацияГСМвТС.ГСМвТС КАК уатИнвентаризацияГСМвТСГСМвТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатИнвентаризацияГСМвТС КАК уатИнвентаризацияГСМвТС
	|		ПО уатИнвентаризацияГСМвТСГСМвТС.Ссылка = уатИнвентаризацияГСМвТС.Ссылка
	|ГДЕ
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка В(&мсвДокументыИнвентаризации)
	|	И уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка,
	|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ,
	|	уатИнвентаризацияГСМвТСГСМвТС.ТС,
	|	уатИнвентаризацияГСМвТС.АЗС,
	|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки,
	|	уатИнвентаризацияГСМвТС.Организация,
	|	уатИнвентаризацияГСМвТС.Ответственный,
	|	уатИнвентаризацияГСМвТС.Дата,
	|	уатИнвентаризацияГСМвТС.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокИнвентаризации.Ссылка КАК Ссылка,
	|	ДокИнвентаризации.ГСМ КАК ГСМ,
	|	ДокИнвентаризации.ТС КАК ТС,
	|	МАКСИМУМ(ДокИнвентаризации.КоличествоОтклонениеИнвентаризации) КАК КоличествоОтклонениеИнвентаризации,
	|	ДокИнвентаризации.АЗС КАК АЗС,
	|	СУММА(ВЫБОР
	|			КОГДА уатСливГСМ.Количество ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ уатСливГСМ.Количество
	|		КОНЕЦ) КАК КоличествоСписанное,
	|	ДокИнвентаризации.Организация КАК Организация,
	|	ДокИнвентаризации.Подразделение КАК Подразделение,
	|	ДокИнвентаризации.Ответственный КАК Ответственный,
	|	ДокИнвентаризации.Дата КАК Дата
	|ИЗ
	|	ДокИнвентаризации КАК ДокИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатСливГСМ КАК уатСливГСМ
	|		ПО ДокИнвентаризации.Ссылка = уатСливГСМ.ДокументОснование
	|			И ДокИнвентаризации.ГСМ = уатСливГСМ.ГСМ
	|			И ДокИнвентаризации.ТС = уатСливГСМ.ТС
	|			И (уатСливГСМ.ДокументОснование В
	|				(ВЫБРАТЬ
	|					ДокИнвентаризации.Ссылка
	|				ИЗ
	|					ДокИнвентаризации КАК ДокИнвентаризации))
	|			И (уатСливГСМ.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокИнвентаризации.Ссылка,
	|	ДокИнвентаризации.ГСМ,
	|	ДокИнвентаризации.ТС,
	|	ДокИнвентаризации.АЗС,
	|	ДокИнвентаризации.НомерСтроки,
	|	ДокИнвентаризации.Организация,
	|	ДокИнвентаризации.Ответственный,
	|	ДокИнвентаризации.Дата,
	|	ДокИнвентаризации.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДокИнвентаризации.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		ТекстНСТР = НСтр("en='In selected documents there are no vehicles with fuels, accounting number of which exceeds actual.';ru='В выбранных документах отсутствуют ТС с ГСМ, учетное количество которого превышает фактическое.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	флЕстьСозданныеДокументы = Ложь;
	
	Пока Выборка.Следующий() Цикл 
		КоличествоСписать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоСписанное;
		
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не флЕстьСозданныеДокументы Тогда 
			флЕстьСозданныеДокументы = Истина;
		КонецЕсли;
		
		Попытка
			НовДокСписание = Документы.уатСливГСМ.СоздатьДокумент();
		Исключение
			ТекстНСТР = НСтр("en='Error when creating a document.';ru='Ошибка при создании документа.'") + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецПопытки;
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(НовДокСписание, ПользователиКлиентСервер.АвторизованныйПользователь());
		
		НовДокСписание.АЗС               = Выборка.АЗС;
		НовДокСписание.ВидОперации       = Перечисления.уатВидыОперацийСливГСМ.НаСклад;
		НовДокСписание.ГСМ               = Выборка.ГСМ;
		НовДокСписание.ДокументОснование = Выборка.Ссылка;
		НовДокСписание.Количество        = КоличествоСписать;
		НовДокСписание.Организация       = Выборка.Организация;
		НовДокСписание.Подразделение     = Выборка.Подразделение;
		НовДокСписание.Ответственный     = Выборка.Ответственный;
		НовДокСписание.ТС                = Выборка.ТС;
		НовДокСписание.Дата              = Выборка.Дата;
		
		Попытка
			НовДокСписание.Записать(РежимЗаписиДокумента.Проведение);
			ТекстНСТР = НСтр("en='Created and posted the document ""%1 № %2"" for the write-off of fuels ""%3"" with vehicle ""%4"".';ru='Создан и проведен документ ""%1 № %2"" для списания ГСМ ""%3"" с ТС ""%4"".'");
			ТекстНСТР = СтрШаблон(ТекстНСТР,
				НовДокСписание.Ссылка.Метаданные().Представление(),
				НовДокСписание.Ссылка.Номер,
				НовДокСписание.ГСМ,
				НовДокСписание.ТС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Исключение
			Попытка
				НовДокСписание.Записать(РежимЗаписиДокумента.Запись);
				ТекстНСТР = НСтр("en='Document ""%1 № %2"" was created for writing off fuels ""%3"" with the vehicle ""%4"". Document must be posted.';ru='Создан документ ""%1 № %2"" для списания ГСМ ""%3"" с ТС ""%4"". Документ необходимо провести.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, 
					НовДокСписание.Ссылка.Метаданные().Представление(),
					НовДокСписание.Ссылка.Номер,
					НовДокСписание.ГСМ,
					НовДокСписание.ТС);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Исключение
				ТекстНСТР = НСтр("en='Error when creating documents';ru='Ошибка при создании документов'") + " """ + НовДокСписание.Ссылка.Метаданные().Представление() + """";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Возврат;
			КонецПопытки;
		КонецПопытки;
	КонецЦикла;
	
	Если Не флЕстьСозданныеДокументы Тогда 
		ТекстНСТР = НСтр("en='In selected documents there are no vehicles with fuels, accounting number of which exceeds actual.';ru='В выбранных документах отсутствуют ТС с ГСМ, учетное количество которого превышает фактическое.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список ГСМ при автоподборе текста в поле ввода ГСМ
// СтрокаПоиска - подстрока введенного текста
// списокГруппыГСМ - отбор-список групп ГСМ
//
Функция ПолучитьСписокАвтоподбораПоляГСМ(Знач СтрокаПоиска, списокГруппыГСМ = Неопределено, Знач ДопПараметры = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Если СтрокаПоиска = "" Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Организация") Тогда
		ДопПараметры.Вставить("Организация");
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("БезАналогов") Тогда
		ДопПараметры.Вставить("БезАналогов", Ложь);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("УчитыватьТЖ") Тогда
		ДопПараметры.Вставить("УчитыватьТЖ", Ложь);
	КонецЕсли;
	
	// если указано ТС, то отбираем ГСМ только для этого ТС
	Если ДопПараметры.Свойство("ТС") И ЗначениеЗаполнено(ДопПараметры.ТС) Тогда
		тблВыборка = Новый ТаблицаЗначений;
		тблВыборка.Колонки.Добавить("Номенклатура");
		тблВыборка.Колонки.Добавить("Наименование");
		
		Для Каждого ТекГруппаГСМ Из списокГруппыГСМ Цикл
			ТекмсвГСМ = уатЗащищенныеФункцииСервер.СписокГСМдляТССервер(ДопПараметры.Организация, ДопПараметры.ТС, ТекГруппаГСМ, ДопПараметры.БезАналогов);
			Для Каждого ТекГСМ Из ТекмсвГСМ Цикл
				НоваяСтрока = тблВыборка.Добавить();
				НоваяСтрока.Номенклатура = ТекГСМ.ГСМ;
				НоваяСтрока.Наименование = НоваяСтрока.Номенклатура.Наименование;
			КонецЦикла;
		КонецЦикла;
		
		мсвСтрокУдалить = Новый Массив;
		Для Каждого ТекСтрока Из тблВыборка Цикл
			Если ВРег(Лев(ТекСтрока.Номенклатура.Наименование, СтрДлина(СтрокаПоиска))) <> ВРег(СтрокаПоиска) Тогда
				мсвСтрокУдалить.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
			тблВыборка.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
	Иначе //выбираем все ГСМ
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатНоменклатураГСМ.Номенклатура,
		|	спрНоменклатура.Наименование
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО уатНоменклатураГСМ.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	НЕ уатНоменклатураГСМ.Номенклатура.ПометкаУдаления
		|	И спрНоменклатура.Наименование ПОДОБНО &СтрокаПодбора");
		Если списокГруппыГСМ <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатНоменклатураГСМ.ГруппаГСМ В(&списокГруппыГСМ)";
			Запрос.УстановитьПараметр("списокГруппыГСМ", списокГруппыГСМ);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПоиска + "%");
		тблВыборка = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// добавляем ТЖ
	Если ДопПараметры.УчитыватьТЖ Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатНоменклатураГСМ.Номенклатура
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|ГДЕ
		|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ
		|	И уатНоменклатураГСМ.Номенклатура.Наименование ПОДОБНО &СтрокаПодбора");
		Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПоиска + "%");
		тблТЖ = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекСтрока Из тблТЖ Цикл
			Если тблВыборка.Найти(ТекСтрока.Номенклатура, "Номенклатура") = Неопределено Тогда
				НоваяСтрока = тблВыборка.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Наименование = ТекСтрока.Номенклатура.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблВыборка Цикл 
		врПозицияОтсечения = СтрДлина(СтрокаПоиска);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(ТекСтрока.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(ТекСтрока.Наименование, СтрДлина(ТекСтрока.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(ТекСтрока.Номенклатура, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокАвтоподбораПоляГСМ()

// Функция рассчитывает нормативный расход топлива по ПЛ или МЛ
// ПараметрыРасчета - структура параметров для расчета
//	Возвращает числовое значение.
//	Также возвращает Расшифровку - список всех использованных норм со значениями расхода
//
Функция РасчитатьРасходГСМПоНорме(ПараметрыРасчета, ТС, ГСМ, Отказ = Ложь, Расшифровка = Неопределено) Экспорт
	
	РасходПоНорме = 0;
	Расшифровка = Новый СписокЗначений;
	мсвВидыНорм = Новый Массив;
	
	// добавление параметров расчета по ТС и ГСМ
	ДобавитьПараметрыРасчетаРасходаГСМПоТС(ПараметрыРасчета, ТС, ГСМ);
	
	Если ТС = ПараметрыРасчета.ТС Тогда
		Если ПараметрыРасчета.НаличиеСпидометра Тогда
			мсвВидыНорм.Добавить("ЛинейнаяНорма");
		Иначе
			мсвВидыНорм.Добавить("НормаСпецНаМоточас");
		КонецЕсли;
		мсвВидыНорм.Добавить("НормаНаПростой");
		мсвВидыНорм.Добавить("НормаНаТранспРаботу");
		мсвВидыНорм.Добавить("НормаНаИзмСобствВеса");
		мсвВидыНорм.Добавить("НормаНаЗапуск");
		мсвВидыНорм.Добавить("НормаНаОтопитель");
		мсвВидыНорм.Добавить("НормыСпецРаботы");
		мсвВидыНорм.Добавить("НормаНаОборудование");
	Иначе
		мсвВидыНорм.Добавить("НормаСпецНаМоточас");
	КонецЕсли;
	мсвВидыНорм.Добавить("НормаНаОперации");
	мсвВидыНорм.Добавить("НормаНаЕздки");
	
	Для Каждого ТекВидНормы Из мсвВидыНорм Цикл
		РасчитатьРасходГСМДляВидаНормы(РасходПоНорме, ТекВидНормы, ПараметрыРасчета, ТС, ГСМ, Отказ, Расшифровка)
	КонецЦикла;
		
	РасходПоНорме = Окр(РасходПоНорме, ПараметрыРасчета.ТочностьРасчета);
	
	ОчиститьПараметрыРасчетаРасходаГСМПоТС(ПараметрыРасчета);
	
	Возврат РасходПоНорме;
	
КонецФункции

Процедура РасчитатьРасходГСМДляВидаНормы(РасходПоНорме, ВидНормы, ПараметрыРасчета, ТС, ГСМ, Отказ, Расшифровка)
	
	Если ВидНормы = "НормаНаЕздки" И ПараметрыРасчета.КоличествоЕздокРеальное = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// подготовительные операции
	мсвЗадание = Новый Массив; // Задание запоминается во врем. переменную, поскольку используем скорректированные условия работы
	Если ВидНормы = "НормаСпецНаМоточас" И ТС <> ПараметрыРасчета.ТС Тогда
		ВремяСпецРабот = ПараметрыРасчета.СуммаСпецРаботВремя;
		ПараметрыРасчета.СуммаСпецРаботВремя = 0;
		
	ИначеЕсли ПараметрыРасчета.Свойство("ДетальныйУчетУсловийРаботы") И ПараметрыРасчета.ДетальныйУчетУсловийРаботы
		И (ВидНормы = "ЛинейнаяНорма" ИЛИ ВидНормы = "НормаНаТранспРаботу" ИЛИ ВидНормы = "НормаНаИзмСобствВеса") Тогда
		
		Для Каждого ТекСтрока Из ПараметрыРасчета.Задание Цикл
			СтруктураСтрокиКопия = Новый Структура;
			Для Каждого ТекЭл Из ТекСтрока Цикл
				СтруктураСтрокиКопия.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;
			
			Если ТекСтрока.Свойство("КоэффициентУРПробегОбщий")
				И (ВидНормы = "ЛинейнаяНорма" ИЛИ ВидНормы = "НормаНаИзмСобствВеса"
				ИЛИ (ВидНормы = "НормаНаТранспРаботу" И ПараметрыРасчета.ТССамосвал)) Тогда
				
				ТекСтрока.КоэффициентУР = ТекСтрока.КоэффициентУРПробегОбщий;
				
			ИначеЕсли ТекСтрока.Свойство("КоэффициентУРПробегСГрузом")
				И ВидНормы = "НормаНаТранспРаботу" И НЕ ПараметрыРасчета.ТССамосвал Тогда
				
				ТекСтрока.КоэффициентУР = ТекСтрока.КоэффициентУРПробегСГрузом;
				
			КонецЕсли;
			
			мсвЗадание.Добавить(СтруктураСтрокиКопия);
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("РаботаНаДвухВидахТопливаОдновременно")
		И ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно
		И (ВидНормы = "ЛинейнаяНорма" ИЛИ ВидНормы = "НормаСпецНаМоточас"
			ИЛИ ВидНормы = "НормаНаИзмСобствВеса" ИЛИ ВидНормы = "НормаНаТранспРаботу")
		И ГСМ = ПараметрыРасчета.ТСОсновноеТопливо Тогда
		
		НормыРасходаГСМОдновременно = ПараметрыРасчета.НормыРасходаГСМ;
		ПараметрыРасчета.НормыРасходаГСМ = ПараметрыРасчета.НормыРасходаГСМПоочередно;
		ПараметрыРасчета.КоэффициентРаботаНаДвухВидахТоплива = 1 - ПараметрыРасчета.КоэффициентРаботаНаДвухВидахТопливаДоп;
		
		// Дополнительный расчет расхода осн. топлива для отрезка пути, пройденного при работе только на осн. топливе
		РасходПоНорме = РасходПоНорме +
			Вычислить("уатЗащищенныеФункцииСервер.РасчитатьРасходГСМ" + ВидНормы + "(ПараметрыРасчета, ТС, ГСМ, Отказ, Расшифровка)");
			
		// возврат параметров для стандартного расчета расхода ГСМ
		ПараметрыРасчета.НормыРасходаГСМ = НормыРасходаГСМОдновременно;
		ПараметрыРасчета.КоэффициентРаботаНаДвухВидахТоплива = ПараметрыРасчета.КоэффициентРаботаНаДвухВидахТопливаДоп;
	КонецЕсли;
	
	// РАСЧЕТ РАСХОДА ГСМ ДЛЯ ТЕКУЩЕГО ВИДА НОРМЫ
	РасходПоНорме = РасходПоНорме +
		Вычислить("уатЗащищенныеФункцииСервер.РасчитатьРасходГСМ" + ВидНормы + "(ПараметрыРасчета, ТС, ГСМ, Отказ, Расшифровка)");
		
	// завершающие операции
	Если ВидНормы = "НормаСпецНаМоточас" И ТС <> ПараметрыРасчета.ТС Тогда	
		ПараметрыРасчета.СуммаСпецРаботВремя = ВремяСпецРабот;
	КонецЕсли;
	Если мсвЗадание.Количество() > 0 Тогда
		ПараметрыРасчета.Задание = мсвЗадание;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает объем топливного бака ТС для указанного топлива
// Учитывает возможность работы ТС на двух видах топлива
// Параметры:
// 	ТС - транспортное средство
// 	ГСМ - топливо, если не указано, то берется основное топливо
// Возвращаемое значение:
// 	Объем бака - Число
//
Функция ОбъемБакаТС(ТС, ГСМ = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ГСМ)
		И ГСМ = ТС.Модель.ДополнительноеТопливо
		И ТС.Модель.ДополнительноеТопливо <> ТС.Модель.ОсновноеТопливо Тогда
		Рез = ТС.Модель.ОбъемДопБака;
	Иначе
		Рез = ТС.Модель.ОбъемБака;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Процедура проверяет факт превышения количество топлива в баке после заправки
//
Процедура ПроверитьПревышениеУровняТопливаВБаке(тблЗаправки, Организация, АЗС, СообщениеПревышение = "") Экспорт
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПредупреждатьПриПревышенииУровняТопливаВБаке") Тогда
		Возврат;
	КонецЕсли;
	
	тблЗаправки = тблЗаправки.Скопировать();
	тблЗаправки.Свернуть("Дата, ТС, ГСМ, ПутевойЛист", "Количество");
	
	ЗапросГруппыГСМ = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатНоменклатураГСМ.Номенклатура,
	|	уатНоменклатураГСМ.ГруппаГСМ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура В(&Номенклатура)");
	ЗапросГруппыГСМ.УстановитьПараметр("Номенклатура", тблЗаправки.ВыгрузитьКолонку("ГСМ"));
	тблГруппыГСМ = ЗапросГруппыГСМ.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблЗаправки Цикл
		ОбъемБака = уатГСМ.ОбъемБакаТС(ТекСтрока.ТС, ТекСтрока.ГСМ);
		Если ОбъемБака = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппаГСМ = тблГруппыГСМ.Найти(ТекСтрока.ГСМ, "Номенклатура");
		Если СтрокаГруппаГСМ = Неопределено ИЛИ СтрокаГруппаГСМ.ГруппаГСМ <> Перечисления.уатГруппыГСМ.Талон Тогда
			КоличествоЗаправка = ТекСтрока.Количество;
		Иначе
			КоличествоЗаправка = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Дата, АЗС, ТекСтрока.ГСМ, ТекСтрока.Количество);
		КонецЕсли;
		
		// если количество заправки больше объема бака, то сразу выдается ошибка
		Если КоличествоЗаправка > ОбъемБака Тогда
			СообщениеПревышение = СообщениеПревышение + Символы.ПС
				+ НСтр("en='Fuel level increase in vehicle tank';ru='Превышение уровня топлива в баке ТС'")
				+ " """ + Строка(ТекСтрока.ТС)
				+ """ (объем бака " + ОбъемБака + " л, превышение " + (КоличествоЗаправка-ОбъемБака) + " л)";
			Продолжить;
		КонецЕсли;
		
		// Расчет момента получения остатка - та же формула, что и при проведении
		// получать остаток нужно до момента текущей заправки, чтобы остаток её не включал
		Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
			Если ТекСтрока.Дата < ТекСтрока.ПутевойЛист.ДатаВыезда Тогда
				ДатаПолученияОстатка = ТекСтрока.ПутевойЛист.ДатаВыезда;
			Иначе
				Если ТекСтрока.ПутевойЛист.ДатаВозвращения <> '00010101' И ТекСтрока.Дата > ТекСтрока.ПутевойЛист.ДатаВозвращения Тогда
					ДатаПолученияОстатка = ТекСтрока.ПутевойЛист.ДатаВозвращения;
				Иначе
					ДатаПолученияОстатка = ТекСтрока.Дата;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДатаПолученияОстатка = ТекСтрока.Дата;
		КонецЕсли;
		
		ОстатокГСМНаТС = уатОбщегоНазначения.уатОстатокГСМнаТС(Новый Граница(ДатаПолученияОстатка, ВидГраницы.Исключая), ТекСтрока.ТС, ТекСтрока.ГСМ);
		
		РасходГСМ = 0;
		Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
			мсвСтрокиРасход = ТекСтрока.ПутевойЛист.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ, Активен", ТекСтрока.ТС, ТекСтрока.ГСМ, Истина));
			Для Каждого ТекСтрокаРасход Из мсвСтрокиРасход Цикл
				РасходГСМ = РасходГСМ + ТекСтрокаРасход.РасходПоФакту;
			КонецЦикла;
		КонецЕсли;
		
		//ТекУровень = ОстатокГСМНаТС - РасходГСМ;
		ТекУровень = ОстатокГСМНаТС + КоличествоЗаправка - РасходГСМ;
		Если ТекУровень > ОбъемБака Тогда
			СообщениеПревышение = СообщениеПревышение + Символы.ПС
				+ НСтр("en='Fuel level increase in vehicle tank';ru='Превышение уровня топлива в баке ТС'")
				+ " """ + Строка(ТекСтрока.ТС)
				+ """ (объем бака " + ОбъемБака + " л, превышение " + (ТекУровень-ОбъемБака) + " л)";
		КонецЕсли;
	КонецЦикла;
	
	Если СообщениеПревышение <> "" Тогда
		СообщениеПревышение = Сред(СообщениеПревышение, 2);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса по остаткам ТЖ по партиям
//
//
Функция ПолучитьОстаткиПартийТЖ(МоментВремени, СпособОценкиМПЗ, ТС, ТЖ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиТЖнаТС.Партия КАК Партия,
	|	уатОстаткиТЖнаТС.Организация КАК Организация,
	|	уатОстаткиТЖнаТС.Подразделение КАК Подразделение,
	|	уатОстаткиТЖнаТС.Колонна КАК Колонна,
	|	уатОстаткиТЖнаТС.ТС КАК ТС,
	|	уатОстаткиТЖнаТС.ТЖ КАК ТЖ,
	|	ЕСТЬNULL(уатОстаткиТЖнаТС.КоличествоОстаток, 0) КАК Количество,
	|	уатОстаткиТЖнаТС.СтоимостьОстаток КАК Стоимость,
	|	уатОстаткиТЖнаТС.СтоимостьУпрОстаток КАК СтоимостьУпр,
	|	уатОстаткиТЖнаТС.СуммаНДСОстаток КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(
	|		&Момент,
	|		ТЖ В (&ТЖ) И ТС = &ТС) КАК уатОстаткиТЖнаТС
	|ГДЕ
	|	уатОстаткиТЖнаТС.КоличествоОстаток > 0
	|";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	уатОстаткиТЖнаТС.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	уатОстаткиТЖнаТС.Партия.Дата УБЫВ";
	КонецЕсли;
	
	// получаем аналоги
	тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТЖ);
	
	// добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ТЖ;
	НоваяСтрока.Аналог = ТЖ;

	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТЖ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТЖ", ТЖ);
	ЭлементБлокировки.УстановитьЗначение("ТС", ТС);
	Блокировка.Заблокировать();
	
	РезЗапроса = Запрос.Выполнить();
	
	Возврат РезЗапроса;
КонецФункции

#Область РасчетНормативногоРасходаГСМ

Процедура ДобавитьПараметрыРасчетаРасходаГСМПоТС(ПараметрыРасчета, ТС, ГСМ)
	
	Если НЕ ПараметрыРасчета.Свойство("НаличиеСпидометра") Тогда
		ПараметрыРасчета.Вставить("НаличиеСпидометра", ТС.Модель.НаличиеСпидометра);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("НормыРасходаГСМ") Тогда
		НормыРасходаГСМ = уатОбщегоНазначения.ПолучитьНормыРасходаГСМ(ТС, ГСМ, ПараметрыРасчета);
		Для Сч = 1 По 10 Цикл //заполняется флаг "временный" для спец. работ
			НормыРасходаГСМ.Вставить("СпециальнаяРабота" + Сч + "Временный", НормыРасходаГСМ["СпециальнаяРабота" + Сч].Временный);
		КонецЦикла;
		ПараметрыРасчета.Вставить("НормыРасходаГСМ", НормыРасходаГСМ);
	КонецЕсли;
	
	// Доп. переменная для хранения всех видов спецработ для расчета итога по спецработам
	мсвСпецРаботыПоНормамГСМ = Новый Массив;
	Для Сч = 1 По 10 Цикл
		Если ПараметрыРасчета.НормыРасходаГСМ.Свойство("СпециальнаяРабота" + Сч) Тогда
			ТекСпецРабота = ПараметрыРасчета.НормыРасходаГСМ["СпециальнаяРабота" + Сч];
			Если ЗначениеЗаполнено(ТекСпецРабота) И мсвСпецРаботыПоНормамГСМ.Найти(ТекСпецРабота) = Неопределено Тогда
				мсвСпецРаботыПоНормамГСМ.Добавить(ТекСпецРабота);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ПараметрыРасчета.Вставить("КоэффициентСН", ПараметрыРасчета.НормыРасходаГСМ.СезоннаяНадбавка);
	ПараметрыРасчета.Вставить("КоэффициентНК", ПараметрыРасчета.НормыРасходаГСМ.НадбавкаНаКондиционер);
	Если НЕ ПараметрыРасчета.Свойство("КоэффициентТС") Тогда
		ПараметрыРасчета.Вставить("КоэффициентТС", уатОбщегоНазначения.уатПолучитьКоэффициентИзмененияНормТопливаТС(ТС, ПараметрыРасчета.ДатаРасчета));
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("ТССамосвал") Тогда
		Если НЕ ЗначениеЗаполнено(ТС.Модель.ТипТС) ИЛИ НЕ ЗначениеЗаполнено(ТС.Модель.ТипТС.Самосвал) Тогда
			ПараметрыРасчета.Вставить("ТССамосвал", Ложь);
		Иначе
			ПараметрыРасчета.Вставить("ТССамосвал", ТС.Модель.ТипТС.Самосвал);
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыРасчета.ТССамосвал Тогда
		Если НЕ ПараметрыРасчета.Свойство("ТСГрузоподъемность") Тогда
			ПараметрыРасчета.Вставить("ТСГрузоподъемность", ТС.Модель.Грузоподъемность);
		КонецЕсли;
		Если НЕ ПараметрыРасчета.Свойство("ТСЗагрузкаСамосвала") Тогда
			ПараметрыРасчета.Вставить("ТСЗагрузкаСамосвала", ТС.Модель.НормируемаяЗагрузкаСамосвала);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("ТССобственныйВес") Тогда
		ПараметрыРасчета.Вставить("ТССобственныйВес", ТС.СобственныйВес);
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("МодельСобственныйВес") Тогда
		ПараметрыРасчета.Вставить("МодельСобственныйВес", ТС.Модель.СобственныйВес);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("АвтоматическиСписыватьРасходТопливаНаЗапуск") Тогда
		ПараметрыРасчета.Вставить("АвтоматическиСписыватьРасходТопливаНаЗапуск", ТС.АвтоматическиСписыватьРасходТопливаНаЗапуск);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("ТСОсновноеТопливо") Тогда
		ПараметрыРасчета.Вставить("ТСОсновноеТопливо", ТС.Модель.ОсновноеТопливо);
	КонецЕсли;
		
	// Если на входе есть выработка ТС, то берем общую выработку из неё
	// если нет - считаем, что общая выработка уже передана
	Если ПараметрыРасчета.Свойство("ВыработкаТС") Тогда
		ПараметрыРасчета.Вставить("ПробегОбщий", 0);
		ПараметрыРасчета.Вставить("ВремяВРаботе", 0);
		ПараметрыРасчета.Вставить("КоличествоЕздок", 0);
		ПараметрыРасчета.Вставить("КоличествоОпераций", 0);
		ПараметрыРасчета.Вставить("ТранспортнаяРабота", 0);
		ПараметрыРасчета.Вставить("ПробегСГрузом", 0);
		ПараметрыРасчета.Вставить("ВесГруза", 0);
		Для СчСпец = 1 По 10 Цикл
			ПараметрыРасчета.Вставить("КоличествоСпецРаботы" + СчСпец, 0);
		КонецЦикла;
		ПараметрыРасчета.Вставить("СуммаСпецРаботПробег", 0);
		ПараметрыРасчета.Вставить("СуммаСпецРаботВремя", 0);
		
		Для Каждого ТекСтрокаВыработки Из ПараметрыРасчета.ВыработкаТС Цикл
			Если ТекСтрокаВыработки.ТС = ТС Тогда
				Если (ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий) И ПараметрыРасчета.НаличиеСпидометра Тогда
					ПараметрыРасчета.ПробегОбщий = ПараметрыРасчета.ПробегОбщий + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе И (НЕ ПараметрыРасчета.НаличиеСпидометра) Тогда
					ПараметрыРасчета.ВремяВРаботе = ПараметрыРасчета.ВремяВРаботе + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок Тогда
					ПараметрыРасчета.КоличествоЕздок = ПараметрыРасчета.КоличествоЕздок + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций Тогда
					ПараметрыРасчета.КоличествоОпераций = ПараметрыРасчета.КоличествоОпераций + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм Тогда
					ПараметрыРасчета.ТранспортнаяРабота = ПараметрыРасчета.ТранспортнаяРабота + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
					ПараметрыРасчета.ПробегСГрузом = ПараметрыРасчета.ПробегСГрузом + ТекСтрокаВыработки.Количество;
				ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
					ПараметрыРасчета.ВесГруза = ПараметрыРасчета.ВесГруза + ТекСтрокаВыработки.Количество;
				Иначе
					Для СчСпец = 1 По 10 Цикл
						Если ТекСтрокаВыработки.ПараметрВыработки = ПараметрыРасчета.НормыРасходаГСМ["СпециальнаяРабота" + СчСпец] Тогда
							ПараметрыРасчета["КоличествоСпецРаботы" + СчСпец] = ПараметрыРасчета["КоличествоСпецРаботы" + СчСпец] + ТекСтрокаВыработки.Количество;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыРасчета.Вставить("КоличествоЕздокРеальное", ПараметрыРасчета.КоличествоЕздок);
		Если ПараметрыРасчета.КоличествоЕздок = 0 Тогда
			ПараметрыРасчета.КоличествоЕздок = 1;
		КонецЕсли;
		
		// Запоминаем пробег и время спецработ, их нужно в дальнейшем отнять от линейной нормы или нормы на м/ч
		Для СчСпец = 1 По 10 Цикл
			ТекКоличествоСпец = ПараметрыРасчета["КоличествоСпецРаботы" + СчСпец];
			Если ТекКоличествоСпец > 0 Тогда
				Если ПараметрыРасчета.НормыРасходаГСМ["СпециальнаяРабота" + СчСпец].Временный Тогда
					ПараметрыРасчета.СуммаСпецРаботВремя = ПараметрыРасчета.СуммаСпецРаботВремя + ТекКоличествоСпец;
				Иначе
					ПараметрыРасчета.СуммаСпецРаботПробег = ПараметрыРасчета.СуммаСпецРаботПробег + ТекКоличествоСпец;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// В общее время и пробег спецработ добавляются числа по спецработам из задания, которых нет в нормах ГСМ
		Если ПараметрыРасчета.Свойство("Задание") Тогда
			Для Каждого ТекСтрокаЗадание Из ПараметрыРасчета.Задание Цикл
				Если НЕ ТекСтрокаЗадание.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				
				Для СчСпец = 1 По 5 Цикл
					ТекСпецРабота = ТекСтрокаЗадание["СпецРабота" + СчСпец];
					Если ЗначениеЗаполнено(ТекСпецРабота) И мсвСпецРаботыПоНормамГСМ.Найти(ТекСпецРабота) = Неопределено Тогда
						ТекКоличествоСпец = ТекСтрокаЗадание["КоличествоСпецРаботы" + СчСпец];
						Если ТекСпецРабота.Временный Тогда
							ПараметрыРасчета.СуммаСпецРаботВремя  = ПараметрыРасчета.СуммаСпецРаботВремя  + ТекКоличествоСпец;
						Иначе
							ПараметрыРасчета.СуммаСпецРаботПробег = ПараметрыРасчета.СуммаСпецРаботПробег + ТекКоличествоСпец;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.КоэффициентУР) И НЕ ПараметрыРасчета.НаличиеСпидометра И НЕ ПараметрыРасчета.УсловиеРаботыМЧ Тогда
		ПараметрыРасчета.КоэффициентУР = 0;
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("КоэффициентРаботаНаДвухВидахТоплива") Тогда
		КоэффициентРаботаНаДвухВидахТоплива = 1;
		Если ТС = ПараметрыРасчета.ТС И ПараметрыРасчета.РаботаНаДвухВидахТоплива Тогда
			Для Каждого ТекСтрокаГСМ Из ПараметрыРасчета.РасходГСМ Цикл
				Если ТекСтрокаГСМ.ТС = ТС И ТекСтрокаГСМ.ГСМ = ГСМ Тогда
					Если ПараметрыРасчета.НаличиеСпидометра Тогда
						Если ПараметрыРасчета.ПробегОбщий = 0 Тогда
							КоэффициентРаботаНаДвухВидахТоплива = 0;
						Иначе
							КоэффициентРаботаНаДвухВидахТоплива = ТекСтрокаГСМ.Пробег / ПараметрыРасчета.ПробегОбщий;
						КонецЕсли;
					Иначе
						Если ПараметрыРасчета.ВремяВРаботе = 0 Тогда
							КоэффициентРаботаНаДвухВидахТоплива = 0;
						Иначе
							КоэффициентРаботаНаДвухВидахТоплива = ТекСтрокаГСМ.Пробег / (ПараметрыРасчета.ВремяВРаботе/3600);
						КонецЕсли;
					КонецЕсли;
									
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыРасчета.Вставить("КоэффициентРаботаНаДвухВидахТоплива", КоэффициентРаботаНаДвухВидахТоплива);
	КонецЕсли;
	
	// При одновременной работе на 2 видах топлива добавляются некоторые служебные параметры
	Если НЕ ПараметрыРасчета.Свойство("КоэффициентРаботаНаДвухВидахТопливаДоп")
		И ТС = ПараметрыРасчета.ТС И ГСМ = ПараметрыРасчета.ТСОсновноеТопливо
		И ПараметрыРасчета.РаботаНаДвухВидахТоплива
		И ПараметрыРасчета.Свойство("РаботаНаДвухВидахТопливаОдновременно")
		И ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно Тогда
		
		Если НЕ ПараметрыРасчета.Свойство("НормыРасходаГСМПоочередно") Тогда
			ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно = Ложь;
			НормыРасходаГСМПоочередно = уатОбщегоНазначения.ПолучитьНормыРасходаГСМ(ТС, ГСМ, ПараметрыРасчета);
			ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно = Истина;
			
			Для Сч = 1 По 10 Цикл //заполняется флаг "временный" для спец. работ
				НормыРасходаГСМПоочередно.Вставить("СпециальнаяРабота" + Сч + "Временный", НормыРасходаГСМПоочередно["СпециальнаяРабота" + Сч].Временный);
			КонецЦикла;
			ПараметрыРасчета.Вставить("НормыРасходаГСМПоочередно", НормыРасходаГСМПоочередно);
		КонецЕсли;
		
		КоэффициентРаботаНаДвухВидахТопливаДоп = 0;
		Для Каждого ТекСтрокаГСМ Из ПараметрыРасчета.РасходГСМ Цикл
			Если ТекСтрокаГСМ.ТС = ТС И ТекСтрокаГСМ.ГСМ = ТС.Модель.ДополнительноеТопливо Тогда
				Если ПараметрыРасчета.НаличиеСпидометра Тогда
					Если ПараметрыРасчета.ПробегОбщий = 0 Тогда
						КоэффициентРаботаНаДвухВидахТопливаДоп = 0;
					Иначе
						КоэффициентРаботаНаДвухВидахТопливаДоп = ТекСтрокаГСМ.Пробег / ПараметрыРасчета.ПробегОбщий;
					КонецЕсли;
				Иначе
					Если ПараметрыРасчета.ВремяВРаботе = 0 Тогда
						КоэффициентРаботаНаДвухВидахТопливаДоп = 0;
					Иначе
						КоэффициентРаботаНаДвухВидахТопливаДоп = ТекСтрокаГСМ.Пробег / (ПараметрыРасчета.ВремяВРаботе/3600);
					КонецЕсли;
				КонецЕсли;
								
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыРасчета.Вставить("КоэффициентРаботаНаДвухВидахТопливаДоп", КоэффициентРаботаНаДвухВидахТопливаДоп);
	КонецЕсли;
		
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ПараметрыРасчета.Вставить("АлгоритмРасчета", ПараметрыРасчета.НормыРасходаГСМ.АлгоритмРасчета.Получить());
		ПараметрыРасчета.Вставить("РасчетПоФормуле", ПараметрыРасчета.АлгоритмРасчета <> Неопределено);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("КоличествоЗапусков") Тогда
		ПараметрыРасчета.Вставить("КоличествоЗапусков", 0);
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьПараметрыРасчетаРасходаГСМПоТС(ПараметрыРасчета)
	мсвКлючейУдалить = Новый Массив;
	мсвКлючейУдалить.Добавить("НаличиеСпидометра");
	мсвКлючейУдалить.Добавить("НормыРасходаГСМ");
	мсвКлючейУдалить.Добавить("КоэффициентСН");
	мсвКлючейУдалить.Добавить("КоэффициентТС");
	мсвКлючейУдалить.Добавить("ТССамосвал");
	мсвКлючейУдалить.Добавить("ТСГрузоподъемность");
	мсвКлючейУдалить.Добавить("ТСЗагрузкаСамосвала");
	мсвКлючейУдалить.Добавить("ТССобственныйВес");
	мсвКлючейУдалить.Добавить("ПробегОбщий");
	мсвКлючейУдалить.Добавить("ВремяВРаботе");
	мсвКлючейУдалить.Добавить("КоличествоЕздок");
	мсвКлючейУдалить.Добавить("КоличествоОпераций");
	мсвКлючейУдалить.Добавить("ТранспортнаяРабота");
	мсвКлючейУдалить.Добавить("ПробегСГрузом");
	мсвКлючейУдалить.Добавить("ВесГруза");
	Для СчСпец = 1 По 10 Цикл
		мсвКлючейУдалить.Добавить("КоличествоСпецРаботы" + СчСпец);
	КонецЦикла;
	мсвКлючейУдалить.Добавить("СуммаСпецРаботПробег");
	мсвКлючейУдалить.Добавить("СуммаСпецРаботВремя");
	мсвКлючейУдалить.Добавить("КоэффициентРаботаНаДвухВидахТоплива");
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		мсвКлючейУдалить.Добавить("АлгоритмРасчета");
		мсвКлючейУдалить.Добавить("РасчетПоФормуле");
	КонецЕсли;
		
	Для Каждого ТекКлючУдалить Из мсвКлючейУдалить Цикл
		Если ПараметрыРасчета.Свойство(ТекКлючУдалить) Тогда
			ПараметрыРасчета.Удалить(ТекКлючУдалить);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Отчеты (клиент-сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подходит и для БСП младше 3.0.1, и для 3.0.2 +.
//
// Параметры:
//  ЭлементФормы - ВсеЭлементыФормы - Элемент формы. 
//  ФормаОтчета	 - УправляемаяФорма - Форма отчета. 
// 
// Возвращаемое значение:
//	КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных
//
Функция ЭлементНастройкиПоЭлементуФормы(ЭлементФормы, ФормаОтчета) Экспорт
		
	ЭлементНастройки = Неопределено;
	Если НЕ ФормаОтчета.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройки") = Неопределено Тогда // Новая форма отчета.
		КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
		
		Индекс = ФормаОтчета.ПутьКДаннымЭлементов.ПоИмени[ЭлементФормы.Имя];
		Если Индекс = Неопределено Тогда 
			МодульОтчетыКлиентСервер = Неопределено;
			#Если Клиент Тогда 
				МодульОтчетыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтчетыКлиентСервер");
			#Иначе
				МодульОтчетыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОтчетыКлиентСервер");
			#КонецЕсли 
			
			Индекс = МодульОтчетыКлиентСервер.ИндексЭлементаНастройкиПоПути(ЭлементФормы.Имя);
		КонецЕсли;	
		
		ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];	
	Иначе
		// "Старая" форма отчета - в БСП 3.0.1 и младше.
		
		ИдентификаторЭлемента = Прав(ЭлементФормы.Имя, 32);	

		// Скопировано из ФормаОтчета.НайтиПользовательскуюНастройкуЭлемента() (для поддержки клиент-серверной логики).
		ИдентификаторКД = ФормаОтчета.БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
		Если ИдентификаторКД = Неопределено Тогда
			ЭлементНастройки = Неопределено;
		Иначе
			ЭлементНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
		КонецЕсли;	
	КонецЕсли; 
	
	
	Возврат ЭлементНастройки;
	
КонецФункции

// Функция - Отчеты с регулированием периода
// 
// Возвращаемое значение:
//  Массив из Строка - список отчетов.
//
Функция ОтчетыСРегулированиемПериода() Экспорт
	
	СписокОтчетов = Новый Массив;
	                           
	СписокОтчетов.Добавить("Отчет.ItobАнализПосещенияГеографическихЗон");
	СписокОтчетов.Добавить("Отчет.ItobДвиженияИСтоянки");
	СписокОтчетов.Добавить("Отчет.ItobОтчетПоАналоговымДатчикам");
	СписокОтчетов.Добавить("Отчет.ItobОтчетПоДискретнымДатчикам");
	СписокОтчетов.Добавить("Отчет.ItobОтчетПоИмпульснымДатчикам");
	СписокОтчетов.Добавить("Отчет.ItobОтчетПоПростоямПриЗаведенномДвигателе");
	СписокОтчетов.Добавить("Отчет.ItobОтчетПоТопливу");
	СписокОтчетов.Добавить("Отчет.ItobПосещениеГеографическихЗон");
	СписокОтчетов.Добавить("Отчет.ItobСообщенияТерминала");
	
	
	Возврат СписокОтчетов;
	
КонецФункции

// Функция - Получить наименование отчета
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета.
// 
// Возвращаемое значение:
//	Строка 
//
Функция ПолучитьНаименованиеОтчета(ФормаОтчета) Экспорт	
	
	Попытка
		Возврат СтрПолучитьСтроку(СтрЗаменить(ФормаОтчета.КлючСохраненияПоложенияОкна, "/", Символы.ПС), 1);
	Исключение
	    Возврат "";
	КонецПопытки;
	
КонецФункции

// Функция - Это отчет с регулированием периода
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета.
// 
// Возвращаемое значение:
//	Булево 
//
Функция ЭтоОтчетСРегулированиемПериода(ФормаОтчета) Экспорт
	
	НаименованиеОтчета = ПолучитьНаименованиеОтчета(ФормаОтчета);	
	
	Возврат НЕ (ОтчетыСРегулированиемПериода().Найти(НаименованиеОтчета) = Неопределено);
			
КонецФункции

// Функция - Это отчет по топливу
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета.
// 
// Возвращаемое значение:
//	Булево 
//
Функция ЭтоОтчетПоТопливу(ФормаОтчета) Экспорт
	
	Возврат (ПолучитьНаименованиеОтчета(ФормаОтчета) = "Отчет.ItobОтчетПоТопливу");
	
КонецФункции

// Функция - Это отчет визуализация калибровочного графика.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета.
// 
// Возвращаемое значение:
//	Булево 
//
Функция ЭтоОтчетВизуализацияКалибровочногоГрафика(ФормаОтчета) Экспорт
	
	Возврат (ПолучитьНаименованиеОтчета(ФормаОтчета) = "Отчет.ItobВизуализацияКалибровочногоГрафика");
	
КонецФункции
 
// Производит рекурсивный поиск элемента формы в группе формы и ее подчиненных группах (опционально).
//
// Параметры:
//  Форма - УправляемаяФорма - Управляемая форма, в которой производится поиск.
//  Заголовок - Строка - Заголовок искомого элемента формы.
//  ТипЭлементаФормы - Тип - Тип искомого элемента формы; Если Неопределено, 
//		то по умолчанию поиск производится по Тип("ПолеФормы").
//  ИскатьВПодчиненныхГруппах - Булево - Ложь, если не нужно искать в подчиненных группах.
// 
// Возвращаемое значение:
//  ПолеФормы, Неопределено - Неопределено если элемент не найден.
//
Функция НайтиЭлементФормыПоЗаголовку(Форма, Заголовок, ТипЭлементаФормы = Неопределено, ИскатьВПодчиненныхГруппах = Истина) Экспорт
	
	ЭлементСНастройками = Форма.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройки");
	Если ЭлементСНастройками = Неопределено Тогда
		ЭлементСНастройками = Форма.Элементы.Найти("БыстрыеНастройки");
		Если ЭлементСНастройками = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли; 
	КонецЕсли; 
	
	
	Возврат НайтиЭлементФормыПоЗаголовкуВГруппе(ЭлементСНастройками, Заголовок, ТипЭлементаФормы, ИскатьВПодчиненныхГруппах);
	
КонецФункции 

#Область РаботаСПараметрамиДанных

// Возвращает параметры данных.
//
// Параметры:
//  Форма	 - УправляемаяФорма, ОтчетОбъект - Форма отчета или сам объект отчета.
// 
// Возвращаемое значение:
//  ЗначенияПараметровДанныхКомпоновкиДанных - Значения параметров данных компоновки данных.
//
Функция ПолучитьПараметрыДанных(Форма) Экспорт

	КомпоновщикНастроек = Неопределено;
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	Иначе
		КомпоновщикНастроек = Форма.КомпоновщикНастроек;
	КонецЕсли; 


	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

// Возвращает значение параметра.
//
// Параметры:
//  ПараметрыДанных			 - ЗначенияПараметровДанныхКомпоновкиДанных	 - Значения параметров данных компоновки данных.
//  ИмяПараметра			 - Строка									 - Имя параметра.
//  ПредставлениеПараметра	 - Строка									 - Представление параметра.
//  ПараметрИспользуется	 - Булево									 - Если Истина, то не проверяется параметр на использование.
// 
// Возвращаемое значение:
//  Произвольный - Значение параметра.
//
Функция ПолучитьЗначениеПараметра(ПараметрыДанных, ИмяПараметра, ПредставлениеПараметра, ПараметрИспользуется = Ложь) Экспорт
	
	ЭлементНастроек = НайтиПараметр(ПараметрыДанных, ИмяПараметра, ПредставлениеПараметра, ПараметрИспользуется);
	Возврат ЭлементНастроек.Значение;
	
КонецФункции

// Устанавливает значение параметра
//
// Параметры:
//  ПараметрыДанных			 - ЗначенияПараметровДанныхКомпоновкиДанных	 - Значения параметров данных компоновки данных.
//  ИмяПараметра			 - Строка									 - Имя параметра.
//  Значение				 - Произвольный								 - Значение параметра.
//  ПредставлениеПараметра	 - Строка									 - Представление параметра.
//  ПараметрИспользуется	 - Булево									 - Если Истина, то не проверяется параметр на использование.
//
Процедура УстановитьЗначениеПараметра(ПараметрыДанных, ИмяПараметра, Значение, ПредставлениеПараметра, ПараметрИспользуется = Ложь) Экспорт
	
	ЭлементНастроек = НайтиПараметр(ПараметрыДанных, ИмяПараметра, ПредставлениеПараметра, ПараметрИспользуется);
	ЭлементНастроек.Значение = Значение;
	
КонецПроцедуры
	
#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиЭлементФормыПоЗаголовкуВГруппе(РодительГруппа, Заголовок, ТипЭлементаФормы = Неопределено, ИскатьВПодчиненныхГруппах = Истина)
	
	Если ТипЭлементаФормы = Неопределено Тогда
		ТипЭлементаФормы = Тип("ПолеФормы");
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из РодительГруппа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И ИскатьВПодчиненныхГруппах Тогда
			НайденныйЭлемент = НайтиЭлементФормыПоЗаголовкуВГруппе(ЭлементФормы, Заголовок);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементФормы) = ТипЭлементаФормы И ЭлементФормы.Заголовок = Заголовок Тогда 
			Возврат ЭлементФормы;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Область РаботаСПараметрамиДанных

Функция НайтиПараметр(ПараметрыДанных, ИмяПараметра, ПредставлениеПараметра, ПараметрИспользуется = Ложь)
	
	Для Каждого ЭлементНастроек ИЗ ПараметрыДанных.Элементы Цикл
		// Перебираем элементы в поисках нужного параметра.
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если СокрЛП(ЭлементНастроек.Параметр) = ИмяПараметра Тогда
				// Проверяем использование параметра.
				Если ЭлементНастроек.Использование Или ПараметрИспользуется Тогда
					// Возвращаем параметр.
					Возврат ЭлементНастроек;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Параметр отсутствует, либо не используется.
	СтрокаСообщения = НСтр("ru='Не установлено значение параметра ""%ПредставлениеПараметра%"".'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ПредставлениеПараметра%", ПредставлениеПараметра);
	ВызватьИсключение СтрокаСообщения;
	
КонецФункции

#КонецОбласти 
 
#КонецОбласти 

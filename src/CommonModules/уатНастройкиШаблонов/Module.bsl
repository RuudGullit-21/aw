////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с шаблонами наименований.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция предназначена для формирования наименования по заданному шаблону.
//
// Параметры:
//  ВидОбъекта    - вид заполняемого объекта.
//  ДанныеОбъекта - данные для подстановки.
//  ФормаВызова - вид формы контекста вызова функции.
// 
// Возвращаемое значение:
//   - результат подстановки.
//
Функция СформироватьНаименованиеПоШаблону(Знач ВидОбъекта, ДанныеОбъекта, ПользовательскийШаблон=Неопределено, ФормаВызова = Неопределено, ВыводитьТипыАдресныхОбъектов = Неопределено) Экспорт
	
	ХранилищеШаблонов = Константы.уатНастройкиШаблонов.Получить();
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Неопределено;
	Иначе 
		НастройкиШаблонов = ХранилищеШаблонов.Получить();
	КонецЕсли;
	
	Если НастройкиШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Новый Структура();
	КонецЕсли;
	
	Если Не ПользовательскийШаблон = Неопределено Тогда 
		ТекстШаблона = ПользовательскийШаблон;
		
	ИначеЕсли НастройкиШаблонов.Свойство(ВидОбъекта) Тогда 
		ТекстШаблона = НастройкиШаблонов[ВидОбъекта];
		
	Иначе 
		ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта);
		
	КонецЕсли;
	
	Если ВыводитьТипыАдресныхОбъектов = Неопределено Тогда
		Попытка
			ВыводитьТипыАдресныхОбъектов = НастройкиШаблонов["Справочник_ПунктыНазначения_ВыводитьОбозначения"];
		Исключение
			ВыводитьТипыАдресныхОбъектов = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	
	Если ВидОбъекта = "Справочник_уатТС" Тогда 
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатТС(ТекстШаблона, ДанныеОбъекта);
		
	ИначеЕсли ВидОбъекта = "Справочник_ДоговорыКонтрагентов" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_ДоговорыКонтрагентов(ТекстШаблона, ДанныеОбъекта, ФормаВызова);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатПунктыНазначения" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатПунктыНазначения(ТекстШаблона, ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатПунктыНазначения(ТекстШаблона, ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатПунктыНазначения(ТекстШаблона, ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатСерииНоменклатуры" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатСерииНоменклатуры(ТекстШаблона, ДанныеОбъекта);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатРегистрационныеДокументы" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатРегистрационныеДокументы(ТекстШаблона, ДанныеОбъекта);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатСопроводительныеДокументы" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатСопроводительныеДокументы(ТекстШаблона, ДанныеОбъекта);
		
	ИначеЕсли ВидОбъекта = "Справочник_уатСкладскиеЯчейки" Тогда
		Возврат ПодставитьПараметрыВШаблон_Справочник_уатСкладскиеЯчейки(ТекстШаблона, ДанныеОбъекта);
		
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизит формы "ДоступныеПараметры".
//
// Параметры:
//  Форма - управляемая форма.
//
Процедура ФормаНастройкиШаблонов_ЗаполнитьДоступныеПараметры(Форма) Экспорт
	
	ЗаполнитьДоступныеПараметры_Справочник_уатТС(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_ДоговорыКонтрагентов(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_уатПунктыНазначения(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_уатСерииНоменклатуры(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_уатРегистрационныеДокументы(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_уатСопроводительныеДокументы(Форма);
	ЗаполнитьДоступныеПараметры_Справочник_уатСкладскиеЯчейки(Форма);
	
КонецПроцедуры

// Процедура заполняет реквизит формы "ТекстШаблона".
//
// Параметры:
//  Форма - управляемая форма.
//
Процедура ФормаНастройкиШаблонов_ЗаполнитьТекстШаблонов(Форма) Экспорт
	
	ХранилищеШаблонов = Константы.уатНастройкиШаблонов.Получить();
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Неопределено;
	Иначе 
		НастройкиШаблонов = ХранилищеШаблонов.Получить();
	КонецЕсли;
	
	Если НастройкиШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Новый Структура();
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатТС") Тогда 
		Форма.Справочник_уатТС_ТекстШаблона = НастройкиШаблонов.Справочник_уатТС;
	Иначе 
		Форма.Справочник_уатТС_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатТС");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_ДоговорыКонтрагентов") Тогда 
		НастройкиДоговоровКонтрагентов = НастройкиШаблонов.Справочник_ДоговорыКонтрагентов;
		Для Каждого ТекНастройка Из НастройкиДоговоровКонтрагентов Цикл 
			НовСтрока = Форма.Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов.Добавить();
			НовСтрока.Объект = ТекНастройка.Ключ;
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекНастройка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатПунктыНазначения") Тогда 
		Форма.Справочник_уатПунктыНазначения_ТекстШаблона = НастройкиШаблонов.Справочник_уатПунктыНазначения;
	Иначе 
		Форма.Справочник_уатПунктыНазначения_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатПунктыНазначения");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_ПунктыНазначения_ВыводитьОбозначения") Тогда 
		Форма.Справочник_ПунктыНазначения_ВыводитьОбозначения = НастройкиШаблонов.Справочник_ПунктыНазначения_ВыводитьОбозначения;
	Иначе 
		Форма.Справочник_ПунктыНазначения_ВыводитьОбозначения = Ложь;
	КонецЕсли;

	Если НастройкиШаблонов.Свойство("Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу") Тогда 
		Форма.Справочник_уатПН_ПунктОтправленияПоЗаказу_ТекстШаблона = НастройкиШаблонов.Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу;
	Иначе 
		Форма.Справочник_уатПН_ПунктОтправленияПоЗаказу_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатПунктыНазначения");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу") Тогда 
		Форма.Справочник_уатПН_ПунктПрибытияПоЗаказу_ТекстШаблона = НастройкиШаблонов.Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу;
	Иначе 
		Форма.Справочник_уатПН_ПунктПрибытияПоЗаказу_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатПунктыНазначения");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатРегистрационныеДокументы") Тогда 
		Форма.Справочник_уатРегистрационныеДокументы_ТекстШаблона = НастройкиШаблонов.Справочник_уатРегистрационныеДокументы;
	Иначе 
		Форма.Справочник_уатРегистрационныеДокументы_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатРегистрационныеДокументы");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатСопроводительныеДокументы") Тогда 
		Форма.Справочник_уатСопроводительныеДокументы_ТекстШаблона = НастройкиШаблонов.Справочник_уатСопроводительныеДокументы;
	Иначе 
		Форма.Справочник_уатСопроводительныеДокументы_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСопроводительныеДокументы");
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство("Справочник_уатСкладскиеЯчейки") Тогда 
		Форма.Справочник_уатСкладскиеЯчейки_ТекстШаблона = НастройкиШаблонов.Справочник_уатСкладскиеЯчейки;
	Иначе 
		Форма.Справочник_уатСкладскиеЯчейки_ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСкладскиеЯчейки");
	КонецЕсли;

	
	Если НастройкиШаблонов.Свойство("Справочник_уатСерииНоменклатуры") Тогда 
		ДанныеШаблоновСерииНоменклатуры = НастройкиШаблонов.Справочник_уатСерииНоменклатуры;
	Иначе 
		ДанныеШаблоновСерииНоменклатуры = ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСерииНоменклатуры");
	КонецЕсли;
	
	Для Каждого ТекШаблон Из ДанныеШаблоновСерииНоменклатуры Цикл 
		НовСтрока = Форма.Справочник_уатСерииНоменклатуры_ТекстыШаблонов.Добавить();
		НовСтрока.ТипАгрегата  = ТекШаблон.Ключ;
		НовСтрока.ТекстШаблона = ТекШаблон.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизит формы "ТекстШаблона".
//
// Параметры:
//  Форма - управляемая форма.
//
Процедура ФормаНастройкиШаблонаШтрихКода_ЗаполнитьТекстШаблона(Форма) Экспорт
	
	ХранилищеШаблонов = Константы.уатШаблонТрекНомера.Получить();
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиШаблона = Неопределено;
	Иначе 
		НастройкиШаблона = ХранилищеШаблонов.Получить();
	КонецЕсли;
	
	Если НастройкиШаблона = Неопределено Тогда 
		НастройкиШаблона = Новый Структура();
	КонецЕсли;
	
	Если НастройкиШаблона.Свойство("ТекстШаблона") Тогда
		Форма.ТекстШаблона = НастройкиШаблона.ТекстШаблона;
	КонецЕсли;
	
	Если НастройкиШаблона.Свойство("ДлинаУникальногоНомера") Тогда
		Форма.ДлинаУникальногоНомера = НастройкиШаблона.ДлинаУникальногоНомера;
	КонецЕсли;
	
	Если НастройкиШаблона.Свойство("МассивПараметров") Тогда
		
		Для Каждого ТекСтруктура Из НастройкиШаблона.МассивПараметров Цикл
			
			НоваяСтрока = Форма.ДоступныеПараметры.Добавить();
			НоваяСтрока.ПолеРегистра          = ТекСтруктура.ПолеРегистра;
			НоваяСтрока.ПолеПредставление     = ТекСтруктура.ПолеПредставление;
			НоваяСтрока.Реквизит              = ТекСтруктура.Реквизит;
			НоваяСтрока.РеквизитПредставление = ТекСтруктура.РеквизитПредставление;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Функция предназначена для получения текста шаблона указанного вида объекта.
//
// Параметры:
//  ВидОбъекта - вид заполняемого объекта.
// 
// Возвращаемое значение:
//   - текст шаблона.
//
Функция ПолучитьТекстШаблона(Знач ВидОбъекта) Экспорт
	
	ХранилищеШаблонов = Константы.уатНастройкиШаблонов.Получить();
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Неопределено;
	Иначе 
		НастройкиШаблонов = ХранилищеШаблонов.Получить();
	КонецЕсли;
	
	Если НастройкиШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Новый Структура();
	КонецЕсли;
	
	Если НастройкиШаблонов.Свойство(ВидОбъекта) Тогда 
		Возврат НастройкиШаблонов[ВидОбъекта];
		
	Иначе 
		Возврат ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта);
	КонецЕсли;
	
КонецФункции // ПолучитьТекстШаблона()

// Процедура записывает тексты шаблонов в константу.
//
// Параметры:
//  НастройкиШаблонов - структура - тексты шаблонов.
//
Процедура ЗаписатьТекстыШаблонов(НастройкиШаблонов) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.уатНастройкиШаблонов) Тогда 
		Возврат;
	КонецЕсли;
	
	Константы.уатНастройкиШаблонов.Установить(Новый ХранилищеЗначения(НастройкиШаблонов, Новый СжатиеДанных(9)));
	
КонецПроцедуры

// Процедура записывает шаблон трек-номера в константу.
//
// Параметры:
//  НастройкаШаблона - структура - текст шаблона.
//
Процедура ЗаписатьШаблонТрекНомера(НастройкаШаблона) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.уатШаблонТрекНомера) Тогда
		Возврат;
	КонецЕсли;
	
	Константы.уатШаблонТрекНомера.Установить(Новый ХранилищеЗначения(НастройкаШаблона, Новый СжатиеДанных(9)));
	
КонецПроцедуры

// Функция предназначена для получения текста шаблона по умолчанию для указанного вида объекта.
//
// Параметры:
//  ВидОбъекта - вид заполняемого объекта.
// 
// Возвращаемое значение:
//   - текст шаблона.
//
Функция ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта) Экспорт
	
	Если ВидОбъекта = "Справочник_уатТС" Тогда 
		Возврат "" + НСтр("en = '[LicensePlateNumber]'; ru = '[ГосНомер]'") + " " + НСтр("en = '[Model]'; ru = '[Модель]'");
		
	ИначеЕсли ВидОбъекта = "Справочник_ДоговорыКонтрагентов" Тогда 
		//Возврат "№ " + НСтр("en = '[Number]'; ru = '[Номер]'") + " " + НСтр("ru='от';en='from'") + " " + НСтр("en = '[Date]'; ru = '[Дата]'")
		//	+ " (" + НСтр("en = '[Currency]'; ru = '[Валюта]'") + ")";
		ШаблоныДоговоров = Новый Соответствие;
		ТекстШаблона = "№ " + НСтр("en = '[Number]'; ru = '[Номер]'") + " " + НСтр("ru='от';en='from'") + " " + НСтр("en = '[Date]'; ru = '[Дата]'")
			+ " (" + НСтр("en = '[Currency]'; ru = '[Валюта]'") + ")";
		ШаблоныДоговоров.Вставить("0", ТекстШаблона);
		ШаблоныДоговоров.Вставить("1", ТекстШаблона);
		ШаблоныДоговоров.Вставить("2", ТекстШаблона);
		Возврат ШаблоныДоговоров;
		
	ИначеЕсли ВидОбъекта = "Справочник_уатПунктыНазначения" Тогда 
		Возврат "" + НСтр("en = '[City]'; ru = '[Город]'") + " " + НСтр("en = '[Street]'; ru = '[Улица]'") + " " + НСтр("en = '[Building]'; ru = '[Дом]'");
		
	ИначеЕсли ВидОбъекта = "Справочник_уатРегистрационныеДокументы" Тогда
		Возврат "" + НСтр("en = '[DocumentType]'; ru = '[ВидДокумента]'") + " " + НСтр("en = '[Series]'; ru = '[Серия]'") + " " + НСтр("en = '[Number]'; ru = '[Номер]'")
		+ " (" + НСтр("en = '[Employee]'; ru = '[ВладелецДокументов]'") + ")";
		
	ИначеЕсли ВидОбъекта = "Справочник_уатСерииНоменклатуры" Тогда 
		ШаблоныСерииНоменклатуры = Новый Соответствие();
		ШаблоныСерииНоменклатуры.Вставить(Справочники.уатТипыАгрегатов.ПустаяСсылка(), "" + НСтр("en = '[Model]'; ru = '[Модель]'") + " " + НСтр("en = '[SerialNumber]'; ru = '[СерийныйНомер]'"));
		Возврат ШаблоныСерииНоменклатуры;
		
	ИначеЕсли ВидОбъекта = "Справочник_уатСопроводительныеДокументы" Тогда
		Возврат "" + НСтр("en = '[DocumentKind]'; ru = '[ВидДокумента]'") + " "
			+ "№ " + НСтр("en = '[DocumentNumber]'; ru = '[НомерДокумента]'") + " "
			+ НСтр("ru='от';en='from'") + " " + НСтр("en = '[DocumentDate]'; ru = '[ДатаДокумента]'");
			
	ИначеЕсли ВидОбъекта = "Справочник_уатСкладскиеЯчейки" Тогда
		Возврат НСтр("en = '[Room]';  ru = '[Помещение]'") + "[Разделитель]"
			+ НСтр("en = '[Line]';  ru = '[Ряд]'") + "[Разделитель]"
			+ НСтр("en = '[Rack]';  ru = '[Стеллаж]'") + "[Разделитель]"
			+ НСтр("en = '[Stage]'; ru = '[Ярус]'") + "[Разделитель]"
			+ НСтр("en = '[Cell]';  ru = '[Ячейка]'");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатТС(Форма)
	
	Форма.Справочник_уатТС_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[LicensePlateNumber]'; ru = '[ГосНомер]'");   
	НовПараметр.Представление = НСтр("en = 'License plate number'; ru = 'Гос.номер'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[GarageNumber]'; ru = '[ГарНомер]'");
	НовПараметр.Представление = НСтр("en = 'Garage number'; ru = 'Гар.номер'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Model]'; ru = '[Модель]'");
	НовПараметр.Представление = НСтр("en='Model';ru='Модель'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[VehicleType]'; ru = '[ТипТС]'");
	НовПараметр.Представление = НСтр("en='Vehicle type';ru='Тип ТС'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Garage]'; ru = '[Гараж]'");
	НовПараметр.Представление = НСтр("en='Garage';ru='Гараж'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Company]';ru='[Организация]'");
	НовПараметр.Представление = НСтр("en='Company';ru='Организация'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Department]'; ru = '[Подразделение]'");
	НовПараметр.Представление = НСтр("en='Department';ru='Подразделение'");
	
	НовПараметр = Форма.Справочник_уатТС_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[VehicleDepartment]'; ru = '[Колонна]'");
	НовПараметр.Представление = НСтр("en='Vehicle department';ru='Колонна'");
	
КонецПроцедуры

Функция ПодставитьПараметрыВШаблон_Справочник_уатТС(Знач ТекстШаблона, ДанныеОбъекта)
	
	Результат = ТекстШаблона;
	
	Результат = СтрЗаменить(Результат, НСтр("en = '[LicensePlateNumber]'; ru = '[ГосНомер]'"), СокрЛП(Строка(ДанныеОбъекта.ГосударственныйНомер)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[GarageNumber]'; ru = '[ГарНомер]'"), СокрЛП(Строка(ДанныеОбъекта.ГаражныйНомер)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Model]'; ru = '[Модель]'"), СокрЛП(Строка(ДанныеОбъекта.Модель)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[VehicleType]'; ru = '[ТипТС]'"), СокрЛП(Строка(ДанныеОбъекта.ТипТС)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Garage]'; ru = '[Гараж]'"), СокрЛП(Строка(ДанныеОбъекта.Гараж)));
	Результат = СтрЗаменить(Результат, НСтр("en='[Company]';ru='[Организация]'"), СокрЛП(Строка(ДанныеОбъекта.Организация)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Department]'; ru = '[Подразделение]'"), СокрЛП(Строка(ДанныеОбъекта.Подразделение)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[VehicleDepartment]'; ru = '[Колонна]'"), СокрЛП(Строка(ДанныеОбъекта.Колонна)));
	
	Возврат Результат;
	
КонецФункции 

Процедура ЗаполнитьДоступныеПараметры_Справочник_ДоговорыКонтрагентов(Форма)
	
	Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[ContractKind]'; ru = '[ВидДоговора]'");   
	НовПараметр.Представление = НСтр("en='Contract type';ru='Вид договора'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Number]'; ru = '[Номер]'");   
	НовПараметр.Представление = НСтр("en='Number';ru='Номер'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Date]'; ru = '[Дата]'");   
	НовПараметр.Представление = НСтр("en='Date';ru='Дата'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Counterpartу]'; ru = '[Контрагент]'");   
	НовПараметр.Представление = НСтр("en='Counterpartу';ru='Контрагент'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Company]';ru='[Организация]'");   
	НовПараметр.Представление = НСтр("en='Company';ru='Организация'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Currency]'; ru = '[Валюта]'");   
	НовПараметр.Представление = НСтр("en='Currency';ru='Валюта'");
	
	НовПараметр = Форма.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[PriceType]'; ru = '[ТипЦен]'");   
	НовПараметр.Представление = НСтр("en='Price type';ru='Тип цен'");
	
КонецПроцедуры

Функция ПодставитьПараметрыВШаблон_Справочник_ДоговорыКонтрагентов(Знач ТекстыШаблонов, ДанныеОбъекта, ФормаВызова = Неопределено)
	
	Если ФормаВызова = Неопределено Тогда
		ФормаВызова = "0";
	КонецЕсли;
		
	ТекстШаблонаПоТипу = ТекстыШаблонов.Получить(ФормаВызова).ТекстШаблона;
	
	Если ТекстШаблонаПоТипу = Неопределено Тогда 
		ТекстШаблонаОбщий = ТекстыШаблонов.Получить("0").ТекстШаблона;
		Результат = ТекстШаблонаОбщий;
	Иначе 
		Результат = ТекстШаблонаПоТипу;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, НСтр("en = '[ContractKind]'; ru = '[ВидДоговора]'"), СокрЛП(Строка(ДанныеОбъекта.ВидДоговора)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Number]'; ru = '[Номер]'"), СокрЛП(Строка(ДанныеОбъекта.Номер)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Date]'; ru = '[Дата]'"), Формат(ДанныеОбъекта.Дата, "ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Counterpartу]'; ru = '[Контрагент]'"), СокрЛП(Строка(ДанныеОбъекта.Владелец)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Company]';ru='[Организация]'"), СокрЛП(Строка(ДанныеОбъекта.Организация)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Currency]'; ru = '[Валюта]'"), СокрЛП(Строка(ДанныеОбъекта.ВалютаВзаиморасчетов)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[PriceType]'; ru = '[ТипЦен]'"), СокрЛП(Строка(ДанныеОбъекта.ТипЦен)));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатПунктыНазначения(Форма)
	
	Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Очистить();
	
	Если Форма.ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу" 
		ИЛИ Форма.ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу" Тогда
		НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
		НовПараметр.КлючПараметра = НСтр("ru = '[Наименование]'");   
		НовПараметр.Представление = НСтр("ru='Наименование'");
		
		НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
		НовПараметр.КлючПараметра = НСтр("ru = '[КраткоеНаименование]'");   
		НовПараметр.Представление = НСтр("ru='Краткое наименование'");
	КонецЕсли;
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("ru = '[ПредставлениеАдреса]'");   
	НовПараметр.Представление = НСтр("ru = 'Представление адреса'; en = 'Address presentation'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("ru = '[ПредставлениеАдресаБезИндекса]'");   
	НовПараметр.Представление = НСтр("ru = 'Представление адреса (без индекса)'; en = 'Address presentation (without index)'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[PointType]'; ru = '[ТипПункта]'");   
	НовПараметр.Представление = НСтр("en='Point type';ru='Тип пункта'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Country]'; ru = '[Страна]'");   
	НовПараметр.Представление = НСтр("en='Country';ru='Страна'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Index]'; ru = '[Индекс]'");   
	НовПараметр.Представление = НСтр("en='Index';ru='Индекс'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Region]'; ru = '[Регион]'");   
	НовПараметр.Представление = НСтр("en='Region';ru='Регион'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Okrug]'; ru = '[Округ]'");   
	НовПараметр.Представление = НСтр("en='Okrug';ru='Округ'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[District]'; ru = '[Район]'");   
	НовПараметр.Представление = НСтр("en='District';ru='Район'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[City]'; ru = '[Город]'");   
	НовПараметр.Представление = НСтр("en='City';ru='Город'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[UrbanArea]'; ru = '[ВнутригРайон]'");   
	НовПараметр.Представление = НСтр("en='Urban area';ru='Внутр. р-н.'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Locality]'; ru = '[НаселенныйПункт]'");   
	НовПараметр.Представление = НСтр("en='Locality';ru='Нас. пункт'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Street]'; ru = '[Улица]'");   
	НовПараметр.Представление = НСтр("en='Street';ru='Улица'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Area]'; ru = '[Территория]'");   
	НовПараметр.Представление = НСтр("en='Area';ru='Территория'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Building]'; ru = '[Дом]'");   
	НовПараметр.Представление = НСтр("en='Building';ru='Дом'");
	
	НовПараметр = Форма.Справочник_уатПунктыНазначения_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Housing]'; ru = '[Корпус]'");   
	НовПараметр.Представление = НСтр("en='Housing';ru='Корпус (строение, литера, сооружение, участок)'");
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатРегистрационныеДокументы(Форма)
	
	Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[DocumentType]'; ru = '[ВидДокумента]'");   
	НовПараметр.Представление = НСтр("en='Document type';ru='Вид документа'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Series]'; ru = '[Серия]'");   
	НовПараметр.Представление = НСтр("en='Series';ru='Серия'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Number]'; ru = '[Номер]'");   
	НовПараметр.Представление = НСтр("en='Number';ru='Номер'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Employee]'; ru = '[ВладелецДокументов]'");   
	НовПараметр.Представление = НСтр("en='Employee';ru='Владелец документов'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[IssuedBy]'; ru = '[КемВыдан]'");   
	НовПараметр.Представление = НСтр("en='Issued by';ru='Кем выдан'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[OpenedCategories]'; ru = '[ОткрытыеКатегории]'");   
	НовПараметр.Представление = НСтр("en='Opened categories';ru='Открытые категории'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[DateOfIssue]'; ru = '[ДатаВыдачи]'");   
	НовПараметр.Представление = НСтр("en='Date of issue';ru='Дата выдачи'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[ValidityPeriod]'; ru = '[ДатаОкончания]'");   
	НовПараметр.Представление = НСтр("en='Validity period';ru='Дата окончания'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Company]'; ru = '[Организация]'");   
	НовПараметр.Представление = НСтр("en='Company';ru='Организация'");
	
	НовПараметр = Форма.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Department]'; ru = '[Подразделение]'");   
	НовПараметр.Представление = НСтр("en='Department';ru='Подразделение'");

КонецПроцедуры

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатСкладскиеЯчейки(Форма)
	
	Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Room]'; ru='[Помещение]'");   
	НовПараметр.Представление = НСтр("en='Room';   ru='Помещение'");
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Line]'; ru='[Ряд]'");   
	НовПараметр.Представление = НСтр("en='Line';   ru='Ряд'");
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Rack]'; ru='[Стеллаж]'");   
	НовПараметр.Представление = НСтр("en='Rack';   ru='Стеллаж'");
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Stage]'; ru='[Ярус]'");   
	НовПараметр.Представление = НСтр("en='Stage';   ru='Ярус'");
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Cell]'; ru='[Ячейка]'");   
	НовПараметр.Представление = НСтр("en='Cell';   ru='Ячейка'");
	
	НовПараметр = Форма.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = "[Разделитель]";   
	НовПараметр.Представление = "Разделитель";
		
КонецПроцедуры

Функция ПодставитьПараметрыВШаблон_Справочник_уатПунктыНазначения(Знач ТекстШаблона, ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов = Ложь)
	
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения(ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов);
	
	Результат = ТекстШаблона;
	
	Результат = СтрЗаменить(Результат, НСтр("ru = '[Наименование]'"),        ПараметрыЗаполнения.Наименование);
	Результат = СтрЗаменить(Результат, НСтр("ru = '[КраткоеНаименование]'"), ПараметрыЗаполнения.КраткоеНаименование);
	Результат = СтрЗаменить(Результат, НСтр("ru = '[ПредставлениеАдреса]'"), ПараметрыЗаполнения.ПредставлениеАдреса);
	Результат = СтрЗаменить(Результат, НСтр("ru = '[ПредставлениеАдресаБезИндекса]'"), ПредставлениеАдресаБезИндекса(ПараметрыЗаполнения.ПредставлениеАдреса, ПараметрыЗаполнения.Индекс));
	Результат = СтрЗаменить(Результат, НСтр("en = '[PointType]'; ru = '[ТипПункта]'"), ПараметрыЗаполнения.ТипПункта);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Country]'; ru = '[Страна]'"), ПараметрыЗаполнения.Страна);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Index]'; ru = '[Индекс]'"), ПараметрыЗаполнения.Индекс);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Region]'; ru = '[Регион]'"), ПараметрыЗаполнения.Регион);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Okrug]'; ru = '[Округ]'"), ПараметрыЗаполнения.Округ);
	Результат = СтрЗаменить(Результат, НСтр("en = '[District]'; ru = '[Район]'"), ПараметрыЗаполнения.Район);
	Результат = СтрЗаменить(Результат, НСтр("en = '[City]'; ru = '[Город]'"), ПараметрыЗаполнения.Город);
	Результат = СтрЗаменить(Результат, НСтр("en = '[UrbanArea]'; ru = '[ВнутригРайон]'"), ПараметрыЗаполнения.ВнутригРайон);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Locality]'; ru = '[НаселенныйПункт]'"), ПараметрыЗаполнения.НаселенныйПункт);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Street]'; ru = '[Улица]'"), ПараметрыЗаполнения.Улица);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Area]'; ru = '[Территория]'"), ПараметрыЗаполнения.Территория);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Building]'; ru = '[Дом]'"), ПараметрыЗаполнения.Дом);
	Результат = СтрЗаменить(Результат, НСтр("en = '[Housing]'; ru = '[Корпус]'"), ПараметрыЗаполнения.Корпус);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения(ДанныеОбъекта, ВыводитьТипыАдресныхОбъектов = Ложь) Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Наименование",        СокрЛП(Строка(ДанныеОбъекта.Наименование)));
	ПараметрыЗаполнения.Вставить("КраткоеНаименование", СокрЛП(Строка(ДанныеОбъекта.ШифрПункта)));
	ПараметрыЗаполнения.Вставить("ПредставлениеАдреса", СокрЛП(Строка(ДанныеОбъекта.Адрес)));
	ПараметрыЗаполнения.Вставить("ТипПункта",           СокрЛП(Строка(ДанныеОбъекта.ТипПункта)));
	ПараметрыЗаполнения.Вставить("Страна",              СокрЛП(Строка(ДанныеОбъекта.Страна)));
	ПараметрыЗаполнения.Вставить("Индекс",          "");
	ПараметрыЗаполнения.Вставить("Регион",          "");
	ПараметрыЗаполнения.Вставить("Округ",           "");
	ПараметрыЗаполнения.Вставить("Район",           "");
	ПараметрыЗаполнения.Вставить("Город",           "");
	ПараметрыЗаполнения.Вставить("ВнутригРайон",    "");
	ПараметрыЗаполнения.Вставить("НаселенныйПункт", "");
	ПараметрыЗаполнения.Вставить("Улица",           "");
	ПараметрыЗаполнения.Вставить("Территория",      "");
	ПараметрыЗаполнения.Вставить("Дом",             "");
	ПараметрыЗаполнения.Вставить("Корпус",          "");
	
	JSONСтрокаКонтактнойИнформации = ДанныеОбъекта.ЗначениеАдреса;
	Если ЗначениеЗаполнено(JSONСтрокаКонтактнойИнформации) Тогда
		Возврат ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначенияПоJSON(ПараметрыЗаполнения, JSONСтрокаКонтактнойИнформации, ВыводитьТипыАдресныхОбъектов);
	КонецЕсли;
	
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML
	XMLСтрокаКонтактнойИнформации = ДанныеОбъекта.ЗначенияПолейАдреса.Получить();
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрокаКонтактнойИнформации) Тогда 
		XDTOКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(
			XMLСтрокаКонтактнойИнформации, 
			Перечисления.ТипыКонтактнойИнформации.Адрес
		);
		
	Иначе 
		XDTOКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(
			XMLСтрокаКонтактнойИнформации, 
			ДанныеОбъекта.Адрес
		);
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(XDTOКонтактнойИнформации) Тогда 
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	СоставПолейКИ = XDTOКонтактнойИнформации.Состав.Состав;
	
	Если Не (ТипЗнч(СоставПолейКИ) = Тип("ОбъектXDTO") Или ТипЗнч(СоставПолейКИ) = Тип("Структура")) Тогда 
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	Если Не СоставПолейКИ.Город = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Город", СоставПолейКИ.Город);
	КонецЕсли;
	
	Если Не СоставПолейКИ.НаселПункт = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("НаселенныйПункт", СоставПолейКИ.НаселПункт);
	КонецЕсли;
	
	Если Не СоставПолейКИ.ВнутригРайон = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("ВнутригРайон", СоставПолейКИ.ВнутригРайон);
	КонецЕсли;
	
	Если Не СоставПолейКИ.СвРайМО = Неопределено И Не СоставПолейКИ.СвРайМО.Район = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Район", СоставПолейКИ.СвРайМО.Район);
	КонецЕсли;
	
	Если Не СоставПолейКИ.СубъектРФ = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Регион", СоставПолейКИ.СубъектРФ);
	КонецЕсли;
	
	Если Не СоставПолейКИ.Округ = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Округ", СоставПолейКИ.Округ);
	КонецЕсли;
	
	Если Не СоставПолейКИ.Улица = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Улица", СоставПолейКИ.Улица);
	КонецЕсли;
	
	ДополнительныеПоляАдреса = ДополнительныеПоляАдреса(СоставПолейКИ);
	
	Индекс = ДополнительныеПоляАдреса.Получить("Почтовый индекс");
	Если Не Индекс = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Индекс", Индекс);
	КонецЕсли;
	
	Территория = ДополнительныеПоляАдреса.Получить("Территория");
	Если Не Территория = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("Территория", Территория);
	КонецЕсли;
	
	Дом = ДополнительныеПоляАдреса.Получить("Дом");
	Строение = ДополнительныеПоляАдреса.Получить("Строение");
	Если Не Дом = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("ДомСтроение", Дом);
	ИначеЕсли Не Строение = Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("ДомСтроение", Строение);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	// {/Совместимость}
КонецФункции // ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения()

Функция ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначенияПоJSON(ПараметрыЗаполнения, JSONСтрокаКонтактнойИнформации, ВыводитьТипыАдресныхОбъектов = Ложь)
	Если Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(JSONСтрокаКонтактнойИнформации) Тогда
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(JSONСтрокаКонтактнойИнформации) Тогда 
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	СоставПолейКИ =  УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(JSONСтрокаКонтактнойИнформации,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если ЗначениеЗаполнено(СоставПолейКИ.city) Тогда 
		ПараметрыЗаполнения.Вставить("Город", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.city + " " + СоставПолейКИ.cityType , СоставПолейКИ.city));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.locality) Тогда 
		ПараметрыЗаполнения.Вставить("НаселенныйПункт", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.locality + " " + СоставПолейКИ.localityType , СоставПолейКИ.locality));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.cityDistrict) Тогда 
		ПараметрыЗаполнения.Вставить("ВнутригРайон", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.cityDistrict + " " + СоставПолейКИ.cityDistrictType , СоставПолейКИ.cityDistrict));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.district) Тогда 
		ПараметрыЗаполнения.Вставить("Район", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.district + " " + СоставПолейКИ.districtType , СоставПолейКИ.district));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.area) Тогда 
		ПараметрыЗаполнения.Вставить("Регион", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.area + " " + СоставПолейКИ.areaType , СоставПолейКИ.area));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.munDistrict) Тогда 
		ПараметрыЗаполнения.Вставить("Округ", СоставПолейКИ.munDistrict);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.street) Тогда 
		ПараметрыЗаполнения.Вставить("Улица", СоставПолейКИ.street + " " + СоставПолейКИ.streetType);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.ZIPcode) Тогда 
		ПараметрыЗаполнения.Вставить("Индекс", СоставПолейКИ.ZIPcode);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.territory) Тогда 
		ПараметрыЗаполнения.Вставить("Территория", СоставПолейКИ.territory);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.houseNumber) Тогда 
		ПараметрыЗаполнения.Вставить("Дом", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.houseType + " " + СоставПолейКИ.houseNumber , СоставПолейКИ.houseNumber));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставПолейКИ.buildings) 
		И ТипЗнч(СоставПолейКИ.buildings) = Тип("Массив")
		И СоставПолейКИ.buildings.Количество() > 0 Тогда
		
		ПараметрыЗаполнения.Вставить("Корпус", ?(ВыводитьТипыАдресныхОбъектов, СоставПолейКИ.buildings[0].type + " " + СоставПолейКИ.buildings[0].Number, СоставПолейКИ.buildings[0].Number));
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПредставлениеАдресаБезИндекса(ПредставлениеАдреса, Индекс)
	
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		Если Не ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
			ПредставлениеБезИндекса = "";
		Иначе
			ПредставлениеБезИндекса = ПредставлениеАдреса;
		КонецЕсли;
	Иначе
		ПозицияИндекса = СтрНайти(ПредставлениеАдреса, Индекс);
		Если ПозицияИндекса <> 0 Тогда
			ПредставлениеБезИндекса = Сред(ПредставлениеАдреса, ПозицияИндекса + СтрДлина(Индекс) + 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеБезИндекса;
	
КонецФункции

Функция ДополнительныеПоляАдреса(XDTOАдрес)
	
	ДополнительныеПоля = Новый Соответствие();
	
	Если XDTOАдрес.Свойства().Получить("ДопАдрЭл") = Неопределено Тогда
		Возврат ДополнительныеПоля;
	КонецЕсли;
	
	Для Каждого ДопЭлемент Из XDTOАдрес.ДопАдрЭл Цикл
		Если ДопЭлемент.ТипАдрЭл = Неопределено Тогда 
			Если ДопЭлемент.Номер = Неопределено Тогда 
				Продолжить;
			Иначе 
				ТипОбъекта = ТипОбъектаПоКодуСериализации(ДопЭлемент.Номер.Тип);
				Если ТипОбъекта <> Неопределено Тогда
					ДополнительныеПоля.Вставить(ТипОбъекта.Наименование, ДопЭлемент.Номер.Значение);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			ТипОбъекта = ТипОбъектаПоКодуСериализации(ДопЭлемент.ТипАдрЭл);
			Если ТипОбъекта <> Неопределено Тогда
				ДополнительныеПоля.Вставить(ТипОбъекта.Наименование, ДопЭлемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеПоля;
	
КонецФункции

Функция ТипОбъектаПоКодуСериализации(Код)
	
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипыОбъектовАдресацииАдресаРФ()
	
	Результат = Новый Массив;
	
	// Код, Наименование, Тип, Порядок, КодФИАС
	// Тип: 1 - владение, 2 - здание, 3 - помещение.
	
	Результат.Добавить(СтрокаОбъектаАдресации("1010", НСтр("ru='Дом';en='House'"),          1));
	Результат.Добавить(СтрокаОбъектаАдресации("1020", НСтр("ru='Владение';en='Ownership'"),     1));
	Результат.Добавить(СтрокаОбъектаАдресации("1030", НСтр("ru='Домовладение';en='Home-ownership'"), 1));
	
	Результат.Добавить(СтрокаОбъектаАдресации("1050", НСтр("ru='Корпус';en='Body'"),     2));
	Результат.Добавить(СтрокаОбъектаАдресации("1060", НСтр("ru='Строение';en='Construction'"),   2));
	Результат.Добавить(СтрокаОбъектаАдресации("1080", НСтр("ru='Литера';en='Letter'"),     2));
	Результат.Добавить(СтрокаОбъектаАдресации("1070", НСтр("ru='Сооружение';en='Facility'"), 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1040", НСтр("ru='Участок';en='Land'"),    2));
	
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru='Квартира';en='Apartment'"),  3));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru='Офис';en='Office'"),      3));
	Результат.Добавить(СтрокаОбъектаАдресации("2040", НСтр("ru='Бокс';en='Box'"),      3));
	Результат.Добавить(СтрокаОбъектаАдресации("2020", НСтр("ru='Помещение';en='Placement'"), 3));
	Результат.Добавить(СтрокаОбъектаАдресации("2050", НСтр("ru='Комната';en='Room'"),   3));
	Результат.Добавить(СтрокаОбъектаАдресации("2060", НСтр("ru='Этаж';en='Floor'"),      3));
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru='кв.';en='kw.'"),       3));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru='оф.';en='of.'"),       3));
	
	// Уточняющие объекты
	Результат.Добавить(СтрокаОбъектаАдресации("10100000", НСтр("ru='Почтовый индекс';en='Zip code'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10200000", НСтр("ru='Адресная точка';en='Address point'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10300000", НСтр("ru='Садовое товарищество';en=""Gardeners' partnership""")));
	Результат.Добавить(СтрокаОбъектаАдресации("10400000", НСтр("ru='Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента';en='Item of street-road network, planning structure of additional address element'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10500000", НСтр("ru='Промышленная зона';en='Industrial area'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10600000", НСтр("ru='Гаражно-строительный кооператив';en='Garage construction co-operative'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10700000", НСтр("ru='Территория';en='Area'")));
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаОбъектаАдресации(Код, Наименование, Тип = 0)
	
	СтруктураОбъектаАдресации = Новый Структура;
	СтруктураОбъектаАдресации.Вставить("Код",          Код);
	СтруктураОбъектаАдресации.Вставить("Наименование", Наименование);
	СтруктураОбъектаАдресации.Вставить("Тип",          Тип);
	СтруктураОбъектаАдресации.Вставить("Сокращение",   НРег(Наименование));
	
	Возврат СтруктураОбъектаАдресации;
	
КонецФункции

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатСерииНоменклатуры(Форма)
	
	Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Model]'; ru = '[Модель]'");   
	НовПараметр.Представление = НСтр("en='Model';ru='Модель'");
	
	НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[SerialNumber]'; ru = '[СерийныйНомер]'");   
	НовПараметр.Представление = НСтр("en='Serial number';ru='Серийный номер'");
	
	НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[TypeOfCarPart]'; ru = '[ТипАгрегата]'");   
	НовПараметр.Представление = НСтр("en='Type of car part';ru='Тип агрегата'");
	
	НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[ProductsAndServices]'; ru = '[Номенклатура]'");   
	НовПараметр.Представление = НСтр("en='Products and services';ru='Номенклатура'");
	
	Если Форма.Справочник_уатСерииНоменклатуры_ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда 
		НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
		НовПараметр.КлючПараметра = НСтр("en = '[TireEndurance]'; ru = '[СрокСлужбыШины]'");   
		НовПараметр.Представление = НСтр("en='Tire endurance';ru='Срок службы шины'");
		
	Иначе 
		НовПараметр = Форма.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Добавить();
		НовПараметр.КлючПараметра = НСтр("en = '[ExpirationDate]'; ru = '[ГоденДо]'");   
		НовПараметр.Представление = НСтр("en='Expiration date';ru='Годен до'");
	КонецЕсли;
	
КонецПроцедуры

Функция ПодставитьПараметрыВШаблон_Справочник_уатСерииНоменклатуры(Знач ТекстыШаблонов, ДанныеОбъекта)
	
	ТекстШаблонаПоТипу = ТекстыШаблонов.Получить(ДанныеОбъекта.ТипАгрегата);
	ТекстШаблонаОбщий  = ТекстыШаблонов.Получить(Справочники.уатТипыАгрегатов.ПустаяСсылка());
	
	Если ТекстШаблонаПоТипу = Неопределено Тогда 
		Результат = ТекстШаблонаОбщий;
	Иначе 
		Результат = ТекстШаблонаПоТипу;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, НСтр("en = '[Model]'; ru = '[Модель]'"), СокрЛП(Строка(ДанныеОбъекта.Модель)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[SerialNumber]'; ru = '[СерийныйНомер]'"), СокрЛП(Строка(ДанныеОбъекта.СерийныйНомер)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[TypeOfCarPart]'; ru = '[ТипАгрегата]'"), СокрЛП(Строка(ДанныеОбъекта.ТипАгрегата)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[ProductsAndServices]'; ru = '[Номенклатура]'"), СокрЛП(Строка(ДанныеОбъекта.Номенклатура)));
	
	Если ДанныеОбъекта.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда 
		Результат = СтрЗаменить(Результат, НСтр("en = '[TireEndurance]'; ru = '[СрокСлужбыШины]'"), Формат(ДанныеОбъекта.СрокСлужбыШины, "ЧЦ=2; ЧВН="));
		Результат = СтрЗаменить(Результат, НСтр("en = '[ExpirationDate]'; ru = '[ГоденДо]'"), "");
	Иначе 
		Результат = СтрЗаменить(Результат, НСтр("en = '[TireEndurance]'; ru = '[СрокСлужбыШины]'"), "");
		Результат = СтрЗаменить(Результат, НСтр("en = '[ExpirationDate]'; ru = '[ГоденДо]'"), Формат(ДанныеОбъекта.ГоденДо, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодставитьПараметрыВШаблон_Справочник_уатРегистрационныеДокументы(Знач ТекстыШаблонов, ДанныеОбъекта)
	
	Результат = ТекстыШаблонов;
	
	Результат = СтрЗаменить(Результат, НСтр("en = '[DocumentType]'; ru = '[ВидДокумента]'"), СокрЛП(Строка(ДанныеОбъекта.ВидДокумента)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Number]'; ru = '[Номер]'"), СокрЛП(Строка(ДанныеОбъекта.Номер)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Series]'; ru = '[Серия]'"), СокрЛП(Строка(ДанныеОбъекта.Серия)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Employee]'; ru = '[ВладелецДокументов]'"), СокрЛП(Строка(ДанныеОбъекта.ВладелецДокументов)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[IssuedBy]'; ru = '[КемВыдан]'"), СокрЛП(Строка(ДанныеОбъекта.КемВыдан)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[OpenedCategories]'; ru = '[ОткрытыеКатегории]'"), СокрЛП(Строка(ДанныеОбъекта.ОткрытыеКатегории)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[DateOfIssue]'; ru = '[ДатаВыдачи]'"), Формат(ДанныеОбъекта.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, НСтр("en = '[ValidityPeriod]'; ru = '[ДатаОкончания]'"), Формат(ДанныеОбъекта.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, НСтр("en='[Company]';ru='[Организация]'"), СокрЛП(Строка(ДанныеОбъекта.Организация)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Department]'; ru = '[Подразделение]'"), СокрЛП(Строка(ДанныеОбъекта.Подразделение)));

	Возврат Результат;
	
КонецФункции

Функция СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, ФормаВызова = Неопределено, флЗаписыватьДоговор = Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ФормаВызова = Неопределено Тогда
		ФормаВызова = "0";
	КонецЕсли;
	
	флНастройкиОпределены = Истина;
	ХранилищеШаблонов = Константы.уатНастройкиШаблонов.Получить();
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиЗаполнения = Новый Структура();
		флНастройкиОпределены = Ложь;
	Иначе 
		НастройкиЗаполнения = ХранилищеШаблонов.Получить();
	КонецЕсли;
	Если ТипЗнч(НастройкиЗаполнения) = Тип("Структура") И НастройкиЗаполнения.Свойство("Справочник_ДоговорыКонтрагентов")
		И ТипЗнч(НастройкиЗаполнения.Справочник_ДоговорыКонтрагентов) = Тип("Соответствие") Тогда
		НастройкаЗаполненияДоговорыКонтрагентов = НастройкиЗаполнения.Справочник_ДоговорыКонтрагентов.Получить(ФормаВызова);
		Если НастройкаЗаполненияДоговорыКонтрагентов = Неопределено Тогда
			флНастройкиОпределены = Ложь;
		КонецЕсли;
	Иначе
		флНастройкиОпределены = Ложь;
	КонецЕсли;
	
	Если НЕ флНастройкиОпределены Тогда
		Если ФормаВызова <> "0" Тогда
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Не удалось создать новый договор: не найдены настройки шаблонов договоров!");
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
		
	Если флЗаписыватьДоговор Тогда
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйДоговор, ПараметрыЗаполнения);
	Иначе
		НовыйДоговор = ПараметрыЗаполнения;
	КонецЕсли;
	
	НовыйДоговор.Дата = ТекущаяДата();
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") И ПараметрыЗаполнения.Свойство("Валюта") Тогда
		НовыйДоговор.ВалютаВзаиморасчетов = ПараметрыЗаполнения.Валюта;
	Иначе
		НовыйДоговор.ВалютаВзаиморасчетов = НастройкаЗаполненияДоговорыКонтрагентов.Валюта;
	КонецЕсли;
	НовыйДоговор.ВидДоговора = НастройкаЗаполненияДоговорыКонтрагентов.ВидДоговора;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		НовыйДоговор.ВедениеВзаиморасчетов = НастройкаЗаполненияДоговорыКонтрагентов.ВедениеВзаиморасчетов;
	КонецЕсли;
		
	НовыйДоговор.Номер = ПолучитьНовыйНомерДоговора(НовыйДоговор.Владелец,
		НовыйДоговор.ВидДоговора, НовыйДоговор.Организация);
	
	НовыйДоговор.Наименование = СформироватьНаименованиеПоШаблону("Справочник_ДоговорыКонтрагентов",
		НовыйДоговор, НастройкиЗаполнения.Справочник_ДоговорыКонтрагентов, ФормаВызова);
		
	Если флЗаписыватьДоговор И НовыйДоговор.ПроверитьЗаполнение() Тогда
		Попытка
			НовыйДоговор.Записать();
		Исключение
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Не удалось записать новый договор! Подробнее см. журнал регистрации");
		КонецПопытки;
	КонецЕсли;
		
	Возврат НовыйДоговор.Ссылка;
КонецФункции

Функция ПолучитьНовыйНомерДоговора(Контрагент, ВидДоговора, Организация)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Номер
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат "1";
	КонецЕсли;
	
	НомерМакс = "";
	Пока Выборка.Следующий() Цикл
		ТекНомер = СокрЛП(Выборка.Номер);
		Если СтрДлина(ТекНомер) > СтрДлина(НомерМакс) Тогда
			НомерМакс = ТекНомер;
		ИначеЕсли СтрДлина(ТекНомер) = СтрДлина(НомерМакс) Тогда
			НомерМакс = Макс(ТекНомер, НомерМакс);
		КонецЕсли;
	КонецЦикла;
	
	Если НомерМакс = "" Тогда
		Рез = "1";
	Иначе
		Сч = СтрДлина(НомерМакс);
		ЧислоСередина = "";
		БуквНачало = "";
		БуквОкончание = "";
		Пока Сч >= 1 Цикл
			ТекСимвол = Сред(НомерМакс, Сч, 1);
			Если СтрНайти("0123456789", ТекСимвол) = 0 Тогда //это буква
				Если ЗначениеЗаполнено(ЧислоСередина) Тогда //конец числовой части и начало второй буквенной
					БуквНачало = Лев(НомерМакс, Сч);
					Прервать;
				Иначе
					БуквОкончание = ТекСимвол + БуквОкончание;
				КонецЕсли;
				
			Иначе //это цифра
				ЧислоСередина = ТекСимвол + ЧислоСередина;
				
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Попытка
			Рез = БуквНачало + Формат((Число(ЧислоСередина)+1), "ЧЦ=; ЧГ="
			+ Макс(СтрДлина(ЧислоСередина), СтрДлина(Формат(Число(ЧислоСередина)+1, "ЧГ="))) + "; ЧВН=") + БуквОкончание;
		Исключение
			Рез = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ЗаполнитьДоступныеПараметры_Справочник_уатСопроводительныеДокументы(Форма)
	
	Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Очистить();
	
	НовПараметр = Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[DocumentKind]'; ru = '[ВидДокумента]'");   
	НовПараметр.Представление = НСтр("en='Document kind';ru='Вид документа'");
	
	НовПараметр = Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[DocumentNumber]'; ru = '[НомерДокумента]'");   
	НовПараметр.Представление = НСтр("en='Document number';ru='Номер документа'");
	
	НовПараметр = Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[DocumentDate]'; ru = '[ДатаДокумента]'");   
	НовПараметр.Представление = НСтр("en='Document date';ru='Дата документа'");
	
	НовПараметр = Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en = '[Owner]'; ru = '[ВладелецДокумента]'");   
	НовПараметр.Представление = НСтр("en='Owner';ru='Владелец документа'");
	
	НовПараметр = Форма.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Добавить();
	НовПараметр.КлючПараметра = НСтр("en='[Destination]';ru='[ПунктНазначения]'");   
	НовПараметр.Представление = НСтр("en='Destination';ru='Пункт назначения'");
		
КонецПроцедуры

Функция ПодставитьПараметрыВШаблон_Справочник_уатСопроводительныеДокументы(Знач ТекстыШаблонов, ДанныеОбъекта)
	
	Результат = ТекстыШаблонов;
	
	Результат = СтрЗаменить(Результат, НСтр("en = '[DocumentKind]'; ru = '[ВидДокумента]'"),     СокрЛП(Строка(ДанныеОбъекта.ВидДокумента)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[DocumentNumber]'; ru = '[НомерДокумента]'"), СокрЛП(Строка(ДанныеОбъекта.НомерДокумента)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[DocumentDate]'; ru = '[ДатаДокумента]'"),    Формат(ДанныеОбъекта.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Owner]'; ru = '[ВладелецДокумента]'"),       СокрЛП(Строка(ДанныеОбъекта.ВладелецДокумента)));
	Результат = СтрЗаменить(Результат, НСтр("en = '[Destination]';ru='[ПунктНазначения]'"),      СокрЛП(Строка(ДанныеОбъекта.ПунктНазначения)));
		
	Возврат Результат;
	
КонецФункции

Функция ПодставитьПараметрыВШаблонШК(Знач НастройкиШаблона, ДанныеОбъекта, НомерСтроки = "", ДанныеРодительскогоОбъекта = Неопределено) Экспорт
	
	Результат              = НастройкиШаблона.ТекстШаблона;
	ДлинаУникальногоНомера = НастройкиШаблона.ДлинаУникальногоНомера;  

	// Кодируется Заказ на ТС
	Если ТипЗнч(ДанныеОбъекта) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Результат = ЗаполнениеШаблонаЗаказаНаТС(Результат, ДанныеОбъекта, НомерСтроки, ДлинаУникальногоНомера);
		
	// Кодируется Потребность в перевозке	
	ИначеЕсли ТипЗнч(ДанныеОбъекта) = Тип("Соответствие") Тогда
		Результат = ЗаполнениеШаблонаПотребностиВПеревозке(Результат, ДанныеОбъекта, НомерСтроки, ДлинаУникальногоНомера);   
		
	// Кодируется Номенклатура или грузовое место	
	ИначеЕсли ТипЗнч(ДанныеОбъекта) = Тип("СправочникСсылка.Номенклатура")Или 
			  ТипЗнч(ДанныеОбъекта) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		
		Если ТипЗнч(ДанныеРодительскогоОбъекта) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			Результат = ЗаполнениеШаблонаЗаказаНаТС(Результат, ДанныеРодительскогоОбъекта, НомерСтроки, ДлинаУникальногоНомера, ДанныеОбъекта.УникальныйИдентификатор());
		ИначеЕсли ТипЗнч(ДанныеРодительскогоОбъекта) = Тип("Соответствие") Тогда
			Результат = ЗаполнениеШаблонаПотребностиВПеревозке(Результат, ДанныеРодительскогоОбъекта, НомерСтроки, ДлинаУникальногоНомера, ДанныеОбъекта.УникальныйИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции  

Функция ПорядковыйНомерМесяцаПечатиШК(ДатаТекущая)
	
	ДатаНачалаОтчета = Дата("20000101");
	
	МесяцНачала = Месяц(ДатаНачалаОтчета);
	МесяцКонца = Месяц(ДатаТекущая);
	ЛетМеждуДатами = Год(ДатаТекущая) - Год(ДатаНачалаОтчета);
	РезультатВМесяцах = ЛетМеждуДатами * 12 - МесяцНачала + МесяцКонца; 
	
	НомерМесяца = 1;
	
	Для Счетчик = 1 По РезультатВМесяцах Цикл 
		
		НомерМесяца = НомерМесяца + 1;
		Если НомерМесяца > 99 Тогда
			НомерМесяца = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ПорядковыйНомерМесяца = Строка(НомерМесяца);
	Если СтрДлина(ПорядковыйНомерМесяца) = 1 Тогда
		ПорядковыйНомерМесяца = "0" + ПорядковыйНомерМесяца;
	КонецЕсли;
		
	Возврат ПорядковыйНомерМесяца;
	
КонецФункции

Функция УникальныйНомерОтправления(Идентификатор, ДлинаНомера)
	Возврат уатЗащищенныеФункцииСервер_проф.УникальныйНомерОтправления(ДлинаНомера, Идентификатор);
КонецФункции

Функция КонтрольнаяЦифраОтправления(УникальныйНомер, ТипОтправления) Экспорт
	
	Если ТипОтправления = "Внутренняя" Тогда
		
		СуммаНечетных = 0;
		СуммаЧетных   = 0;
		Для Сч = 1 По СтрДлина(УникальныйНомер) Цикл
			ЦифраНомера = Число(Сред(УникальныйНомер, Сч, 1));
			Если Сч % 2 = 0 Тогда
				СуммаЧетных   = СуммаЧетных + ЦифраНомера;
			Иначе
				СуммаНечетных = СуммаНечетных + ЦифраНомера;
			КонецЕсли;	
		КонецЦикла;
		СуммаНечетных    = СуммаНечетных * 3;
		СуммаОбщая       = СуммаНечетных + СуммаЧетных; 
		КонтрольнаяЦифра = 10 - (СуммаОбщая % 10);
		Если КонтрольнаяЦифра % 10 = 0 Тогда
			КонтрольнаяЦифра = 0;
		КонецЕсли;
		
	ИначеЕсли ТипОтправления = "Международная" Тогда
		
		Множители = Новый Массив(8);
		Множители[0] = 8;
		Множители[1] = 6;
		Множители[2] = 4;
		Множители[3] = 2;
		Множители[4] = 3;
		Множители[5] = 5;
		Множители[6] = 9;
		Множители[7] = 7;
		
		Сумма = 0;
		Для Сч = 0 По СтрДлина(УникальныйНомер) - 1 Цикл
			ЦифраНомера = Число(Сред(УникальныйНомер, Сч + 1, 1));
			Сумма = Сумма + (ЦифраНомера * Множители[Сч]);
		КонецЦикла;
		
		Остаток = Сумма % 11;
		
		КонтрольнаяЦифра = 11 - Остаток;
		Если КонтрольнаяЦифра = 10 Тогда
			КонтрольнаяЦифра = 0;
		ИначеЕсли КонтрольнаяЦифра = 11 Тогда
			КонтрольнаяЦифра = 5;
		КонецЕсли;
	ИначеЕсли ТипОтправления = "Универсальная" Тогда 
		
		СуммаНечетных = 0;
		СуммаЧетных   = 0;
		Для Сч = 1 По СтрДлина(УникальныйНомер) Цикл
			ЦифраНомера = Число(КодСимвола(Сред(УникальныйНомер, Сч, 1)));
			Если Сч % 2 = 0 Тогда
				СуммаЧетных   = СуммаЧетных + ЦифраНомера;
			Иначе
				СуммаНечетных = СуммаНечетных + ЦифраНомера;
			КонецЕсли;	
		КонецЦикла;
		СуммаНечетных    = СуммаНечетных * 3;
		СуммаОбщая       = СуммаНечетных + СуммаЧетных; 
		КонтрольнаяЦифра = 10 - (СуммаОбщая % 10);
		Если КонтрольнаяЦифра % 10 = 0 Тогда
			КонтрольнаяЦифра = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонтрольнаяЦифра;
КонецФункции 

Функция ИндексПункта(Адрес) Экспорт
	
	Если ТипЗнч(Адрес) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЗначениеАдреса = Адрес.ЗначениеАдреса;
		Если Не ЗначениеЗаполнено(Адрес.ЗначениеАдреса) Тогда
			КонтактнаяИнформацияXML = Адрес.ЗначенияПолейАдреса.Получить();
			Если ЗначениеЗаполнено(КонтактнаяИнформацияXML) 
				И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнформацияXML) Тогда
				
				ЗначениеАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(КонтактнаяИнформацияXML, Перечисления.ТипыКонтактнойИнформации.Адрес);
			КонецЕсли;
		КонецЕсли;
		СоставПолейКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначениеАдреса,
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Если ЗначениеЗаполнено(СоставПолейКИ.ZIPcode) Тогда 
			Индекс = СоставПолейКИ.ZIPcode;
		Иначе
			Попытка
				Индекс = СтрЗаменить(Строка(Число(Сред(Адрес.Адрес,1,6))),Символы.НПП, "");
			Исключение
				Индекс = "";
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Адрес) = Тип("Строка") Тогда
		Попытка
			Индекс = СтрЗаменить(Строка(Число(Сред(Адрес,1,6))), Символы.НПП, "");
		Исключение
			Индекс = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат Индекс;
КонецФункции

Функция КодСтраны(Адрес)
	
	Если ТипЗнч(Адрес) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Страна = Адрес.Страна;
		КодСтраны = Страна.КодАльфа2;
	ИначеЕсли ТипЗнч(Адрес) = Тип("Строка") Тогда
		КодСтраны = "";
	КонецЕсли;
	
	Возврат КодСтраны;
	
КонецФункции 

Функция ЗаполнитьПоляЗаказа(ТекстШаблона, ДанныеОбъекта)
	
	ТипШтрихКода 	  = Константы.уатТипШтрихкодаДляПечати_уэ.Получить();
	МассивПолей       = СтрРазделить(ТекстШаблона, ";");
	ЗаполненныйШаблон = "";   
	СоответствиеПолейШК = Новый Соответствие(); 
	
	Если ТипЗнч(ДанныеОбъекта) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ДопРеквизиты = ДанныеОбъекта.ДополнительныеРеквизиты.Выгрузить();
		ДопРеквизиты.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		Для Каждого ТекСтрока Из ДопРеквизиты Цикл
			ТекСтрока.Наименование = НРег(СтрЗаменить(Строка(ТекСтрока.Свойство.ИдентификаторДляФормул)," ",""));
		КонецЦикла; 
	КонецЕсли;
	
	Для Каждого Элемент Из МассивПолей Цикл
		Элемент = СокрЛП(Элемент);
		Если СтрНайти(Элемент, "Заказ") <> 0 Тогда 
			Если ТипЗнч(ДанныеОбъекта) = Тип("Соответствие") Тогда
				ИмяРеквизита = Элемент;
			Иначе
				ИмяРеквизита = СтрЗаменить(Сред(Элемент, 8),"]","");
			КонецЕсли;
			
			Попытка   
				// Основные реквизиты заказа
				ЗначениеРеквизита = ДанныеОбъекта[ИмяРеквизита];
			Исключение 
				// Доп. рекизиты заказа
				СтруктураОтбора = Новый Структура("Наименование", НРег(ИмяРеквизита)); 
				СтрокаТаблицы = ДопРеквизиты.НайтиСтроки(СтруктураОтбора);
				Если СтрокаТаблицы.Количество() > 0 Тогда
					ЗначениеРеквизита = СтрокаТаблицы[0].Значение; 
				Иначе
					ЗначениеРеквизита = "";
				КонецЕсли;
			КонецПопытки;
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") Или
					ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Или
					ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда 
					ЗначениеРеквизита = Строка(ЗначениеРеквизита);
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, " ", "");
					ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.НПП, ""); 
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
					ЗначениеРеквизита = Число(ЗначениеРеквизита);
				Иначе 
					ЕстьКод = уатОбщегоНазначения.уатЕстьРеквизитОбъекта("Код", ЗначениеРеквизита.Метаданные()); 
					ЕстьНаименование = уатОбщегоНазначения.уатЕстьРеквизитОбъекта("Наименование", ЗначениеРеквизита.Метаданные());
					Если ЕстьКод Тогда
						Если ЗначениеЗаполнено(ЗначениеРеквизита.Код) Тогда
							ЗначениеРеквизита = ЗначениеРеквизита.Код;
						Иначе     
							ДлинаКода = ЗначениеРеквизита.Метаданные().ДлинаКода;
							СтрокаТрекНомера = "";
							Для Сч = 1 По ДлинаКода Цикл
								СтрокаТрекНомера = СтрокаТрекНомера + "0";
							КонецЦикла;
							ЗначениеРеквизита = СтрокаТрекНомера;
						КонецЕсли;
					ИначеЕсли ЕстьНаименование Тогда
						ЗначениеРеквизита = ЗначениеРеквизита.Наименование;
					Иначе 
						ЗначениеРеквизита = "";	
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначениеРеквизита = "";
			КонецЕсли;  
			
			Если ТипШтрихКода = Перечисления.уатТипыШтрихкодов.GS1_128 Тогда 
				Если ИмяРеквизита = "КоличествоМест" Или ИмяРеквизита = "ВесБрутто" Или ИмяРеквизита = "Объем" Тогда  
					СоответствиеПолейШК.Вставить(ИмяРеквизита, ЗначениеРеквизита);
					Элемент = "";
				КонецЕсли; 
			КонецЕсли; 
			
			Элемент = СтрЗаменить(Элемент, Элемент, ЗначениеРеквизита); 
			
		КонецЕсли;
		
		ЗаполненныйШаблон = ЗаполненныйШаблон + Элемент + ";"; 
		
	КонецЦикла;	
	
	Если СоответствиеПолейШК.Количество() > 0 Тогда
		СтруктураВозврата = Новый Структура("ЗаполненныйШаблон, СоответствиеПолейШК", ЗаполненныйШаблон, СоответствиеПолейШК);
		Возврат СтруктураВозврата;
	Иначе
		Возврат ЗаполненныйШаблон; 
	КонецЕсли;
	
КонецФункции

Функция ЗаполнениеШаблонаЗаказаНаТС(ТекстШаблона, ДанныеОбъекта, НомерСтроки = "", ДлинаУникальногоНомера, ИдентификаторОбъекта = "") 
	
	Результат = ЗаполнитьПоляЗаказа(ТекстШаблона, ДанныеОбъекта);
	
	ВозвращенаСтруктура = ТипЗнч(Результат) = Тип("Структура");
	
	Если ВозвращенаСтруктура Тогда  
		СтруктураПолей = Результат;
		Результат = СтруктураПолей.ЗаполненныйШаблон;
	КонецЕсли;
	
	Результат 		= СтрЗаменить(Результат,"[ПочтовыйИндексПунктаОтправления]", ИндексПункта(ДанныеОбъекта.АдресОтправления));
	Результат 		= СтрЗаменить(Результат,"[ПочтовыйИндексПунктаПрибытия]",ИндексПункта(ДанныеОбъекта.АдресНазначения));
	Результат 		= СтрЗаменить(Результат,"[КодСтраныОтправления]",КодСтраны(ДанныеОбъекта.АдресОтправления));
	Результат 		= СтрЗаменить(Результат,"[КодСтраныНазначения]",КодСтраны(ДанныеОбъекта.АдресНазначения));
	Результат 		= СтрЗаменить(Результат,"[ПорядковыйНомерМесяца]",ПорядковыйНомерМесяцаПечатиШК(ДанныеОбъекта.ОтправлениеС)); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
		УникальныйНомер = УникальныйНомерОтправления(ДанныеОбъекта.УникальныйИдентификатор(), ДлинаУникальногоНомера);
		УникальныйНомер = уатЗащищенныеФункцииСервер_проф.ПриведенноеКДлинеЗначение(УникальныйНомер, ДлинаУникальногоНомера);
	Иначе
		УникальныйНомер = УникальныйНомерОтправления(ИдентификаторОбъекта, ДлинаУникальногоНомера);
		УникальныйНомер = уатЗащищенныеФункцииСервер_проф.ПриведенноеКДлинеЗначение(УникальныйНомер, ДлинаУникальногоНомера);
	КонецЕсли;
	
	Результат 		= СтрЗаменить(Результат,"[УникальныйНомерОтправления]", УникальныйНомер);
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраВнутренняя]", КонтрольнаяЦифраОтправления(УникальныйНомер , "Внутренняя"));
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраМеждународная]", КонтрольнаяЦифраОтправления(УникальныйНомер , "Международная"));
	Результат 		= СтрЗаменить(Результат,"[ПорядковыйНомерГруза]", НомерСтроки);
	Результат 		= СтрЗаменить(Результат, ";", "");
	Результат 		= СтрЗаменить(Результат, " ", "");
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраУниверсальная]", КонтрольнаяЦифраОтправления(Результат, "Универсальная")); 
	
	Если ВозвращенаСтруктура Тогда
		СтруктураПолей.ЗаполненныйШаблон = Результат;
		Возврат СтруктураПолей
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнениеШаблонаПотребностиВПеревозке(ТекстШаблона, ДанныеОбъекта, НомерСтроки = "", ДлинаУникальногоНомера, ИдентификаторОбъекта = "") 
	
	Результат = ЗаполнитьПоляЗаказа(ТекстШаблона, ДанныеОбъекта); 
	
	ВозвращенаСтруктура = ТипЗнч(Результат) = Тип("Структура");
	
	Если ВозвращенаСтруктура Тогда  
		СтруктураПолей = Результат;
		Результат = СтруктураПолей.ЗаполненныйШаблон;
	КонецЕсли;
	
	Результат 		= СтрЗаменить(Результат,"[ПочтовыйИндексПунктаОтправления]", ИндексПункта(ДанныеОбъекта["АдресОтправления"]));
	Результат 		= СтрЗаменить(Результат,"[ПочтовыйИндексПунктаПрибытия]",ИндексПункта(ДанныеОбъекта["АдресНазначения"]));
	Результат 		= СтрЗаменить(Результат,"[КодСтраныОтправления]",КодСтраны(ДанныеОбъекта["АдресОтправления"]));
	Результат 		= СтрЗаменить(Результат,"[КодСтраныНазначения]",КодСтраны(ДанныеОбъекта["АдресНазначения"]));
	Результат 		= СтрЗаменить(Результат,"[ПорядковыйНомерМесяца]",ПорядковыйНомерМесяцаПечатиШК(ДанныеОбъекта["Дата"])); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
		УникальныйНомер = УникальныйНомерОтправления(ДанныеОбъекта["IDСтрокиПотребности"], ДлинаУникальногоНомера);
		УникальныйНомер = уатЗащищенныеФункцииСервер_проф.ПриведенноеКДлинеЗначение(УникальныйНомер, ДлинаУникальногоНомера);
	Иначе
		УникальныйНомер = УникальныйНомерОтправления(ИдентификаторОбъекта, ДлинаУникальногоНомера);
		УникальныйНомер = уатЗащищенныеФункцииСервер_проф.ПриведенноеКДлинеЗначение(УникальныйНомер, ДлинаУникальногоНомера);
	КонецЕсли;
	
	Результат 		= СтрЗаменить(Результат,"[УникальныйНомерОтправления]", УникальныйНомер);
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраВнутренняя]", КонтрольнаяЦифраОтправления(УникальныйНомер , "Внутренняя"));
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраМеждународная]", КонтрольнаяЦифраОтправления(УникальныйНомер , "Международная"));
	Результат 		= СтрЗаменить(Результат,"[ПорядковыйНомерГруза]", НомерСтроки);
	Результат 		= СтрЗаменить(Результат, ";", "");
	Результат 		= СтрЗаменить(Результат, " ", "");
	Результат 		= СтрЗаменить(Результат,"[КонтрольнаяЦифраУниверсальная]", КонтрольнаяЦифраОтправления(Результат, "Универсальная"));
	
	Если ВозвращенаСтруктура Тогда
		СтруктураПолей.ЗаполненныйШаблон = Результат;
		Возврат СтруктураПолей
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ПодставитьПараметрыВШаблон_Справочник_уатСкладскиеЯчейки(Знач ТекстыШаблонов, ДанныеОбъекта, ФормаВызова = Неопределено)
	
	Результат = ТекстыШаблонов;
	
	Результат = СтрЗаменить(Результат, НСтр("en='[Room]';  ru='[Помещение]'"), ДанныеОбъекта.Помещение);
	Результат = СтрЗаменить(Результат, НСтр("en='[Line]';  ru='[Ряд]'"),       ДанныеОбъекта.Ряд);
	Результат = СтрЗаменить(Результат, НСтр("en='[Rack]';  ru='[Стеллаж]'"),   ДанныеОбъекта.Стеллаж);
	Результат = СтрЗаменить(Результат, НСтр("en='[Stage]'; ru='[Ярус]'"),      ДанныеОбъекта.Ярус);
	Результат = СтрЗаменить(Результат, НСтр("en='[Cell]';  ru='[Ячейка]'"),    ДанныеОбъекта.Ячейка);
	Результат = СтрЗаменить(Результат, "[Разделитель]", ДанныеОбъекта.Владелец.РазделительНаименованияЯчеек);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти
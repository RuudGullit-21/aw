////////////////////////////////////////////////////////////////////////////////
// Обработка данных топливо (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция выделяет подмассив из массива.
//
// Параметры:
//  arToSpline	 - Массив	 - Набор данных из которых требуется выделить подмассив.
//  iIndex		 - Число	 - Индекс начала выделения массива.
//  iWindow		 - Число	 - Размер подмассива.
//  iRes		 - Число	 - Результат операции, 0 при успехе.
// 
// Возвращаемое значение:
//  Массив - Подмассив массива.
//
Функция ВыделитьЧастьМассива(arToSpline, iIndex, iWindow, iRes) Экспорт
		
	iRes = -10001;
	
	Если (iIndex + iWindow >= arToSpline.Количество()) ИЛИ (iIndex - iWindow < 0) Тогда 
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверные граничные условия при выделении подмассива'"));
		Возврат Неопределено;
	КонецЕсли;	
		
	iLen = 2 * iWindow + 1;	
	Результат = Новый Массив(iLen);
	
	Для iC = 0 По iLen-1 Цикл
		Результат[iC] = arToSpline[iIndex - iWindow + iC];	
	КонецЦикла;	
	
	iRes = 0;
	
	Возврат Результат;

КонецФункции // ВыделитьЧастьМассива()

// Возвращает медиану переданного массива.
//
// Параметры:
//  arData	 - Массив	 - Набор данных для получения медианы.
// 
// Возвращаемое значение:
//  Число - Значение медианы массива.
//
Функция ПолучитьМедиану(arData) Экспорт
    		
	arData = СортироватьМассив(arData);
	Возврат arData[Цел(arData.Количество()/2)];	

КонецФункции // ПолучитьМедиану()

// Производит обработку данных топливного датчика.
//
// Параметры:
//  пПараметры		 - Структура - параметры расчета топлива:
//  	* НачПериода  	- Дата  - начало интервала.
//  	* КонПериода  	- Дата - конец интервала.
//  	* Объект      	- СправочникСсылка.ItobВодители, 
//			СправочникСсылка.ItobТранспортныеСредства - объект мониторинга.
//  	* Метод       	- Строка - "Моточасы" или "Пробег".
//  ТаблицаДанные	 - ТаблицаЗначений - заполняется данными датчика.
//  ТаблицаЗаправки	 - ТаблицаЗначений - заполняется данными по заправкам и сливам.
//  ТекстОшибки		 - Строка - В случае ошибки переменная содержит текст ошибки.
//  Назначение		 - СправочникСсылка.ItobНазначенияДатчиков - Назначение датчика.
//  Датчик			 - Булево - Расчет по одному датчику.
//  ДопДатчики		 - Массив из СправочникСсылка.СправочникСсылка.ItobДатчики - дополнительные датчики. 
//  ДанныеТерминаловСРассчитаннымиТреками - Соответствие - Список терминалов с данными этих терминалов по периодам:
//		* Ключ - СправочникСсылка - Ссылка на терминал;
//		* Значение - Соответствие:
//			** Ключ - Дата - Период начала интервала набора данных;
//			** Значение - Структура - Данные Терминала.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные по топливу.
//
Функция ПолучитьДанныеТопливо(пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки, Назначение = Неопределено, Датчик = Неопределено, ДопДатчики = Неопределено, ДанныеТерминаловСРассчитаннымиТреками = Неопределено) Экспорт
	
	НачПериода  = пПараметры.НачПериода;
	КонПериода  = пПараметры.КонПериода;
	Объект 		= пПараметры.Объект;
	Метод 		= пПараметры.Метод;
	ТекстОшибки = "";

	РасчетПоОдномуДатчику = ?(Датчик = Неопределено, Ложь, Истина);
	
	СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(НачалоДня(НачПериода)-1, Новый Структура("Объект", Объект));
	Если НЕ ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		ТекстОшибки = НСтр("ru = 'К объекту не привязан терминал!'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Назначение = Неопределено Тогда
		ТекущееНазначение = Справочники.ItobНазначенияДатчиков.Топливо;
	Иначе
		ТекущееНазначение = Назначение;
	КонецЕсли;
	
	Терминал = СрезНаНачало.Терминал;
	УсреднятьДанныеПоНесколькимДатчикам = Терминал.УсреднятьЗначениеПоТопливу;
	
	Если Датчик = Неопределено Тогда 
		Если Назначение = "ПоВсем" Тогда
			СтрокаДатчики = Неопределено;
			Для Каждого ТекСтрокаДатчики Из Терминал.Датчики Цикл
				Если ТекСтрокаДатчики.Назначение.ДатчикТоплива Тогда
					СтрокаДатчики = ТекСтрокаДатчики;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтрокаДатчики = Терминал.Датчики.Найти(ТекущееНазначение,"Назначение");
		КонецЕсли;
	Иначе             
		СтрокаДатчики = Терминал.Датчики.Найти(Датчик, "Датчик");
	КонецЕсли;
	
	Если СтрокаДатчики = Неопределено Тогда
		ТекстОшибкиПоНазначениюДатчика = ?(Назначение = "ПоВсем", "не указано ни одного датчика топлива", 
										   "не указан датчик с назначением """ + Строка(ТекущееНазначение) + """");
		ТекстОшибки = НСтр("ru = 'Для терминала объекта '") + ТекстОшибкиПоНазначениюДатчика;
		
		Возврат Ложь;	
	КонецЕсли;
	
	Датчик 				= СтрокаДатчики.Датчик;
	КалибровочныйГрафик = СтрокаДатчики.КалибровочныйГрафик;
	
	// Проверяем наличие калибровочного графика.
	Если НЕ ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
		ТекстОшибки = НСтр("ru = 'Для терминала объекта не указан калибровочный график!'");
		Возврат Ложь;	
	КонецЕсли;
	
	ТабДатчиков = Новый ТаблицаЗначений;
	ТабДатчиков.Колонки.Добавить("Датчик");
	ТабДатчиков.Колонки.Добавить("КалибровочныйГрафик");
	ТабДатчиков.Колонки.Добавить("ИмяКолонкиЗначение");
	ТабДатчиков.Колонки.Добавить("ТабКалибровки");
	
	Если РасчетПоОдномуДатчику Тогда 
		ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, Датчик, КалибровочныйГрафик);
	Иначе 		
		Для Каждого ТекСтрокаДатчики Из Терминал.Датчики Цикл
			Если  Назначение <> "ПоВсем" И ТекСтрокаДатчики.Назначение = ТекущееНазначение  Тогда 	
				ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, ТекСтрокаДатчики.Датчик, ТекСтрокаДатчики.КалибровочныйГрафик);
			ИначеЕсли Назначение = "ПоВсем" И  ТекСтрокаДатчики.Назначение.ДатчикТоплива Тогда 
				ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, ТекСтрокаДатчики.Датчик, ТекСтрокаДатчики.КалибровочныйГрафик);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	ДатчикЗажигания = Неопределено;
	ИмяКолонкиЗначениеЗажигания = "";
	ДанныеТолькоПриВключенномЗажигании = КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании;
	МассивДатчиков = ТабДатчиков.ВыгрузитьКолонку("Датчик");
	ИсключаемыйПериодПослеВключенияЗажигания = КалибровочныйГрафик.ИсключаемыйПериодПослеВключенияЗажигания; 
	
	Если Метод = "Моточасы" ИЛИ ДанныеТолькоПриВключенномЗажигании ИЛИ ИсключаемыйПериодПослеВключенияЗажигания > 0 Тогда
		СтрокаДатчики = Терминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.Зажигание,"Назначение");
		Если СтрокаДатчики = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Для терминала объекта не указан датчик зажигания!'");
			Возврат Ложь;	
			
		КонецЕсли;
		ДатчикЗажигания = СтрокаДатчики.Датчик;
		МассивДатчиков.Добавить(ДатчикЗажигания);
		ИмяКолонкиЗначениеЗажигания = "Значение"+ДатчикЗажигания.Код;
	
	КонецЕсли;	
	
	РасширениеГраницыЗапроса 	= ?(КалибровочныйГрафик.ДлинаБуфераСглаживания = 0, 40, КалибровочныйГрафик.ДлинаБуфераСглаживания) * 4;
	Если КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании Тогда
		// Непонятно сколько точек брать, по хорошему надо ставить фильтр.
		РасширениеГраницыЗапроса = МАКС(РасширениеГраницыЗапроса, 1500);	
	КонецЕсли;
	
	Если Не ДопДатчики = Неопределено Тогда
		Для Каждого ДопДатчик Из ДопДатчики Цикл
			
			Если МассивДатчиков.Найти(ДопДатчик) = Неопределено Тогда
				МассивДатчиков.Добавить(ДопДатчик);
			КонецЕсли;	
				
		КонецЦикла;
	КонецЕсли;
	ТЗ = ItobОперативныйМониторинг.ПолучитьДанныеДатчикаОбъекта(Объект, НачПериода, КонПериода, МассивДатчиков, РасширениеГраницыЗапроса, ДанныеТерминаловСРассчитаннымиТреками);
	Если ТЗ.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;	
	КонецЕсли;
	ТЗ.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 4)));
	
	Если Метод = "Моточасы" Тогда
		// Считаем моточасы
		Моточасы = 0;
		Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
			Если Счетчик > 0 И ТЗ[Счетчик-1][ИмяКолонкиЗначениеЗажигания] = 1 И ТЗ[Счетчик-1].Период > НачПериода Тогда
				Моточасы = Моточасы + (ТЗ[Счетчик].Период - ТЗ[Счетчик-1].Период); 
			КонецЕсли;
			ТЗ[Счетчик].Пробег = Моточасы/3600;
		КонецЦикла;
	Иначе
		// Подсчет пробега.
		
		МассивШирота  = ТЗ.ВыгрузитьКолонку("Широта");
		МассивДолгота = ТЗ.ВыгрузитьКолонку("Долгота");
		
		Координаты = ItobCsmHandler.НовыйКоординаты(МассивШирота, МассивДолгота);
		Результат = ItobCsmHandler.МассивРасстояний(Координаты);
		
		Результат.Вставить(0, 0);
		ОбщийПробег = 0;
		Для Счетчик = 0 По МИН(Результат.Количество(),ТЗ.Количество())-1 Цикл
			ОбщийПробег 		= ОбщийПробег + Результат[Счетчик];
			ТЗ[Счетчик].Пробег 	= ОбщийПробег/1000;
		КонецЦикла;
				
	КонецЕсли;
	
	МассивУдаления = Новый Массив;
	
	Если ИсключаемыйПериодПослеВключенияЗажигания > 0 Тогда
		СостояниеЗажигания = "";
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			
			Если СтрокаТЗ[ИмяКолонкиЗначениеЗажигания] = 0 Тогда
				СостояниеЗажигания = "ЗажиганиеВыключено";
			ИначеЕсли СостояниеЗажигания = "ЗажиганиеВыключено" Тогда 	
				ВремяВключенияЗажигания = СтрокаТЗ.Период;
				СостояниеЗажигания = "ЗажиганиеВключено";
				МассивУдаления.Добавить(СтрокаТЗ);
			ИначеЕсли СостояниеЗажигания = "ЗажиганиеВключено" И (СтрокаТЗ.Период - ВремяВключенияЗажигания) <= ИсключаемыйПериодПослеВключенияЗажигания Тогда
				МассивУдаления.Добавить(СтрокаТЗ);
			Иначе
				СостояниеЗажигания = "";
			КонецЕсли; 
		КонецЦикла; 		
	КонецЕсли; 
	
	Если ДанныеТолькоПриВключенномЗажигании Тогда
		Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
			Если ТЗ[Счетчик][ИмяКолонкиЗначениеЗажигания] = 0 Тогда
				МассивУдаления.Добавить(ТЗ[Счетчик]);
				Продолжить;
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого СтрУдаления Из МассивУдаления Цикл
		ТЗ.Удалить(СтрУдаления);	
	КонецЦикла;	

	ТаблицаДанные = УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями(ТЗ, ТабДатчиков);
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого СтрДанные Из ТаблицаДанные Цикл		
		ПреобразованноеПоказание = 0;
		Для Каждого СтрДатчики Из ТабДатчиков Цикл
			ПреобразованноеПоказание = ПреобразованноеПоказание
				+ПреобразоватьПоТаблицеКалибровки(СтрДанные[СтрДатчики.ИмяКолонкиЗначение], СтрДатчики.ТабКалибровки);				
			
		КонецЦикла;
		
		СтрДанные.Значение = Окр(ПреобразованноеПоказание /?(УсреднятьДанныеПоНесколькимДатчикам,ТабДатчиков.Количество(),1),2);			
		
	КонецЦикла;
	
	ТекКалибровочныйГрафик = Новый Структура;
	ТекКалибровочныйГрафик.Вставить("Ссылка", КалибровочныйГрафик.Ссылка);
	Для Каждого ТекРеквизит Из Метаданные.Справочники.ItobКалибровочныеГрафики.Реквизиты Цикл
		ТекКалибровочныйГрафик.Вставить(ТекРеквизит.Имя, КалибровочныйГрафик[ТекРеквизит.Имя]);		
	КонецЦикла;
	
	// Усредняем для графика по всем графикам
	Если Назначение = "ПоВсем" Тогда
		УсреднитьДанныеКалибровочногоГрафика(ТекКалибровочныйГрафик, ТабДатчиков);
	КонецЕсли; 
	
	КалибрГрафикМаксВход 	= 0;
	КалибрГрафикМаксВыход 	= 0;		
	ТекКалибровочныйГрафик.СтандартноеОтклонение = РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам(ТабДатчиков);
	ТекКалибровочныйГрафик.ИнтервалОбъединенияМинут = РассчитатьИнтервалОбъединенияМинутПоНесколькимДатчикам(ТабДатчиков);
	ТекКалибровочныйГрафик.Вставить("Показатели", КалибровочныйГрафик.ПолучитьОбъект().Скопировать().Показатели);
	ТекКалибровочныйГрафик.Показатели.Очистить();
					
	НовСтрокаПоказатели 		= ТекКалибровочныйГрафик.Показатели.Добавить();
	НовСтрокаПоказатели.Вход  	= 0;
	НовСтрокаПоказатели.Выход 	= 0;		

	НовСтрокаПоказатели 		= ТекКалибровочныйГрафик.Показатели.Добавить();
	НовСтрокаПоказатели.Вход  	= 100000;
	НовСтрокаПоказатели.Выход 	= 100000;
		
	ТаблицаЗаправки = Неопределено;
	Если НЕ ОбработатьДанныеТопливо(ТаблицаДанные, ТекКалибровочныйГрафик, ТаблицаЗаправки)  Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка обработки данных топлива!'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
	КонецЕсли;
			
	// Удалим данные, которые не попали в интервал
	КоличествоУдаленныхПослеПериода = 0;
	НеобходимоеКоличествоУдаленныхПослеПериода = ?(КалибровочныйГрафик.ДлинаБуфераСглаживания=0,40,КалибровочныйГрафик.ДлинаБуфераСглаживания)*2;
	Пока ТаблицаДанные.Количество() > 0 И ТаблицаДанные[0].Период < НачПериода Цикл
		ТаблицаДанные.Удалить(ТаблицаДанные[0]);	
	КонецЦикла;
	
	Пока ТаблицаДанные.Количество() > 0 И ТаблицаДанные[ТаблицаДанные.Количество()-1].Период > КонПериода Цикл
		ТаблицаДанные.Удалить(ТаблицаДанные[ТаблицаДанные.Количество()-1]);
		КоличествоУдаленныхПослеПериода = КоличествоУдаленныхПослеПериода+1;
	КонецЦикла;
	
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
	КонецЕсли;
	
	КонПериода = ТаблицаДанные[ТаблицаДанные.Количество()-1].Период;
	
	// Удаляем заправки, которые выходят за пределы запрашиваемого периода
	Пока ТаблицаЗаправки.Количество()>0 И ТаблицаЗаправки[0].Период < НачПериода Цикл
		ТаблицаЗаправки.Удалить(ТаблицаЗаправки[0]);	
	КонецЦикла;	
	
	Пока ТаблицаЗаправки.Количество()>0 И ТаблицаЗаправки[ТаблицаЗаправки.Количество()-1].Период > КонПериода Цикл
		ТаблицаЗаправки.Удалить(ТаблицаЗаправки[ТаблицаЗаправки.Количество()-1]);	
	КонецЦикла;	
	
	
	Возврат Истина;			

КонецФункции

// Выделить часть массива и получает медиану.
//
// Параметры:
//  arToSpline	 - Массив	 - Набор данных из которых требуется выделить подмассив.
//  iIndex		 - Число	 - индекс начала выделения массива.
//  iWindow		 - Число	 - окно - размер подмассива.
//  iRes		 - Число	 - результат операции, 0 при успехе.
// 
// Возвращаемое значение:
//  Число - Значение медианы массива.
//
Функция ВыделитьЧастьМассиваИПолучитьМедиану(arToSpline, iIndex, iWindow, iRes)
	МассивДанных = ВыделитьЧастьМассива(arToSpline, 
		ItobОбщегоНазначенияКлиентСервер.МинЗнч(ItobОбщегоНазначенияКлиентСервер.МаксЗнч(iIndex,iWindow),arToSpline.Количество()-1-iWindow),
		iWindow, iRes);
	Возврат ПолучитьМедиану(МассивДанных);
КонецФункции // ПолучитьМедиану()

// Возвращает данные по расходу топлива.
//
// Параметры:
//  ТекущийПодвижныйОбъект	 - СправочникСсылка.ItobВодители, 
//		СправочникСсылка.ItobТранспортныеСредства	 - Указатель на объект мониторинга.
//  ТекущийТерминал			 - СправочникСсылка.ItobТерминалы - Указатель на текущий терминал.
//  НачДата					 - Дата - Начало интервала.
//  КонДата					 - Дата - Конец интервала.
//  ТаблицаИнтервалов		 - ТаблицаЗначений - Таблица интервалов.
// 
// Возвращаемое значение:
//  Структура - Данные по расходу топлива.
//
Функция ПолучитьДанныеПоРасходуТоплива(ТекущийПодвижныйОбъект, ТекущийТерминал, НачДата, КонДата, ТаблицаИнтервалов) Экспорт
	
	ДанныеПоРасходуТопливаРезультат = Новый Структура("ЕстьДанныеПоТопливу,Заправлено,Слито,ТопливоНачало,ТопливоКонец"
		+",Израсходовано,ИзрасходованоВДвижении,ИзрасходованоВПростое,ДанныеВыработки");
	ДанныеПоРасходуТопливаРезультат.ЕстьДанныеПоТопливу = Ложь;
	ДанныеПоРасходуТопливаРезультат.ДанныеВыработки = Новый ТаблицаЗначений;
	ДанныеПоРасходуТопливаРезультат.ДанныеВыработки.Колонки.Добавить("ПараметрВыработки");
	ДанныеПоРасходуТопливаРезультат.ДанныеВыработки.Колонки.Добавить("Значение");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobТерминалыДатчики.Назначение
		|ИЗ
		|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
		|ГДЕ
		|	ItobТерминалыДатчики.Назначение.ДатчикТоплива";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеПоРасходуТопливаРезультат;
	КонецЕсли;
	
	ТаблицаДанные = Неопределено;
	ТаблицаЗаправки = Неопределено;
	ТекстОшибки = "";
	
	ИмяСправочникаПараметрыВыработки = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки");
	
	пПараметры = Новый Структура;
	пПараметры.Вставить("НачПериода", 	НачДата);
	пПараметры.Вставить("КонПериода ", 	КонДата+1);
	пПараметры.Вставить("Объект", 		ТекущийПодвижныйОбъект);
	пПараметры.Вставить("Метод", 		"Пробег");
	Если ПолучитьДанныеТопливо(пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки, "ПоВсем") Тогда
		
		ДанныеПоРасходуТопливаРезультат.ЕстьДанныеПоТопливу = Истина;
		
		ИтогоТопливоПриход = 0;
		ИтогоТопливоРасход = 0;
		
		Для Каждого СтрСливыЗаправки Из ТаблицаЗаправки Цикл						
			ИтогоТопливоПриход = ИтогоТопливоПриход + ?(СтрСливыЗаправки.ТопливоИзменение >= 0, СтрСливыЗаправки.ТопливоИзменение, 0);
			ИтогоТопливоРасход = ИтогоТопливоРасход + ?(СтрСливыЗаправки.ТопливоИзменение < 0, -СтрСливыЗаправки.ТопливоИзменение, 0);			
		КонецЦикла;
		
		МассивДанныхТопливо = ТаблицаДанные.ВыгрузитьКолонку("ЗначениеСглаженное");
		
		ОбъемНаНачало = Неопределено;
		Если НачДата = НачалоДня(НачДата) Тогда		
			ОбъемНаНачало = ПолучитьОстатокТопливаИзРегистраДвижениеТоплива(ТекущийТерминал, НачДата);		
		КонецЕсли;
		Если ОбъемНаНачало = Неопределено Тогда
			iRes = -1;
			МассивДанныхНач = ВыделитьЧастьМассива(МассивДанныхТопливо,3,3,iRes);
			ОбъемНаНачало = ПолучитьМедиану(МассивДанныхНач);		
		КонецЕсли;
		
		ТаблицаИнтервалыТоплива = Неопределено;
		СтруктураРасходаТоплива = ПолучитьРасходыТоплива(ТаблицаИнтервалов, ТаблицаДанные, ТаблицаЗаправки, ОбъемНаНачало, ТаблицаИнтервалыТоплива);
		
		iRes = -1;
		МассивДанныхКон = ВыделитьЧастьМассива(МассивДанныхТопливо,ТаблицаДанные.Количество()-4,3,iRes);
		ОбъемНаКонец = ПолучитьМедиану(МассивДанныхКон);
	
		ОбщийРасходТоплива = ОбъемНаНачало-ОбъемНаКонец+ИтогоТопливоПриход-ИтогоТопливоРасход;
		
		ДанныеПоРасходуТопливаРезультат.Заправлено 	= Окр(ИтогоТопливоПриход,0);
		ДанныеПоРасходуТопливаРезультат.Слито      	= Окр(ИтогоТопливоРасход,0);
		ДанныеПоРасходуТопливаРезультат.ТопливоНачало 	= Окр(ОбъемНаНачало,0);
		ДанныеПоРасходуТопливаРезультат.ТопливоКонец   = Окр(ОбъемНаКонец,0);
		ДанныеПоРасходуТопливаРезультат.Израсходовано 	= Окр(ОбщийРасходТоплива,0);
		ДанныеПоРасходуТопливаРезультат.ИзрасходованоВДвижении = Окр(СтруктураРасходаТоплива.ВДвижении,0);
		ДанныеПоРасходуТопливаРезультат.ИзрасходованоВПростое 	= Окр(СтруктураРасходаТоплива.ВПростое,0);
		
		НовВыработка = ДанныеПоРасходуТопливаРезультат.ДанныеВыработки.Добавить();
		НовВыработка.ПараметрВыработки  = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаДУТ;		
		НовВыработка.Значение =  МАКС(Окр(ОбщийРасходТоплива,0),0);
		
		// Заполнение регистра расходом топлива в движении
		НовВыработка = ДанныеПоРасходуТопливаРезультат.ДанныеВыработки.Добавить();
		НовВыработка.ПараметрВыработки  = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаВДвижении;		
		НовВыработка.Значение =  МАКС(Окр(СтруктураРасходаТоплива.ВДвижении,0),0);
		
		// Заполнение регистра расходом топлива в простое
		НовВыработка = ДанныеПоРасходуТопливаРезультат.ДанныеВыработки.Добавить();
		НовВыработка.ПараметрВыработки  = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаВПростое;		
		НовВыработка.Значение =  МАКС(Окр(СтруктураРасходаТоплива.ВПростое,0),0);
		
	КонецЕсли;
	
	Возврат ДанныеПоРасходуТопливаРезультат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсреднениеДанныхПоНесколькимДатчикам
	
// Усредняем данные для графика по всем графикам
//
Процедура УсреднитьДанныеКалибровочногоГрафика(ТекКалибровочныйГрафик, ТабДатчиков)
	AbsЭлементов = ПолучитьAbsЭлементовСтруктуры(ТабДатчиков);	
	Для Каждого Элемент Из AbsЭлементов Цикл
		ТекКалибровочныйГрафик[Элемент.Ключ] = AbsЭлементов[Элемент.Ключ];		
	КонецЦикла;
КонецПроцедуры

// Скопирует реквизиты калибровочного графика в структуру
//
Функция ПолучитьЧисловуюСтруктуруКалибровочногоГрафика()
	ТекКалибровочныйГрафик = Новый Структура();
	Для Каждого ТекРеквизит Из Метаданные.Справочники.ItobКалибровочныеГрафики.Реквизиты Цикл
		Если Строка(ТекРеквизит.Тип) = "Число" Тогда
			ТекКалибровочныйГрафик.Вставить(ТекРеквизит.Имя, 0);		
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТекКалибровочныйГрафик;
КонецФункции // ПолучитьСтруктуруКалибровочногоГрафика()

// Суммирует данные в массиве структур
//
Функция ПолучитьСуммуЭлементовСтруктуры(ТабДатчиков)
	
	СтруктураГрафик = ПолучитьЧисловуюСтруктуруКалибровочногоГрафика();
	Для Каждого Датчик Из ТабДатчиков Цикл
		КалибровочныйГрафик = Датчик.КалибровочныйГрафик;
		Для Каждого Элемент Из СтруктураГрафик Цикл
			СтруктураГрафик[Элемент.Ключ] = СтруктураГрафик[Элемент.Ключ]+КалибровочныйГрафик[Элемент.Ключ];
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураГрафик;
	
КонецФункции // ()
 
// Суммирует данные в массиве структур
//
Функция ПолучитьAbsЭлементовСтруктуры(ТабДатчиков)
	СуммаЭлементов = ПолучитьСуммуЭлементовСтруктуры(ТабДатчиков);
	Количество = ТабДатчиков.Количество();
	Для Каждого Элемент Из СуммаЭлементов Цикл
		СуммаЭлементов[Элемент.Ключ] = СуммаЭлементов[Элемент.Ключ]/Количество;		
	КонецЦикла;
		
	Возврат СуммаЭлементов;
КонецФункции // ()
 
#КонецОбласти

// Функция возвращает отсортированный массив.
//
// Параметры
//  arTemp  - Массив - Набор данных для сортировки.
//
// Возвращаемое значение:
//  Массив  - Отсортированный массив.
//
Функция СортироватьМассив(arTemp)
    
	ВремТЗ = Новый ТаблицаЗначений;
	ВремТЗ.Колонки.Добавить("Значение");
	Для Счетчик = 0 По arTemp.Количество()-1 Цикл
		ВремТЗ.Добавить();		
	КонецЦикла;
	ВремТЗ.ЗагрузитьКолонку(arTemp, "Значение");
	ВремТЗ.Сортировать("Значение");
	
	Возврат	ВремТЗ.ВыгрузитьКолонку("Значение");

КонецФункции // СортироватьМассив()

// Функция вычисляет стандартное отклонение разницы данных двух массивов.
//
// Параметры
//  arToSpline1,arToSpline2  - Массив - Массивы данных.
//
// Возвращаемое значение:
//  Число   - Стандартное отклонение.
//
Функция ПолучитьСтандартноеОтклонение(arToSpline1, arToSpline2)
    		
	Результат = 0;
	Если arToSpline1.Количество() <> arToSpline2.Количество()
		ИЛИ arToSpline1.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	rDelta = 0;
	
	Для Счетчик = 0 По arToSpline1.Количество()-1 Цикл
		rDelta = rDelta  + ItobОбщегоНазначенияКлиентСервер.МодульЗнч(arToSpline1[Счетчик] - arToSpline2[Счетчик]);
		
	КонецЦикла;
	
	rDelta = rDelta / arToSpline1.Количество();
	
	Результат = Окр(rDelta,3);
	
	Возврат ?(Результат=0,1,Результат);

КонецФункции // ПолучитьСтандартноеОтклонение()

// Функция преобразовывает исходное значение по калибровочному графику.
//
// Параметры
//  Значение 		- Число 			- Исходное значение.
//  ТабКалибровки 	- ТаблицаЗначений 	- Таблица калибровки с колонками Вход, Выход.
//
// Возвращаемое значение:
//   Число   		- преобразованное по калибровочному графику значение.
//
Функция ПреобразоватьПоТаблицеКалибровки(Значение, ТабКалибровки,УсреднятьДанные = Ложь,КоличествоДатчиков = 1)
	
	Для Счетчик = 0 По ТабКалибровки.Количество()-2 Цикл
		Если ТабКалибровки[Счетчик].Вход <= Значение И Значение <= ТабКалибровки[Счетчик+1].Вход Тогда
			
			СтрКалибровки1 = ТабКалибровки[Счетчик];
			СтрКалибровки2 = ТабКалибровки[Счетчик+1];
			
			Преобразование = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход)*Значение
							+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход);
							
			Возврат Окр(Преобразование,2);				
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат 0;

КонецФункции // ПреобразоватьПоТаблицеКалибровки()

// Функция вычисляет заправки и сливы по набору данных датчика топлива.
//
// Параметры
//  fiVolts     - Массив - Набор сырых показаний датчика топлива.
//  arSplineRes - Массив - Набор сглаженных показаний датчика топлива.
//  fiWindow    - Число  - Размер окна сглаживания.
//  fiStDev     - Число  - Стандартное отклонение.
//  frCoefShift - Число  - Множитель - превышение стандартного отклонения.
//  ТаблицаДанных - ТаблицаЗначений - Таблица с данными датчика топлива.
//  ТабКалибровки - ТаблицаЗначений - Калибровочный график - таблица с колонками Вход, Выход.
//  ПорогЗаправки - Число - Минимальное значение заправки.
//  ПорогСлива    - Число - Минимальное значение слива.
//
// Возвращаемое значение:
//  Булево   - результат операции, Истина при успешном выполнении.
//
Функция ПолучитьЗаправкиИСливы(fiParameters, ТаблицаДанных, ТабКалибровки,
	ПорогЗаправки, ПорогСлива, ОкноГраницыЗаправкиСлива, РасчетЗаправкиСливаТолькоСглаженныеДанные, ИнтервалОбъединенияМинут)

	Перем iRes;	
		
	fiVolts 	= fiParameters.fiVolts;
	arSplineRes = fiParameters.arSplineRes;
	fiWindow 	= fiParameters.fiWindow;
	fiStDev 	= fiParameters.fiStDev;
	frCoefShift = fiParameters.frCoefShift;
	
	ТаблицаЗаправкиСливы = Новый ТаблицаЗначений;
	ТаблицаЗаправкиСливы.Колонки.Добавить("Период");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ПериодКон");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоНачало");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоИзменение");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоКонец");
	ТаблицаЗаправкиСливы.Колонки.Добавить("Широта");
	ТаблицаЗаправкиСливы.Колонки.Добавить("Долгота");
	ТаблицаЗаправкиСливы.Колонки.Добавить("МассивЗначенийТопливоНачало");
	ТаблицаЗаправкиСливы.Колонки.Добавить("МассивЗначенийТопливоКонец");
	ТаблицаЗаправкиСливы.Колонки.Добавить("СлужебныйМаксимальноеЗначение");
		
	ТочекНазадКрайнееПревышениеСтандартногоОтклонения = 1000;
	КоличествоЭлементовДанных = fiVolts.Количество();
	
	ЧислоТочекИдентификации = ОкноГраницыЗаправкиСлива-1;
	
	Для Счетчик = fiWindow По arSplineRes.Количество()-fiWindow-2 Цикл
		iDelta = arSplineRes[Счетчик + 1] - arSplineRes[Счетчик];
		
		Если ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta) > fiStDev * frCoefShift 
			И (Счетчик - ОкноГраницыЗаправкиСлива > ЧислоТочекИдентификации)
			И (Счетчик+ОкноГраницыЗаправкиСлива+ЧислоТочекИдентификации < КоличествоЭлементовДанных) Тогда
			
			Попытка
				iL  = ПолучитьМедиану(ВыделитьЧастьМассива(fiVolts    , Счетчик - ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iL1 = ПолучитьМедиану(ВыделитьЧастьМассива(arSplineRes, Счетчик - ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iR  = ПолучитьМедиану(ВыделитьЧастьМассива(fiVolts    , Счетчик + ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iR1 = ПолучитьМедиану(ВыделитьЧастьМассива(arSplineRes, Счетчик + ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
			
			Исключение
				ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Продолжить;
			
			КонецПопытки;			
			
			iDelta  = iR  - iL;
			iDelta1 = iR1 - iL1;
			
			Если (ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta) < ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta1))
				ИЛИ РасчетЗаправкиСливаТолькоСглаженныеДанные Тогда
				
				iDelta = iDelta1;
				ТопливоНачало = ПреобразоватьПоТаблицеКалибровки(iL1, ТабКалибровки);
				ТопливоКонец  = ПреобразоватьПоТаблицеКалибровки(iR1, ТабКалибровки);				
				
			Иначе
				
				ТопливоНачало = ПреобразоватьПоТаблицеКалибровки(iL, ТабКалибровки);
				ТопливоКонец  = ПреобразоватьПоТаблицеКалибровки(iR, ТабКалибровки);				
				
			КонецЕсли;
			
			Если ТочекНазадКрайнееПревышениеСтандартногоОтклонения <=10 Тогда 
				
				НовСтрокаТЗС = ТаблицаЗаправкиСливы[ТаблицаЗаправкиСливы.Количество()-1];
				Если НовСтрокаТЗС.ТопливоИзменение > 0 Тогда
					Если ТопливоКонец > ТопливоНачало Тогда
						НовСтрокаТЗС.ТопливоНачало = ItobОбщегоНазначенияКлиентСервер.МинЗнч(НовСтрокаТЗС.ТопливоНачало, ТопливоНачало);
						НовСтрокаТЗС.ТопливоКонец  = ItobОбщегоНазначенияКлиентСервер.МаксЗнч(НовСтрокаТЗС.ТопливоКонец, ТопливоКонец);
					Иначе
						НовСтрокаТЗС.ТопливоКонец = ТопливоКонец;
					КонецЕсли;
				ИначеЕсли НовСтрокаТЗС.ТопливоИзменение < 0 Тогда
					Если ТопливоНачало > ТопливоКонец Тогда
						НовСтрокаТЗС.ТопливоНачало = ItobОбщегоНазначенияКлиентСервер.МаксЗнч(НовСтрокаТЗС.ТопливоНачало, ТопливоНачало);
						НовСтрокаТЗС.ТопливоКонец  = ItobОбщегоНазначенияКлиентСервер.МинЗнч(НовСтрокаТЗС.ТопливоКонец, ТопливоКонец);
					Иначе
						НовСтрокаТЗС.ТопливоКонец = ТопливоКонец;					
					КонецЕсли;					
				КонецЕсли;
				
				НовСтрокаТЗС.ПериодКон  = ТаблицаДанных[Счетчик].Период;
				
				Если НовСтрокаТЗС.СлужебныйМаксимальноеЗначение < ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta) Тогда
					НовСтрокаТЗС.СлужебныйМаксимальноеЗначение = ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta);
					
					// Координаты на максимальное значение дельты изменения значения топлива.
					НовСтрокаТЗС.Период  = ТаблицаДанных[Счетчик].Период;
					НовСтрокаТЗС.Широта  = ТаблицаДанных[Счетчик].Широта;
					НовСтрокаТЗС.Долгота = ТаблицаДанных[Счетчик].Долгота;
				
				КонецЕсли; 
				
			Иначе
				
				НовСтрокаТЗС = ТаблицаЗаправкиСливы.Добавить();
				
				НовСтрокаТЗС.МассивЗначенийТопливоНачало = Новый Массив;			
				НовСтрокаТЗС.МассивЗначенийТопливоКонец  = Новый Массив;
				
				НовСтрокаТЗС.ТопливоНачало = ТопливоНачало;
				НовСтрокаТЗС.ТопливоКонец = ТопливоКонец;
				
				НовСтрокаТЗС.Период  = ТаблицаДанных[Счетчик].Период;
				НовСтрокаТЗС.Широта  = ТаблицаДанных[Счетчик].Широта;
				НовСтрокаТЗС.Долгота = ТаблицаДанных[Счетчик].Долгота;
				НовСтрокаТЗС.ПериодКон  = ТаблицаДанных[Счетчик].Период;
				
				НовСтрокаТЗС.СлужебныйМаксимальноеЗначение = ItobОбщегоНазначенияКлиентСервер.МодульЗнч(iDelta);
				
			КонецЕсли;						
							
			НовСтрокаТЗС.ТопливоИзменение = НовСтрокаТЗС.ТопливоКонец-НовСтрокаТЗС.ТопливоНачало;
			
			НовСтрокаТЗС.МассивЗначенийТопливоНачало.Добавить(ТопливоНачало);
			НовСтрокаТЗС.МассивЗначенийТопливоКонец.Добавить(ТопливоКонец);
			
			ТочекНазадКрайнееПревышениеСтандартногоОтклонения = 0;
			
		Иначе
			
			ТочекНазадКрайнееПревышениеСтандартногоОтклонения = ТочекНазадКрайнееПревышениеСтандартногоОтклонения+1;
		
		КонецЕсли;
	
	КонецЦикла;
			
	// Объединение сходных строк.
	ИнтервалОбъединенияСекунд = ИнтервалОбъединенияМинут*60;
	Если ИнтервалОбъединенияСекунд=0 Тогда
		ИнтервалОбъединенияСекунд = 30*60;		
	КонецЕсли;
	
	Счетчик = 1;
	Пока Счетчик <= ТаблицаЗаправкиСливы.Количество()-1 Цикл
		
		Если ТаблицаЗаправкиСливы[Счетчик].Период-ТаблицаЗаправкиСливы[Счетчик-1].Период < ИнтервалОбъединенияСекунд Тогда
			ТаблицаЗаправкиСливы[Счетчик-1].ТопливоКонец = ТаблицаЗаправкиСливы[Счетчик].ТопливоКонец;
			ТаблицаЗаправкиСливы[Счетчик-1].ТопливоИзменение = ТаблицаЗаправкиСливы[Счетчик-1].ТопливоКонец-ТаблицаЗаправкиСливы[Счетчик-1].ТопливоНачало;			
			ТаблицаЗаправкиСливы[Счетчик-1].ПериодКон = ТаблицаЗаправкиСливы[Счетчик-1].ПериодКон+Цел(ТаблицаЗаправкиСливы[Счетчик].ПериодКон-ТаблицаЗаправкиСливы[Счетчик-1].ПериодКон);
			Если ТаблицаЗаправкиСливы[Счетчик-1].СлужебныйМаксимальноеЗначение < ТаблицаЗаправкиСливы[Счетчик].СлужебныйМаксимальноеЗначение Тогда
			    ТаблицаЗаправкиСливы[Счетчик-1].СлужебныйМаксимальноеЗначение = ТаблицаЗаправкиСливы[Счетчик].СлужебныйМаксимальноеЗначение;
				ТаблицаЗаправкиСливы[Счетчик-1].Период = ТаблицаЗаправкиСливы[Счетчик].Период;
			    ТаблицаЗаправкиСливы[Счетчик-1].Широта = ТаблицаЗаправкиСливы[Счетчик].Широта;
				ТаблицаЗаправкиСливы[Счетчик-1].Долгота = ТаблицаЗаправкиСливы[Счетчик].Долгота;
			КонецЕсли; 
			
			ТаблицаЗаправкиСливы.Удалить(ТаблицаЗаправкиСливы[Счетчик]);
			
		Иначе			
			Счетчик = Счетчик+1;			
		
		КонецЕсли;		
	
	КонецЦикла;
			
	МассивУдаления = Новый Массив;
	Для Каждого СтрТаб Из ТаблицаЗаправкиСливы Цикл
		Если СтрТаб.ТопливоИзменение < 0 И СтрТаб.ТопливоИзменение > -1*ПорогСлива Тогда // -5
			МассивУдаления.Добавить(СтрТаб);
			
		КонецЕсли;
		
		Если СтрТаб.ТопливоИзменение >= 0 И СтрТаб.ТопливоИзменение < ПорогЗаправки Тогда   // 5
			МассивУдаления.Добавить(СтрТаб);
			
		КонецЕсли;
							
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		ТаблицаЗаправкиСливы.Удалить(СтрокаУдаления);	
	КонецЦикла;
	
	Возврат ТаблицаЗаправкиСливы;

КонецФункции

// Функция обрабатывает данные топлива.
//
// Параметры
//  ТЗ     				- Массив - Набор сырых показаний датчика топлива.
//  КалибровочныйГрафик - Ссылка на справочник ItobКалибровочныйГрафики.
//  ТЗЗаправок 			- ТаблицаЗначений - заполняется данными по заправкам.
//
// Возвращаемое значение:
//  Булево   			- Результат операции, Истина при успешном выполнении.
//
Функция ОбработатьДанныеТопливо(ТЗ, КалибровочныйГрафик, ТЗЗаправок)
			
	ТЗЗаправок = Неопределено;
	
	fiVolts = ТЗ.ВыгрузитьКолонку("Значение");
	
	fiWindow = Цел(?(КалибровочныйГрафик.ДлинаБуфераСглаживания=0,40,КалибровочныйГрафик.ДлинаБуфераСглаживания)/2)+1;// 20;
	frCoefShift = 2;
	
	ТабКалибровки = КалибровочныйГрафик.Показатели.Выгрузить();
	ТабКалибровки.Сортировать("Вход");
	
	Если ТабКалибровки.Количество() < 2 Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен калибровочный график'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	arSplineRes = Новый Массив;
	Для Каждого ЭлементМассива Из fiVolts Цикл
		arSplineRes.Добавить(ЭлементМассива);	
	КонецЦикла;
	
	ТаблицаИнтервала = Новый ТаблицаЗначений;
	ТаблицаИнтервала.Колонки.Добавить("Значение");
	
	iLen = 2 * fiWindow + 1;
	iIndex = fiWindow;
	
	Если fiVolts.Количество() <= 2 * fiWindow Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно данных для анализа! Выберите больший период!'"));
		Возврат Ложь;
	
	КонецЕсли;	
	
	Для Счетчик = 0 По iLen-1 Цикл
		НовСтрокаТаб = ТаблицаИнтервала.Добавить();
		НовСтрокаТаб.Значение = fiVolts[iIndex - fiWindow + Счетчик];	
	КонецЦикла;
	
	Для Счетчик = fiWindow По fiVolts.Количество()-fiWindow-1 Цикл
		
		Если Счетчик > fiWindow Тогда
			ТаблицаИнтервала.Удалить(0);	
			НовСтрТИ = ТаблицаИнтервала.Добавить();			
			НовСтрТИ.Значение = fiVolts[Счетчик - fiWindow + iLen-1];
		
		КонецЕсли;
		
		ВремТЗ = ТаблицаИнтервала.Скопировать();
		
		ВремТЗ.Сортировать("Значение");
		
		arSplineRes[Счетчик] = ВремТЗ[Цел(ВремТЗ.Количество()/2)].Значение;
						
	КонецЦикла;
	
	Если КалибровочныйГрафик.СтандартноеОтклонение=0 Тогда
		fiStDev = ПолучитьСтандартноеОтклонение(fiVolts, arSplineRes);
		
	Иначе
		fiStDev = КалибровочныйГрафик.СтандартноеОтклонение;
	
	КонецЕсли;
	
	Если fiStDev = 0 Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка обработки данных: стандартное отклонение равно нулю'"));		
		Возврат Ложь;
	
	КонецЕсли;
	
	Если КалибровочныйГрафик.ВыводСлужебнойИнформации Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Стандартное отклонение:'")+" "+Окр(fiStDev,2));
	
	КонецЕсли;
				
	ПорогЗаправки = ?(КалибровочныйГрафик.ПорогЗаправки=0,5,КалибровочныйГрафик.ПорогЗаправки);
	ПорогСлива = ?(КалибровочныйГрафик.ПорогСлива=0,5,КалибровочныйГрафик.ПорогСлива);
		ОкноГраницыЗаправкиСлива = ?(КалибровочныйГрафик.ОкноГраницыЗаправкиСлива=0,3,
	КалибровочныйГрафик.ОкноГраницыЗаправкиСлива);
	РасчетЗаправкиСливаТолькоСглаженныеДанные = КалибровочныйГрафик.РасчетЗаправкиСливаТолькоСглаженныеДанные;
	ИнтервалОбъединенияМинут = ?(КалибровочныйГрафик.ИнтервалОбъединенияМинут=0,30,КалибровочныйГрафик.ИнтервалОбъединенияМинут);
	
	fiParameters = Новый Структура;
	fiParameters.Вставить("fiVolts", 	 fiVolts);
	fiParameters.Вставить("arSplineRes", arSplineRes);
	fiParameters.Вставить("fiWindow", 	 fiWindow);
	fiParameters.Вставить("fiStDev", 	 fiStDev);
	fiParameters.Вставить("frCoefShift", frCoefShift);
	ТЗЗаправок = ПолучитьЗаправкиИСливы(fiParameters, ТЗ, ТабКалибровки,
		ПорогЗаправки, ПорогСлива, ОкноГраницыЗаправкиСлива, РасчетЗаправкиСливаТолькоСглаженныеДанные, ИнтервалОбъединенияМинут);
	
	ТЗ.Колонки.Добавить("ЗначениеСглаженное");
	Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
		ТЗ[Счетчик].ЗначениеСглаженное = arSplineRes[Счетчик];	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам(ТабДатчиков)

	Результат = 0;
	
	Для каждого СтрДатчиков Из ТабДатчиков Цикл
		Если СтрДатчиков.КалибровочныйГрафик.СтандартноеОтклонение=0 Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекМаксВход = 0;
		ТекМаксВыход = 0;
		Для каждого СтрПоказатели Из СтрДатчиков.КалибровочныйГрафик.Показатели Цикл
			ТекМаксВход  = МАКС(ТекМаксВход, СтрПоказатели.Вход);
			ТекМаксВыход = МАКС(ТекМаксВыход, СтрПоказатели.Выход);		
		КонецЦикла;
		
		Если ТекМаксВход=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + СтрДатчиков.КалибровочныйГрафик.СтандартноеОтклонение;
	
	КонецЦикла;
	
	Возврат Окр(Результат,4);

КонецФункции // РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам()

Функция РассчитатьИнтервалОбъединенияМинутПоНесколькимДатчикам(ТабДатчиков)

	Результат = 30;
	
	Для каждого СтрДатчиков Из ТабДатчиков Цикл
		ТекущийИнтервалОбъединенияМинут = СтрДатчиков.КалибровочныйГрафик.ИнтервалОбъединенияМинут;
		Если ТекущийИнтервалОбъединенияМинут = 0 Тогда
			ТекущийИнтервалОбъединенияМинут = 30;	
		КонецЕсли;
		
		Результат = МИН(Результат, ТекущийИнтервалОбъединенияМинут);
	
	КонецЦикла;
	
	Возврат Результат;		

КонецФункции // РассчитатьИнтервалОбъединенияМинутПоНесколькимДатчикам()

Функция ПолучитьОстатокТопливаИзРегистраДвижениеТоплива(ТекущийТерминал, НаДату)
	
	Если НЕ НаДату = НачалоДня(НаДату) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЗапросТопливо = Новый Запрос("ВЫБРАТЬ
	                             |	ItobДвижениеТоплива.ТопливоНачало,
	                             |	ItobДвижениеТоплива.ТопливоКонец
	                             |ИЗ
	                             |	РегистрНакопления.ItobДвижениеТоплива КАК ItobДвижениеТоплива
	                             |ГДЕ
	                             |	ItobДвижениеТоплива.Период МЕЖДУ &НачДата И &КонДата
	                             |	И ItobДвижениеТоплива.Терминал = &Терминал");
	ЗапросТопливо.УстановитьПараметр("НачДата", НачалоДня(НаДату-24*3600));
	ЗапросТопливо.УстановитьПараметр("КонДата", КонецДня(НаДату-24*3600));
	ЗапросТопливо.УстановитьПараметр("Терминал", ТекущийТерминал);
	
	ВыборкаТопливо = ЗапросТопливо.Выполнить().Выбрать();
	Если ВыборкаТопливо.Следующий() Тогда
		Результат = ВыборкаТопливо.ТопливоКонец;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьТопливоНаКонецПериода()

Функция ПолучитьРасходыТоплива(ТаблицаИнтервалов, ТаблицаДанные, ТаблицаЗаправки, Знач ОбъемНаНачало, ТаблицаИнтервалыТоплива)
	СтруктураРасходаТоплива = Неопределено;
	ТаблицаИнтервалыТоплива = ПолучитьИнтервалыТоплива(ТаблицаИнтервалов, ТаблицаДанные, ТаблицаЗаправки, ОбъемНаНачало, СтруктураРасходаТоплива);
	Возврат СтруктураРасходаТоплива; 
КонецФункции // ПолучитьРасходыТоплива()

Функция НовыйСтруктураРасходаТоплива()
	Возврат Новый Структура("ВДвижении,ВПростое", 0, 0);
КонецФункции // НовыйСтруктураРасходаТоплива()

Функция ПолучитьПустуюТаблицуИнтервалыТоплива()
	ИнтервалыТоплива = Новый ТаблицаЗначений;
	ИнтервалыТоплива.Колонки.Добавить("ДатаНачало", 		Новый ОписаниеТипов("Дата"));	
	ИнтервалыТоплива.Колонки.Добавить("ДатаКонец", 			Новый ОписаниеТипов("Дата"));	
	ИнтервалыТоплива.Колонки.Добавить("УровеньТопливаНач", 	Новый ОписаниеТипов("Число"));	
	ИнтервалыТоплива.Колонки.Добавить("УровеньТопливаКон", 	Новый ОписаниеТипов("Число"));	
	ИнтервалыТоплива.Колонки.Добавить("ОбъемЗаправок", 		Новый ОписаниеТипов("Число"));	
	ИнтервалыТоплива.Колонки.Добавить("ОбъемСливов", 		Новый ОписаниеТипов("Число"));	
	ИнтервалыТоплива.Колонки.Добавить("РасходТоплива", 		Новый ОписаниеТипов("Число"));	
	ИнтервалыТоплива.Колонки.Добавить("Состояние", 			Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));	
	Возврат ИнтервалыТоплива;
КонецФункции // ПолучитьПустуюТаблицуИнтервалыТоплива()

Функция ПолучитьИнтервалыТоплива(ТаблицаИнтервалов, ТаблицаДанные, ТаблицаЗаправки, УровеньТопливаНач, СтруктураРасходаТоплива = Неопределено)
	СтруктураРасходаТоплива = НовыйСтруктураРасходаТоплива();
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостоянияТерминаловСтоянка  = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	ТаблицаДанныеИндекс = 0;
	ТаблицаЗаправкиИндексНачало = 0;
	ТаблицаЗаправкиИндексКонец = 0;
	МассивДанные = ТаблицаДанные.ВыгрузитьКолонку("ЗначениеСглаженное");
	
	СдвинутыеЗаправкиСливы = Неопределено;
	
	ИнтервалТоплива = Неопределено;
	
	ИнтервалыТоплива = ПолучитьПустуюТаблицуИнтервалыТоплива();
	Для Каждого Интервал Из ТаблицаИнтервалов Цикл
		ТаблицаДанныеИндекс = ТаблицаДанныеПолучитьИндекс(ТаблицаДанные, ТаблицаДанныеИндекс, Интервал.ВремяКон);
		
		Если ТаблицаДанныеИндекс = Неопределено Тогда
		    ТаблицаДанныеИндекс = ТаблицаДанные.Количество()-1;
		КонецЕсли; 
		
		ИнтервалТоплива = ИнтервалыТоплива.Добавить();
		ИнтервалТоплива.Состояние = Интервал.Состояние;
		ИнтервалТоплива.ДатаНачало = Интервал.ВремяНач;
		ИнтервалТоплива.ДатаКонец = Интервал.ВремяКон;
		ИнтервалТоплива.УровеньТопливаНач = УровеньТопливаНач;
		ИнтервалТоплива.УровеньТопливаКон = ВыделитьЧастьМассиваИПолучитьМедиану(МассивДанные,ТаблицаДанныеИндекс,3,-1);
		ЗаправкаИСливы = ПолучитьОбъемыЗаправокИСливов(ТаблицаЗаправки, ИнтервалТоплива.ДатаНачало, ИнтервалТоплива.ДатаКонец);
		Если Не СдвинутыеЗаправкиСливы = Неопределено Тогда
			ЗаправкаИСливы.ОбъемЗаправок = ЗаправкаИСливы.ОбъемЗаправок+СдвинутыеЗаправкиСливы.ОбъемЗаправок;
			ЗаправкаИСливы.ОбъемСливов   = ЗаправкаИСливы.ОбъемСливов+СдвинутыеЗаправкиСливы.ОбъемСливов;
			СдвинутыеЗаправкиСливы = Неопределено;
		КонецЕсли;
		Если ЗаправкаИСливы.ОбъемЗаправок > 0 
			И (ИнтервалТоплива.УровеньТопливаНач >= ИнтервалТоплива.УровеньТопливаКон) Тогда
			// Заправку сдвинуть в следующий интервал
			СдвинутыеЗаправкиСливы = ЗаправкаИСливы;
			ИнтервалТоплива.ОбъемЗаправок = 0;
			ИнтервалТоплива.ОбъемСливов   = 0;
		Иначе
			ИнтервалТоплива.ОбъемЗаправок = ЗаправкаИСливы.ОбъемЗаправок;
			ИнтервалТоплива.ОбъемСливов = ЗаправкаИСливы.ОбъемСливов;
		КонецЕсли;		
		
		ИнтервалТоплива.РасходТоплива = ПолучитьОбщийРасходТоплива(ИнтервалТоплива);
				
		Если ИнтервалТоплива.РасходТоплива < 0 Тогда
			
			// Это статистические ошибки определения уровня топлива.
			// Ставим расход топлива для данного интервала как 0.
			ИнтервалТоплива.РасходТоплива = 0;
			ИнтервалТоплива.УровеньТопливаКон = ИнтервалТоплива.УровеньТопливаНач + ИнтервалТоплива.ОбъемЗаправок - ИнтервалТоплива.ОбъемСливов;
		
		КонецЕсли;
		
		УровеньТопливаНач = ИнтервалТоплива.УровеньТопливаКон;
				
	КонецЦикла;
	
	// Если нет ни одного интервала.
	Если Не ИнтервалТоплива = Неопределено Тогда
	
		// Если в анализе расхода топлива есть несоответствия в сумме по простою и движению с итогом.
		УровеньТопливаКон = ВыделитьЧастьМассиваИПолучитьМедиану(МассивДанные,ТаблицаДанные.Количество()-4,3,-1);
		СписываемоеТопливо = УровеньТопливаКон - ИнтервалТоплива.УровеньТопливаКон;
		Если СписываемоеТопливо > 0 Тогда
			ИнтервалыТопливаКоличество = ИнтервалыТоплива.Количество() -1;
			Для Счетчик = 0 По ИнтервалыТопливаКоличество Цикл
			    ИнтервалТоплива = ИнтервалыТоплива[ИнтервалыТопливаКоличество-Счетчик];
				РасходТоплива = ИнтервалТоплива.РасходТоплива;
				РазницаТоплива = ИнтервалТоплива.УровеньТопливаКон - ИнтервалТоплива.УровеньТопливаНач + РасходТоплива;
				Если РасходТоплива = 0 Тогда
					ИнтервалТоплива.УровеньТопливаКон = УровеньТопливаКон;
					ИнтервалТоплива.УровеньТопливаНач = ИнтервалТоплива.УровеньТопливаКон - РазницаТоплива;
					УровеньТопливаКон = ИнтервалТоплива.УровеньТопливаНач;
				Иначе
					Если СписываемоеТопливо < РасходТоплива Тогда
					    ИнтервалТоплива.УровеньТопливаКон = УровеньТопливаКон;
						ИнтервалТоплива.РасходТоплива = РасходТоплива-СписываемоеТопливо;
						Прервать;
					Иначе
						СписываемоеТопливо = СписываемоеТопливо - РасходТоплива;
						ИнтервалТоплива.УровеньТопливаКон = УровеньТопливаКон;
						ИнтервалТоплива.УровеньТопливаНач = ИнтервалТоплива.УровеньТопливаКон - РазницаТоплива;
						ИнтервалТоплива.РасходТоплива = 0;
						УровеньТопливаКон = ИнтервалТоплива.УровеньТопливаНач;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
			
	КонецЕсли; 
	
	
	Для каждого СтрИнтервал Из ИнтервалыТоплива Цикл	
		Если СтрИнтервал.Состояние = СостоянияТерминаловДвижение Тогда
		    СтруктураРасходаТоплива.ВДвижении = СтруктураРасходаТоплива.ВДвижении + СтрИнтервал.РасходТоплива;
		ИначеЕсли СтрИнтервал.Состояние = СостоянияТерминаловСтоянка Тогда
		    СтруктураРасходаТоплива.ВПростое  = СтруктураРасходаТоплива.ВПростое + СтрИнтервал.РасходТоплива;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ИнтервалыТоплива;
КонецФункции

Функция ТаблицаДанныеПолучитьИндекс(ТаблицаДанные, ТаблицаДанныеИндекс, Период)
	ТаблицаДанныеКоличество = ТаблицаДанные.Количество()-1;
	Для Счетчик = ТаблицаДанныеИндекс По ТаблицаДанныеКоличество Цикл
		Если ТаблицаДанные[Счетчик].Период > Период Тогда
			Возврат ItobОбщегоНазначенияКлиентСервер.МаксЗнч(Счетчик-1, 0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьОбщийРасходТоплива(ИнтервалТоплива)
	Возврат ИнтервалТоплива.УровеньТопливаНач-ИнтервалТоплива.УровеньТопливаКон+ИнтервалТоплива.ОбъемЗаправок-ИнтервалТоплива.ОбъемСливов;
КонецФункции // ПолучитьРасходТоплива()

Функция ПолучитьОбъемыЗаправокИСливов(ТаблицаЗаправки, ДатаНачало, ДатаКонец)
	
	ОбъемЗаправок = 0;
	ОбъемСливов = 0;
	
	Для Каждого Заправка Из ТаблицаЗаправки Цикл
		Если Заправка.Период > ДатаНачало И Заправка.Период <= ДатаКонец Тогда
			Если Заправка.ТопливоИзменение > 0 Тогда
			    ОбъемЗаправок = ОбъемЗаправок+Заправка.ТопливоИзменение;
			Иначе	
			    ОбъемСливов = ОбъемСливов-Заправка.ТопливоИзменение;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат Новый Структура("ОбъемЗаправок, ОбъемСливов", ОбъемЗаправок, ОбъемСливов);
	
КонецФункции

Функция УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями(ТЗ, ТабДатчиков)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтрУсловияЗапроса = "";
	Для Каждого СтрТабДатчиков Из ТабДатчиков Цикл
		КодДатчика = Формат(СтрТабДатчиков.Датчик.Код,"ЧН=0; ЧГ=0");
		
		Если СтрТабДатчиков.ТабКалибровки.Количество() < 2 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен калибровочный график'")+" """+СтрТабДатчиков.КалибровочныйГрафик+"""";
			Возврат Новый ТаблицаЗначений;
			
		КонецЕсли;
		
		НижняяГраница  = СтрТабДатчиков.ТабКалибровки[0].Вход;
		ВерхняяГраница = СтрТабДатчиков.ТабКалибровки[СтрТабДатчиков.ТабКалибровки.Количество()-1].Вход;
		
		СтрУсловияЗапроса = ?(СтрУсловияЗапроса="","",СтрУсловияЗапроса+Символы.ПС+"	И ")
			+"ТабДанных."+СтрТабДатчиков.ИмяКолонкиЗначение+" МЕЖДУ &НижняяГраница"+КодДатчика+" И &ВерхняяГраница"+КодДатчика;
			
		Запрос.УстановитьПараметр("НижняяГраница"+КодДатчика, НижняяГраница);
		Запрос.УстановитьПараметр("ВерхняяГраница"+КодДатчика, ВерхняяГраница);
	
	КонецЦикла;
		
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
    Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	*
	               |ИЗ
	               |	ТЗ КАК ТабДанных	               
	               |ГДЕ
				   |	ТабДанных.Широта <> 0
				   |	И ТабДанных.Долгота <> 0
	               |	И &УсловияЗапроса
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", СтрУсловияЗапроса);	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями()

Процедура ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, Датчик, КалибровочныйГрафик)

	НовСтрокаДатчиков = ТабДатчиков.Добавить();
	НовСтрокаДатчиков.Датчик = Датчик; 
	НовСтрокаДатчиков.КалибровочныйГрафик = КалибровочныйГрафик; 
	НовСтрокаДатчиков.ИмяКолонкиЗначение = "Значение"+Формат(Датчик.Код,"ЧН=0; ЧГ=0"); 
	НовСтрокаДатчиков.ТабКалибровки = КалибровочныйГрафик.Показатели.Выгрузить();
	НовСтрокаДатчиков.ТабКалибровки.Сортировать("Вход");	

КонецПроцедуры

#КонецОбласти

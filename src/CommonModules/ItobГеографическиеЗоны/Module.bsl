////////////////////////////////////////////////////////////////////////////////
// Географические зоны (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриЗаписи.
//
// Параметры:
//	Источник - СправочникОбъект.ItobГеографическиеЗоны - Записываемый объект.
//	Отказ	 - Булево - признак отказа от записи.
//
Процедура ГеографическиеЗоныПриЗаписи(Источник, Отказ) Экспорт
	
	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ItobЦентрСпутниковогоМониторингаПереопределяемый.ЗаписьГеографическойЗоны(Источник, Отказ, ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 

	Если ИспользоватьОбработчикЦСМ Тогда	
		Если ItobОбщегоНазначения.ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса(Источник) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
		 		
КонецПроцедуры

// Обработчик создания на сервере для Рабочего места диспетчера.
//
// Параметры:
//  Форма	 - 	УправляемаяФорма - Исходная форма.
//
Процедура РабочееМестоДиспетчераПриСозданииНаСервере(Форма) Экспорт
	
	// ВыбраннаяГеографическаяЗона
	ItobОбщегоНазначения.ДобавитьРеквизитНаФорму(Форма, "ВыбраннаяГеографическаяЗона","СправочникСсылка."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны"));
	
	// ПодменюГеографическойЗоны
	//ГеографическиеЗоныПодменю = ItobОбщегоНазначения.ДобавитьГруппуНаФорму(Форма, "ГеографическиеЗоныПодменю", Форма.Элементы.ГруппаКнопкиКоманднойПанелиКарты,Новый Структура("Заголовок", "Зоны"));
	//
	//
	// ГруппаВсе
	//ГеографическиеЗоныГруппаВсе = ItobОбщегоНазначения.ДобавитьГруппуНаФорму(Форма, "ГеографическиеЗоныГруппаВсе", ГеографическиеЗоныПодменю,  Новый Структура("Вид", ВидГруппыФормы.ГруппаКнопок));
	//
	//
	// ГруппаПользовательские
	//ГеографическиеЗоныГруппаПользовательские = ItobОбщегоНазначения.ДобавитьГруппуНаФорму(Форма, "ГеографическиеЗоныГруппаПользовательские", ГеографическиеЗоныПодменю, Новый Структура("Вид", ВидГруппыФормы.ГруппаКнопок));
	//
	//
	
	ГеографическиеЗоныПодменю = Форма.Элементы.ГеографическиеЗоныПодменю;
	ГеографическиеЗоныГруппаВсе = Форма.Элементы.ГеографическиеЗоныГруппаВсе;
	ГеографическиеЗоныГруппаПользовательские = Форма.Элементы.ГеографическиеЗоныГруппаПользовательские;
	
	// СоздатьГеографическуюЗону	
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныСоздать", "Подключаемый_ГеографическиеЗоныСоздать",Новый Структура("Заголовок", НСтр("ru = 'Создать географическую зону'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныСоздать", Тип("КнопкаФормы"),ГеографическиеЗоныПодменю, Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("СоздатьЭлементСписка")));
	
	// РедактироватьГеографическуюЗону
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныРедактировать", "Подключаемый_ГеографическиеЗоныРедактировать", Новый Структура("Заголовок",НСтр("ru = 'Редактировать географическую зону'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныРедактировать", Тип("КнопкаФормы"),ГеографическиеЗоныПодменю,Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("Изменить")));
	
	// ПросмотрГеографическойЗоны
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныПросмотреть", "Подключаемый_ГеографическиеЗоныПросмотреть", Новый Структура("Заголовок",НСтр("ru = 'Просмотр географической зоны'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныПросмотреть", Тип("КнопкаФормы"),ГеографическиеЗоныПодменю,Новый Структура("ИмяКоманды",Команда.Имя));
	
	// СохранитьГеографическуюЗону
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныСохранить", "Подключаемый_ГеографическиеЗоныСохранить", Новый Структура("Заголовок",НСтр("ru = 'Сохранить географическую зону'")));
	Кнопка = ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныСохранить", Тип("КнопкаФормы"),ГеографическиеЗоныПодменю,Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("СохранитьФайл")));
	Кнопка.Доступность = Ложь;
		
	// ВсеГеографическиеЗоны
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныВсе", "Подключаемый_ГеографическиеЗоныВсе",Новый Структура("Заголовок", НСтр("ru = 'Все'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныВсе", Тип("КнопкаФормы"), ГеографическиеЗоныГруппаВсе, Новый Структура("ИмяКоманды",Команда.Имя));
	
	// СнятьВсеГеографическиеЗоны
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ГеографическиеЗоныСнятьВсе", "Подключаемый_ГеографическиеЗоныСнятьВсе",Новый Структура("Заголовок", НСтр("ru = 'Скрыть все'")));
	ЭлементКоманда = ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ГеографическиеЗоныСнятьВсе", Тип("КнопкаФормы"), ГеографическиеЗоныГруппаВсе, Новый Структура("ИмяКоманды",Команда.Имя));	
	
	// Заполнение пользовательских фильтров пунктов назначения
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ФильтрыНаКартах") Тогда
		МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
		МодульФильтрыНаКартах.ЗаполнитьФильтрыПользовательские(Форма, ГеографическиеЗоныГруппаПользовательские, Перечисления.ItobВидыФильтровНаКартах.ГеографическиеЗоны);
	
		ItobОбщегоНазначенияКлиентСервер.ОбновитьПометкуЭлемента(Форма, 
																"ГеографическиеЗоныГруппаВсе", 
																"ГеографическиеЗоныГруппаПользовательские", 
																ЭлементКоманда);
		Кнопка = ItobОбщегоНазначения.ДобавитьКнопкуНаФорму(Форма, "ГеогафическиеЗоны_Настройки", "Подключаемый_ГеографическиеЗоны_Установить", ГеографическиеЗоныПодменю, Новый Структура("Заголовок", НСтр("ru = 'Настройки'")));
		Кнопка.Картинка = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("ПрочиеПользовательскиеНастройки");
	КонецЕсли;
	
	// ОткрытьОтчетАнализПосещенияГеографическихЗон. 
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ОткрытьОтчетАнализПосещенияГеографическихЗон", "Подключаемый_ОткрытьОтчетАнализПосещенияГеографическихЗон",Новый Структура("Заголовок",НСтр("ru = 'Анализ посещения географических зон'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ДеревоОбъектовМониторингаОткрытьОтчетАнализПосещенияГеографическихЗон", Тип("КнопкаФормы"),Форма.Элементы.Подключаемый_Отчеты,Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("Отчет")));
	
	// ОткрытьОтчетМаршрутПоГеографическимЗонам. 
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ОткрытьОтчетМаршрутПоГеографическимЗонам", "Подключаемый_ОткрытьОтчетМаршрутПоГеографическимЗонам",Новый Структура("Заголовок", НСтр("ru = 'Маршрут по географическим зонам'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ДеревоОбъектовМониторингаОткрытьОтчетМаршрутПоГеографическимЗонам", Тип("КнопкаФормы"),Форма.Элементы.Подключаемый_Отчеты, Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("Отчет")));
	
	// ОткрытьОтчетПосещениеГеографическихЗон. 
	Команда = ItobОбщегоНазначения.ДобавитьКомандуНаФорму(Форма, "ОткрытьОтчетПосещениеГеографическихЗон", "Подключаемый_ОткрытьОтчетПосещениеГеографическихЗон",Новый Структура("Заголовок",НСтр("ru = 'Посещение географических зон'")));
	ItobОбщегоНазначения.ДобавитьЭлементНаФорму(Форма, "ДеревоОбъектовМониторингаОткрытьОтчетПосещениеГеографическихЗон", Тип("КнопкаФормы"),Форма.Элементы.Подключаемый_Отчеты,Новый Структура("ИмяКоманды,Картинка",Команда.Имя,ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("Отчет")));
	
КонецПроцедуры

#КонецОбласти 

// Функция - Параметры проверяемой зоны
// 
// Возвращаемое значение:
//	Структура 
//
Функция ПараметрыПроверяемойЗоны() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ШиротыЗоны");
	Параметры.Вставить("ДолготыЗоны");
	
	// Требуются только для быстрой проверки. Необязательны (в таком случае следует оставить значения = Неопределено).
	Параметры.Вставить("МинШирота");	
	Параметры.Вставить("МаксШирота");
	Параметры.Вставить("МинДолгота");
	Параметры.Вставить("МаксДолгота");
	
	
	Возврат Параметры;
	
КонецФункции
 
// Проверка вхождения точки с координатами (широта; долгота) в произвольную 
// область (в частном случае, в географическую зону).
//
// Параметры:
//	Широта  - Число - координата по оси ординат у проверяемой точки.
//	Долгота - Число - координата по оси абсцисс у проверяемой точки.
//	ПараметрыПроверяемойЗоны - Структура - Структура параметров произвольной области:
//		* МинШирота	  - Число - Минимальная координата по оси ординат. Используется для быстрой проверки вхождения в область.
//		* МинДолгота  - Число - Минимальная координата по оси абсцисс. Используется для быстрой проверки вхождения в область.
//		* МаксШирота  - Число - Максимальная координата по оси ординат. Используется для быстрой проверки вхождения в область.
//		* МаксДолгота - Число - Максимальная координата по оси абсцисс. Используется для быстрой проверки вхождения в область.
//		* МассивХ	  - Массив из Число - иксовые координаты всех точек области.
//		* МассивУ	  - Массив из Число - игрековые координаты всех точек области.
// 
// Возвращаемое значение:
//	Булево - Признак вхождения точки в географическую зону.
//
Функция ТочкаВГеозоне(Широта, Долгота, ПараметрыПроверяемойЗоны) Экспорт
	
	Если Широта = Неопределено
		 ИЛИ Долгота = Неопределено Тогда
		
		Возврат Ложь;	
	КонецЕсли;
	
	РезультатБыстройПроверки = Истина;
	Если НЕ ПараметрыПроверяемойЗоны.МинШирота = Неопределено Тогда
		РезультатБыстройПроверки = (ПараметрыПроверяемойЗоны.МинШирота <= Широта
									И ПараметрыПроверяемойЗоны.МаксШирота >= Широта
									И ПараметрыПроверяемойЗоны.МинДолгота <= Долгота
									И ПараметрыПроверяемойЗоны.МаксДолгота >= Долгота);		
	КонецЕсли;
	
	
	Если НЕ РезультатБыстройПроверки Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	
	Возврат ТочкаВнутриГеографическойЗоны(Широта, Долгота, ПараметрыПроверяемойЗоны.ШиротыЗоны, ПараметрыПроверяемойЗоны.ДолготыЗоны);
	
КонецФункции

// Подбирает геозону по точному попаданию в ее координаты (не ищет ближайшие к запрашиваемой точке).
//	Учитывает сложную форму геозон и их иерархию.
//
// Параметры:
//	Широта - Число - координата по оси ординат у проверяемой точки.
//	Долгота - Число - координата по оси абсцисс у проверяемой точки.
//
// Возвращаемое значение:
//	СправочникСсылка.ItobГеографическиеЗоны - Ссылка на геозону, в которую вошла рассматриваемая точка. 
//			 Если точка не вошла ни в одну геозону, возвращается Неопределено.
//
Функция СтрогийПоискГеозоны(Широта, Долгота) Экспорт
	
	ТаблицаГеографическихЗон = Новый ТаблицаЗначений;
	ТаблицаГеографическихЗон.Колонки.Добавить("ГеографическаяЗона");
	ТаблицаГеографическихЗон.Колонки.Добавить("МинШирота");
	ТаблицаГеографическихЗон.Колонки.Добавить("МинДолгота");	
	ТаблицаГеографическихЗон.Колонки.Добавить("МаксШирота");
	ТаблицаГеографическихЗон.Колонки.Добавить("МаксДолгота");	
	ТаблицаГеографическихЗон.Колонки.Добавить("Уровень");	
	ТаблицаГеографическихЗон.Колонки.Добавить("МассивХ");
	ТаблицаГеографическихЗон.Колонки.Добавить("МассивУ");		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Широта);
	Запрос.УстановитьПараметр("Долгота", Долгота);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона КАК Ссылка,
	               |	ItobТочкиГеографическихЗон.НомерТочки КАК НомерСтроки,
	               |	ItobТочкиГеографическихЗон.Широта,
	               |	ItobТочкиГеографическихЗон.Долгота
	               |ИЗ
	               |	РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobПараметрыГеографическихЗон КАК ItobПараметрыГеографическихЗон
	               |		ПО ItobТочкиГеографическихЗон.ГеографическаяЗона = ItobПараметрыГеографическихЗон.ГеографическаяЗона
	               |ГДЕ
	               |	НЕ ItobТочкиГеографическихЗон.ГеографическаяЗона.ПометкаУдаления
	               |	И ЕСТЬNULL(ItobПараметрыГеографическихЗон.ИспользоватьПриГеокодировании, ЛОЖЬ)
	               |	И ItobТочкиГеографическихЗон.ГеографическаяЗона В
	               |			(ВЫБРАТЬ
	               |				ItobТочкиГеографическихЗон.ГеографическаяЗона
	               |			ИЗ
	               |				РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	               |			СГРУППИРОВАТЬ ПО
	               |				ItobТочкиГеографическихЗон.ГеографическаяЗона
	               |			ИМЕЮЩИЕ
	               |				&Широта МЕЖДУ МИНИМУМ(ItobТочкиГеографическихЗон.Широта) И МАКСИМУМ(ItobТочкиГеографическихЗон.Широта)
	               |					И (&Долгота МЕЖДУ МИНИМУМ(ItobТочкиГеографическихЗон.Долгота) И МАКСИМУМ(ItobТочкиГеографическихЗон.Долгота))
	               |					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ItobТочкиГеографическихЗон.НомерТочки) >= 3)
	               |	И ItobТочкиГеографическихЗон.ГеографическаяЗона ССЫЛКА Справочник.ItobГеографическиеЗоны
	               |ИТОГИ ПО
	               |	Ссылка";		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ItobГеографическиеЗоны", "Справочник."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны")); 			   
	
	ВыборкаПоЗонам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоЗонам.Следующий() Цикл
		
		ВыборкаПоТочкам = ВыборкаПоЗонам.Выбрать();
		Если ВыборкаПоТочкам.Количество() = 0 Тогда
			Продолжить;
			
		КонецЕсли;
		
		НовСтрока = ТаблицаГеографическихЗон.Добавить();
		НовСтрока.ГеографическаяЗона = ВыборкаПоЗонам.Ссылка;
		НовСтрока.Уровень = ВыборкаПоЗонам.Ссылка.Уровень();
		НовСтрока.МассивХ = Новый Массив;
		НовСтрока.МассивУ = Новый Массив;		
		
		Пока ВыборкаПоТочкам.Следующий() Цикл				
			НовСтрока.МассивХ.Добавить(ВыборкаПоТочкам.Долгота);
			НовСтрока.МассивУ.Добавить(ВыборкаПоТочкам.Широта);
			
		КонецЦикла;
		
		НовСтрока.МассивХ.Добавить(НовСтрока.МассивХ[0]);
		НовСтрока.МассивУ.Добавить(НовСтрока.МассивУ[0]);		
		
	КонецЦикла;
	
	ТаблицаГеографическихЗон.Сортировать("Уровень Убыв");
	
	Результат = Неопределено;		
	Для каждого СтрЗоны Из ТаблицаГеографическихЗон Цикл
		ПараметрыГеозоны = ПараметрыПроверяемойЗоны();
		ПараметрыГеозоны.ШиротыЗоны = СтрЗоны.МассивУ;
		ПараметрыГеозоны.ДолготыЗоны = СтрЗоны.МассивХ;
		Если ТочкаВГеозоне(Широта, Долгота, ПараметрыГеозоны) Тогда		
			Результат =  СтрЗоны.ГеографическаяЗона;				
				
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	
	Возврат Результат;	
	
КонецФункции

// Получает таблицу географических зон.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица географических зон.
//
Функция ПолучитьГеографическиеЗоны() Экспорт

	ИмяСправочникаПараметрыВыработки = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки");
	ИмяСправочникаГеографическиеЗоны = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона КАК Ссылка,
	               |	ItobТочкиГеографическихЗон.НомерТочки КАК НомерСтроки,
	               |	ItobТочкиГеографическихЗон.Широта КАК Широта,
	               |	ItobТочкиГеографическихЗон.Долгота КАК Долгота,
	               |	ItobТочкиГеографическихЗон.Широта КАК Широта1,
	               |	ItobТочкиГеографическихЗон.Долгота КАК Долгота1
	               |ИЗ
	               |	РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	               |ГДЕ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона В
	               |			(ВЫБРАТЬ
	               |				ПараметрыВыработкиУсловияОтбора.Значение
	               |			ИЗ
	               |				Справочник.ItobПараметрыВыработки.УсловияОтбора КАК ПараметрыВыработкиУсловияОтбора
	               |			ГДЕ
	               |				НЕ ПараметрыВыработкиУсловияОтбора.Ссылка.ПометкаУдаления
	               |				И ПараметрыВыработкиУсловияОтбора.Показатель = ""Местонахождение"")
	               |	И ItobТочкиГеографическихЗон.ГеографическаяЗона ССЫЛКА Справочник.ItobГеографическиеЗоны
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |ИТОГИ
	               |	МИНИМУМ(Широта),
	               |	МИНИМУМ(Долгота),
	               |	МАКСИМУМ(Широта) КАК Широта1,
	               |	МАКСИМУМ(Долгота) КАК Долгота1
	               |ПО
	               |	Ссылка";	
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobПараметрыВыработки", ИмяСправочникаПараметрыВыработки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ItobГеографическиеЗоны", "Справочник."+ИмяСправочникаГеографическиеЗоны); 			   
		
	Возврат ПолучитьГеографическиеЗоныОбработкаЗапроса(Запрос);

КонецФункции

// Получает таблицу географических зон с отбором по событиям.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица географических зон с отбором по событиям.
//
Функция ПолучитьГеографическиеЗоныСобытия() Экспорт

	ИмяСправочникаГеографическиеЗоны = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона КАК Ссылка,
	               |	ItobТочкиГеографическихЗон.НомерТочки КАК НомерСтроки,
	               |	ItobТочкиГеографическихЗон.Широта КАК Широта,
	               |	ItobТочкиГеографическихЗон.Долгота КАК Долгота,
	               |	ItobТочкиГеографическихЗон.Широта КАК Широта1,
	               |	ItobТочкиГеографическихЗон.Долгота КАК Долгота1
	               |ИЗ
	               |	РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	               |ГДЕ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона В
	               |			(ВЫБРАТЬ
	               |				ПараметрыВыработкиУсловияОтбора.Значение
	               |			ИЗ
	               |				Документ.ItobПодпискаНаСобытие.УсловияОтбора КАК ПараметрыВыработкиУсловияОтбора
	               |			ГДЕ
	               |				НЕ ПараметрыВыработкиУсловияОтбора.Ссылка.ПометкаУдаления
	               |				И ПараметрыВыработкиУсловияОтбора.Показатель = ""Местонахождение"")
	               |	И ItobТочкиГеографическихЗон.ГеографическаяЗона ССЫЛКА Справочник.ItobГеографическиеЗоны
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |ИТОГИ
	               |	МИНИМУМ(Широта),
	               |	МИНИМУМ(Долгота),
	               |	МАКСИМУМ(Широта) КАК Широта1,
	               |	МАКСИМУМ(Долгота) КАК Долгота1
	               |ПО
	               |	Ссылка";	
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ItobГеографическиеЗоны", "Справочник."+ИмяСправочникаГеографическиеЗоны); 			   
		
	Возврат ПолучитьГеографическиеЗоныОбработкаЗапроса(Запрос);

КонецФункции

// Получает таблицу с широтами и долготами точек выбранной географической зоны.
// 
// Параметры:
//	ГеографическаяЗонаСсылка - СправочникСсылка.ItobГеографическиеЗоны - ссылка на геозону.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица координат точек геозоны.
//
Функция ПолучитьТочкиГеографическойЗоны(ГеографическаяЗонаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ГеографическаяЗонаСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТочкиГеографическихЗон.Широта,
	               |	ItobТочкиГеографическихЗон.Долгота
	               |ИЗ
	               |	РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	               |ГДЕ
	               |	ItobТочкиГеографическихЗон.ГеографическаяЗона = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobТочкиГеографическихЗон.НомерТочки";
	
	ТаблицаВершинПолигона = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаВершинПолигона;

КонецФункции
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьГеографическиеЗоныОбработкаЗапроса(Запрос) Экспорт
	
	ТаблицаГеографическихЗон = Новый ТаблицаЗначений;
	ТаблицаГеографическихЗон.Колонки.Добавить("ГеографическаяЗона");
	ТаблицаГеографическихЗон.Колонки.Добавить("МинШирота");
	ТаблицаГеографическихЗон.Колонки.Добавить("МинДолгота");	
	ТаблицаГеографическихЗон.Колонки.Добавить("МаксШирота");
	ТаблицаГеографическихЗон.Колонки.Добавить("МаксДолгота");	
	ТаблицаГеографическихЗон.Колонки.Добавить("Уровень");	
	ТаблицаГеографическихЗон.Колонки.Добавить("МассивХ");
	ТаблицаГеографическихЗон.Колонки.Добавить("МассивУ");		

	ВыборкаПоЗонам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	Пока ВыборкаПоЗонам.Следующий() Цикл
		
		ВыборкаПоТочкам = ВыборкаПоЗонам.Выбрать();
		Если ВыборкаПоТочкам.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		// Можно оптимизировать функцией ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПоЗонам); .
		НовСтрока = ТаблицаГеографическихЗон.Добавить();
		НовСтрока.ГеографическаяЗона 	= ВыборкаПоЗонам.Ссылка;
		НовСтрока.МинШирота 			= ВыборкаПоЗонам.Широта;
		НовСтрока.МинДолгота 			= ВыборкаПоЗонам.Долгота;
		НовСтрока.МаксШирота 			= ВыборкаПоЗонам.Широта1;
		НовСтрока.МаксДолгота 			= ВыборкаПоЗонам.Долгота1;
		НовСтрока.Уровень 				= ?(ВыборкаПоЗонам.Ссылка.Пустая(), 0, ВыборкаПоЗонам.Ссылка.Уровень());
		
		НовСтрока.МассивХ 				= Новый Массив;
		НовСтрока.МассивУ 				= Новый Массив;		
		
		Пока ВыборкаПоТочкам.Следующий() Цикл				
			НовСтрока.МассивХ.Добавить(ВыборкаПоТочкам.Долгота);
			НовСтрока.МассивУ.Добавить(ВыборкаПоТочкам.Широта);
			
		КонецЦикла;
		
		НовСтрока.МассивХ.Добавить(НовСтрока.МассивХ[0]);
		НовСтрока.МассивУ.Добавить(НовСтрока.МассивУ[0]);				
		
	КонецЦикла;
	
	Возврат ТаблицаГеографическихЗон;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверка вхождения точки с координатами (широта; долгота) в произвольную 
// область (в частном случае, в географическую зону).
//
// Параметры:
//  ПеремХ	 - Число - Координата по X.
//  ПеремУ	 - Число - Координата по Y.
//  МассивХ	 - Массив	 - Массив координат полигона по X.
//  МассивУ	 - Массив	 - Массив координат полигона по Y.
// 
// Возвращаемое значение:
//  Булево - Признак вхождения точки в географическую зону.
//
Функция ТочкаВнутриГеографическойЗоны(ПеремХ, ПеремУ, МассивХ, МассивУ)
	
	ToTheLeftofPoint = 0;
	ToTheRightofPoint = 0;
	OpenPolygon = Ложь;
	
	Если НЕ ((МассивХ[0] = МассивХ[МассивХ.Количество()-1]) И (МассивУ[0] = МассивУ[МассивУ.Количество()-1])) Тогда
		OpenPolygon = Истина;
	КонецЕсли;
	
	Для np = 1 По МассивХ.Количество()-1 Цикл
		
		Если ((МассивУ[np - 1] <= ПеремУ)
			И (МассивУ[np] > ПеремУ))
			ИЛИ ((МассивУ[np - 1] > ПеремУ)
			И (МассивУ[np] <= ПеремУ)) Тогда
			
			
			XIntersection = МассивХ[np - 1]
				+((МассивХ[np] - МассивХ[np - 1])
				/(МассивУ[np] - МассивУ[np - 1])) * (ПеремУ - МассивУ[np - 1]);
			
			
			Если XIntersection < ПеремХ Тогда ToTheLeftofPoint = ToTheLeftofPoint + 1;   КонецЕсли;
			Если XIntersection > ПеремХ Тогда ToTheRightofPoint = ToTheRightofPoint + 1;  КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если OpenPolygon Тогда
		
		np = МассивХ.Количество()-1;
		Если ((МассивУ[np] <= ПеремУ)
			И (МассивУ[0] > ПеремУ))
			ИЛИ ((МассивУ[np] > ПеремУ)
			И (МассивУ[0] <= ПеремУ)) Тогда
			
			
			XIntersection = МассивХ[np] + ((МассивХ[0] - МассивХ[np]) / (МассивУ[0] - МассивУ[np])) * (ПеремУ - МассивУ[np]);
			
			Если XIntersection < ПеремХ Тогда ToTheLeftofPoint = ToTheLeftofPoint+1;   КонецЕсли;
			Если XIntersection > ПеремХ Тогда ToTheRightofPoint = ToTheRightofPoint+1;  КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = (ToTheLeftofPoint%2) = 1 И (ToTheRightofPoint%2) = 1;
	
	
	Возврат Результат;

КонецФункции

#КонецОбласти
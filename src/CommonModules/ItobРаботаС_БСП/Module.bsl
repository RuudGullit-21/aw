////////////////////////////////////////////////////////////////////////////////
// Работа с БСП (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
	
#Область ПодсистемаБазоваяФункциональность

// Предназначена для вставки в начало обработчика ПриСозданииНаСервере управляемых форм, которые размещаются на рабочем
// столе.
//
// Предотвращает открытие формы в ряде особых случаев:
//  - если рабочий стол открывается до завершения обновления данных ИБ
//   (исключается возможность заведомо ошибочного обращения к еще необновленным данным);
//  - если в разделенную ИБ выполняется вход в сеансе с неустановленным значением разделителя
//  ОбластьДанныхОсновныеДанные
//   (исключается возможность заведомо ошибочного обращения к разделенным данным из неразделенного сеанса);
//
// Не следует использовать в формах, которые используются перед началом работы системы,
// а также в формах, предназначенных для работы в неразделенном сеансе.
//
// Параметры:
//  Форма - УправляемаяФорма - ссылка на форму, которая создается.
//  Отказ - Булево - параметр переданный в обработчик формы ПриСозданииНаСервере.
//  СтандартнаяОбработка - Булево - параметр переданный в обработчик формы ПриСозданииНаСервере.
//
// Возвращаемое значение:
//  Булево - если Ложь, значит установлен отказ создания формы.
//
Функция ОбщегоНазначенияПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	Результат = Истина;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы	 - Строка	 - параметр используется, если
//  	нужно проверить строку соединения не текущей информационной базы.
// 
// Возвращаемое значение:
//  Булево - Режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Результат = Истина;
	
	ВерсияБСП = ВерсияБСП();
	Если ВерсияБСП >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает строковое имя значения перечисления по его ссылке.
//
// Параметры:
//  Значение - ПеречислениеСсылка	 - Значение, для которого необходимо получить имя перечисления.
// 
// Возвращаемое значение:
//  Строка - имя значения перечисления.
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ИмяЗначенияПеречисления(Значение);
		КонецЕсли;
	КонецЕсли;
	
    Возврат Результат;
КонецФункции 

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("СтандартныеПодсистемыСервер");
			Результат = ОбщийМодуль.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаПользователи
	
// Возвращает текущего пользователя.
//  Рекомендуется использовать в коде, который не поддерживает работу с внешними пользователями.
//  
//  Если вход в сеанс выполнил внешний пользователь, тогда будет вызвано исключение.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - пользователь.
//
Функция ТекущийПользователь() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает текущего пользователя или текущего внешнего пользователя,
// в зависимости от того, кто выполнил вход в сеанс.
//  Рекомендуется использовать в коде, который поддерживает работу в обоих случаях.
//
// Возвращаемое значение:
//  - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи -.
// 
Функция АвторизованныйПользователь() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.АвторизованныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(ИменаРолей, Пользователь = Неопределено, УчитыватьПривилегированныйРежим = Ложь) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.РолиДоступны(ИменаРолей, Пользователь, УчитыватьПривилегированныйРежим);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаПолучениеФайловИзИнтернета

// Возвращает настройку прокси сервера для доступа в Интернет со стороны
// клиента для текущего пользователя.
//
// Возвращаемое значение:
//   Соответствие - свойства:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаКлиенте() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Результат = ОбщийМодуль.НастройкиПроксиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает параметры настройки прокси-сервера на стороне сервера 1С:Предприятие.
//
// Возвращаемое значение:
//   Соответствие - свойства:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаСервере() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Результат = ОбщийМодуль.НастройкиПроксиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаКонтактнаяИнформация

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект               - Произвольный - Объект-владелец контактной информации. Если это ссылка, то контактная информация
//                                          будет получена из объекта по ссылке, иначе из таблицы КонтактнаяИнформация объекта.
//    ДополнительныеПараметры - Структура - Описание настроек контактной информации - см. ПараметрыКонтактнойИнформации.
//                                          Предыдущие название параметра ИмяЭлементаДляРазмещения. Устарел, следует
//                                          использовать ДополнительныеПараметры. Группа, куда будут размещены элементы
//                                          контактной информации.
//    УдалитьПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Устарел, следует использовать ДополнительныеПараметры.
//                                                             Может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//    УдалитьИсключаемыеВиды - Массив из Строка - Устарел,следует использовать ДополнительныеПараметры.
//    УдалитьОтложеннаяИнициализация - Булево - Устарел,следует использовать ДополнительныеПараметры.
// 
// Возвращаемое значение:
//	Неопределено 
//
Функция УправлениеКонтактнойИнформациейПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры = Неопределено, УдалитьПоложениеЗаголовкаКИ = "",
	Знач УдалитьИсключаемыеВиды = Неопределено, УдалитьОтложеннаяИнициализация = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 24283 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			ОбщийМодуль.ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры, УдалитьПоложениеЗаголовкаКИ, УдалитьИсключаемыеВиды, УдалитьОтложеннаяИнициализация);
		КонецЕсли;
	ИначеЕсли ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			ОбщийМодуль.ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    Отказ  - Булево - Если Истина, то объект не был записан, т.к. во время записи возникли ошибки.
//
Процедура УправлениеКонтактнойИнформациейПередЗаписьюНаСервере(Форма, Объект, Отказ) Экспорт 
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			ОбщийМодуль.ПередЗаписьюНаСервере(Форма, Объект, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ)()

// Возвращает таблицу, содержащую контактную информацию объекта.
//
// Параметры:
//  СсылкаИлиОбъект          - ЛюбаяСсылка, Объект - Ссылка или объект-владелец контактной информации (организация,
//                                            контрагент, партнер и т.д.).
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - Необязательный, отбор по виду контактной информации.
//  Дата                     - Дата - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//  ТолькоПредставление      - Булево - Если Истина, то возвращает только представление, иначе таблицу значений.
//                                      Для получения представление рекомендуется использовать см. функцию ПредставлениеКонтактнойИнформацииОбъекта.
// 
// Возвращаемое значение:
//  Строка - строковое представление значения, если параметр ТолькоПредставление установлен в Истина, иначе
//  ТаблицаЗначений - таблица с контактной информацией объекта содержащая колонки:
//    * СсылкиИлиОбъекты - Ссылка - Владелец контактной информации.
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации   - Вид контактной информации.
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//    * ЗначенияПолей    - Строка - XML соответствующий XDTO пакету КонтактнаяИнформация или Адрес.
//    * Представление    - Строка - Представление контактной информации.
//    * Дата             - Дата   - Дата с которой действует запись контактной информации.
//
Функция КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидКонтактнойИнформации = Неопределено, Дата = Неопределено, ТолькоПредставление = Истина) Экспорт
	
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 24283 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			Результат = ОбщийМодуль.КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидКонтактнойИнформации, Дата, ТолькоПредставление);
		КонецЕсли;
	ИначеЕсли ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			Результат = ОбщийМодуль.КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект.Ссылка, ВидКонтактнойИнформации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПодсистемаПечать 
	
// Возвращает макет печатной формы по полному пути к макету.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//   ТабличныйДокумент - для макета типа MXL.
//	 ДвоичныеДанные    - для макетов DOC и ODT.
//
Функция ПолучитьМакет(ПолныйПутьКМакету) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Печать 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			Результат = ОбщийМодуль.МакетПечатнойФормы(ПолныйПутьКМакету);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 
	
#Область ПодсистемаОтправкаSMS 
	
// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей  - Массив из Строка - массив строк номеров получателей в формате +7ХХХХХХХХХХ;
//  Текст              - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//  ИмяОтправителя     - Строка - имя отправителя, которое будет отображаться вместо номера у получателей.
//  ПеревестиВТранслит - Булево - Истина, если требуется переводить текст сообщения в транслит перед отправкой.
//
// Возвращаемое значение:
//  Структура - результат отправки:
//    * ОтправленныеСообщения - Массив из Структура - содержит:
//      ** НомерПолучателя - Строка - номер получателя SMS.
//      ** ИдентификаторСообщения - Строка - идентификатор SMS, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = Неопределено, ПеревестиВТранслит = Ложь) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ОтправкаSMS 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
			Результат = ОбщийМодуль.ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, ПеревестиВТранслит);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 
	
#Область ПодсистемаРаботаСПочтовымиСообщениями 
	
// Выполняет отправку почтовых сообщений.
// Функция может вызвать исключение, которое требуется обработать.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты.
//  ПараметрыПисьма - Структура - содержит всю необходимую информацию о письме:
//
//   * Кому - Массив, Строка - интернет адреса получателей письма.
//          - Массив - коллекция структур адресов:
//              * Адрес         - Строка - почтовый адрес (должно быть обязательно заполнено).
//              * Представление - Строка - имя адресата.
//          - Строка - интернет адреса получателей письма, разделитель - ";".
//
//   * ПолучателиСообщения - Массив - массив структур, описывающий получателей:
//      ** Адрес - Строка - Почтовый адрес получателя сообщения.
//      ** Представление - Строка - представление адресата.
//
//   * Копии        - Массив из Строка, Строка - адреса получателей копий письма. См. описание поля Кому.
//
//   * СкрытыеКопии - Массив из Строка, Строка - адреса получателей скрытых копий письма. См. описание поля Кому.
//
//   * Тема       - Строка - (обязательный) тема почтового сообщения.
//   * Тело       - Строка - (обязательный) текст почтового сообщения (простой текст в кодировке win-1251).
//   * Важность   - ВажностьИнтернетПочтовогоСообщения.
//
//   * Вложения - Массив из Структура - файлы, которые необходимо приложить к письму (описания в виде структур):
//     ** Представление - Строка - имя файла вложения;
//     ** АдресВоВременномХранилище - Строка - адрес двоичных данных вложения во временном хранилище.
//     ** Кодировка - Строка - кодировка вложения (используется, если отличается от кодировки письма).
//     ** Идентификатор - Строка - (необязательный) используется для отметки картинок, отображаемых в теле письма.
//
//   * АдресОтвета - Соответствие - см. описание поля Кому.
//   * ИдентификаторыОснований - Строка - идентификаторы оснований данного письма.
//   * ОбрабатыватьТексты  - Булево - необходимость обрабатывать тексты письма при отправке.
//   * УведомитьОДоставке  - Булево - необходимость запроса уведомления о доставке.
//   * УведомитьОПрочтении - Булево - необходимость запроса уведомления о прочтении.
//   * ТипТекста   - Строка, Перечисление.ТипыТекстовЭлектронныхПисем, ТипТекстаПочтовогоСообщения - определяет тип
//                  переданного теста допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML.
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения.
//                                                                          Отображается "как есть" (значение по
//                                                                          умолчанию).
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате
//                                                                                  Rich Text.
//   * Соединение - ИнтернетПочта - существующее соединение с почтовым сервером. Если не указано, то создается новое.
//   * ПротоколПочты - Строка - если указано значение "IMAP", то письмо будет передано по протоколу IMAP, иначе - по
//                              протоколу SMTP.
//   * ИдентификаторСообщения - Строка - (возвращаемый параметр) идентификатор отправленного почтового сообщения на SMTP
//                                       сервере;
//   * ОшибочныеПолучатели - Соответствие - (возвращаемый параметр) список адресов, по которым отправка не выполнена. 
//                                          См. возвращаемое значение метода ИнтернетПочта.Послать() в синтакс-помощнике.
//
//  Соединение - ИнтернетПочта - (параметр устарел) см. параметр ПараметрыОтправки.Соединение.
//  ПротоколПочты - Строка     - (параметр устарел) см. параметр ПараметрыОтправки.Соединение.
//
// Возвращаемое значение:
//  Строка - Идентификатор сообщения.
//
Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись, Знач ПараметрыПисьма, Знач Соединение = Неопределено, ПротоколПочты = "") Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 24283 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Результат = ОбщийМодуль.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение, ПротоколПочты);
		КонецЕсли;
	ИначеЕсли ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ОтправкаSMS 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Результат = ОбщийМодуль.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаОрганизации 

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Результат = Неопределено;
	
	ВерсияБсп = ВерсияБСП();
	Если ВерсияБсп > 23000 Тогда		
		НовоеИмяСправочникаОрганизации = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Организации");
		Результат = Справочники[НовоеИмяСправочникаОрганизации].ОрганизацияПоУмолчанию();
	ИначеЕсли ВерсияБсп >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Организации 
		Если ItobВызовСервераПовтИсп.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСлужебный");
			Результат = ОбщийМодуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает установленную версию Библиотеки стандартных подсистем.
//
Функция ВерсияБСП()
	Возврат ItobРаботаС_БСП_ВызовСервераПовтИсп.ВерсияБСП();
КонецФункции

#КонецОбласти

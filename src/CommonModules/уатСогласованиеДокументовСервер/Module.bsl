
#Область СлужебныйПрограммныйИнтерфейс


#Область ОбработчикиСобытийФормы

// Процедура вызывается из обработчика Форма.ПриСозданииНаСервере
// Параметры:
//	Форма - форма документа
//	ЭлементыФормыДоступность - Структура - ключи структуры это имена элементов формы, которые должны становиться недоступными, если документ не согласован
//
Процедура ПриСозданииНаСервере(Форма, ЭлементыФормыДоступность = Неопределено) Экспорт
	
	флИспользоватьСогласование = ПолучитьФункциональнуюОпцию("уатИспользоватьСогласованиеДокументов");
	
	Форма.Элементы.ГруппаСогласование.Видимость = флИспользоватьСогласование;
	
	Если НЕ флИспользоватьСогласование Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Объект.ТребуетСогласования = ДокументТребуетСогласования(
			Форма.ИмяДокументаСогласование, Новый Структура("Организация", Форма.Объект.Организация));
		Форма.Модифицированность = Ложь;
	КонецЕсли;
	Форма.Элементы.ТребуетСогласования.Доступность = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьИзменятьПараметрыСогласования");
		
	Если ЭлементыФормыДоступность <> Неопределено Тогда
		ДокументСогласован = ДокументСогласован(Форма.Объект.Ссылка);
		Для Каждого ТекЭлемент Из ЭлементыФормыДоступность Цикл
			Форма.Элементы[ТекЭлемент.Ключ].ТолькоПросмотр = ДокументСогласован;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

// Процедура вызывается из обработчика Объект.ПередЗаписью до начала проведения
// Проверяет что документ согласован. Если не согласован, то запись отменяется и выдается сообщение
// Параметры:
//	ДокументОбъект - ДокументОбъект - документ-объект
//	РежимЗаписи - РежимЗаписиДокумента
//	Отказ - Булево - в этот флаг передается отказ от записи документа
//
Процедура ПередЗаписью(ДокументОбъект, РежимЗаписи, Отказ) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ДокументОбъект.ТребуетСогласования
		И (НЕ ДокументСогласован(ДокументОбъект.Ссылка)) Тогда
		
		ТекстНСТР = НСтр("en='The document ""% 1"" must be agreed!';ru='Документ ""%1"" необходимо согласовать!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументОбъект);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
	ИначеЕсли (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПоступлениеТоваровУслуг")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатРеестрПеревозок")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСчетНаОплатуПоставщика"))
		И уатОбщегоНазначения.ПроверкаВнешнегоПользователя()
		И ДокументСогласован(ДокументОбъект.Ссылка) Тогда
		ТекстНСТР = НСтр("ru='Запрещено изменение документа ""%1"" внешними пользователями, поскольку он уже согласован'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументОбъект);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийОбъекта

// Функция возвращает флаг согласования документа
// Параметры:
//	ДокументСсылка - ДокументСсылка - ссылка на документ
//
// Возвращаемое значение:
//	Булево - Флаг согласования документа
//
Функция ДокументСогласован(ДокументСсылка) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка
	|	И уатСогласование.Завершен
	|	И (уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.Согласовано)
	|			ИЛИ уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.СогласованоСЗамечаниями))
	|	И НЕ уатСогласование.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Возврат (НЕ РезЗапроса.Пустой());
КонецФункции

// Функция возвращает статус согласования документа
// Параметры:
//	ДокументСсылка - ДокументСсылка - ссылка на документ
// Возвращаемое значение:
//	Структура с ключами
//		- Код - код статуса
//		- Статус - строковое представление статуса
//		- Ссылка - ссылка на бизнес-процесс согласования
//
Функция СтатусСогласования(ДокументСсылка) Экспорт
	Рез = Новый Структура("Код, Статус, Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка,
	|	уатСогласование.Стартован,
	|	уатСогласование.Завершен,
	|	уатСогласование.РезультатСогласования
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка
	|	И НЕ уатСогласование.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		Рез.Код = 0;
		Рез.Статус = НСтр("en='Not agreed';ru='Не согласован'");
	Иначе
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		
		Рез.Ссылка = Выборка.Ссылка;
		
		Если НЕ Выборка.Стартован Тогда
			Рез.Код = 1;
			Рез.Статус = НСтр("en='Not agreed';ru='Не согласован'");
		Иначе
			Если Выборка.РезультатСогласования = Перечисления.уатРезультатыСогласования.НеСогласовано Тогда
				Рез.Код = 1;
				Рез.Статус = НСтр("en='Not agreed';ru='Не согласован'");
			Иначе
				Если Выборка.Завершен Тогда
					Рез.Код = 3;
					Рез.Статус = НСтр("en='Agreed';ru='Согласован'");
				Иначе
					Рез.Код = 2;
					Рез.Статус = НСтр("en='On approval';ru='На согласовании'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция создает и стартует новый бизнес-процесс Согласование
// Параметры:
//	ДокументСсылка - ДокументСсылка - ссылка на документ
//  НастройкаПользователя - ПВХСсылка, Строка - настройка
//
Процедура СоздатьБизнесПроцессСогласования(ДокументСсылка) Экспорт
	
	СтруктураПараметров = Новый Структура("Организация", ДокументСсылка.Организация);
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Подразделение", ДокументСсылка.Метаданные()) Тогда
		СтруктураПараметров.Вставить("Подразделение", ДокументСсылка.Подразделение);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗаявкаНаРасходованиеДС") Тогда
		СтруктураПараметров.Вставить("Подразделение", ДокументСсылка.ЦФО);
	Иначе
		Подразделение = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
			"ОсновноеПодразделениеОрганизации");
		СтруктураПараметров.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	СпрСсылка = ГруппаИсполнителейСогласованияПоУмолчанию(ВидДокументаДляСогласования(ДокументСсылка), СтруктураПараметров);
	Если СпрСсылка.Пользователи.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='For these documents in the data processor ""Program settings"""
			"the ""Implementing group"" is not selected."
			"The reconciliation was not created!';ru='Для данных документов в обработке ""Настройки функциональности"" "
			"в разделе ""Согласование документов"" не выбрана ""Группа исполнителей согласования""."
			"Согласование не было создано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		УстановитьПривилегированныйРежим(Истина);
		СоздатьБизнесПроцессСогласованияЗавершение(ДокументСсылка);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		СоздатьБизнесПроцессСогласованияЗавершение(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументТребуетСогласования(ВидДокумента, СтруктураОбъектовНастроек) Экспорт
	
	ТребуетСогласования = Ложь;
	
	Организация = Неопределено;
	СтруктураОбъектовНастроек.Свойство("Организация", Организация);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНастройкиСогласований.Объект КАК Объект,
	|	уатНастройкиСогласований.Настройки КАК Настройки
	|ИЗ
	|	РегистрСведений.уатНастройкиСогласований КАК уатНастройкиСогласований
	|ГДЕ
	|	уатНастройкиСогласований.Объект = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НастройкиСогласования = Выборка.Настройки.Получить();
		Если НастройкиСогласования.Свойство(ВидДокумента)
			И НастройкиСогласования[ВидДокумента].Свойство("СогласованиеПоУмолчанию") Тогда
			ТребуетСогласования = НастройкиСогласования[ВидДокумента].СогласованиеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетСогласования;
	
КонецФункции

Функция ГруппаИсполнителейСогласованияПоУмолчанию(ВидДокумента, СтруктураОбъектовНастроек) Экспорт
	
	ГруппаИсполнителей = Справочники.уатГруппыПользователейДляСогласования.ПустаяСсылка();
	
	Организация = Неопределено;
	Подразделение = Неопределено;
	СтруктураОбъектовНастроек.Свойство("Организация", Организация);
	СтруктураОбъектовНастроек.Свойство("Подразделение", Подразделение);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНастройкиСогласованийПоОрганизации.Объект КАК Объект,
	|	уатНастройкиСогласованийПоОрганизации.Настройки КАК Настройки,
	|	2 КАК Приоритет
	|ИЗ
	|	РегистрСведений.уатНастройкиСогласований КАК уатНастройкиСогласованийПоОрганизации
	|ГДЕ
	|	уатНастройкиСогласованийПоОрганизации.Объект = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатНастройкиСогласованийПоПодразделению.Объект,
	|	уатНастройкиСогласованийПоПодразделению.Настройки,
	|	1
	|ИЗ
	|	РегистрСведений.уатНастройкиСогласований КАК уатНастройкиСогласованийПоПодразделению
	|ГДЕ
	|	уатНастройкиСогласованийПоПодразделению.Объект = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() И Не ЗначениеЗаполнено(ГруппаИсполнителей) Цикл
		НастройкиСогласования = Выборка.Настройки.Получить();
		Если НастройкиСогласования.Свойство(ВидДокумента)
			И НастройкиСогласования[ВидДокумента].Свойство("ГруппаИсполнителейСогласованияПоУмолчанию") Тогда
			ГруппаИсполнителей = НастройкиСогласования[ВидДокумента].ГруппаИсполнителейСогласованияПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГруппаИсполнителей;
	
КонецФункции

Функция ВидДокументаДляСогласования(Документ) Экспорт
	
	ВидДокумента = "";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктСверкиВзаиморасчетов_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатАктСверкиВзаиморасчетов_уэ") Тогда
		ВидДокумента = "АктСверкиВзаиморасчетов";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатВводВЭксплуатациюТСиОборудования")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатВводВЭксплуатациюТСиОборудования") Тогда
		ВидДокумента = "ВводВЭксплуатациюТСиОборудования";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатВыбытиеТСиОборудования")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатВыбытиеТСиОборудования") Тогда
		ВидДокумента = "ВыбытиеТСиОборудования";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаявкаНаРасходованиеДС")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатЗаявкаНаРасходованиеДС") Тогда
		ВидДокумента = "ЗаявкаНаРасходованиеДС";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаявкаНаРемонт")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатЗаявкаНаРемонт") Тогда
		ВидДокумента = "ЗаявкаНаРемонт";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатПеремещениеТСиОборудования")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатПеремещениеТСиОборудования") Тогда
		ВидДокумента = "ПеремещениеТСиОборудования";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатПланированиеРаботыТС")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатПланированиеРаботыТС") Тогда
		ВидДокумента = "ПланированиеРаботыТС";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатПоступлениеТоваровУслуг") Тогда
		ВидДокумента = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатРеестрПеревозок")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатРеестрПеревозок") Тогда
		ВидДокумента = "РеестрПеревозок";
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		И (ТипЗнч(Документ) = Тип("ДокументСсылка.уатРекламация_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатРекламация_уэ")) Тогда
		ВидДокумента = "Рекламация";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатРемонтныйЛист")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатРемонтныйЛист") Тогда
		ВидДокумента = "РемонтныйЛист";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатСчетНаОплатуПоставщика") Тогда
		ВидДокумента = "СчетНаОплатуПоставщика";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатУстановкаТарифовСебестоимости_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатУстановкаТарифовСебестоимости_уэ") Тогда
		ВидДокумента = "УстановкаТарифовСебестоимости";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатУстановкаПрейскурантовТС")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатУстановкаПрейскурантовТС") Тогда
		ВидДокумента = "УстановкаПрейскурантовТС";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатУстановкаТарифовЗП")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатУстановкаТарифовЗП") Тогда
		ВидДокумента = "УстановкаТарифовЗП";
	КонецЕсли;
	
	Возврат ВидДокумента
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьБизнесПроцессСогласованияЗавершение(ДокументСсылка)
	
	НовыйБП = БизнесПроцессы.уатСогласование.СоздатьБизнесПроцесс();
	НовыйБП.Дата = ТекущаяДата();
	НовыйБП.УстановитьНовыйНомер();
	НовыйБП.Заполнить(ДокументСсылка);
	
	Попытка
		НовыйБП.Записать();
		НовыйБП.Старт();
		ТекстНСТР = НСтр("en='Approval was created for document';ru='Для документа было создано согласование'") + " """ + НовыйБП.Ссылка + """";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	Исключение
		ТекстНСТР = НСтр("en='It is failed to create approval for document!';ru='Для документа не удалось создать согласование!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


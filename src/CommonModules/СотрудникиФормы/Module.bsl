////////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Физического лица

// Инициализирует данные формы для обеспечения редактирования в ней записи 
// регистра сведений, подчиненного ведущему объекту
//
// Параметры
//  Форма - управляемая форма
//  ИмяРегистра - имя редактируемого регистра
// см. также 
//  ПрочитатьЗаписьДляРедактированияВФорме
//  ЗаписатьЗаписьПослеРедактированияВФорме
Процедура ИнициализироватьЗаписьДляРедактированияВФорме(Форма, ИмяРегистра, ВедущийОбъект) Экспорт
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяРегистра);
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма[ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма[ИмяРегистра + "НоваяЗапись"] = Ложь;
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;
		
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	// имя реквизита формы совпадает с именем регистра
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Перем ИмяТекущегоЭлемента;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		// Если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта)
		ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц",       Форма.ФизическоеЛицоСсылка);
		ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.ФИО) Тогда 
		Форма.Объект.ФИО = Форма.Объект.Наименование;
	КонецЕсли;
	
	ДополнитьФормуФизическогоЛица(Форма);
	
	Если Форма.Параметры.Свойство("ТекущийЭлемент", ИмяТекущегоЭлемента) Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];
	КонецЕсли;	
	
	Форма.ЦветСтиляПоясняющийТекст       = ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля        = ЦветаСтиля.ЦветТекстаПоля;
	
	СотрудникиКлиентСервер.ОбновитьОтображениеПредупреждающихНадписей(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ФизическоеЛицоСсылка  = Форма.Объект.Ссылка;
	ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	ФизическиеЛицаПрочитатьДанныеСвязанныеСФизлицом(Форма, Истина, Истина);
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Для нового физического лица устанавливаем ссылку
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка); 
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "Объект");
	
	ОбъектСкрыт = ЗащитаПерсональныхДанных.ЭтоОбъектСоСкрытымиПерсональнымиДанными(Форма.ФизическоеЛицоСсылка);
	Если Не Отказ И Не ОбъектСкрыт Тогда 
		ТекущийОбъект.Наименование = ТекущийОбъект.ФИО;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ФизическиеЛицаПрочитатьДанныеСвязанныеСФизлицом(Форма, Истина, Истина);
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Форма.Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

// Возвращаем подбираем список физлиц с похожим наименованием
// Параметры
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено с сотрудником
//
Функция ПодобратьСписокФизЛиц(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество) Экспорт
	
	СписокФизлиц = Новый СписокЗначений;
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия +" "+ Имя +" "+ Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СписокФизлиц;
	КонецЕсли;
	
	Фамилия = ВРег(Фамилия);
	Фамилия = СтрЗаменить(Фамилия, "~", "~~");
	Фамилия = СтрЗаменить(Фамилия, "%", "~%");
	Фамилия = СтрЗаменить(Фамилия, "_", "~_");
	Фамилия = СтрЗаменить(Фамилия, "[", "~[");
	Фамилия = СтрЗаменить(Фамилия, "-", "~-");
	Фамилия = СтрЗаменить(Фамилия,"Е","&");
	Фамилия = СтрЗаменить(Фамилия,"Ё","&");
	Фамилия = СтрЗаменить(Фамилия,"&","[её]");
	
	Имя = ВРег(Имя);
	Если Найти("НАТАЛЬЯ,НАТАЛИЯ", Имя) > 0 Тогда
		Имя = "НАТАЛ[ьи]Я";
	Иначе
		Имя = СтрЗаменить(Имя, "~", "~~");
		Имя = СтрЗаменить(Имя, "%", "~%");
		Имя = СтрЗаменить(Имя, "_", "~_");
		Имя = СтрЗаменить(Имя, "[", "~[");
		Имя = СтрЗаменить(Имя, "-", "~-");
		Имя = СтрЗаменить(Имя,"Е","&");
		Имя = СтрЗаменить(Имя,"Ё","&");
		Имя = СтрЗаменить(Имя,"&","[её]");
	КонецЕсли;

	///////////////////////////
	// подготовим Отчество
	Отчество = ВРег(Отчество);
	Отчество = СтрЗаменить(Отчество, "~", "~~");
	Отчество = СтрЗаменить(Отчество, "%", "~%");
	Отчество = СтрЗаменить(Отчество, "_", "~_");
	Отчество = СтрЗаменить(Отчество, "[", "~[");
	Отчество = СтрЗаменить(Отчество, "-", "~-");
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("ИЕВИЧ");
	МассивПодстрок.Добавить("ЬЕВИЧ");
	МассивПодстрок.Добавить("ИЕВНА");
	МассивПодстрок.Добавить("ЬЕВНА");
	НетЗаменыСимволов = Истина;
	Для каждого Стр Из МассивПодстрок Цикл
		ПозицияСимвола = Найти(Отчество, Стр);
		Если ПозицияСимвола > 0 Тогда
			Отчество = Лев(Отчество,ПозицияСимвола-1) + "[иь]" + Сред(Отчество,ПозицияСимвола+1);
			НетЗаменыСимволов = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетЗаменыСимволов Тогда
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить("ЬЯНОВИЧ");
		МассивПодстрок.Добавить("ИЯНОВИЧ");
		МассивПодстрок.Добавить("ИАНОВИЧ");
		МассивПодстрок.Добавить("ЬЯНОВНА");
		МассивПодстрок.Добавить("ИЯНОВНА");
		МассивПодстрок.Добавить("ИАНОВНА");
		Для каждого Стр Из МассивПодстрок Цикл
			ПозицияСимвола = Найти(Отчество, Стр);
			Если ПозицияСимвола > 0 Тогда
				Отчество = Лев(Отчество,ПозицияСимвола-1) + "[иь][яа]" + Сред(Отчество,ПозицияСимвола+2);
				НетЗаменыСимволов = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НетЗаменыСимволов Тогда
		Отчество = СтрЗаменить(Отчество,"Е","&");
		Отчество = СтрЗаменить(Отчество,"Ё","&");
		Отчество = СтрЗаменить(Отчество,"&","[её]");
	КонецЕсли;
	
	// закончили подготовку Отчества
	///////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + " %" + Имя);
	Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + " %" + Имя + " %" + Отчество);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
	|	И (ФизическиеЛица.Наименование ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~"")";
	
	МассивФизлиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокФизлиц.ЗагрузитьЗначения(МассивФизлиц);
	
	Возврат СписокФизЛиц;
	
КонецФункции

Функция СотрудникиФизическогоЛица(ФизическоеЛицо, ИсключаяСотрудника = Неопределено) Экспорт
	ОтбиратьВсехСотрудников = (ИсключаяСотрудника = Неопределено ИЛИ 
		ИсключаяСотрудника = Справочники.Сотрудники.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И (&ОтбиратьВсехСотрудников
	|			ИЛИ Сотрудники.Ссылка <> &ИсключаяСотрудника)";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтбиратьВсехСотрудников", ОтбиратьВсехСотрудников);
	Запрос.УстановитьПараметр("ИсключаяСотрудника", ИсключаяСотрудника);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция МассивЗаписейИстории(Форма, ИмяРегистра) Экспорт
	Если Не Форма[ИмяРегистра + "НаборЗаписейПрочитан"] Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Форма.ФизическоеЛицоСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		ТаблицаНабора.Сортировать("Период Убыв");
		Форма[ИмяРегистра + "НаборЗаписей"].Загрузить(ТаблицаНабора);
		Форма[ИмяРегистра + "НаборЗаписейПрочитан"] = Истина;
	КонецЕсли;
	Если Форма[ИмяРегистра + "НоваяЗапись"] Тогда
		НайденныеЗаписи = Форма[ИмяРегистра + "НаборЗаписей"].НайтиСтроки(Новый Структура(
			"Период", Форма[ИмяРегистра].Период));
		Если НайденныеЗаписи.Количество() = 0 Тогда
			ЗаписьНабора = Форма[ИмяРегистра + "НаборЗаписей"].Добавить();
		Иначе
			ЗаписьНабора = НайденныеЗаписи[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма[ИмяРегистра]);
		СтруктураЗаписи = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Форма[ИмяРегистра], 
			Метаданные.РегистрыСведений[ИмяРегистра]);
		Форма[ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		Форма[ИмяРегистра + "НоваяЗапись"] = Ложь;
	Иначе
		НайденныеЗаписи = Форма[ИмяРегистра + "НаборЗаписей"].НайтиСтроки(Новый Структура(
			"Период", Форма[ИмяРегистра].Период));
		Если НайденныеЗаписи.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НайденныеЗаписи[0], Форма[ИмяРегистра]);
		КонецЕсли; 
	КонецЕсли;
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Форма[ИмяРегистра + "НаборЗаписей"].Выгрузить());
КонецФункции

Функция ЗагрузитьЗаписиИсторииИзМассива(Форма, ИмяРегистра, МассивЗаписей) Экспорт
	ЗаписиЗагружались = Ложь;
	ТаблицаНабора = Форма[ИмяРегистра + "НаборЗаписей"].Выгрузить();
	ТаблицаИзмененногоНабора = ТаблицаНабора.СкопироватьКолонки();
	Для Каждого СтруктураЗаписи Из МассивЗаписей Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИзмененногоНабора.Добавить(), СтруктураЗаписи);
	КонецЦикла;
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаНабора, ТаблицаИзмененногоНабора) Тогда
		ЗаписиЗагружались = Истина;
		Форма.Команды[ИмяРегистра + "История"].Картинка = БиблиотекаКартинок.Предупреждение;
		Форма.Команды[ИмяРегистра + "История"].Подсказка = НСтр("en='Edited history records';ru='Отредактированы записи истории'");
		Форма[ИмяРегистра + "НаборЗаписей"].Загрузить(ТаблицаИзмененногоНабора);
		Если МассивЗаписей.Количество() > 0 Тогда
			СтруктураЗаписи = МассивЗаписей[0];
			СтруктураЗаписи.Удалить("ИсходныйНомерСтроки");
			ЗаполнитьЗначенияСвойств(Форма[ИмяРегистра], СтруктураЗаписи);
			Форма[ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		Иначе
			ИнициализироватьЗаписьДляРедактированияВФорме(Форма, ИмяРегистра, Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
	КонецЕсли; 
	Форма[ИмяРегистра + "НоваяЗапись"] = Ложь;
	Возврат ЗаписиЗагружались;
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЛИЧНЫМИ ДАННЫМИ ФИЗ ЛИЦА

//Функция ИзменяемыеПоляФизическогоЛица()
//	
//	ИзменяемыеПоля = Новый Структура;
//	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
//	
//	Возврат ИзменяемыеПоля;
//	
//КонецФункции

// Процедура обновляет данные физического лица и его контактную информацию
//
// Параметры
//  Форма     – форма документа 
//
Процедура ОбновитьДанныеФизическогоЛица(Форма) Экспорт
	СотрудникиПрочитатьДанныеСвязанныеСФизлицом(Форма);
	ОбновитьПоляКонтактнойИнформации(Форма);
КонецПроцедуры // ОбновитьДанныеФизическогоЛица()

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация = Неопределено)
	ИзменилосьФИО = Ложь;
	
	НачатьТранзакцию();
	
	ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, ИзменилосьФИО);
	
	ЗафиксироватьТранзакцию();
	
	//ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	//
	//Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
	//	Форма.ИзмененыЛичныеДанные = Форма.ИзмененыЛичныеДанные Или Форма[КлючИЗначение.Значение];
	//КонецЦикла;
	//Форма.ИзмененыЛичныеДанные = Форма.ИзмененыЛичныеДанные 
	//						Или ИзменилосьФИО;
								
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных ФизическогоЛица

Процедура СотрудникиПрочитатьДанныеСвязанныеСФизлицом(Форма) Экспорт
	
	ДоступенПросмотрПерсональныхДанных = Истина;
	
	ПрочитатьДанныеФизлица(Форма);
	
	ФизическиеЛицаПрочитатьДанныеСвязанныеСФизлицом(Форма, Истина, ДоступенПросмотрПерсональныхДанных, 
		Форма.Сотрудник.ТекущаяОрганизация, Истина);
		
КонецПроцедуры

Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные Или 
		(ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// пишем новое состояние записи
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// если нужно сохранить старую запись, то создадим новый менеджер записи
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	                  
	Возврат ИзменилисьДанные;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Чтение и запись записей периодических регистров сведений, подчиненных ведущему объекту 
// для редактирования регистров сведений в форме
//
// Параметры
//	Форма - управляемая форма
//	ИмяРегистра - имя редактируемого регистра
//	ВедущийОбъект - ссылка на ведущий объект
//
//	Требования:
//		Редактирование выполняется для регистров, где единственное измерение 
//		имееит тип "ведущего" объекта 
//		Форма должна содержать реквизиты
//			<ИмяРегистра> 				типа Менеджер записи
//			<ИмяРегистра>Прежняя 		типа Менеджер записи
//			<ИмяРегистра>НоваяЗапись 	типа булево
// см. также 
//		ИнициализироватьЗаписьДляРедактированияВФорме
//		ЗаписатьЗаписьПослеРедактированияВФорме
Процедура ПрочитатьЗаписьДляРедактированияВФорме(Форма, ИмяРегистра, ВедущийОбъект)
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		ИнициализироватьЗаписьДляРедактированияВФорме(Форма, ИмяРегистра, ВедущийОбъект);
	КонецЕсли;
		
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// Если регистр - периодический
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> 
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		// Ищем последнюю запись
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РегистрСведений.Период
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
		|ГДЕ
		|	РегистрСведений." + ИмяИзмерения + " = &ВедущийОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведений.Период УБЫВ");
		Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Период = Выборка.Период;
			МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
			МенеджерЗаписи.Прочитать();
		КонецЕсли;
	Иначе
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	// имя реквизита формы совпадает с именем регистра
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяРегистра);
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма[ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма[ИмяРегистра + "НоваяЗапись"] = Ложь;
	
КонецПроцедуры

Процедура ЗаписатьНаборЗаписейПослеРедактированияВФорме(Форма, ИмяРегистра)
	НайденныеЗаписи = Форма[ИмяРегистра + "НаборЗаписей"].НайтиСтроки(Новый Структура(
		"Период", Форма[ИмяРегистра].Период));
	Если НайденныеЗаписи.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НайденныеЗаписи[0], Форма[ИмяРегистра]);
	ИначеЕсли Форма[ИмяРегистра + "НоваяЗапись"] Тогда
		ЗаполнитьЗначенияСвойств(Форма[ИмяРегистра + "НаборЗаписей"].Добавить(), Форма[ИмяРегистра]);
	КонецЕсли; 
	Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(Форма.ФизическоеЛицоСсылка);
	Набор.Прочитать();
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(Набор.Выгрузить(), Форма[ИмяРегистра + "НаборЗаписей"].Выгрузить()) Тогда
		Набор.Загрузить(Форма[ИмяРегистра + "НаборЗаписей"].Выгрузить());
		Набор.Записать();
	КонецЕсли; 
КонецПроцедуры

// Запись записей периодических регистров сведений, подчиненных ведущему объекту 
// см. ПрочитатьЗаписьДляРедактированияВФорме
Процедура ЗаписатьЗаписьПослеРедактированияВФорме(Форма, ИмяРегистра, ВедущийОбъект, ДанныеМодифицированы = Ложь)
	
	Если ИмяРегистра = "ФИОФизическихЛиц"
		И Форма[ИмяРегистра + "НаборЗаписейПрочитан"] Тогда
		ЗаписатьНаборЗаписейПослеРедактированияВФорме(Форма, ИмяРегистра);
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> 
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма[ИмяРегистра + "Прежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма[ИмяРегистра][Поле.Имя] <> Форма[ИмяРегистра + "Прежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма[ИмяРегистра][Поле.Имя] <> Форма[ИмяРегистра + "Прежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// пишем новое состояние записи
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение(ИмяРегистра);
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// если нужно сохранить старую запись, то создадим новые менеджер записи
		Если Форма[ИмяРегистра + "НоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеМодифицированы = ИзменилисьДанные;
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, ОписаниеПоля, Синоним, Отказ)
	Если ОписаниеПоля.ПроверкаЗаполнения  = ПроверкаЗаполнения.ВыдаватьОшибку И 
			Не ЗначениеЗаполнено(МенеджерЗаписи[ОписаниеПоля.Имя]) Тогда
		ТекстНСТР = НСтр("en='%1: not filled field ""%2"".';ru='%1: не заполнено поле ""%2"".'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Синоним, 
					?(ЗначениеЗаполнено(ОписаниеПоля.Синоним), ОписаниеПоля.Синоним, ОписаниеПоля.Имя)); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ,	ИмяРегистра + "." + ОписаниеПоля.Имя, , Отказ);
	КонецЕсли;		
КонецПроцедуры	

Процедура ПроверитьЗаписьВФорме(Форма, ИмяРегистра, ВедущийОбъект, Отказ)
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	Синоним = МетаданныеРегистра.Синоним;
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	ИзменилисьДанные = Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма[ИмяРегистра + "Прежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма[ИмяРегистра][Поле.Имя] <> Форма[ИмяРегистра + "Прежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма[ИмяРегистра][Поле.Имя] <> Форма[ИмяРегистра + "Прежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение(ИмяРегистра);
		
		Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, СтандартныйРеквизит, Синоним, Отказ);
		КонецЦикла;	
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если Измерение.Имя <> ИмяИзмерения Тогда
				ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, Измерение, Синоним, Отказ);
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, Ресурс, Синоним, Отказ);
		КонецЦикла;	
		
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ИмяРегистра, Реквизит, Синоним, Отказ);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, ФизическоеЛицоСсылка, 
		ПутьКДаннымФизическогоЛицаВФорме = "Объект")
	
	//ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	//
	//Если ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
	//	Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
	//		Форма[КлючИЗначение.Значение] = Ложь;
	//	КонецЦикла;
	//Иначе
	//	СтарыеЛичныеДанные = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ФизическоеЛицоСсылка, 
	//		ОбщегоНазначения.КлючиСтруктурыВСтроку(ИзменяемыеПоля));
	//	ФизическоеЛицоДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, 
	//		ПутьКДаннымФизическогоЛицаВФорме);
	//	Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
	//		Форма[КлючИЗначение.Значение] = (СтарыеЛичныеДанные[КлючИЗначение.Ключ] <> 
	//			ФизическоеЛицоДанныеФормы[КлючИЗначение.Ключ]);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры	

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ)
	ПроверитьЗаписьВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, Отказ);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ДОПОЛНЕНИЯ ФОРМЫ ЭЛЕМЕНТА СПРАВ. ФИЗИЧЕСКИЕ ЛИЦА

Процедура ДополнитьФормуФизическогоЛица(Форма)
	
	ЛичныеДанныеДополнитьФорму(Форма);
	
КонецПроцедуры

Процедура ЛичныеДанныеДополнитьФорму(Форма) 
	
	//ДобавляемыеРеквизиты = Новый Массив;
	//
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИзмененаДатаРождения", Новый ОписаниеТипов("Булево")));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИзмененыЛичныеДанные", Новый ОписаниеТипов("Булево")));
	//
	//Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры	

Процедура ПрочитатьДанныеФизлица(Форма)
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическоеЛицоОбъект = Форма.ФизическоеЛицоСсылка.ПолучитьОбъект(); 	
	Иначе		
		ФизическоеЛицоОбъект = Форма.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
	КонецЕсли;	
	Форма.ФизическоеЛицоВерсияДанных = ФизическоеЛицоОбъект.ВерсияДанных;
	Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Форма.Сотрудник.ФизическоеЛицо;
	КонецЕсли;	
КонецПроцедуры

Процедура ФизическиеЛицаПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрСотрудников,
		ДоступенПросмотрПерсональныхДанных, Организация = Неопределено, ИзФормыСотрудника = Ложь)
	
	ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
	
КонецПроцедуры

Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ Ожидаются в БСП

// Пересчитывает контактную информацию при выборе физического лица
// для нового сотрудника.
Процедура ОбновитьПоляКонтактнойИнформации(Форма)
	
	ТабЗн = Форма.ФизическоеЛицо.КонтактнаяИнформация.Выгрузить();	 
	
	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		СтрВКИ = ТабЗн.Найти(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "Вид");
		Если СтрВКИ <> Неопределено Тогда
			
			Форма[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = СтрВКИ.Представление;
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей   = ПреобразоватьСтрокуВСписокПолей(СтрВКИ.ЗначенияПолей);
			
		Иначе
				
			Форма[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = "";
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразовать строку полей в список значений
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей)
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = Найти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
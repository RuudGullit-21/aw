////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// АРМ
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьПометкуКнопкиГруппировки(Элементы, Знач НомерКнопки) Экспорт
	
	Элементы.ГруппироватьЗаказыНеГруппировать.Пометка			 = Булево(НомерКнопки = 1);
	Элементы.ГруппироватьЗаказыНеГруппировать.Пометка			 = Булево(НомерКнопки = 1);
	
	Элементы.ГруппироватьЗаказыПоКонтрагенту.Пометка			 = Булево(НомерКнопки = 2);
	Элементы.ГруппироватьЗаказыПоКонтрагенту.Пометка			 = Булево(НомерКнопки = 2);
	
	Элементы.ГруппироватьЗаказыПоАдресуОтправления.Пометка		 = Булево(НомерКнопки = 3);
	Элементы.ГруппироватьЗаказыПоАдресуОтправления.Пометка		 = Булево(НомерКнопки = 3);
	
	Элементы.ГруппироватьЗаказыПоАдресуНазначения.Пометка		 = Булево(НомерКнопки = 4);
	Элементы.ГруппироватьЗаказыПоАдресуНазначения.Пометка		 = Булево(НомерКнопки = 4);
	
	Элементы.ГруппироватьЗаказыПоДатеОтправления.Пометка		 = Булево(НомерКнопки = 5);
	Элементы.ГруппироватьЗаказыПоДатеОтправления.Пометка		 = Булево(НомерКнопки = 5);
	
	Элементы.ГруппироватьЗаказыПоДатеПрибытия.Пометка			 = Булево(НомерКнопки = 6);
	Элементы.ГруппироватьЗаказыПоДатеПрибытия.Пометка			 = Булево(НомерКнопки = 6);
	
	Элементы.ГруппироватьЗаказыПоГрузоотправителю.Пометка		 = Булево(НомерКнопки = 7);
	Элементы.ГруппироватьЗаказыПоГрузоотправителю.Пометка		 = Булево(НомерКнопки = 7);
	
	Элементы.ГруппироватьЗаказыПоГрузополучателю.Пометка		 = Булево(НомерКнопки = 8);
	Элементы.ГруппироватьЗаказыПоГрузополучателю.Пометка		 = Булево(НомерКнопки = 8);
	
	Элементы.ГруппироватьЗаказыПоНаправлениямПеревозки.Пометка	 = Булево(НомерКнопки = 9);
	Элементы.ГруппироватьЗаказыПоНаправлениямПеревозки.Пометка	 = Булево(НомерКнопки = 9);
	
	Элементы.ГруппироватьЗаказыПоМаршруту.Пометка				 = Булево(НомерКнопки = 10);
	Элементы.ГруппироватьЗаказыПоМаршруту.Пометка				 = Булево(НомерКнопки = 10);
	
КонецПроцедуры

Процедура ДобавитьГруппировкуСпискуЗаказов(ЗаказыСписок, ПолеГруппировка = "") Экспорт
	
	ГруппировкаСписка  = ЗаказыСписок.Группировка.Элементы;
	ГруппировкаСписка.Очистить();
	
	Если ЗначениеЗаполнено(ПолеГруппировка) Тогда
		ЭлементГруппировки = ГруппировкаСписка.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле          = Новый ПолеКомпоновкиДанных(ПолеГруппировка);
		ЭлементГруппировки.Использование = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьОтборы(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов) Экспорт
	
	Для Каждого ТекЭлемент Из КомпоновщикДанныхЗаказов Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
			СоздатьОтборы(ТекНастройка, ТекЭлемент.Элементы);
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ЛевоеЗначение) Тогда
				Продолжить;
			КонецЕсли;
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИконкиОтбораИСортировки(Объект) Экспорт
	
	ЕстьОтбор = Ложь;
	
	Для Каждого ТекСтрока Из Объект.ЗаказыСписок.Отбор.Элементы Цикл
		Если ТекСтрока.Использование 
			И ТекСтрока.РежимОтображения <>РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда 
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.ОтборЗоны.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Использование Тогда
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОтбор Тогда
		Если Объект.ОтборПоСвойствамГруза.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
			ЕстьОтбор = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЕстьОтбор Тогда
		Если Объект.ОтборПоСвойствамЗаказа.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
			ЕстьОтбор = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Элементы.ФормаОткрытьОтбор.Картинка = ?(ЕстьОтбор, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
	
	ЕстьСортировка = Ложь;
	
	Для Каждого ТекСтрока Из Объект.ЗаказыСписок.Порядок.Элементы Цикл
		Если ТекСтрока.Использование Тогда 
			ЕстьСортировка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Элементы.ФормаОткрытьСортировку.Картинка = ?(ЕстьСортировка, БиблиотекаКартинок.уатСортировкаУстановлена,
		БиблиотекаКартинок.уатСортировкаНеУстановлена);
	
КонецПроцедуры

Процедура ЗаказыСписокОбновитьПорядок(ЗаказыСписок) Экспорт
	
	ПользовательскиеНастройки = ЗаказыСписок.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ТекущаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ТекущаяНастройка) = Тип("ПорядокКомпоновкиДанных") Тогда
			ТекущаяНастройка.Элементы.Очистить();
			
			Для Каждого ТекСтрока Из ЗаказыСписок.Порядок.Элементы Цикл
				ЭлементПорядка = ТекущаяНастройка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ЭлементПорядка, ТекСтрока);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНастройкиАРМДиспетчера() Экспорт 
	
	НастройкиАРМДиспетчера = "НастройкаРежимОткрытияКарты,
		|НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов,
		|НастройкаКоличествоДнейДоДатыПланирования,
		|НастройкаРежимОткрытияПланировщика,
		|НастройкаПриОткрытииЗаполнятьСпискомТС,
		|ОтображатьЭлектронныеКартыПриОткрытии,
		|НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС,
		|НастройкаВремяАктуальностиКоординат,
		|НастройкаОрганизацияМЛИсточник,
		|НастройкаОрганизацияМЛ,
		|НастройкаПечататьМаршрутныеЛисты,
		|НастройкаКопийПечатныхФормМЛ,
		|НастройкаПечатнаяФормаМЛ,
		|НастройкаСоздаватьПЛ,
		|НастройкаПечататьПЛ,
		|НастройкаКопийПечатныхФормПЛ,
		|НастройкаНеРассчитыватьВыработку,
		|НастройкаОткрыватьФормыДокументов,
		|НастройкаПечататьСразуНаПринтер,
		|НастройкаТолькоСозданныеМЛ,
		|НастройкаТолькоСозданныеПЛ,
		|НастройкаОтображатьТолькоНЕВыполненныеМЛ,
		|НастройкаОтображатьТолькоНЕВыполненныеПЛ,
		|НастройкаТолькоВыбранныеТСМЛ,
		|НастройкаТолькоВыбранныеТСПЛ,
		|НастройкаПечатнаяФормаПЛ";
	
	Возврат НастройкиАРМДиспетчера;
	
КонецФункции

Функция СложитьВремя(Время1, Время2) Экспорт
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (мВремя2 - Цел(мВремя2)) * 100 * 60;
		Если ТипЗнч(мВремя1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;	
		Иначе
			Возврат мВремя;	
		КОнецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения.
// 
// Содержит код, используемый в варианте поставке КОРП
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс


#Область Геозоны

Функция ПолучитьГеозоныПунктаПоПривязке(ПунктНазначения, КэшУскорения = Неопределено) Экспорт
	Рез = Новый СписокЗначений;
	
	Если ТипЗнч(ПунктНазначения) = Тип("Строка") Тогда
		Возврат Рез;
	КонецЕсли;
	
	Если ТипЗнч(ПунктНазначения) = Тип("СписокЗначений") Тогда
		Для Каждого ТекПункт Из ПунктНазначения Цикл
			списГеозоны = ПолучитьГеозоныПунктаПоПривязке(ТекПункт.Значение, КэшУскорения);
			Для Каждого ТекГеозона Из списГеозоны Цикл
				Если Рез.НайтиПоЗначению(ТекГеозона.Значение) = Неопределено Тогда
					Рез.Добавить(ТекГеозона.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Рез;
	КонецЕсли;
	
	Если КэшУскорения = Неопределено Тогда
		КэшУскорения = Новый Структура;
	КонецЕсли;
	Если НЕ КэшУскорения.Свойство("ГеозоныПунктов") Тогда
		КэшУскорения.Вставить("ГеозоныПунктов", Новый Соответствие);
	КонецЕсли;
	ГеозоныПункта = КэшУскорения.ГеозоныПунктов.Получить(ПунктНазначения);
	Если ГеозоныПункта <> Неопределено Тогда
		Возврат ГеозоныПункта;
	КонецЕсли;
	
	ГеозонаПункта = ГеозонаПунктаНазначения(ПунктНазначения);
	Если ЗначениеЗаполнено(ГеозонаПункта) Тогда
		Рез.Добавить(ГеозонаПункта);
	КонецЕсли;
	
	КэшУскорения.ГеозоныПунктов.Вставить(ПунктНазначения, Рез);
	
	Возврат Рез;
КонецФункции

// Возвращает геозону пункта назначения по данным регистра "Привязка пунктов к геозонам"
// Если пункт привязан к нескольким геозонам, то выбирается геозона с максимальным приоритетом
// Если все геозоны пункта имеют одинаковый приоритет, то выбирается первая по коду
// Если пункт не привязан ни к одной геозоне, но привязка уже выполнялась ранее, то возвращается пустая геозона
// Если пункт не привязан ни к одной геозоне, и привязка не выполнялась, то возвращается Неопределено
//
Функция ГеозонаПунктаНазначения(Пункт) Экспорт
	Рез = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПривязкаПунктовНазначенияКГеозонам.Геозона КАК Геозона
	|ИЗ
	|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК уатПривязкаПунктовНазначенияКГеозонам
	|ГДЕ
	|	уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения = &ПунктНазначения
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПривязкаПунктовНазначенияКГеозонам.Геозона.ПриоритетПриРасчетеПоТарифам УБЫВ,
	|	уатПривязкаПунктовНазначенияКГеозонам.Геозона.Код");
	Запрос.УстановитьПараметр("ПунктНазначения", Пункт);
	
	ВыборкаГеозона = Запрос.Выполнить().Выбрать();
	Если ВыборкаГеозона.Следующий() Тогда
		Рез = ВыборкаГеозона.Геозона;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Обработчик регламентного задания уатПривязкаПунктовНазначенияКГеозонам
// Параметры:
//	ПунктНазначения - справочник-ссылка ПунктНазначения или массив пунктов - если значение указано, то вызов процедуры
//		выполняется из справочника уатПунктыНазначения и нужно перепривязать конкретно только этот пункт/массив пунктов
//	Геозона - справочник-ссылка Геозоны - если указано, то привязка пункта выполняется только к этой геозоне, остальные привязки удаляются 
//
Процедура уатПривязкаПунктовНазначенияКГеозонам(ПунктНазначения = Неопределено, Геозона = Неопределено,
	АдресХранилища = Неопределено, РасчетПробегВнеГеозоны = Истина) Экспорт
	флНеУчитыватьПривязанныеПункты = (ПунктНазначения = Неопределено И Геозона <> Неопределено);
	флРучнаяПривязка = (ПунктНазначения <> Неопределено И Геозона <> Неопределено);
	
	Если РасчетПробегВнеГеозоны 
		И ПунктНазначения = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	уатПунктыНазначения.Ссылка КАК Ссылка,
		                      |	уатПунктыНазначения.Лат КАК Лат,
		                      |	уатПунктыНазначения.Лон КАК Лон
		                      |ИЗ
		                      |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		                      |ГДЕ
		                      |	НЕ уатПунктыНазначения.ПометкаУдаления
		                      |	И НЕ уатПунктыНазначения.ЭтоГруппа
		                      |	И уатПунктыНазначения.Лат <> 0
		                      |	И уатПунктыНазначения.Лон <> 0
		                      |	И уатПунктыНазначения.ПробегВнеГеозоны = 0");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			СсылкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СсылкаОбъект.ПробегВнеГеозоны = уатОбщегоНазначения_уэ.ПолучитьПробегВнеГеозоны(Выборка.Лат, Выборка.Лон);
			СсылкаОбъект.Записать();
		КонецЦикла;
	ИначеЕсли РасчетПробегВнеГеозоны Тогда
		Если ТипЗнч(ПунктНазначения) = Тип("Массив") Тогда
			мсвПунктыПробег = ПунктНазначения;
		Иначе
			мсвПунктыПробег = Новый Массив;
			мсвПунктыПробег.Добавить(ПунктНазначения);
		КонецЕсли; 
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	уатПунктыНазначения.Ссылка КАК Ссылка,
		                      |	уатПунктыНазначения.Лат КАК Лат,
		                      |	уатПунктыНазначения.Лон КАК Лон
		                      |ИЗ
		                      |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		                      |ГДЕ
		                      |	НЕ уатПунктыНазначения.ПометкаУдаления
		                      |	И НЕ уатПунктыНазначения.ЭтоГруппа
		                      |	И уатПунктыНазначения.Лат <> 0
		                      |	И уатПунктыНазначения.Лон <> 0
		                      |	И уатПунктыНазначения.ПробегВнеГеозоны = 0
		                      |	И уатПунктыНазначения.Ссылка В (&мсвПривязанныеПункты)");
		Запрос.УстановитьПараметр("мсвПривязанныеПункты", мсвПунктыПробег);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			СсылкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СсылкаОбъект.ПробегВнеГеозоны = уатОбщегоНазначения_уэ.ПолучитьПробегВнеГеозоны(Выборка.Лат, Выборка.Лон);
			СсылкаОбъект.Записать();
		КонецЦикла;

	КонецЕсли;
	
	
	Если ПунктНазначения = Неопределено Тогда
		Если флНеУчитыватьПривязанныеПункты Тогда
			мсвПривязанныеПункты = Новый Массив;
		Иначе
			ЗапросПривязанные = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения КАК ПунктНазначения
			|ИЗ
			|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК уатПривязкаПунктовНазначенияКГеозонам");
			мсвПривязанныеПункты = ЗапросПривязанные.Выполнить().Выгрузить().ВыгрузитьКолонку("ПунктНазначения");
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПунктыНазначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		|ГДЕ
		|	НЕ уатПунктыНазначения.ПометкаУдаления
		|	И НЕ уатПунктыНазначения.ЭтоГруппа
		|	И уатПунктыНазначения.Лат <> 0
		|	И уатПунктыНазначения.Лон <> 0
		|	И НЕ уатПунктыНазначения.Ссылка В (&мсвПривязанныеПункты)");
		Запрос.УстановитьПараметр("мсвПривязанныеПункты", мсвПривязанныеПункты);
		
		мсвПункты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИначеЕсли ТипЗнч(ПунктНазначения) = Тип("Массив") Тогда
		мсвПункты = ПунктНазначения;
	Иначе
		мсвПункты = Новый Массив;
		мсвПункты.Добавить(ПунктНазначения);
	КонецЕсли;

	КэшУскорения = Неопределено;
	ШагВыводаПрогресса = Макс(Окр(мсвПункты.Количество()/10), 1);
	Сч = 0;
	КоличЗаписей = 0;
	Для Каждого ТекПункт Из мсвПункты Цикл
		Сч = Сч + 1;
		
		НЗ_Привязка = РегистрыСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ.СоздатьНаборЗаписей();
		НЗ_Привязка.Отбор.ПунктНазначения.Установить(ТекПункт);
		
		Если флРучнаяПривязка Тогда
			// Ветка выполняется при указании геозоны вручную в форме элемента/списка спр. Пункты
			ЗаписьПривязка = НЗ_Привязка.Добавить();
			ЗаписьПривязка.ПунктНазначения = ТекПункт;
			ЗаписьПривязка.Геозона = Геозона;
		Иначе
			Если ЗначениеЗаполнено(Геозона) Тогда
				// При автопривязке к указанной геозоне записи по остальным геозонам не трогаем
				// ветка выполняется при автопривязке в форме спр. Геозоны
				НЗ_Привязка.Отбор.Геозона.Установить(Геозона);
				
				Если ПунктНаходитсяВГеозоне(ТекПункт, Геозона) Тогда
					ЗаписьПривязка = НЗ_Привязка.Добавить();
					ЗаписьПривязка.ПунктНазначения = ТекПункт;
					ЗаписьПривязка.Геозона = Геозона;
				КонецЕсли;
			Иначе
				// Ветка выполняется при автопривязке в форме элемента/списка спр. Пункты, а также из
				// регл. задания "Привязка пунктов к геозонам" и обработки "Отложенное обновление (соотв. раздел)"
				списГеозоныПункта = ПолучитьГеозоныПунктаПоКоординатам(ТекПункт, КэшУскорения);
				
				Если списГеозоныПункта.Количество() = 0 Тогда
					Запись_Привязка = НЗ_Привязка.Добавить();
					Запись_Привязка.ПунктНазначения = ТекПункт;
				Иначе
					Для Каждого ТекГеозона Из списГеозоныПункта Цикл
						Запись_Привязка = НЗ_Привязка.Добавить();
						Запись_Привязка.ПунктНазначения = ТекПункт;
						Запись_Привязка.Геозона = ТекГеозона.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличЗаписей = КоличЗаписей + НЗ_Привязка.Количество();
		
		НЗ_Привязка.Записать();
		
		Если АдресХранилища <> Неопределено И ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса = 0 Тогда
			ПроцентВыполнения = Окр(Сч/мсвПункты.Количество()*100);
			ТекстНСТР = "Выполняется привязка пунктов к геозонам";
			ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстНСТР, ПроцентВыполнения), АдресХранилища);
		КонецЕсли;
	КонецЦикла;
	
	// запоминаем итоговую информацию
	Если АдресХранилища <> Неопределено Тогда
		ТекстНСТР = СтрШаблон(
			"Привязано %1 пунктов к геозонам. Всего добавлено %2 записей регистра сведений ""Привязка пунктов назначения к геозонам""",
			мсвПункты.Количество(), КоличЗаписей);
		ПоместитьВоВременноеХранилище(Новый Структура("ИтоговоеСообщение", ТекстНСТР), АдресХранилища);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьГеозоныПунктаПоКоординатам(ПунктНазначения, КэшУскорения = Неопределено)
	Рез = Новый СписокЗначений;
	
	Если ТипЗнч(ПунктНазначения) = Тип("Строка") Тогда
		Возврат Рез;
	КонецЕсли;
	
	Если ТипЗнч(ПунктНазначения) = Тип("СписокЗначений") Тогда
		Для Каждого ТекПункт Из ПунктНазначения Цикл
			списГеозоны = ПолучитьГеозоныПунктаПоКоординатам(ТекПункт.Значение, КэшУскорения);
			Для Каждого ТекГеозона Из списГеозоны Цикл
				Если Рез.НайтиПоЗначению(ТекГеозона.Значение) = Неопределено Тогда
					Рез.Добавить(ТекГеозона.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Рез;
	КонецЕсли;
	
	Если КэшУскорения = Неопределено Тогда
		КэшУскорения = Новый Структура;
	КонецЕсли;
	Если НЕ КэшУскорения.Свойство("ГеозоныПунктов") Тогда
		КэшУскорения.Вставить("ГеозоныПунктов", Новый Соответствие);
	КонецЕсли;
	ГеозоныПункта = КэшУскорения.ГеозоныПунктов.Получить(ПунктНазначения);
	Если ГеозоныПункта <> Неопределено Тогда
		Возврат ГеозоныПункта;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГеозоны_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	НЕ уатГеозоны_уэ.ЭтоГруппа
	|	И НЕ уатГеозоны_уэ.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	уатГеозоны_уэ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатГеозоны_уэ.Координаты.Лат) > 2";
	ВыборкаГеозоны = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГеозоны.Следующий() Цикл
		Если ПунктНаходитсяВГеозоне(ПунктНазначения, ВыборкаГеозоны.Ссылка) Тогда
			Рез.Добавить(ВыборкаГеозоны.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	КэшУскорения.ГеозоныПунктов.Вставить(ПунктНазначения, Рез);
	
	Возврат Рез;
КонецФункции

Функция ПунктНаходитсяВГеозоне(ПунктНазначения, Геозона)
	мМассивХ = Новый Массив();
	мМассивУ = Новый Массив();
	
	Для Каждого ТекКоордината Из Геозона.Координаты Цикл
		мМассивХ.Добавить(ТекКоордината.Лат);
		мМассивУ.Добавить(ТекКоордината.Лон);
	КонецЦикла;
	
	Рез = ПунктНазначения.Лат <> 0 И ПунктНазначения.Лон <> 0
		И уатЗащищенныеФункцииСервер_уэ.уэТочкаВПолигоне(мМассивХ, мМассивУ, ПунктНазначения.Лат, ПунктНазначения.Лон);
		
	Возврат Рез;
КонецФункции

// Возвращает геозону пункта назначения по данным регистра "Привязка пунктов к геозонам"
// Если пункт привязан к нескольким геозонам, то выбирается геозона с максимальным приоритетом
// Если все геозоны пункта имеют одинаковый приоритет, то выбирается первая по коду
// Если пункт не привязан ни к одной геозоне, но привязка уже выполнялась ранее, то возвращается пустая геозона
// Если пункт не привязан ни к одной геозоне, и привязка не выполнялась, то возвращается Неопределено
//
Функция ПолучитьПунктыВЗонахОтбора(мсвЗонДляОтбора, мсвПунктов) Экспорт
	мсвТочекПринадлежащихЗонамОтбора = Новый Массив();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	уатПунктыНазначения.Лат КАК Лат,
	|	уатПунктыНазначения.Лон КАК Лон
	|ПОМЕСТИТЬ вт_Пункты
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&ПунктыНазначения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения КАК ПунктНазначения,
	|	ВЫБОР
	|		КОГДА уатПривязкаПунктовНазначенияКГеозонам.Геозона ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Привязан,
	|	вт_Пункты.Лат КАК Лат,
	|	вт_Пункты.Лон КАК Лон
	|ИЗ
	|	вт_Пункты КАК вт_Пункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК уатПривязкаПунктовНазначенияКГеозонам
	|		ПО вт_Пункты.Ссылка = уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения
	|			И (уатПривязкаПунктовНазначенияКГеозонам.Геозона В (&Геозоны))
	|ГДЕ
	|	уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения В(&ПунктыНазначения)");
	Запрос.УстановитьПараметр("ПунктыНазначения", мсвПунктов);
	Запрос.УстановитьПараметр("Геозоны",  мсвЗонДляОтбора);
	
	ВыборкаГеозона = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГеозона.Следующий() Цикл
		Если ВыборкаГеозона.Привязан Тогда
			мсвТочекПринадлежащихЗонамОтбора.Добавить(ВыборкаГеозона.ПунктНазначения);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		мПунктов = Новый Массив();
		Для Каждого ТекСтрока Из мсвПунктов Цикл
			стрРезультат = Новый Структура("Адрес, Лат, Лон", ТекСтрока, ТекСтрока.Лат, ТекСтрока.Лон);
			мПунктов.Добавить(стрРезультат);
		КонецЦикла;
		
		мсвПунктов.Очистить();
		мсвПунктов = мПунктов;
	Иначе
		мсвПунктов.Очистить();
	КонецЕсли;
	
	Возврат мсвТочекПринадлежащихЗонамОтбора;
КонецФункции

Функция ПолучитьПробегВнеГеозоны(Лат, Лон, ВыводитьСообщения = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьЛогистику") Тогда
		Возврат 0;
	КонецЕсли;
	
	// Определим основную зону
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатГеозоны_уэ.Ссылка КАК Ссылка,
	|	уатГеозоны_уэ.Наименование КАК Наименование,
	|	уатГеозоны_уэ.Координаты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Лат КАК Лат,
	|		Лон КАК Лон,
	|		Комментарий КАК Комментарий
	|	) КАК Координаты
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	уатГеозоны_уэ.ЭтоГруппа = ЛОЖЬ
	|	И уатГеозоны_уэ.Основная";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		мМассивХ           = Новый Массив();
		мМассивУ           = Новый Массив();
		МассивТочекГеозоны = Новый Массив();
		Для Каждого ТекКоордината Из Выборка.Координаты.Выгрузить() Цикл
			мМассивХ.Добавить(ТекКоордината.Лат);
			мМассивУ.Добавить(ТекКоордината.Лон);
			МассивТочекГеозоны.Добавить(Новый Структура("Лат, Лон", ТекКоордината.Лат, ТекКоордината.Лон));
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатГеозоны_уэ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
		|ГДЕ
		|	уатГеозоны_уэ.ЭтоГруппа = ЛОЖЬ
		|	И НЕ уатГеозоны_уэ.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой()
			И ВыводитьСообщения Тогда
			ТекстНСТР = НСтр("ru='Не определена основная геозона.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		Возврат 0;
	КонецЕсли;
	// Определяем, находится ли точка внутри зоны или за ее пределами   
	Если Лат <> 0 
		И Лон <> 0 
		И уатЗащищенныеФункцииСервер_уэ.уэТочкаВПолигоне(мМассивХ, мМассивУ, Лат, Лон) Тогда
		Возврат 0;
	Иначе 
		БлижайшаяТочка = БлижайшаяТочкаДоГеозоны(Лат, Лон, МассивТочекГеозоны);   
		
		Результат   = Неопределено;
		ТекстОшибки = "";
		
		ОтрезокПути = Новый Массив();
		ОтрезокПути.Добавить(Новый Структура("Лат, Лон", Лат, Лон));
		ОтрезокПути.Добавить(Новый Структура("Лат, Лон", БлижайшаяТочка.Лат, БлижайшаяТочка.Лон));
		Если уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(ОтрезокПути, Результат, ТекстОшибки) Тогда
			Возврат Результат.Расстояние / 1000;
		Иначе  
			Если ВыводитьСообщения 
				И ЗначениеЗаполнено(ТекстОшибки) Тогда   
				ТекстНСТР = НСтр("ru='Не удалось рассчитать расстояние до основной геозоны.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			КонецЕсли;
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция БлижайшаяТочкаДоГеозоны(Лат, Лон, МассивТочекГеозоны)
	БлижайшаяТочка = МассивТочекГеозоны[0]; 
	МинРасстояние  = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(Лат, Лон, БлижайшаяТочка.Лат, БлижайшаяТочка.Лон);
	
	ТекРасстояние = 0;
	Для Сч = 0 По МассивТочекГеозоны.Количество()-1 Цикл 
		ТекРасстояние = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(Лат, Лон,
			МассивТочекГеозоны[Сч].Лат, МассивТочекГеозоны[Сч].Лон);
		Если ТекРасстояние <> Неопределено
			И ТекРасстояние < МинРасстояние Тогда
			БлижайшаяТочка = МассивТочекГеозоны[Сч];
			МинРасстояние  = ТекРасстояние;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БлижайшаяТочка;
КонецФункции

#КонецОбласти


#Область СкладскаяВыработка

// Функция находит наиболее подходящую норму бесплатного хранения груза на складе
Функция ПолучитьНормуБесплатногоХранения(Период, Склад, Контрагент, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатНормыБесплатногоХранения_уэСрезПоследних.Склад КАК Склад,
	|	уатНормыБесплатногоХранения_уэСрезПоследних.Контрагент КАК Контрагент,
	|	уатНормыБесплатногоХранения_уэСрезПоследних.Организация КАК Организация,
	|	уатНормыБесплатногоХранения_уэСрезПоследних.Норма КАК Норма,
	|	ВЫБОР
	|		КОГДА уатНормыБесплатногоХранения_уэСрезПоследних.Склад = &Склад
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатНормыБесплатногоХранения_уэСрезПоследних.Контрагент = &Контрагент
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатНормыБесплатногоХранения_уэСрезПоследних.Организация = &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.уатНормыБесплатногоХранения_уэ.СрезПоследних(
	|			&Период,
	|			(Склад = &Склад
	|				ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И (Организация = &Организация
	|					ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И (Контрагент = &Контрагент
	|					ИЛИ Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ Контрагент = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ИЛИ Контрагент = НЕОПРЕДЕЛЕНО)) КАК уатНормыБесплатногоХранения_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Норма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Функция возвращает таблицу складской выработки по Заказу на ТС + грузовому месту
Функция ПолучитьСкладскуюВыработку(Заказ, ГрузовоеМесто) Экспорт
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатСкладскоеХранениеГрузов_уэСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втПоследнийДень
	|ИЗ
	|	РегистрСведений.уатСкладскоеХранениеГрузов_уэ.СрезПоследних(
	|			,
	|			Заказ = &Заказ
	|				И (ГрузовоеМесто = &ГрузовоеМесто
	|					ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|						И ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|						И ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))) КАК уатСкладскоеХранениеГрузов_уэСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатВидыУпаковки_уэ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втОсновнойВидУпаковки
	|ИЗ
	|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|ГДЕ
	|	НЕ уатВидыУпаковки_уэ.ЭтоГруппа
	|	И НЕ уатВидыУпаковки_уэ.ПометкаУдаления
	|	И уатВидыУпаковки_уэ.ОсновнойВидУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.Количество
	|		ИНАЧЕ уатСкладскоеХранениеГрузов_уэ.КоличествоМест
	|	КОНЕЦ КАК КоличествоМест,
	|	уатСкладскоеХранениеГрузов_уэ.Вес / &КоэфВеса КАК Вес,
	|	уатСкладскоеХранениеГрузов_уэ.Объем / &КоэфОбъема КАК Объем,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто.ВидУпаковки
	|		ИНАЧЕ втОсновнойВидУпаковки.Ссылка
	|	КОНЕЦ КАК ВидУпаковки,
	|	уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто.ТипКонтейнера КАК ТипКонтейнера,
	|	РАЗНОСТЬДАТ(уатСкладскоеХранениеГрузов_уэ.Период, втПоследнийДень.Период, ДЕНЬ) + ВЫБОР
	|		КОГДА уатСкладскоеХранениеГрузов_уэ.КоличествоМест > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейХранения,
	|	уатСкладскоеХранениеГрузов_уэ.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|				И уатСкладскоеХранениеГрузов_уэ.Количество < 0
	|			ТОГДА -уатСкладскоеХранениеГрузов_уэ.Количество
	|		КОГДА уатСкладскоеХранениеГрузов_уэ.КоличествоМест < 0
	|			ТОГДА -уатСкладскоеХранениеГрузов_уэ.КоличествоМест
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМестРасход
	|ИЗ
	|	РегистрСведений.уатСкладскоеХранениеГрузов_уэ КАК уатСкладскоеХранениеГрузов_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследнийДень КАК втПоследнийДень
	|		ПО уатСкладскоеХранениеГрузов_уэ.Период <= втПоследнийДень.Период,
	|	втОсновнойВидУпаковки КАК втОсновнойВидУпаковки
	|ГДЕ
	|	уатСкладскоеХранениеГрузов_уэ.Заказ = &Заказ
	|	И (уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = &ГрузовоеМесто
	|			ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|				И уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|				И уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|ИТОГИ
	|	СУММА(КоличествоМестРасход)
	|ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто.ВидУпаковки
	|		ИНАЧЕ втОсновнойВидУпаковки.Ссылка
	|	КОНЕЦ КАК ВидУпаковки,
	|	уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто.ТипКонтейнера КАК ТипКонтейнера,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|				И уатСкладскоеХранениеГрузов_уэ.Количество > 0
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.Количество
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|			ТОГДА -уатСкладскоеХранениеГрузов_уэ.Количество
	|		КОГДА уатСкладскоеХранениеГрузов_уэ.КоличествоМест > 0
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.КоличествоМест
	|		ИНАЧЕ -уатСкладскоеХранениеГрузов_уэ.КоличествоМест
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА уатСкладскоеХранениеГрузов_уэ.Вес > 0
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.Вес / &КоэфВеса
	|		ИНАЧЕ -уатСкладскоеХранениеГрузов_уэ.Вес / &КоэфВеса
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА уатСкладскоеХранениеГрузов_уэ.Объем > 0
	|			ТОГДА уатСкладскоеХранениеГрузов_уэ.Объем / &КоэфОбъема
	|		ИНАЧЕ -уатСкладскоеХранениеГрузов_уэ.Объем / &КоэфОбъема
	|	КОНЕЦ КАК Объем,
	|	0 КАК КоличествоМестДни,
	|	0 КАК ВесДни,
	|	0 КАК ОбъемДни,
	|	1 КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка) КАК ПараметрВыработки,
	|	уатСкладскоеХранениеГрузов_уэ.ВидОперации КАК ВидСкладскойОперации,
	|	уатСкладскоеХранениеГрузов_уэ.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.уатСкладскоеХранениеГрузов_уэ КАК уатСкладскоеХранениеГрузов_уэ,
	|	втОсновнойВидУпаковки КАК втОсновнойВидУпаковки
	|ГДЕ
	|	(уатСкладскоеХранениеГрузов_уэ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Приемка)
	|			ИЛИ уатСкладскоеХранениеГрузов_уэ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Отгрузка)
	|			ИЛИ уатСкладскоеХранениеГрузов_уэ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Комплектация)
	|			ИЛИ уатСкладскоеХранениеГрузов_уэ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Разукомплектация))
	|	И уатСкладскоеХранениеГрузов_уэ.Заказ = &Заказ
	|	И (уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = &ГрузовоеМесто
	|			ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|				И уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ &ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|				И уатСкладскоеХранениеГрузов_уэ.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ГрузовоеМесто", ?(ЗначениеЗаполнено(ГрузовоеМесто), ГрузовоеМесто, Неопределено) );
	Запрос.УстановитьПараметр("КоэфВеса", КоэфВеса);
	Запрос.УстановитьПараметр("КоэфОбъема", КоэфОбъема);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаХранение  = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	тблРезультат = МассивРезультатов[3].Выгрузить();
	
	// Таблица тблХранение содержит все данные по хранению грузов. 
	// Выберем только данные по той части груза, которая уже ушла со склада.
	Пока ВыборкаХранение.Следующий() Цикл
		КоличествоМестРасход = ВыборкаХранение.КоличествоМестРасход;
		КоличествоМестПриход = 0;
		СтрокаРезультат = тблРезультат.Добавить();
		СтрокаРезультат.КоличествоМест = 0;
		СтрокаРезультат.Вес = 0;
		СтрокаРезультат.Объем = 0;
		СтрокаРезультат.КоличествоМестДни = 0;
		СтрокаРезультат.ВесДни = 0;
		СтрокаРезультат.ОбъемДни = 0;
		СтрокаРезультат.Количество = 0;
		СтрокаРезультат.Склад = ВыборкаХранение.Склад;
		СтрокаРезультат.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка;
		СтрокаРезультат.ВидСкладскойОперации = Перечисления.уатВидыСкладскихОпераций_уэ.Хранение;
		
		ВыборкаДетали = ВыборкаХранение.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			СтрокаРезультат.ВидУпаковки = ВыборкаДетали.ВидУпаковки;
			СтрокаРезультат.ТипКонтейнера = ВыборкаДетали.ТипКонтейнера;
			
			// В параметр "Количество" для складского хранения попадет количество дней хранения груза на складе.
			// Количество дней хранения груза на складе считается с даты первой приемки по дату последней операции с этим грузом.
			СтрокаРезультат.Количество = Макс(СтрокаРезультат.Количество, ВыборкаДетали.ДнейХранения);
			
			Если ВыборкаДетали.КоличествоМест <= 0 Тогда
				// Расход всегда учитываем полностью. Ситуацию, когда расход больше прихода, не учитываем.
				СтрокаРезультат.КоличествоМестДни = СтрокаРезультат.КоличествоМестДни + ВыборкаДетали.КоличествоМест * ВыборкаДетали.ДнейХранения;
				СтрокаРезультат.ВесДни            = СтрокаРезультат.ВесДни            + ВыборкаДетали.Вес            * ВыборкаДетали.ДнейХранения;
				СтрокаРезультат.ОбъемДни          = СтрокаРезультат.ОбъемДни          + ВыборкаДетали.Объем          * ВыборкаДетали.ДнейХранения;
				СтрокаРезультат.КоличествоМест    = СтрокаРезультат.КоличествоМест    - ВыборкаДетали.КоличествоМест;
				СтрокаРезультат.Вес               = СтрокаРезультат.Вес               - ВыборкаДетали.Вес;
				СтрокаРезультат.Объем             = СтрокаРезультат.Объем             - ВыборкаДетали.Объем;
			Иначе
				Если КоличествоМестПриход >= КоличествоМестРасход Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ВыборкаДетали.КоличествоМест + СтрокаРезультат.КоличествоМест <= КоличествоМестРасход Тогда
					// Приход, который нужно учесть полностью
					СтрокаРезультат.КоличествоМестДни = СтрокаРезультат.КоличествоМестДни + ВыборкаДетали.КоличествоМест * ВыборкаДетали.ДнейХранения;
					СтрокаРезультат.ВесДни            = СтрокаРезультат.ВесДни            + ВыборкаДетали.Вес            * ВыборкаДетали.ДнейХранения;
					СтрокаРезультат.ОбъемДни          = СтрокаРезультат.ОбъемДни          + ВыборкаДетали.Объем          * ВыборкаДетали.ДнейХранения;
					КоличествоМестПриход = КоличествоМестПриход + СтрокаРезультат.КоличествоМест;
				Иначе
					// Приход, который нужно учесть не полностью
					Коэффициент = (КоличествоМестРасход - СтрокаРезультат.КоличествоМест) / ВыборкаДетали.КоличествоМест;
					СтрокаРезультат.КоличествоМестДни = СтрокаРезультат.КоличествоМестДни + ВыборкаДетали.КоличествоМест * ВыборкаДетали.ДнейХранения * Коэффициент;
					СтрокаРезультат.ВесДни            = СтрокаРезультат.ВесДни            + ВыборкаДетали.Вес            * ВыборкаДетали.ДнейХранения * Коэффициент;
					СтрокаРезультат.ОбъемДни          = СтрокаРезультат.ОбъемДни          + ВыборкаДетали.Объем          * ВыборкаДетали.ДнейХранения * Коэффициент;
					КоличествоМестПриход = КоличествоМестРасход;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тблРезультат;
КонецФункции

// Процедура добавляет в таблицу выработки строки, соответствующие пользовательским параметрам выработки,
// рассчитываемым с аналитикой.
Процедура ЗаписатьПараметрыВыработкиСАналитикой(табКоличествоУпаковокПоВидам, тблКоличествоКонтейнеровПоТипамИЗаказам,
	тблПунктыПоТипам, тблТочкиПоТипам, ПараметрыВыработкиТарифов, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ИспользоватьКолонкуЗаказ") Тогда
		ИспользоватьКолонкуЗаказ = ДопПараметры.ИспользоватьКолонкуЗаказ;
	Иначе
		ИспользоватьКолонкуЗаказ = Ложь;
	КонецЕсли;
	Если Не ИспользоватьКолонкуЗаказ Тогда
		табКоличествоУпаковокПоВидам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		тблКоличествоКонтейнеровПоТипамИЗаказам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		тблПунктыПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		тблТочкиПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табКоличествоУпаковокПоВидам.Количество КАК Количество,
	|	табКоличествоУпаковокПоВидам.ВидУпаковки КАК ВидУпаковки,
	|	табКоличествоУпаковокПоВидам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втКоличествоУпаковокПоВидам
	|ИЗ
	|	&табКоличествоУпаковокПоВидам КАК табКоличествоУпаковокПоВидам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.Количество КАК Количество,
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.ТипКонтейнера КАК ТипКонтейнера,
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втКоличествоКонтейнеровПоТипам
	|ИЗ
	|	&тблКоличествоКонтейнеровПоТипамИЗаказам КАК тблКоличествоКонтейнеровПоТипамИЗаказам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблПунктыПоТипам.Количество КАК Количество,
	|	тблПунктыПоТипам.ТипПункта КАК ТипПункта,
	|	тблПунктыПоТипам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втПунктыПоТипам
	|ИЗ
	|	&тблПунктыПоТипам КАК тблПунктыПоТипам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблТочкиПоТипам.Количество КАК Количество,
	|	тблТочкиПоТипам.ТипТочки КАК ТипТочкиМаршрута,
	|	тблТочкиПоТипам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втТочкиПоТипам
	|ИЗ
	|	&тблТочкиПоТипам КАК тблТочкиПоТипам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(втКоличествоУпаковокПоВидам.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(втКоличествоУпаковокПоВидам.Заказ, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)) КАК Заказ
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоУпаковокПоВидам КАК втКоличествоУпаковокПоВидам
	|		ПО уатПараметрыВыработки.ВидУпаковки = втКоличествоУпаковокПоВидам.ВидУпаковки
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки)
	|	И ЕСТЬNULL(втКоличествоУпаковокПоВидам.Количество, 0) > 0
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	втКоличествоКонтейнеровПоТипам.Количество,
	|	втКоличествоКонтейнеровПоТипам.Заказ
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоКонтейнеровПоТипам КАК втКоличествоКонтейнеровПоТипам
	|		ПО уатПараметрыВыработки.ТипКонтейнера = втКоличествоКонтейнеровПоТипам.ТипКонтейнера
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера)
	|	И ЕСТЬNULL(втКоличествоКонтейнеровПоТипам.Количество, 0) > 0
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	ЕСТЬNULL(втПунктыПоТипам.Количество, 0),
	|	ЕСТЬNULL(втПунктыПоТипам.Заказ, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПунктыПоТипам КАК втПунктыПоТипам
	|		ПО уатПараметрыВыработки.ТипПункта = втПунктыПоТипам.ТипПункта
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта)
	|	И ЕСТЬNULL(втПунктыПоТипам.Количество, 0) > 0
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	ЕСТЬNULL(втТочкиПоТипам.Количество, 0),
	|	ЕСТЬNULL(втТочкиПоТипам.Заказ, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТочкиПоТипам КАК втТочкиПоТипам
	|		ПО уатПараметрыВыработки.ТипТочкиМаршрута = втТочкиПоТипам.ТипТочкиМаршрута
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута)
	|	И ЕСТЬNULL(втТочкиПоТипам.Количество, 0) > 0
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности";
	Запрос.УстановитьПараметр("табКоличествоУпаковокПоВидам", табКоличествоУпаковокПоВидам);
	Запрос.УстановитьПараметр("тблКоличествоКонтейнеровПоТипамИЗаказам", тблКоличествоКонтейнеровПоТипамИЗаказам);
	Запрос.УстановитьПараметр("тблПунктыПоТипам", тблПунктыПоТипам);
	Запрос.УстановитьПараметр("тблТочкиПоТипам", тблТочкиПоТипам);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Выборка.Ссылка;
		НоваяСтрока.Количество = Выборка.Количество;
		Если ИспользоватьКолонкуЗаказ Тогда
			НоваяСтрока.Заказ = Выборка.Заказ;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИспользоватьКолонкуЗаказ Тогда
		табКоличествоУпаковокПоВидам.Колонки.Удалить("Заказ");
		тблПунктыПоТипам.Колонки.Удалить("Заказ");
		тблТочкиПоТипам.Колонки.Удалить("Заказ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Кластеры

Процедура уатОбновлениеКластеров_уэ() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Updating of cluster list';ru='Обновление кластеров'");
	
	ТекстНСТР = НСтр("en='Update session starts';ru='Начало сеанса обновления'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Если Не Константы.уатИспользоватьКластеризацию_уэ.Получить() Тогда 
		ТекстНСТР = НСтр("en='Clustering disabled';ru='Кластеризация отключена'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
		ТекстНСТР = НСтр("en='The end of the upgrade session';ru='Окончание сеанса обновления'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	РезультатУспешно = уатЗащищенныеФункцииСервер_уэ.ОбновитьДанныеКластеров();
	
	Если РезультатУспешно Тогда 
		ТекстНСТР = НСтр("en='Update completed successfully';ru='Обновление завершено успешно'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	Иначе 
		ТекстНСТР = НСтр("en='There were errors during the update process. For a description of the errors, see the event log.';ru='В процессе обновления возникли ошибки. Описание ошибок см. в журнале регистрации.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстНСТР);
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='The end of the upgrade session';ru='Окончание сеанса обновления'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

Процедура уатОбновлениеВремениРасстоянияМеждуПунктами_уэ() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Update the time and distance between points';ru='Обновление времени и расстояния между пунктами'");
	
	ТекстНСТР = НСтр("en='Update session starts';ru='Начало сеанса обновления'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	РезультатУспешно = уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами();
	
	Если РезультатУспешно Тогда 
		ТекстНСТР = НСтр("en='Update completed successfully';ru='Обновление завершено успешно'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,,ТекстНСТР);
	Иначе 
		ТекстНСТР = НСтр("en='There were errors during the update process. For a description of the errors, see the event log.';ru='В процессе обновления возникли ошибки. Описание ошибок см. в журнале регистрации.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,,ТекстНСТР);
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='The end of the upgrade session';ru='Окончание сеанса обновления'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,,ТекстНСТР);
	
КонецПроцедуры

#КонецОбласти


#Область Маршрутизатор

Процедура ВыполнитьМаршрутизациюРарус(АдресВрХранилища, Заказы, ЗаказыПоКоординатам, мсвТС, мсвВиртТС, АдресДепо, 
		НастройкаКластеризации, РежимОптимизации, ОграничениеЧасов=0, ОграничениеПоРасстоянию=0, 
		МаксимальноеКоличествоЗаказовТС=0, МаксимальноеЧислоПунктов=0, ВремяВыезда='00010101000000', СжиматьЗаказы=Ложь,
		АлгоритмМаршрутизации=0, ИндивидуальныйГаражТС=Ложь, ВозвратВГаражСобственныеТС=Ложь,
		ВозвратВГаражПривлеченныеТС=Ложь, ВозвратВГаражВиртуальныеТС=Ложь, УчитыватьОграниченияПоЗагрузкеТС=Ложь,
		УчитыватьОкнаПоЗаказам=Ложь, ПараметрыСжатия=Неопределено, УчитыватьРазрешенныеТипыТС=Ложь,
		РежимВремениВыездаИзГаража=0, ПараметрРазмераЗаказа=0, ПриоритетыМаршрутизации=Неопределено,
		УчитыватьОкноПогрузкиТерминалов=Ложь, ИспользоватьВПриоритетеСобственныйТранспорт=Ложь,
		ПонижающийКоэффициентЗагрузкиКузоваПоОбъему=100, ПонижающийКоэффициентЗагрузкиКузоваПоВесу=100,
		КларкРайтРежимДоставки=0, УчитыватьНаправленияПеревозки=Ложь, УчитыватьСекцииТранспортныхСредств=Ложь,
		СмешиватьГрузыВСекциях=Ложь, ИспользоватьХарактеристикиЗаказовНаТС=Ложь) Экспорт
	
	Если Не уатОбщегоНазначенияПовтИсп_проф.ИспользоватьХарактеристикиЗаказовНаТС() Тогда 
		ИспользоватьХарактеристикиЗаказовНаТС = Ложь;
	КонецЕсли;
	
	Если АлгоритмМаршрутизации = 1 Тогда // Кларка-Райта.
		Обработки.уатАРМЛогиста_уэ.ПолучитьРаспределение_КларкРайт(
			АдресВрХранилища, 
			Заказы, 
			ЗаказыПоКоординатам, 
			мсвТС, 
			мсвВиртТС, 
			АдресДепо, 
			НастройкаКластеризации, 
			РежимОптимизации, 
			ОграничениеЧасов,
			ОграничениеПоРасстоянию,
			МаксимальноеКоличествоЗаказовТС,
			МаксимальноеЧислоПунктов,
			ВремяВыезда, 
			СжиматьЗаказы, 
			УчитыватьОграниченияПоЗагрузкеТС, 
			ВозвратВГаражСобственныеТС,
			ВозвратВГаражПривлеченныеТС,
			ВозвратВГаражВиртуальныеТС,
			УчитыватьОкнаПоЗаказам,
			ПараметрыСжатия,
			УчитыватьРазрешенныеТипыТС,
			РежимВремениВыездаИзГаража,
			ПараметрРазмераЗаказа,
			ПриоритетыМаршрутизации,
			УчитыватьОкноПогрузкиТерминалов,
			ИспользоватьВПриоритетеСобственныйТранспорт,
			ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
			ПонижающийКоэффициентЗагрузкиКузоваПоВесу,
			КларкРайтРежимДоставки,
			УчитыватьНаправленияПеревозки,
			УчитыватьСекцииТранспортныхСредств,
			СмешиватьГрузыВСекциях,
			ИспользоватьХарактеристикиЗаказовНаТС
		);
		
	Иначе
		уатЗащищенныеФункцииСервер_уэ.ВыполнитьМаршрутизациюРарус(
			АдресВрХранилища,
			Заказы, 
			ЗаказыПоКоординатам, 
			мсвТС, 
			мсвВиртТС, 
			АдресДепо, 
			НастройкаКластеризации, 
			РежимОптимизации,
			ОграничениеЧасов, 
			ОграничениеПоРасстоянию,
			МаксимальноеКоличествоЗаказовТС,
			МаксимальноеЧислоПунктов,
			ВремяВыезда, 
			СжиматьЗаказы, 
			АлгоритмМаршрутизации, 
			ИндивидуальныйГаражТС, 
			ВозвратВГаражСобственныеТС,
			ВозвратВГаражПривлеченныеТС,
			ВозвратВГаражВиртуальныеТС,
			УчитыватьОграниченияПоЗагрузкеТС,
			ПараметрыСжатия,
			УчитыватьОкнаПоЗаказам,
			УчитыватьРазрешенныеТипыТС,
			РежимВремениВыездаИзГаража,
			ПараметрРазмераЗаказа,
			ПриоритетыМаршрутизации,
			ИспользоватьВПриоритетеСобственныйТранспорт,
			УчитыватьНаправленияПеревозки,
			ИспользоватьХарактеристикиЗаказовНаТС
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРаспределениеЗаказовПоМаршрутам(АдресВрХранилища, мсвЗаказы, мсвТС, 
		УчитыватьКоличество = Истина, УчитыватьОбъем = Истина, УчитыватьГрузоподъемность = Истина,
		ПонижающийКоэффициентЗагрузкиКузоваПоОбъему=100, ПонижающийКоэффициентЗагрузкиКузоваПоВесу=100, 
		НастройкаНесколькоМаршрутныхЛистовНаТС = Ложь) Экспорт
	
	Обработки.уатАРМЛогиста_уэ.ВыполнитьРаспределениеЗаказовПоМаршрутам(АдресВрХранилища, мсвЗаказы, мсвТС, 
		УчитыватьКоличество, УчитыватьОбъем, УчитыватьГрузоподъемность,
		ПонижающийКоэффициентЗагрузкиКузоваПоОбъему, ПонижающийКоэффициентЗагрузкиКузоваПоВесу,
		НастройкаНесколькоМаршрутныхЛистовНаТС
	);
	
КонецПроцедуры

#КонецОбласти


#Область ТараИУпаковка

// Функция предназначена для получения распределения номенклатуры по упаковкам.
//
// Параметры:
//  Номенклатура - элемент справочника номенклатура.
//  Количество   - количество единиц номеклатуры.
// 
// Возвращаемое значение:
//   - Массив - упакованная в упаковки номенклатура.
//
Функция УпаковатьНоменклатуру(Номенклатура, Количество, ВесГруза=0) Экспорт 
	
	Результат = Новый Массив();
	Если НЕ Константы.уатИспользоватьРасчетТары_уэ.Получить() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НоменклатураСсылка", Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.уатВидУпаковкиОсновной КАК ВидУпаковкиОсновной,
	|	СправочникНоменклатура.уатКоличествоВОсновнойУпаковке КАК КоличествоВОсновнойУпаковке,
	|	СправочникНоменклатура.уатВидУпаковкиДляРоссыпи КАК ВидУпаковкиДляРоссыпи,
	|	СправочникНоменклатура.уатКоличествоВУпаковкеДляРоссыпи КАК КоличествоВУпаковкеДляРоссыпи,
	|	ЕстьNULL(СправочникВидУпаковкиРоссыпи.РежимРасчетаВесаОбъемаТары, 0) КАК РежимРасчетаУпаковкиДляРоссыпи,
	|	ЕстьNULL(СправочникОсновнойВидУпаковки.РежимРасчетаВесаОбъемаТары, 0) КАК РежимРасчетаОсновнойУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыУпаковки_уэ КАК СправочникВидУпаковкиРоссыпи
	|		ПО СправочникНоменклатура.уатВидУпаковкиДляРоссыпи = СправочникВидУпаковкиРоссыпи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыУпаковки_уэ КАК СправочникОсновнойВидУпаковки
	|		ПО СправочникНоменклатура.уатВидУпаковкиОсновной = СправочникОсновнойВидУпаковки.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &НоменклатураСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоРаспределить = Количество;
	
	Если Выборка.Следующий() Тогда 
		КоличествоВОсновной = 0;
		КоличествоВРоссыпи  = 0;
		
		Если ЗначениеЗаполнено(Выборка.ВидУпаковкиОсновной) Тогда 
			КоличествоВОсновной = ?(Выборка.КоличествоВОсновнойУпаковке = 0, 0, Цел(КоличествоРаспределить / Выборка.КоличествоВОсновнойУпаковке));
			КоличествоРаспределить = КоличествоРаспределить - (КоличествоВОсновной * Выборка.КоличествоВОсновнойУпаковке);
			
			Если Не ЗначениеЗаполнено(Выборка.ВидУпаковкиДляРоссыпи) Тогда 
				Если Выборка.РежимРасчетаОсновнойУпаковки = 0 Тогда //Округлять.
					Если КоличествоРаспределить > 0 Тогда 
						КоличествоВОсновной = КоличествоВОсновной + 1;
					КонецЕсли;
				Иначе 
					КоличествоВОсновной = КоличествоВОсновной + ?(Выборка.КоличествоВОсновнойУпаковке = 0, 0, (КоличествоРаспределить / Выборка.КоличествоВОсновнойУпаковке));
				КонецЕсли;
				КоличествоРаспределить = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ВидУпаковкиДляРоссыпи) Тогда 
			КоличествоВРоссыпи = ?(Выборка.КоличествоВУпаковкеДляРоссыпи = 0, 0, Цел(КоличествоРаспределить / Выборка.КоличествоВУпаковкеДляРоссыпи));
			КоличествоРаспределить = КоличествоРаспределить - (КоличествоВРоссыпи * Выборка.КоличествоВУпаковкеДляРоссыпи);
			
			Если Выборка.РежимРасчетаУпаковкиДляРоссыпи = 0 Тогда //Округлять.
				Если КоличествоРаспределить > 0 Тогда 
					КоличествоВРоссыпи = КоличествоВРоссыпи + 1;
				КонецЕсли;
			Иначе 
				КоличествоВРоссыпи = КоличествоВРоссыпи + ?(Выборка.КоличествоВУпаковкеДляРоссыпи = 0, 0, (КоличествоРаспределить / Выборка.КоличествоВУпаковкеДляРоссыпи));
			КонецЕсли;
			КоличествоРаспределить = 0;
		КонецЕсли;
		
		Если КоличествоВОсновной > 0 Тогда 
			// Считаем пропорционально по базовому количеству
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("ВидУпаковки", Выборка.ВидУпаковкиОсновной);
			ДанныеСтроки.Вставить("Количество",  КоличествоВОсновной);
			ДанныеСтроки.Вставить("ВесГруза",    ?(Количество=0, 0, ВесГруза * (КоличествоВОсновной * Выборка.КоличествоВОсновнойУпаковке) / Количество));
			ДанныеСтроки.Вставить("ОбъемГруза",  Выборка.ВидУпаковкиОсновной.ОбъемВидаУпаковки * КоличествоВОсновной);
			Результат.Добавить(ДанныеСтроки);
		КонецЕсли;
		
		Если КоличествоВРоссыпи > 0 Тогда 
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("ВидУпаковки", Выборка.ВидУпаковкиДляРоссыпи);
			ДанныеСтроки.Вставить("Количество",  КоличествоВРоссыпи);
			ДанныеСтроки.Вставить("ВесГруза",    ?(Количество=0, 0, ВесГруза * (КоличествоВРоссыпи * Выборка.КоличествоВУпаковкеДляРоссыпи) / Количество));
			ДанныеСтроки.Вставить("ОбъемГруза",  Выборка.ВидУпаковкиДляРоссыпи.ОбъемВидаУпаковки * КоличествоВРоссыпи);
			Результат.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УпаковатьНоменклатуру()

// Функция предназначена для расчета веса тары согласно данным по упаковке.
//
// Параметры:
//  ДанныеУпаковки - массив - данные по упаковке номенклатуры; содержит структуры с ключами "ВидУпаковки" и "Количество".
// 
// Возвращаемое значение:
//   - Число - Суммарный вес всей тары.
//
Функция ПолучитьВесТарыПоУпаковкам(ДанныеУпаковки) Экспорт
	
	ОбщийВесТары = 0;
	Если НЕ Константы.уатИспользоватьРасчетТары_уэ.Получить() Тогда
		Возврат ОбщийВесТары;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДанныеУпаковки Цикл 
		ОбщийВесТары = ОбщийВесТары + (ТекСтрока.ВидУпаковки.ВесТары * ТекСтрока.Количество);
	КонецЦикла;
	
	Возврат ОбщийВесТары;
	
КонецФункции // ПолучитьВесТарыПоУпаковкам()

// Функция предназначена для расчета объема упаковок.
//
// Параметры:
//  ДанныеУпаковки - массив - данные по упаковке номенклатуры; содержит структуры с ключами "ВидУпаковки" и "Количество".
// 
// Возвращаемое значение:
//   - Число - Суммарный объем груза согласно ее упаковке.
//
Функция ПолучитьОбъемГрузаПоУпаковкам(ДанныеУпаковки) Экспорт
	
	ОбъемУпаковок = 0;
	
	Для Каждого ТекСтрока Из ДанныеУпаковки Цикл 
		ОбъемУпаковок = ОбъемУпаковок + (ТекСтрока.ВидУпаковки.ОбъемВидаУпаковки * ТекСтрока.Количество);
	КонецЦикла;
	
	Возврат ОбъемУпаковок;
	
КонецФункции // ПолучитьВесТарыПоУпаковкам()

// Функция предназначена для расчета количества мест упаковок в базовом виде упаковки.
//
// Параметры:
//  ДанныеУпаковки - массив - данные по упаковке номенклатуры; содержит структуры с ключами "ВидУпаковки" и "Количество".
// 
// Возвращаемое значение:
//   - Число - Количество мест в базовом виде упаковки.
//
Функция ПолучитьКоличествоМестГрузаПоУпаковкам(ДанныеУпаковки) Экспорт
	
	КоличествоМест = 0;
	
	Для Каждого ТекСтрока Из ДанныеУпаковки Цикл 
		КоличествоМест = КоличествоМест + 
			?(ТекСтрока.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.Количество / ТекСтрока.ВидУпаковки.Коэффициент)
	КонецЦикла;
	
	Возврат КоличествоМест;
	
КонецФункции // ПолучитьКоличествоМестГрузаПоУпаковкам()

// Функция предназначена для расчета реквизитов "ВесТары", "Группа", "Паллета", "Размещение" в маршрутном листе.
//
// Параметры:
//  мсвЗаказы                                    - содержит структуры с данными о заказе. Ключи структуры "Заказ",
//													"Груз", "Количество".
//  УчитыватьГруппировкуВМаршрутномЛисте         - Необходимость производить группировку заказов.
//  ВесОтдельнойГруппировки                      - Суммарный вес всех заказов в пункте, по достижению которого 
//													под такие заказы будет выделяться новая группа.
//  УчитыватьУпаковкуВПаллетыВМЛ                 - Необходимость упаковки груза в паллеты.
//  ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему - Понижающий коэффициент объема одной паллеты.
// 
// Возвращаемое значение:
//   - Таблица значений с требуемыми данными: "ВесТары", "Группа", "Паллета", "Размещение".
//
Функция РасчитатьРазмещениеЗаказовМаршрутногоЛиста(мсвЗаказы, УчитыватьГруппировкуВМаршрутномЛисте=Ложь, ВесОтдельнойГруппировки=0,
		УчитыватьУпаковкуВПаллетыВМЛ=Ложь, ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему=100) Экспорт
	
	ДанныеРазмещения = Новый ТаблицаЗначений();
	ДанныеРазмещения.Колонки.Добавить("Заказ",                               Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ДанныеРазмещения.Колонки.Добавить("Груз",                                Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
	ДанныеРазмещения.Колонки.Добавить("Количество",                          Новый ОписаниеТипов("Число"));
	ДанныеРазмещения.Колонки.Добавить("ВесПоЗаказу",                         Новый ОписаниеТипов("Число"));
	ДанныеРазмещения.Колонки.Добавить("ОбъемПоЗаказу",                       Новый ОписаниеТипов("Число"));
	ДанныеРазмещения.Колонки.Добавить("ДоставкаВПаллетах",                   Новый ОписаниеТипов("Булево"));
	ДанныеРазмещения.Колонки.Добавить("ДоставкаВМонопаллетах",               Новый ОписаниеТипов("Булево"));
	ДанныеРазмещения.Колонки.Добавить("ОтдельнаяГруппировкаПриКомплектации", Новый ОписаниеТипов("Булево"));
	ДанныеРазмещения.Колонки.Добавить("АдресНазначения",                     Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ДанныеРазмещения.Колонки.Добавить("ОтдельнаяГруппировкаПоКонтрагенту",   Новый ОписаниеТипов("Булево"));
	ДанныеРазмещения.Колонки.Добавить("Контрагент",                          Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты"));
	ДанныеРазмещения.Колонки.Добавить("Тара",                                Новый ОписаниеТипов("ТаблицаЗначений"));
	ДанныеРазмещения.Колонки.Добавить("ВесТары",                             Новый ОписаниеТипов("Число"));
	ДанныеРазмещения.Колонки.Добавить("Группа",                              Новый ОписаниеТипов("Число"));
	ДанныеРазмещения.Колонки.Добавить("Паллета",                             Новый ОписаниеТипов("Строка"));
	ДанныеРазмещения.Колонки.Добавить("Размещение",                          Новый ОписаниеТипов("Строка"));
	
	// Этап 1: заполнение таблицы исходными данными.
	РасчитатьРазмещениеЗаказовЗаполнитьИсходныеДанные(мсвЗаказы, ДанныеРазмещения);
	
	// Этап 2: определение состава тары, общего веса тары.
	РасчитатьРазмещениеЗаказовОпределитьСоставТары(ДанныеРазмещения);
	
	// Этап 3: расчет номера группы, в которую входит заказ.
	Если УчитыватьГруппировкуВМаршрутномЛисте Тогда 
		РасчитатьРазмещениеЗаказовОпределитьНомерГруппы(ДанныеРазмещения, ВесОтдельнойГруппировки);
	КонецЕсли;
	
	// Этап 4: расчет номера паллеты, в которую входит груз.
	Если УчитыватьУпаковкуВПаллетыВМЛ Тогда 
		РасчитатьРазмещениеЗаказовОпределитьНомерПаллеты(ДанныеРазмещения, ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему);
	КонецЕсли;
	
	// Этап 5: заполнение реквизита "Размещение".
	РасчитатьРазмещениеЗаказовЗаполнитьРеквизитРазмещение(ДанныеРазмещения);
	
	Возврат ДанныеРазмещения;
	
КонецФункции // РасчитатьРазмещениеЗаказовМаршрутногоЛиста()

Процедура РасчитатьРазмещениеЗаказовЗаполнитьИсходныеДанные(мсвЗаказы, ДанныеРазмещения)
	
	ТабЗаказыЗапрос = Новый ТаблицаЗначений();
	ТабЗаказыЗапрос.Колонки.Добавить("Заказ",      Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабЗаказыЗапрос.Колонки.Добавить("Груз",       Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
	ТабЗаказыЗапрос.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из мсвЗаказы Цикл 
		НовСтрока = ТабЗаказыЗапрос.Добавить();
		НовСтрока.Заказ      = ТекСтрока.Заказ;
		НовСтрока.Груз       = ТекСтрока.Груз;
		НовСтрока.Количество = ТекСтрока.Количество;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабЗаказы", ТабЗаказыЗапрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗаказы.Заказ КАК Заказ,
	|	ТабЗаказы.Груз КАК Груз,
	|	ТабЗаказы.Количество КАК Количество
	|ПОМЕСТИТЬ ВРТ_Заказы
	|ИЗ
	|	&ТабЗаказы КАК ТабЗаказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Груз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_Заказы.Заказ КАК Заказ,
	|	ВРТ_Заказы.Груз КАК Груз,
	|	ВРТ_Заказы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ДанныеПоЗаказам.КоличествоПоЗаказу = 0
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеПоЗаказам.ВесПоЗаказу * ВРТ_Заказы.Количество / ДанныеПоЗаказам.КоличествоПоЗаказу
	|	КОНЕЦ КАК ВесПоЗаказу,
	|	ВЫБОР
	|		КОГДА ДанныеПоЗаказам.КоличествоПоЗаказу = 0
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеПоЗаказам.ОбъемПоЗаказу * ВРТ_Заказы.Количество / ДанныеПоЗаказам.КоличествоПоЗаказу
	|	КОНЕЦ КАК ОбъемПоЗаказу,
	|	ЕСТЬNULL(ДокументЗаказНаТС.АдресНазначения.ДоставкаВПаллетах, ЛОЖЬ) КАК ДоставкаВПаллетах,
	|	ЕСТЬNULL(ДокументЗаказНаТС.АдресНазначения.ДоставкаВМонопаллетах, ЛОЖЬ) КАК ДоставкаВМонопаллетах,
	|	ЕСТЬNULL(ДокументЗаказНаТС.АдресНазначения.ОтдельнаяГруппировкаПриКомплектации, ЛОЖЬ) КАК ОтдельнаяГруппировкаПриКомплектации,
	|	ДокументЗаказНаТС.АдресНазначения КАК АдресНазначения,
	|	ДокументЗаказНаТС.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументЗаказНаТС.Контрагент) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ДокументЗаказНаТС.Контрагент.уатОтдельнаяГруппировкаПриКомплектации
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтдельнаяГруппировкаПоКонтрагенту
	|ИЗ
	|	ВРТ_Заказы КАК ВРТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК Заказ,
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК Груз,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест) КАК КоличествоПоЗаказу,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто) КАК ВесПоЗаказу,
	|			СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем) КАК ОбъемПоЗаказу
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ГДЕ
	|			уатЗаказГрузоотправителяГрузовойСостав.Ссылка В
	|					(ВЫБРАТЬ
	|						ВРТ.Заказ
	|					ИЗ
	|						ВРТ_Заказы КАК ВРТ)
	|			И уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузовойСостав.Ссылка,
	|			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Ссылка,
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			СУММА(ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения.Коэффициент, 1) * уатЗаказГрузоотправителяТовары.Количество),
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем)
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ГДЕ
	|			уатЗаказГрузоотправителяТовары.Ссылка В
	|					(ВЫБРАТЬ
	|						ВРТ.Заказ
	|					ИЗ
	|						ВРТ_Заказы КАК ВРТ)
	|			И уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Ссылка,
	|			уатЗаказГрузоотправителяТовары.Номенклатура
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителя.Ссылка,
	|			НЕОПРЕДЕЛЕНО,
	|			1,
	|			уатЗаказГрузоотправителя.ВесБрутто,
	|			уатЗаказГрузоотправителя.Объем
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ГДЕ
	|			уатЗаказГрузоотправителя.Ссылка В
	|					(ВЫБРАТЬ
	|						ВРТ.Заказ
	|					ИЗ
	|						ВРТ_Заказы КАК ВРТ)
	|			И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)) КАК ДанныеПоЗаказам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК ДокументЗаказНаТС
	|			ПО ДанныеПоЗаказам.Заказ = ДокументЗаказНаТС.Ссылка
	|		ПО ВРТ_Заказы.Заказ = ДанныеПоЗаказам.Заказ
	|			И ВРТ_Заказы.Груз = ДанныеПоЗаказам.Груз";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НовСтрока = ДанныеРазмещения.Добавить();
		НовСтрока.Заказ                               = Выборка.Заказ;
		НовСтрока.Груз                                = Выборка.Груз;
		НовСтрока.Количество                          = Выборка.Количество;
		НовСтрока.ВесПоЗаказу                         = Выборка.ВесПоЗаказу;
		НовСтрока.ОбъемПоЗаказу                       = Выборка.ОбъемПоЗаказу;
		НовСтрока.ДоставкаВПаллетах                   = Выборка.ДоставкаВПаллетах;
		НовСтрока.ДоставкаВМонопаллетах               = Выборка.ДоставкаВМонопаллетах;
		НовСтрока.ОтдельнаяГруппировкаПриКомплектации = Выборка.ОтдельнаяГруппировкаПриКомплектации;
		НовСтрока.АдресНазначения                     = Выборка.АдресНазначения;
		НовСтрока.ОтдельнаяГруппировкаПоКонтрагенту   = Выборка.ОтдельнаяГруппировкаПоКонтрагенту;
		НовСтрока.Контрагент                          = Выборка.Контрагент;
		
		НовСтрока.Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		НовСтрока.Тара.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		НовСтрока.Тара.Колонки.Добавить("ВесТары",    Новый ОписаниеТипов("Число"));
		НовСтрока.Тара.Колонки.Добавить("ВесГруза",   Новый ОписаниеТипов("Число"));
		НовСтрока.Тара.Колонки.Добавить("ОбъемГруза", Новый ОписаниеТипов("Число"));
		НовСтрока.Тара.Колонки.Добавить("Паллеты",    Новый ОписаниеТипов("Массив"));
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьРазмещениеЗаказовОпределитьСоставТары(ДанныеРазмещения)
	
	Для Каждого СтрокаРазмещения Из ДанныеРазмещения Цикл 
		Если СтрокаРазмещения.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого ТекСтрокаГруз Из СтрокаРазмещения.Заказ.ГрузовойСостав Цикл
				Если НЕ СтрокаРазмещения.Груз = ТекСтрокаГруз.ГрузовоеМесто Тогда 
					Продолжить;
				КонецЕсли;
				
				НайдСтрока = СтрокаРазмещения.Тара.Найти(ТекСтрокаГруз.ВидУпаковки, "Тара");
				Если НайдСтрока = Неопределено Тогда 
					НайдСтрока = СтрокаРазмещения.Тара.Добавить();
					НайдСтрока.Тара = ТекСтрокаГруз.ВидУпаковки;
				КонецЕсли;
				
				НайдСтрока.Количество = НайдСтрока.Количество + СтрокаРазмещения.Количество;
				НайдСтрока.ВесТары    = НайдСтрока.ВесТары + (ТекСтрокаГруз.ВидУпаковки.ВесТары * СтрокаРазмещения.Количество);
				НайдСтрока.ВесГруза   = НайдСтрока.ВесГруза + ТекСтрокаГруз.ГрузовоеМесто.ВесБрутто;
				
				Если ТипЗнч(ТекСтрокаГруз.ВидУпаковки) = Тип("СправочникСсылка.уатТипыКонтейнеров_уэ") Тогда
					НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза;
				Иначе
					НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза + (ТекСтрокаГруз.ВидУпаковки.ОбъемВидаУпаковки * СтрокаРазмещения.Количество);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаРазмещения.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(
				СтрокаРазмещения.Груз, 
				СтрокаРазмещения.Количество, 
				СтрокаРазмещения.ВесПоЗаказу
			);
			
			Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
				НайдСтрока = СтрокаРазмещения.Тара.Найти(ТекСтрокаУпаковки.ВидУпаковки, "Тара");
				Если НайдСтрока = Неопределено Тогда 
					НайдСтрока = СтрокаРазмещения.Тара.Добавить();
					НайдСтрока.Тара = ТекСтрокаУпаковки.ВидУпаковки;
				КонецЕсли;
				
				НайдСтрока.Количество = НайдСтрока.Количество + ТекСтрокаУпаковки.Количество;
				НайдСтрока.ВесТары    = НайдСтрока.ВесТары + (ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
				НайдСтрока.ВесГруза   = НайдСтрока.ВесГруза + ТекСтрокаУпаковки.ВесГруза;
				НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза + ТекСтрокаУпаковки.ОбъемГруза;
			КонецЦикла;
			
		Иначе 
			Для Каждого ТекСтрокаГруз Из СтрокаРазмещения.Заказ.ГрузовойСостав Цикл
				НайдСтрока = СтрокаРазмещения.Тара.Найти(ТекСтрокаГруз.ВидУпаковки, "Тара");
				Если НайдСтрока = Неопределено Тогда 
					НайдСтрока = СтрокаРазмещения.Тара.Добавить();
					НайдСтрока.Тара = ТекСтрокаГруз.ВидУпаковки;
				КонецЕсли;
				
				НайдСтрока.Количество = НайдСтрока.Количество + ТекСтрокаГруз.КоличествоМест;
				НайдСтрока.ВесТары    = НайдСтрока.ВесТары + (ТекСтрокаГруз.ВидУпаковки.ВесТары * ТекСтрокаГруз.КоличествоМест);
				НайдСтрока.ВесГруза   = НайдСтрока.ВесГруза + (ТекСтрокаГруз.ГрузовоеМесто.ВесБрутто * ТекСтрокаГруз.КоличествоМест);
				Если ТипЗнч(ТекСтрокаГруз.ВидУпаковки) = Тип("СправочникСсылка.уатТипыКонтейнеров_уэ") Тогда
					НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза;
				Иначе
					НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза + (ТекСтрокаГруз.ВидУпаковки.ОбъемВидаУпаковки * ТекСтрокаГруз.КоличествоМест);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрокаТовар Из СтрокаРазмещения.Заказ.Товары Цикл
				РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(
					ТекСтрокаТовар.Номенклатура, 
					ТекСтрокаТовар.Количество,
					ТекСтрокаТовар.ВесБрутто
				);
				
				Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
					НайдСтрока = СтрокаРазмещения.Тара.Найти(ТекСтрокаУпаковки.ВидУпаковки, "Тара");
					Если НайдСтрока = Неопределено Тогда 
						НайдСтрока = СтрокаРазмещения.Тара.Добавить();
						НайдСтрока.Тара = ТекСтрокаУпаковки.ВидУпаковки;
					КонецЕсли;
					
					НайдСтрока.Количество = НайдСтрока.Количество + ТекСтрокаУпаковки.Количество;
					НайдСтрока.ВесТары    = НайдСтрока.ВесТары + (ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
					НайдСтрока.ВесГруза   = НайдСтрока.ВесГруза + ТекСтрокаУпаковки.ВесГруза;
					НайдСтрока.ОбъемГруза = НайдСтрока.ОбъемГруза + ТекСтрокаУпаковки.ОбъемГруза;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаРазмещения.ВесТары = СтрокаРазмещения.Тара.Итог("ВесТары");
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьРазмещениеЗаказовОпределитьНомерГруппы(ДанныеРазмещения, ВесОтдельнойГруппировки)
	
	ТабЗаказыЗапрос = Новый ТаблицаЗначений();
	ТабЗаказыЗапрос.Колонки.Добавить("Заказ",                             Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабЗаказыЗапрос.Колонки.Добавить("ОтдельнаяГруппа",                   Новый ОписаниеТипов("Булево"));
	ТабЗаказыЗапрос.Колонки.Добавить("АдресНазначения",                   Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТабЗаказыЗапрос.Колонки.Добавить("ОтдельнаяГруппировкаПоКонтрагенту", Новый ОписаниеТипов("Булево"));
	ТабЗаказыЗапрос.Колонки.Добавить("Контрагент",                        Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты"));
	ТабЗаказыЗапрос.Колонки.Добавить("ОбщийВесЗаказа",                    Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из ДанныеРазмещения Цикл 
		НайдСтрока = ТабЗаказыЗапрос.Найти(ТекСтрока.Заказ, "Заказ");
		Если НайдСтрока = Неопределено Тогда 
			НайдСтрока = ТабЗаказыЗапрос.Добавить();
			НайдСтрока.Заказ                             = ТекСтрока.Заказ;
			НайдСтрока.ОтдельнаяГруппа                   = (ТекСтрока.ДоставкаВПаллетах Или ТекСтрока.ОтдельнаяГруппировкаПриКомплектации);
			НайдСтрока.АдресНазначения                   = ТекСтрока.АдресНазначения;
			НайдСтрока.Контрагент                        = ТекСтрока.Контрагент;
			НайдСтрока.ОтдельнаяГруппировкаПоКонтрагенту = ТекСтрока.ОтдельнаяГруппировкаПоКонтрагенту;
		КонецЕсли;
		
		НайдСтрока.ОбщийВесЗаказа = НайдСтрока.ОбщийВесЗаказа + ТекСтрока.ВесПоЗаказу + ТекСтрока.ВесТары;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабЗаказы", ТабЗаказыЗапрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗаказы.Заказ КАК Заказ,
	|	ТабЗаказы.ОтдельнаяГруппа КАК ОтдельнаяГруппа,
	|	ТабЗаказы.АдресНазначения КАК АдресНазначения,
	|	ТабЗаказы.ОтдельнаяГруппировкаПоКонтрагенту КАК ОтдельнаяГруппировкаПоКонтрагенту,
	|	ТабЗаказы.Контрагент КАК Контрагент,
	|	ТабЗаказы.ОбщийВесЗаказа КАК ОбщийВесЗаказа
	|ПОМЕСТИТЬ ВРТ_Заказы
	|ИЗ
	|	&ТабЗаказы КАК ТабЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_Заказы.Заказ КАК Заказ,
	|	ВРТ_Заказы.ОтдельнаяГруппа КАК ОтдельнаяГруппа,
	|	ВЫРАЗИТЬ(ВРТ_Заказы.АдресНазначения КАК Справочник.уатПунктыНазначения) КАК АдресНазначения,
	|	ВРТ_Заказы.ОтдельнаяГруппировкаПоКонтрагенту КАК ОтдельнаяГруппировкаПоКонтрагенту,
	|	ВРТ_Заказы.Контрагент КАК Контрагент,
	|	ВРТ_Заказы.ОбщийВесЗаказа КАК ОбщийВесЗаказа
	|ПОМЕСТИТЬ ВТ_Подготовка
	|ИЗ
	|	ВРТ_Заказы КАК ВРТ_Заказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтдельнаяГруппа,
	|	АдресНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Подготовка.Заказ КАК Заказ,
	|	ВТ_Подготовка.ОтдельнаяГруппа КАК ОтдельнаяГруппа,
	|	ВТ_Подготовка.АдресНазначения КАК АдресНазначения,
	|	ВТ_Подготовка.ОтдельнаяГруппировкаПоКонтрагенту КАК ОтдельнаяГруппировкаПоКонтрагенту,
	|	ВТ_Подготовка.Контрагент КАК Контрагент,
	|	ВТ_Подготовка.ОбщийВесЗаказа КАК ОбщийВесЗаказа
	|ИЗ
	|	ВТ_Подготовка КАК ВТ_Подготовка
	|ИТОГИ
	|	СУММА(ОбщийВесЗаказа)
	|ПО
	|	ОтдельнаяГруппа,
	|	АдресНазначения";
	
	НомераГруппЗаказов = Новый Соответствие();
	
	СчТекНомерГруппы = 1;
	
	ОбщийНомерГруппы = Неопределено;
	ОбщиеНомераГруппКонтрагентов = Новый Соответствие();
	
	ВыборкаОтдельнаяГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтдельнаяГруппа.Следующий() Цикл 
		Если ВыборкаОтдельнаяГруппа.ОтдельнаяГруппа Тогда 
			// Обязательное выделение отдельной группы.
			ВыборкаАдресНазначения = ВыборкаОтдельнаяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАдресНазначения.Следующий() Цикл 
				ВыборкаЗаказы = ВыборкаАдресНазначения.Выбрать();
				Пока ВыборкаЗаказы.Следующий() Цикл 
					НомераГруппЗаказов.Вставить(ВыборкаЗаказы.Заказ, СчТекНомерГруппы);
				КонецЦикла;
				СчТекНомерГруппы = СчТекНомерГруппы + 1;
			КонецЦикла;
			
		Иначе 
			ВыборкаАдресНазначения = ВыборкаОтдельнаяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАдресНазначения.Следующий() Цикл 
				Если ВесОтдельнойГруппировки > 0 И ВыборкаАдресНазначения.ОбщийВесЗаказа >= ВесОтдельнойГруппировки Тогда
					// Обязательное выделение отдельной группы.
					ВыборкаЗаказы = ВыборкаАдресНазначения.Выбрать();
					Пока ВыборкаЗаказы.Следующий() Цикл 
						НомераГруппЗаказов.Вставить(ВыборкаЗаказы.Заказ, СчТекНомерГруппы);
					КонецЦикла;
					СчТекНомерГруппы = СчТекНомерГруппы + 1;
					
				Иначе 
					ВыборкаЗаказы = ВыборкаАдресНазначения.Выбрать();
					Пока ВыборкаЗаказы.Следующий() Цикл 
						Если ВыборкаЗаказы.ОтдельнаяГруппировкаПоКонтрагенту Тогда 
							ТекНомерГруппы = ОбщиеНомераГруппКонтрагентов.Получить(ВыборкаЗаказы.Контрагент);
							Если ТекНомерГруппы = Неопределено Тогда 
								ТекНомерГруппы = СчТекНомерГруппы;
								СчТекНомерГруппы = СчТекНомерГруппы + 1;
								ОбщиеНомераГруппКонтрагентов.Вставить(ВыборкаЗаказы.Контрагент, ТекНомерГруппы);
							КонецЕсли;
						Иначе 
							Если ОбщийНомерГруппы = Неопределено Тогда 
								ОбщийНомерГруппы = СчТекНомерГруппы;
								СчТекНомерГруппы = СчТекНомерГруппы + 1;
							КонецЕсли;
							
							ТекНомерГруппы = ОбщийНомерГруппы;
						КонецЕсли;
						
						НомераГруппЗаказов.Вставить(ВыборкаЗаказы.Заказ, ТекНомерГруппы);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение реквизита "Группа" в данных размещения.
	Для Каждого ТекСтрока Из ДанныеРазмещения Цикл 
		НомерГруппы = НомераГруппЗаказов.Получить(ТекСтрока.Заказ);
		ТекСтрока.Группа = НомерГруппы;
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьРазмещениеЗаказовОпределитьНомерПаллеты(ДанныеРазмещения, ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему)
	
	ОсновнойВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	
	ВыделенныеПаллеты = Новый ТаблицаЗначений();
	ВыделенныеПаллеты.Колонки.Добавить("НомерПаллеты",   Новый ОписаниеТипов("Число"));
	ВыделенныеПаллеты.Колонки.Добавить("ГруппаЗаказов",  Новый ОписаниеТипов("Число"));
	ВыделенныеПаллеты.Колонки.Добавить("Контрагент",     Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты"));
	ВыделенныеПаллеты.Колонки.Добавить("Груз",           Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
	ВыделенныеПаллеты.Колонки.Добавить("Монопаллета",    Новый ОписаниеТипов("Булево"));
	ВыделенныеПаллеты.Колонки.Добавить("СвободныйВес",   Новый ОписаниеТипов("Число"));
	ВыделенныеПаллеты.Колонки.Добавить("СвободныйОбъем", Новый ОписаниеТипов("Число"));
	ВыделенныеПаллеты.Колонки.Добавить("СвободноМест",   Новый ОписаниеТипов("Число"));
	
	ДанныеРазмещения.Сортировать("Группа, Контрагент, Груз, ВесПоЗаказу Убыв");
	
	СчПаллет = 0;
	
	Для Каждого СтрокаРазмещения Из ДанныеРазмещения Цикл 
		Если Не СтрокаРазмещения.ДоставкаВПаллетах Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРазмещения.Тара.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		РасчитатьРазмещениеЗаказовНазначитьПаллеты(
			СтрокаРазмещения, 
			ВыделенныеПаллеты, 
			СчПаллет,
			ОсновнойВидУпаковки.ВесВидаУпаковки, 
			ОсновнойВидУпаковки.ОбъемВидаУпаковки,
			ОсновнойВидУпаковки.Коэффициент,
			ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему
		);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьРазмещениеЗаказовНазначитьПаллеты(СтрокаРазмещения, ВыделенныеПаллеты, СчПаллет,
		Паллета_ВесВидаУпаковки, Паллета_ОбъемВидаУпаковки, Паллета_Коэффициент, ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему)
	
	флОшибкаРазмещения = Ложь;
	
	Для Каждого СтрокаТары Из СтрокаРазмещения.Тара Цикл 
		Если флОшибкаРазмещения Тогда 
			Прервать;
		КонецЕсли;
		
		КоличествоКРаспределению = СтрокаТары.Количество;
		
		ТекВес   = ?(СтрокаТары.Количество = 0, 0, (СтрокаТары.ВесГруза + СтрокаТары.ВесТары) / СтрокаТары.Количество);
		ТекОбъем = ?(СтрокаТары.Количество = 0, 0, СтрокаТары.ОбъемГруза / СтрокаТары.Количество);
		ТекМест  = ?(СтрокаТары.Тара.Коэффициент = 0, 0, 1 / СтрокаТары.Тара.Коэффициент);
		
		Для Сч = 1 По Цел(КоличествоКРаспределению) Цикл 
			Если флОшибкаРазмещения Тогда 
				Прервать;
			КонецЕсли;
			
			флСтрокаРазмещена = Ложь;
			
			ОтборПаллет = Новый Структура();
			ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
			ОтборПаллет.Вставить("Контрагент",    СтрокаРазмещения.Контрагент);
			ОтборПаллет.Вставить("Груз",          СтрокаРазмещения.Груз);
			
			НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
			Для Каждого ТекПаллета Из НаборПаллет Цикл 
				Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
						Или ТекПаллета.СвободноМест < ТекМест Тогда 
					Продолжить;
				КонецЕсли;
				
				КоличествоКРаспределению = КоличествоКРаспределению - 1;
				
				ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
				ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
				ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
				
				СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, 1));
				
				флСтрокаРазмещена = Истина;
				Прервать;
			КонецЦикла;
			
			Если Не флСтрокаРазмещена И Не СтрокаРазмещения.ДоставкаВМонопаллетах Тогда 
				ОтборПаллет = Новый Структура();
				ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
				ОтборПаллет.Вставить("Контрагент",    СтрокаРазмещения.Контрагент);
				ОтборПаллет.Вставить("Монопаллета",   Ложь);
				
				НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
				Для Каждого ТекПаллета Из НаборПаллет Цикл 
					Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
							Или ТекПаллета.СвободноМест < ТекМест Тогда 
						Продолжить;
					КонецЕсли;
					
					КоличествоКРаспределению = КоличествоКРаспределению - 1;
					
					ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
					ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
					ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
					
					СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, 1));
					
					флСтрокаРазмещена = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если Не флСтрокаРазмещена И Не СтрокаРазмещения.ДоставкаВМонопаллетах Тогда 
				ОтборПаллет = Новый Структура();
				ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
				ОтборПаллет.Вставить("Монопаллета",   Ложь);
				
				НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
				Для Каждого ТекПаллета Из НаборПаллет Цикл 
					Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
							Или ТекПаллета.СвободноМест < ТекМест Тогда 
						Продолжить;
					КонецЕсли;
					
					КоличествоКРаспределению = КоличествоКРаспределению - 1;
					
					ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
					ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
					ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
					
					СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, 1));
					
					флСтрокаРазмещена = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если Не флСтрокаРазмещена Тогда 
				Если ТекВес > Паллета_ВесВидаУпаковки 
						Или ТекОбъем > (Паллета_ОбъемВидаУпаковки * ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему / 100)
						Или ТекМест > Паллета_Коэффициент Тогда 
					// Такой груз нельзя упаковать в паллету.
					флОшибкаРазмещения = Истина;
					Прервать;
				КонецЕсли;
				
				// Выделение новой паллеты.
				СчПаллет = СчПаллет + 1;
				
				НовПаллета = ВыделенныеПаллеты.Добавить();
				НовПаллета.НомерПаллеты   = СчПаллет;
				НовПаллета.ГруппаЗаказов  = СтрокаРазмещения.Группа;
				НовПаллета.Контрагент     = СтрокаРазмещения.Контрагент;
				НовПаллета.Груз           = СтрокаРазмещения.Груз;
				НовПаллета.Монопаллета    = СтрокаРазмещения.ДоставкаВМонопаллетах;
				НовПаллета.СвободныйВес   = Паллета_ВесВидаУпаковки - ТекВес;
				НовПаллета.СвободныйОбъем = (Паллета_ОбъемВидаУпаковки * ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему / 100) - ТекОбъем;
				НовПаллета.СвободноМест   = Паллета_Коэффициент - ТекМест;
				
				КоличествоКРаспределению = КоличествоКРаспределению - 1;
				СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", НовПаллета.НомерПаллеты, 1));
			КонецЕсли;
		КонецЦикла;
		
		// Если количество упаковок не целое - необходимо выполнить распределение дробной части.
		Если Не флОшибкаРазмещения И КоличествоКРаспределению > 0 Тогда 
			ТекВес   = ?(СтрокаТары.Количество = 0, 0, (СтрокаТары.ВесГруза + СтрокаТары.ВесТары) * КоличествоКРаспределению / СтрокаТары.Количество);
			ТекОбъем = ?(СтрокаТары.Количество = 0, 0, СтрокаТары.ОбъемГруза * КоличествоКРаспределению / СтрокаТары.Количество);
			ТекМест  = ?(СтрокаТары.Тара.Коэффициент = 0, 0, 1 * КоличествоКРаспределению / СтрокаТары.Тара.Коэффициент);
			
			флСтрокаРазмещена = Ложь;
			
			ОтборПаллет = Новый Структура();
			ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
			ОтборПаллет.Вставить("Контрагент",    СтрокаРазмещения.Контрагент);
			ОтборПаллет.Вставить("Груз",          СтрокаРазмещения.Груз);
			
			НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
			Для Каждого ТекПаллета Из НаборПаллет Цикл 
				Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
						Или ТекПаллета.СвободноМест < ТекМест Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
				ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
				ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
				
				СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, КоличествоКРаспределению));
				КоличествоКРаспределению = 0;
				
				флСтрокаРазмещена = Истина;
				Прервать;
			КонецЦикла;
			
			Если Не флСтрокаРазмещена И Не СтрокаРазмещения.ДоставкаВМонопаллетах Тогда 
				ОтборПаллет = Новый Структура();
				ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
				ОтборПаллет.Вставить("Контрагент",    СтрокаРазмещения.Контрагент);
				ОтборПаллет.Вставить("Монопаллета",   Ложь);
				
				НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
				Для Каждого ТекПаллета Из НаборПаллет Цикл 
					Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
							Или ТекПаллета.СвободноМест < ТекМест Тогда 
						Продолжить;
					КонецЕсли;
					
					ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
					ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
					ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
					
					СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, КоличествоКРаспределению));
					КоличествоКРаспределению = 0;
					
					флСтрокаРазмещена = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если Не флСтрокаРазмещена И Не СтрокаРазмещения.ДоставкаВМонопаллетах Тогда 
				ОтборПаллет = Новый Структура();
				ОтборПаллет.Вставить("ГруппаЗаказов", СтрокаРазмещения.Группа);
				ОтборПаллет.Вставить("Монопаллета",   Ложь);
				
				НаборПаллет = ВыделенныеПаллеты.НайтиСтроки(ОтборПаллет);
				Для Каждого ТекПаллета Из НаборПаллет Цикл 
					Если ТекПаллета.СвободныйВес < ТекВес Или ТекПаллета.СвободныйОбъем < ТекОбъем 
							Или ТекПаллета.СвободноМест < ТекМест Тогда 
						Продолжить;
					КонецЕсли;
					
					ТекПаллета.СвободныйВес   = ТекПаллета.СвободныйВес - ТекВес;
					ТекПаллета.СвободныйОбъем = ТекПаллета.СвободныйОбъем - ТекОбъем;
					ТекПаллета.СвободноМест   = ТекПаллета.СвободноМест - ТекМест;
					
					СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", ТекПаллета.НомерПаллеты, КоличествоКРаспределению));
					КоличествоКРаспределению = 0;
					
					флСтрокаРазмещена = Истина;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если Не флСтрокаРазмещена Тогда 
				Если ТекВес > Паллета_ВесВидаУпаковки 
						Или ТекОбъем > (Паллета_ОбъемВидаУпаковки * ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему / 100)
						Или ТекМест > Паллета_Коэффициент Тогда 
					// Такой груз нельзя упаковать в паллету.
					флОшибкаРазмещения = Истина;
					Прервать;
				КонецЕсли;
				
				// Выделение новой паллеты.
				СчПаллет = СчПаллет + 1;
				
				НовПаллета = ВыделенныеПаллеты.Добавить();
				НовПаллета.НомерПаллеты   = СчПаллет;
				НовПаллета.ГруппаЗаказов  = СтрокаРазмещения.Группа;
				НовПаллета.Контрагент     = СтрокаРазмещения.Контрагент;
				НовПаллета.Груз           = СтрокаРазмещения.Груз;
				НовПаллета.Монопаллета    = СтрокаРазмещения.ДоставкаВМонопаллетах;
				НовПаллета.СвободныйВес   = Паллета_ВесВидаУпаковки - ТекВес;
				НовПаллета.СвободныйОбъем = (Паллета_ОбъемВидаУпаковки * ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему / 100) - ТекОбъем;
				НовПаллета.СвободноМест   = Паллета_Коэффициент - ТекМест;
				
				СтрокаТары.Паллеты.Добавить(Новый Структура("Номер, Количество", НовПаллета.НомерПаллеты, КоличествоКРаспределению));
				КоличествоКРаспределению = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если флОшибкаРазмещения Тогда 
			СтрокаТары.Паллеты.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если флОшибкаРазмещения Тогда 
		СтрокаРазмещения.Паллета = "";
		
	Иначе 
		НомераПаллет = Новый СписокЗначений();
		
		Для Каждого СтрокаТары Из СтрокаРазмещения.Тара Цикл
			Для Каждого СтрокаПаллеты Из СтрокаТары.Паллеты Цикл 
				НайдСтрока = НомераПаллет.НайтиПоЗначению(СтрокаПаллеты.Номер);
				Если НайдСтрока = Неопределено Тогда 
					НомераПаллет.Добавить(СтрокаПаллеты.Номер);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НомераПаллет.СортироватьПоЗначению();
		
		Для Каждого ТекНомер Из НомераПаллет Цикл 
			СтрокаРазмещения.Паллета = СтрокаРазмещения.Паллета + ?(СтрокаРазмещения.Паллета="","", ",")
				+ Формат(ТекНомер.Значение, "ЧГ=0");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчитатьРазмещениеЗаказовЗаполнитьРеквизитРазмещение(ДанныеРазмещения)
	
	Для Каждого СтрокаРазмещения Из ДанныеРазмещения Цикл 
		ТабПаллет = Новый ТаблицаЗначений();
		ТабПаллет.Колонки.Добавить("Паллета",    Новый ОписаниеТипов("Число"));
		ТабПаллет.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		ТабПаллет.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаТары Из СтрокаРазмещения.Тара Цикл 
			Для Каждого СтрокаПаллеты Из СтрокаТары.Паллеты Цикл 
				НовСтрока = ТабПаллет.Добавить();
				НовСтрока.Паллета    = СтрокаПаллеты.Номер;
				НовСтрока.Тара       = СтрокаТары.Тара;
				НовСтрока.Количество = СтрокаПаллеты.Количество;
			КонецЦикла;
		КонецЦикла;
		
		ТабПаллет.Свернуть("Паллета, Тара", "Количество");
		
		КолонкаПаллет = ТабПаллет.Скопировать(, "Паллета");
		КолонкаПаллет.Свернуть("Паллета");
		КолонкаПаллет.Сортировать("Паллета");
		
		СтрокаПаллет = "";
		Для Каждого ТекПаллета Из КолонкаПаллет Цикл 
			СтрокиТары = ТабПаллет.НайтиСтроки(Новый Структура("Паллета", ТекПаллета.Паллета));
			
			СтрокаПаллет = СтрокаПаллет + ?(СтрокаПаллет="", "", "; ") + НСтр("en='Pallet';ru='Паллета'")
				+ " " + ТекПаллета.Паллета + " (";
			
			СтрокаТары = "";
			Для Каждого ТекТара Из СтрокиТары Цикл 
				СтрокаТары = СтрокаТары + ?(СтрокаТары="", "", "; ") + ТекТара.Тара + " - " + ТекТара.Количество + " " + НСтр("en='pcs.';ru='шт'");
			КонецЦикла;
			
			СтрокаПаллет = СтрокаПаллет + СтрокаТары + ")";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаРазмещения.Группа) Тогда 
			СтрокаРазмещения.Размещение = НСтр("en='Group # ';ru='Группа №'") + СтрокаРазмещения.Группа;
			
			Если Не СтрокаПаллет = "" Тогда 
				СтрокаРазмещения.Размещение = СтрокаРазмещения.Размещение + " - ";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРазмещения.Размещение = СтрокаРазмещения.Размещение + СтрокаПаллет;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Уведомления

// Процедура преобразует запись регистра сведений "Очередь уведомлений" в документ, задачу или напоминание
Процедура ОбработатьУведомление(УведомлениеМенеджерЗаписи) Экспорт

	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	МодульРаботаСУведомлениями.ОбработатьУведомление(УведомлениеМенеджерЗаписи);
	
КонецПроцедуры

// Процедура создает запись регистра сведений "Очередь уведомлений"
Процедура СформироватьУведомление(Документ, Событие, ДополнительныеПараметры = Неопределено) Экспорт
	
	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	МодульРаботаСУведомлениями.СформироватьУведомление(Документ, Событие, ДополнительныеПараметры);	
	
КонецПроцедуры

// Процедура формирует сообщения по записям в регистре сведений "Очередь уведомлений".
// Вызывается регламентным заданием "Рассылка уведомлений".
Процедура РассылкаУведомлений() Экспорт
	
	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	МодульРаботаСУведомлениями.РассылкаУведомлений();
	
КонецПроцедуры

// Функция формирует список получателей уведомлений по документу
Функция СформироватьСписокПолучателейУведомлений(Документ, ТипДокумента = Неопределено) Экспорт
	
	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	Возврат МодульРаботаСУведомлениями.СформироватьСписокПолучателейУведомлений(Документ, ТипДокумента);
	
КонецФункции

// Вызывается регламентным заданием "Автоматическая обработка событий".
Процедура АвтоматическаяОбработкаСобытий() Экспорт
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Automatic event handling';ru='Автоматическая обработка событий'");
	
	ТекстНСТР = НСтр("en='Start the processing session';ru='Начало сеанса обработки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСобытияПоПеревозке_уэ.ТипСобытия КАК ТипСобытия,
	               |	уатСобытияПоПеревозке_уэ.ДокументПеревозки КАК ДокументПеревозки,
	               |	уатСобытияПоПеревозке_уэ.Событие КАК Событие,
	               |	уатСобытияПоПеревозке_уэ.ДатаПлан КАК ДатаПлан,
	               |	уатСобытияПоПеревозке_уэ.ДатаФакт КАК ДатаФакт,
	               |	уатСобытияПоПеревозке_уэ.Сформировано КАК Сформировано,
	               |	уатСобытияПоПеревозке_уэ.Выполнено КАК Выполнено
	               |ИЗ
	               |	РегистрСведений.уатСобытияПоПеревозке_уэ КАК уатСобытияПоПеревозке_уэ
	               |ГДЕ
	               |	НЕ уатСобытияПоПеревозке_уэ.Сформировано
	               |	И уатСобытияПоПеревозке_уэ.ДатаПлан <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И уатСобытияПоПеревозке_уэ.ДатаПлан <= &ТекущаяДата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДопПараметры = Новый Структура("ТипСобытия", Выборка.ТипСобытия);
		
		уатОбщегоНазначения_уэ.СформироватьУведомление(Выборка.ДокументПеревозки,
			Перечисления.уатТипыСобытийДляУведомления_уэ.ОбработкаСобытия, ДопПараметры);
			
		НаборЗаписей = РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
		НаборЗаписей.Отбор.ДокументПеревозки.Установить(Выборка.ДокументПеревозки);
		НаборЗаписей.Отбор.Событие.Установить(Выборка.Событие);
		НаборЗаписей.Прочитать();
			
		Если НаборЗаписей.Количество() <> 0 Тогда
			НаборЗаписей[0].Сформировано = Истина;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСобытияПоПеревозке_уэ.ТипСобытия КАК ТипСобытия,
	|	уатСобытияПоПеревозке_уэ.ДокументПеревозки КАК ДокументПеревозки,
	|	уатСобытияПоПеревозке_уэ.Событие КАК Событие,
	|	уатСобытияПоПеревозке_уэ.ДатаПлан КАК ДатаПлан,
	|	уатСобытияПоПеревозке_уэ.Сформировано КАК Сформировано,
	|	уатСобытияПоПеревозке_уэ.Выполнено КАК Выполнено,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.Встреча)
	|			ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЗапланированноеВзаимодействие)
	|					ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.СообщениеSMS)
	|							ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ТелефонныйЗвонок)
	|									ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|											ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(БизнесПроцесс.Задание)
	|													ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаЗавершения
	|												ИНАЧЕ &ТекущаяДата
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаФакт
	|ИЗ
	|	РегистрСведений.уатСобытияПоПеревозке_уэ КАК уатСобытияПоПеревозке_уэ
	|ГДЕ
	|	уатСобытияПоПеревозке_уэ.Выполнено = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.Встреча)
	|				ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания <= &ТекущаяДата
	|						И уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЗапланированноеВзаимодействие)
	|						ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата <= &ТекущаяДата
	|								И уатСобытияПоПеревозке_уэ.Событие.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.СообщениеSMS)
	|								ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить <= &ТекущаяДата
	|										И уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить <> ДАТАВРЕМЯ(1, 1, 1)
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ТелефонныйЗвонок)
	|										ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата <= &ТекущаяДата
	|												И уатСобытияПоПеревозке_уэ.Событие.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|												ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления <= &ТекущаяДата
	|														И уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления <> ДАТАВРЕМЯ(1, 1, 1)
	|											ИНАЧЕ ВЫБОР
	|													КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(БизнесПроцесс.Задание)
	|														ТОГДА уатСобытияПоПеревозке_уэ.Событие.Завершен
	|													ИНАЧЕ ЛОЖЬ
	|												КОНЕЦ
	|										КОНЕЦ
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
		НаборЗаписей.Отбор.ДокументПеревозки.Установить(Выборка.ДокументПеревозки);
		НаборЗаписей.Отбор.Событие.Установить(Выборка.Событие);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НаборЗаписей[0].Выполнено = Истина;
			НаборЗаписей[0].ДатаФакт  = Выборка.ДатаФакт;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the processing session';ru='Окончание сеанса обработки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

#КонецОбласти


#Область РасписанияРейсов

Функция ДанныеРасписания(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено, СтруктураПараметров) Экспорт
	СекундВДне = 60*60*24;
	Если СтруктураПараметров.Свойство("Маршрут") Тогда
		Маршрут = СтруктураПараметров.Маршрут;
	Иначе
		Маршрут = Неопределено;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("АдресОтправления") Тогда
		АдресОтправления = СтруктураПараметров.АдресОтправления;
	Иначе
		АдресОтправления = Неопределено;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("АдресНазначения") Тогда
		АдресНазначения  = СтруктураПараметров.АдресНазначения;
	Иначе
		АдресНазначения = Неопределено;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Грузоотправитель") Тогда
		Грузоотправитель = СтруктураПараметров.Грузоотправитель;
	Иначе
		Грузоотправитель = Неопределено;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Грузополучатель") Тогда
		Грузополучатель  = СтруктураПараметров.Грузополучатель;
	Иначе
		Грузополучатель = Неопределено;
	КонецЕсли;
	
	// Значения по умолчанию
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		// Сегодняшняя дата
		НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		// 1 неделя
		КонецПериода = НачалоПериода + 6*СекундВДне;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ПодходящиеРейсы = Новый ТаблицаЗначений;
	ПодходящиеРейсы.Колонки.Добавить("ДатаОтправления");
	ПодходящиеРейсы.Колонки.Добавить("ДатаПрибытия");
	ПодходящиеРейсы.Колонки.Добавить("ОтправлениеС");
	ПодходящиеРейсы.Колонки.Добавить("ОтправлениеПо");
	ПодходящиеРейсы.Колонки.Добавить("ПрибытиеС");
	ПодходящиеРейсы.Колонки.Добавить("ПрибытиеПо");
	ПодходящиеРейсы.Колонки.Добавить("ПриоритетКонтрагентов");
	ПодходящиеРейсы.Колонки.Добавить("FTL");
	ПодходящиеРейсы.Колонки.Добавить("Выход");
	ПодходящиеРейсы.Колонки.Добавить("Рейс");
	ПодходящиеРейсы.Колонки.Добавить("ДатаУстановки");
	ПодходящиеРейсы.Колонки.Добавить("ДействуетС");
	ПодходящиеРейсы.Колонки.Добавить("ДействуетПо");
	
	Если ЗначениеЗаполнено(Маршрут) Тогда
		// Подбираем расписание по маршруту.
		// Сначала определяем УИДы первого и последнего пункта маршрута.
		// Если пункты отправления и назначения известны и не совпадают с началом и концом маршрута, 
		// пытаемся найти их в маршруте и использовать их УИДы.
		ЭтапыМаршрута = Маршрут.Этапы;
		Если ЭтапыМаршрута.Количество() = 0 Тогда
			// Расписание подобрать невозможно, из-за некорректного маршрута
			Возврат ПодходящиеРейсы;
		ИначеЕсли Не Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда
			// Заполнение по маршрутам с представлением "парами пунктов" возможно только в Путевом листе
			Возврат ПодходящиеРейсы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресОтправления)
			И АдресОтправления <> ЭтапыМаршрута[0].ПунктОтправления Тогда 
			УИДПервогоПункта = Неопределено;
			Для Каждого ТекЭтап Из ЭтапыМаршрута Цикл
				Если ТекЭтап.ПунктОтправления = АдресОтправления
					И (ТекЭтап.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или ТекЭтап.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда
					УИДПервогоПункта = ТекЭтап.УИД;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Пункт не найден, поэтому игнорируем его
			Если УИДПервогоПункта = Неопределено Тогда
				УИДПервогоПункта = ЭтапыМаршрута[0].УИД;
			КонецЕсли;
		Иначе
			УИДПервогоПункта = ЭтапыМаршрута[0].УИД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресНазначения)
			И АдресНазначения <> ЭтапыМаршрута[ЭтапыМаршрута.Количество()-1].ПунктОтправления Тогда
			УИДПоследнегоПункта = Неопределено;
			Для Каждого ТекЭтап Из ЭтапыМаршрута Цикл
				Если ТекЭтап.ПунктОтправления = АдресНазначения
					И (ТекЭтап.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или ТекЭтап.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда
					УИДПоследнегоПункта = ТекЭтап.УИД;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Пункт не найден, поэтому игнорируем его
			Если УИДПоследнегоПункта = Неопределено Тогда
				УИДПоследнегоПункта = ЭтапыМаршрута[ЭтапыМаршрута.Количество()-1].УИД;
			КонецЕсли;
		Иначе
			УИДПоследнегоПункта = ЭтапыМаршрута[ЭтапыМаршрута.Количество()-1].УИД;
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
		|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, уатРасписаниеРейсов.ДнейДоОтправления) КАК МинимальнаяДатаОтправления,
		|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.Выход КАК Выход,
		|	уатРасписаниеРейсов.Рейс КАК Рейс,
		|	уатРасписаниеРейсов.УИДПункта КАК УИДПункта
		|ПОМЕСТИТЬ втДанныеРасписания
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|ГДЕ
		|	уатРасписаниеРейсов.Маршрут = &Маршрут
		|	И (уатРасписаниеРейсов.ДействуетС <= &КонецПериода
		|			ИЛИ уатРасписаниеРейсов.ДействуетС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|	И (уатРасписаниеРейсов.ДействуетПо >= &НачалоПериода
		|			ИЛИ уатРасписаниеРейсов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|	И (уатРасписаниеРейсов.УИДПункта = &УИДПервогоПункта
		|			ИЛИ уатРасписаниеРейсов.УИДПункта = &УИДПоследнегоПункта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеПервогоПункта.ДатаУстановки КАК ДатаУстановки,
		|	втДанныеПервогоПункта.ДнейВПути КАК ДнейВПути,
		|	втДанныеПервогоПункта.FTL КАК FTL,
		|	втДанныеПервогоПункта.ВремяПрибытия КАК ВремяПрибытияПервогоПункта,
		|	втДанныеПервогоПункта.ВремяУбытия КАК ВремяУбытияПервогоПункта,
		|	втДанныеПервогоПункта.ДнейДоОтправления КАК ДнейДоОтправления,
		|	втДанныеПервогоПункта.МинимальнаяДатаОтправления КАК МинимальнаяДатаОтправления,
		|	втДанныеПервогоПункта.ДействуетС КАК ДействуетС,
		|	втДанныеПервогоПункта.ДействуетПо КАК ДействуетПо,
		|	втДанныеПервогоПункта.Выход КАК Выход,
		|	втДанныеПервогоПункта.Рейс КАК Рейс,
		|	втДанныеПоследнегоПункта.ВремяПрибытия КАК ВремяПрибытияПоследнегоПункта,
		|	втДанныеПоследнегоПункта.ВремяУбытия КАК ВремяУбытияПоследнегоПункта,
		|	втДанныеПервогоПункта.Пн КАК Пн,
		|	втДанныеПервогоПункта.Вт КАК Вт,
		|	втДанныеПервогоПункта.Ср КАК Ср,
		|	втДанныеПервогоПункта.Чт КАК Чт,
		|	втДанныеПервогоПункта.Пт КАК Пт,
		|	втДанныеПервогоПункта.Сб КАК Сб,
		|	втДанныеПервогоПункта.Вс КАК Вс,
		|	0 КАК ПриоритетКонтрагентов,
		|	втДанныеПоследнегоПункта.Пн КАК ПнПрибытие,
		|	втДанныеПоследнегоПункта.Вт КАК ВтПрибытие,
		|	втДанныеПоследнегоПункта.Ср КАК СрПрибытие,
		|	втДанныеПоследнегоПункта.Чт КАК ЧтПрибытие,
		|	втДанныеПоследнегоПункта.Пт КАК ПтПрибытие,
		|	втДанныеПоследнегоПункта.Сб КАК СбПрибытие,
		|	втДанныеПоследнегоПункта.Вс КАК ВсПрибытие
		|ИЗ
		|	втДанныеРасписания КАК втДанныеПервогоПункта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРасписания КАК втДанныеПоследнегоПункта
		|		ПО втДанныеПервогоПункта.Выход = втДанныеПоследнегоПункта.Выход
		|			И втДанныеПервогоПункта.Рейс = втДанныеПоследнегоПункта.Рейс
		|			И втДанныеПервогоПункта.ДействуетС = втДанныеПоследнегоПункта.ДействуетС
		|			И втДанныеПервогоПункта.ДействуетПо = втДанныеПоследнегоПункта.ДействуетПо
		|			И втДанныеПервогоПункта.ДатаУстановки = втДанныеПоследнегоПункта.ДатаУстановки
		|			И (втДанныеПервогоПункта.УИДПункта = &УИДПервогоПункта)
		|			И (втДанныеПоследнегоПункта.УИДПункта = &УИДПоследнегоПункта)";
		Запрос.УстановитьПараметр("Маршрут", Маршрут);
		Запрос.УстановитьПараметр("УИДПервогоПункта", УИДПервогоПункта);
		Запрос.УстановитьПараметр("УИДПоследнегоПункта", УИДПоследнегоПункта);
	ИначеЕсли ЗначениеЗаполнено(АдресОтправления) И ЗначениеЗаполнено(АдресНазначения) Тогда
		// Подбираем расписание по пунктам
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
		|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытияПоследнегоПункта,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяУбытияПоследнегоПункта,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяПрибытияПервогоПункта,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытияПервогоПункта,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, уатРасписаниеРейсов.ДнейДоОтправления) КАК МинимальнаяДатаОтправления,
		|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.Выход КАК Выход,
		|	уатРасписаниеРейсов.Рейс КАК Рейс,
		|	ВЫБОР
		|		КОГДА уатРасписаниеРейсов.Грузоотправитель = &Грузоотправитель
		|				И уатРасписаниеРейсов.Грузополучатель = &Грузополучатель
		|			ТОГДА 2
		|		КОГДА уатРасписаниеРейсов.Грузоотправитель = &Грузоотправитель
		|				ИЛИ уатРасписаниеРейсов.Грузополучатель = &Грузополучатель
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПриоритетКонтрагентов,
		|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
		|	уатРасписаниеРейсов.ПунктНазначения КАК ПунктНазначения,
		|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
		|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|ГДЕ
		|	уатРасписаниеРейсов.ПунктОтправления = &ПунктОтправления
		|	И уатРасписаниеРейсов.ПунктНазначения = &ПунктНазначения
		|	И (уатРасписаниеРейсов.Грузоотправитель = &Грузоотправитель
		|			ИЛИ уатРасписаниеРейсов.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И (уатРасписаниеРейсов.Грузополучатель = &Грузополучатель
		|			ИЛИ уатРасписаниеРейсов.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И (уатРасписаниеРейсов.ДействуетС <= &НачалоПериода
		|			ИЛИ уатРасписаниеРейсов.ДействуетС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|	И (уатРасписаниеРейсов.ДействуетПо >= &КонецПериода
		|			ИЛИ уатРасписаниеРейсов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетКонтрагентов УБЫВ";
		Запрос.УстановитьПараметр("ПунктОтправления", АдресОтправления);
		Запрос.УстановитьПараметр("ПунктНазначения",  АдресНазначения);
		Запрос.УстановитьПараметр("Грузоотправитель", Грузоотправитель);
		Запрос.УстановитьПараметр("Грузополучатель",  Грузополучатель);
	Иначе
		// Расписание подобрать невозможно
		Возврат ПодходящиеРейсы;
	КонецЕсли;
	
	// Строим таблицу доступных расписаний, с учетом вытеснения.
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	ДанныеРасписания = Запрос.Выполнить().Выгрузить();
	Если ДанныеРасписания.Количество() = 0 Тогда
		// Расписание подобрать не удалось
		Возврат ПодходящиеРейсы;
	КонецЕсли;
	
	ПромежуточныеДаты = Новый ТаблицаЗначений;
	ПромежуточныеДаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	НоваяСтрока = ПромежуточныеДаты.Добавить();
	НоваяСтрока.Дата = НачалоПериода;
	Для Каждого ТекСтрока Из ДанныеРасписания Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДействуетС) И ТекСтрока.ДействуетС > НачалоПериода Тогда
			НоваяСтрока = ПромежуточныеДаты.Добавить();
			НоваяСтрока.Дата = ТекСтрока.ДействуетС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ДействуетПо) И ТекСтрока.ДействуетПо < КонецПериода Тогда
			НоваяСтрока = ПромежуточныеДаты.Добавить();
			НоваяСтрока.Дата = ТекСтрока.ДействуетПо;
		КонецЕсли;
	КонецЦикла;
	НоваяСтрока = ПромежуточныеДаты.Добавить();
	НоваяСтрока.Дата = КонецПериода;
	ПромежуточныеДаты.Свернуть("Дата");
	ПромежуточныеДаты.Сортировать("Дата");
	
	// Сначала находим расписания на каждый из дней, являющихся границами интервалов
	Для Каждого ТекСтрока Из ПромежуточныеДаты Цикл
		ДобавитьРасписанияЗаПериод(ПодходящиеРейсы, ДанныеРасписания, ТекСтрока.Дата, ТекСтрока.Дата, Маршрут);
	КонецЦикла;
	
	// Теперь находим расписания на каждом из интервалов (не включая границы интервалов). 
	// На каждом из таких периодов все расписания либо действуют на всем периоде, либое не действуют на всем периоде.
	Для Сч = 0 По ПромежуточныеДаты.Количество()-2 Цикл
		ДобавитьРасписанияЗаПериод(ПодходящиеРейсы, ДанныеРасписания, 
			ПромежуточныеДаты[Сч].Дата + СекундВДне, ПромежуточныеДаты[Сч+1].Дата - СекундВДне, Маршрут);
	КонецЦикла;
	
	ПодходящиеРейсы.Сортировать("ПриоритетКонтрагентов Убыв, ДатаОтправления, ОтправлениеС");
	
	Возврат ПодходящиеРейсы;
	
КонецФункции

Процедура ДобавитьРасписанияЗаПериод(ПодходящиеРейсы, ДанныеРасписания, НачалоПериода, КонецПериода, Маршрут)
	СекундВДне = 60*60*24;
	ДнейВПериоде = Окр((КонецПериода - НачалоПериода) / СекундВДне) + 1;
	Если ДнейВПериоде <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем дату самого свежего расписания
	Если ЗначениеЗаполнено(Маршрут) Тогда
		ДатыУстановкиРасписания = ДанныеРасписания.СкопироватьКолонки("Выход, Рейс, ДатаУстановки");
		СтруктураПоиска = Новый Структура("Выход, Рейс");
	Иначе
		ДатыУстановкиРасписания = ДанныеРасписания.СкопироватьКолонки("Грузоотправитель, Грузополучатель, Рейс, ДатаУстановки");
		СтруктураПоиска = Новый Структура("Рейс, Грузоотправитель, Грузополучатель");
	КонецЕсли;
	Для Каждого ТекСтрока Из ДанныеРасписания Цикл
		Если (Не ЗначениеЗаполнено(ТекСтрока.ДействуетС) Или ТекСтрока.ДействуетС <= КонецПериода)
			И (Не ЗначениеЗаполнено(ТекСтрока.ДействуетПо) Или ТекСтрока.ДействуетПо >= НачалоПериода)	Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			НайденныеСтроки = ДатыУстановкиРасписания.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ДатаУстановки = Макс(НайденныеСтроки[0].ДатаУстановки, ТекСтрока.ДатаУстановки);
			Иначе
				НоваяСтрока = ДатыУстановкиРасписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь берем все самые свежие расписания
	Для Каждого ТекСтрока Из ДанныеРасписания Цикл
		Если (Не ЗначениеЗаполнено(ТекСтрока.ДействуетС) Или ТекСтрока.ДействуетС <= КонецПериода)
			И (Не ЗначениеЗаполнено(ТекСтрока.ДействуетПо) Или ТекСтрока.ДействуетПо >= НачалоПериода) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			НайденныеСтроки = ДатыУстановкиРасписания.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 
				И ТекСтрока.ДатаУстановки = НайденныеСтроки[0].ДатаУстановки Тогда
				// Проверяем по дням недели
				Для СчДней = 0 По ДнейВПериоде-1 Цикл
					ТекДень = НачалоПериода + СчДней*СекундВДне;
					Если ТекДень < ТекСтрока.МинимальнаяДатаОтправления Тогда
						Продолжить;
					КонецЕсли;
					ТекДеньНедели = ДеньНедели(ТекДень);
					Если ТекДеньНедели = 1 И ТекСтрока.Пн
						Или ТекДеньНедели = 2 И ТекСтрока.Вт
						Или ТекДеньНедели = 3 И ТекСтрока.Ср
						Или ТекДеньНедели = 4 И ТекСтрока.Чт
						Или ТекДеньНедели = 5 И ТекСтрока.Пт
						Или ТекДеньНедели = 6 И ТекСтрока.Сб
						Или ТекДеньНедели = 7 И ТекСтрока.Вс Тогда
						Если ЗначениеЗаполнено(Маршрут) Тогда
							// Определяем день прибытия по дням недели
							ДатаПрибытия = ПолучитьСледующийДеньПоДнямНедели(ТекДень, ТекСтрока.ПнПрибытие, ТекСтрока.ВтПрибытие, 
							ТекСтрока.СрПрибытие, ТекСтрока.ЧтПрибытие, ТекСтрока.ПтПрибытие, ТекСтрока.СбПрибытие, ТекСтрока.ВсПрибытие,
							ТекСтрока.ВремяПрибытияПервогоПункта <= ТекСтрока.ВремяПрибытияПоследнегоПункта);
							Если ДатаПрибытия = Неопределено Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							// Определяем день прибытия по количеству полных суток в пути ДнейВПути
							Если ТекСтрока.ВремяПрибытияПервогоПункта > ТекСтрока.ВремяПрибытияПоследнегоПункта Тогда
								// Сделано, чтобы корректно заполнилось расписание с отправлением в 23:00 и прибытием в 1:00 следующего дня.
								// В этом случае ДнейВПути должно быть 0, т.к. время в пути меньше 1 полного дня.
								ДатаПрибытия = ТекДень + СекундВДне*(ТекСтрока.ДнейВПути + 1);
							Иначе
								ДатаПрибытия = ТекДень + СекундВДне*ТекСтрока.ДнейВПути;
							КонецЕсли;
						КонецЕсли;
						НоваяСтрока = ПодходящиеРейсы.Добавить();
						НоваяСтрока.ДатаОтправления = ТекДень;
						НоваяСтрока.ДатаПрибытия = ДатаПрибытия;
						НоваяСтрока.ОтправлениеС = ТекСтрока.ВремяПрибытияПервогоПункта;
						НоваяСтрока.ОтправлениеПо = ТекСтрока.ВремяУбытияПервогоПункта;
						НоваяСтрока.ПрибытиеС = ТекСтрока.ВремяПрибытияПоследнегоПункта;
						НоваяСтрока.ПрибытиеПо = ТекСтрока.ВремяУбытияПоследнегоПункта;
						НоваяСтрока.ПриоритетКонтрагентов = ТекСтрока.ПриоритетКонтрагентов;
						НоваяСтрока.Выход = ТекСтрока.Выход;
						НоваяСтрока.Рейс = ТекСтрока.Рейс;
						НоваяСтрока.ДатаУстановки = ТекСтрока.ДатаУстановки;
						НоваяСтрока.ДействуетС = ТекСтрока.ДействуетС;
						НоваяСтрока.ДействуетПо = ТекСтрока.ДействуетПо;
						НоваяСтрока.FTL = ТекСтрока.FTL;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция БлижайшийДоступныйРейс(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено, СтруктураПараметров) Экспорт
	
	Если Не уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущееВремя = '00010101' + (ТекущаяДатаСеанса - НачалоДня(ТекущаяДатаСеанса));
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = НачалоДня(ТекущаяДатаСеанса);
	Иначе
		НачалоПериода = НачалоДня(НачалоПериода);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		СекундВДне = 24*60*60;
		// Период захватывает 8 дней, чтобы корректно обрабатывался случай, 
		// когда единственный рейс отправляется в текущий день недели и на момент поиска расписания он уже отправлен.
		КонецПериода = НачалоПериода + СекундВДне * 7;
	Иначе
		КонецПериода = НачалоДня(КонецПериода);
	КонецЕсли;
	
	ПодходящиеРейсы = ДанныеРасписания(НачалоПериода, КонецПериода, СтруктураПараметров);
	Результат = Неопределено;
	Для Каждого ТекПодходящийРейс Из ПодходящиеРейсы Цикл
		Если НачалоДня(НачалоПериода) <> НачалоДня(ТекущаяДатаСеанса)
			Или ТекПодходящийРейс.ДатаОтправления = НачалоДня(НачалоПериода) И ТекПодходящийРейс.ОтправлениеС > ТекущееВремя
			Или ТекПодходящийРейс.ДатаОтправления > НачалоДня(НачалоПериода) Тогда
			Результат = Новый Структура("ДатаОтправления, ДатаПрибытия, FTL, ВремяОтправленияС, ВремяОтправленияПо,
				|ВремяПрибытияС, ВремяПрибытияПо, Выход, Рейс, ДатаУстановки, ДействуетС, ДействуетПо");
			ЗаполнитьЗначенияСвойств(Результат, ТекПодходящийРейс);
			Результат.Вставить("ВремяОтправленияС",  ТекПодходящийРейс.ОтправлениеС);
			Результат.Вставить("ВремяОтправленияПо", ТекПодходящийРейс.ОтправлениеПо);
			Результат.Вставить("ВремяПрибытияС",     ТекПодходящийРейс.ПрибытиеС);
			Результат.Вставить("ВремяПрибытияПо",    ТекПодходящийРейс.ПрибытиеПо);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСледующийДеньПоДнямНедели(Знач ТекущийДень, Пн, Вт, Ср, Чт, Пт, Сб, Вс, ТекущийДеньРазрешен = Истина) Экспорт
	ТекущийДень = НачалоДня(ТекущийДень);
	ТекущийДеньНедели = ДеньНедели(ТекущийДень);
	ДниПрибытия = Новый Массив;
	Если Пн Тогда
		ДниПрибытия.Добавить(1);
		ДниПрибытия.Добавить(8);
	КонецЕсли;
	Если Вт Тогда
		ДниПрибытия.Добавить(2);
		ДниПрибытия.Добавить(9);
	КонецЕсли;
	Если Ср Тогда
		ДниПрибытия.Добавить(3);
		ДниПрибытия.Добавить(10);
	КонецЕсли;
	Если Чт Тогда
		ДниПрибытия.Добавить(4);
		ДниПрибытия.Добавить(11);
	КонецЕсли;
	Если Пт Тогда
		ДниПрибытия.Добавить(5);
		ДниПрибытия.Добавить(12);
	КонецЕсли;
	Если Сб Тогда
		ДниПрибытия.Добавить(6);
		ДниПрибытия.Добавить(13);
	КонецЕсли;
	Если Вс Тогда
		ДниПрибытия.Добавить(7);
		ДниПрибытия.Добавить(14);
	КонецЕсли;
	
	// Теперь выбираем наименьший из дней прибытия после дня отправления
	ДеньНеделиПрибытия = 15;
	Для Каждого ТекДеньПрибытия Из ДниПрибытия Цикл
		Если (ТекущийДеньРазрешен И ТекДеньПрибытия = ТекущийДеньНедели)
			Или ТекДеньПрибытия > ТекущийДеньНедели Тогда
			ДеньНеделиПрибытия = Мин(ДеньНеделиПрибытия, ТекДеньПрибытия);
		КонецЕсли;
	КонецЦикла;
	Если ДеньНеделиПрибытия = 15 Тогда
		// Ошибочная ситуация - подходящий день недели должен был иметь номер от 1 до 14.
		// Могла произойти, только если все дни недели запрещены.
		Возврат Неопределено;
	Иначе
		СекундВДне = 24*60*60;
		Возврат ТекущийДень + СекундВДне*(ДеньНеделиПрибытия - ТекущийДеньНедели);
	КонецЕсли;
КонецФункции

Функция ПолучитьДанныеFTLЗаказаПоРасписанию(ДанныеРасписания) Экспорт
	Результат = Новый Массив;
	Если Не ДанныеРасписания.Свойство("Маршрут") Тогда
		Возврат Результат;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеРасписания.Маршрут) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = НОвый Запрос("ВЫБРАТЬ
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
	|	уатРасписаниеРейсов.Пн КАК Пн,
	|	уатРасписаниеРейсов.Вт КАК Вт,
	|	уатРасписаниеРейсов.Ср КАК Ср,
	|	уатРасписаниеРейсов.Чт КАК Чт,
	|	уатРасписаниеРейсов.Пт КАК Пт,
	|	уатРасписаниеРейсов.Сб КАК Сб,
	|	уатРасписаниеРейсов.Вс КАК Вс
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ПО уатРасписаниеРейсов.Маршрут = уатМаршрутыЭтапы.Ссылка
	|			И уатРасписаниеРейсов.УИДПункта = уатМаршрутыЭтапы.УИД
	|ГДЕ
	|	уатРасписаниеРейсов.Маршрут = &Маршрут
	|	И уатРасписаниеРейсов.Выход = &Выход
	|	И уатРасписаниеРейсов.Рейс = &Рейс
	|	И уатРасписаниеРейсов.ДатаУстановки = &ДатаУстановки
	|	И уатРасписаниеРейсов.ДействуетС = &ДействуетС
	|	И уатРасписаниеРейсов.ДействуетПо = &ДействуетПо
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатМаршрутыЭтапы.НомерСтроки");
	Запрос.УстановитьПараметр("Маршрут", ДанныеРасписания.Маршрут);
	Запрос.УстановитьПараметр("Выход", ДанныеРасписания.Выход);
	Запрос.УстановитьПараметр("Рейс", ДанныеРасписания.Рейс);
	Запрос.УстановитьПараметр("ДатаУстановки", ДанныеРасписания.ДатаУстановки);
	Запрос.УстановитьПараметр("ДействуетС", ДанныеРасписания.ДействуетС);
	Запрос.УстановитьПараметр("ДействуетПо", ДанныеРасписания.ДействуетПо);
	ТаблицаРасписание = Запрос.Выполнить().Выгрузить();
	
	ТекущаяДата = ДанныеРасписания.ДатаОтправления;
	ПредВремяПрибытия = Неопределено;
	СекундВДне = 24*60*60;
	ПустаяДата = Дата('00010101'); 
	Для Каждого ТекСтрокаПункт Из ТаблицаРасписание Цикл
		// Если данные по времени прибытия по расписанию не заполнены, то берем окно из пункта
		Если ТекСтрокаПункт.ВремяПрибытия = ПустаяДата И ТекСтрокаПункт.ВремяУбытия = ПустаяДата Тогда
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекСтрокаПункт.ПунктОтправления);
			ТекСтрокаПункт.ВремяПрибытия  = ВремяДоступности.ВремяДоступностиС;
			Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
				ТекСтрокаПункт.ВремяУбытия = ВремяДоступности.ВремяДоступностиПо;
			Иначе
				ТекСтрокаПункт.ВремяУбытия = '00010101235900';
			КонецЕсли;
		КонецЕсли;
		
		ТекущийДеньРазрешен = (ПредВремяПрибытия = Неопределено Или ПредВремяПрибытия < ТекСтрокаПункт.ВремяПрибытия);
		НоваяТекущаяДата = уатОбщегоНазначения_уэ.ПолучитьСледующийДеньПоДнямНедели(ТекущаяДата, ТекСтрокаПункт.Пн,
			ТекСтрокаПункт.Вт, ТекСтрокаПункт.Ср, ТекСтрокаПункт.Чт, ТекСтрокаПункт.Пт, ТекСтрокаПункт.Сб, ТекСтрокаПункт.Вс,
			ТекущийДеньРазрешен);
		Если Не НоваяТекущаяДата = Неопределено Тогда
			ТекущаяДата = НоваяТекущаяДата;
		КонецЕсли;
		ПредВремяПрибытия = ТекСтрокаПункт.ВремяПрибытия;
		ДатаВремяПрибытия = ТекущаяДата + (ТекСтрокаПункт.ВремяПрибытия - '00010101');
		Если ТекСтрокаПункт.ВремяПрибытия <= ТекСтрокаПункт.ВремяУбытия Тогда
			ДатаВремяУбытия = ТекущаяДата + (ТекСтрокаПункт.ВремяУбытия - '00010101')
		Иначе
			ДатаВремяУбытия = ТекущаяДата + (ТекСтрокаПункт.ВремяУбытия - '00010101') + СекундВДне;
		КонецЕсли;
		СтрокаРезультата = НОвый Структура("Пункт, ПрибытиеПлан, УбытиеПлан", ТекСтрокаПункт.ПунктОтправления, 
			ДатаВремяПрибытия, ДатаВремяУбытия);
		Результат.Добавить(СтрокаРезультата);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти


// Функция предназначена для увеличения требуемого периода для корректного отображения
// на планировщике, в случае, когда период указан настолько малым, что при требуемой
// детализации (видимых дней на планировщике) период был видим.
//
// Параметры:
//  ДатаНачала       - Дата  - требуемая дата начала отображения фона планировщика.
//  ДатаОкончания    - Дата  - требуемая дата окончания отображения фона планировщика.
//  ДнейПланировщика - Число - число отображаемых на планировщике дней.
// 
// Возвращаемое значение:
//   Структура - результирующий период.
//      * ДатаНачала    - Дата - результирующая дата начала отображения фона планировщика.
//      * ДатаОкончания - Дата - результирующая дата окончания отображения фона планировщика.
//
Функция ПолучитьПериодФонаДляПланировщика(ДатаНачала, ДатаОкончания, ДнейПланировщика) Экспорт
	
	Результат = Новый Структура("ДатаНачала,ДатаОкончания", '00010101', '00010101');
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДатаНачала    = ДатаНачала;
	Результат.ДатаОкончания = ДатаОкончания;
	
	РазницаДат = ДатаОкончания - ДатаНачала;
	
	Если РазницаДат <= 300 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 300;
	КонецЕсли;
	
	Если РазницаДат <= 600 И ДнейПланировщика >= 2 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 600;
	КонецЕсли;
	
	Если РазницаДат <= 1200 И ДнейПланировщика >= 3 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 1200;
	КонецЕсли;
	
	Если РазницаДат <= 1800 И ДнейПланировщика >= 4 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 1800;
	КонецЕсли;
	
	Если РазницаДат <= 3600 И ДнейПланировщика >= 10 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 3600;
	КонецЕсли;
	
	Если РазницаДат <= 7200 И ДнейПланировщика >= 17 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 7200;
	КонецЕсли;
	
	Если РазницаДат <= 10800 И ДнейПланировщика >= 30 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 10800;
	КонецЕсли;
	
	Если РазницаДат <= 14400 И ДнейПланировщика >= 38 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 14400;
	КонецЕсли;
	
	Если РазницаДат <= 18000 И ДнейПланировщика >= 48 Тогда 
		Результат.ДатаОкончания = ДатаНачала + 18000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПериодФонаДляПланировщика()

// Устанавливает значение счета затрат в таблице затрат
// Вызывается из обработчиков проведения по регистру затраты
//
//
Процедура ПодставитьСчетЗатратВТаблицуЗатрат(ТаблицаЗатраты, Организация, ТС = Неопределено, Подразделение = Неопределено) Экспорт
	флЕстьКолонкаТС = (ТаблицаЗатраты.Колонки.Найти("ТС") <> Неопределено);
	флЕстьКолонкаПодразделение = (ТаблицаЗатраты.Колонки.Найти("Подразделение") <> Неопределено);
	
	Если ТаблицаЗатраты.Колонки.Найти("СчетЗатрат") = Неопределено Тогда
		ТаблицаЗатраты.Колонки.Добавить("СчетЗатрат");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаЗатраты Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.СчетЗатрат = ТекСтрока.СтатьяРасходов.Счет;
	КонецЦикла;
КонецПроцедуры

// Функция получает данные по рентабельности заказов и ТС для монитора руководителя и отчета.
//
Функция ПолучитьДанныеОРентабельностиЗаказовИТС(ДатаС, ДатаПо, ВыборкаДляМонитора = Ложь, Организация = Неопределено, РаспределятьНаРБП = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаС",  ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
	Запрос.УстановитьПараметр("ФильтроватьПоОрганизации", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ОтборПоОрганизации",       Организация);
	Запрос.УстановитьПараметр("РаспределятьНаРБП", ?(ЗначениеЗаполнено(РаспределятьНаРБП), РаспределятьНаРБП, "Не использовать"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДоходыОбороты.СтатьяДоходов КАК Статья,
	|	уатДоходыОбороты.Организация КАК Организация,
	|	уатДоходыОбороты.Подразделение КАК Подразделение,
	|	уатДоходыОбороты.ТС КАК ТС,
	|	уатДоходыОбороты.Заказ КАК Заказ,
	|	уатДоходыОбороты.Контрагент КАК Контрагент,
	|	уатДоходыОбороты.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатДоходыОбороты.Маршрут КАК Маршрут,
	|	уатДоходыОбороты.ВидПеревозки КАК ВидПеревозки,
	|	уатДоходыОбороты.Регистратор КАК Регистратор,
	|	уатДоходыОбороты.СуммаУпрОборот КАК СуммаДоходов,
	|	уатДоходыОбороты.СуммаУпрОборот - уатДоходыОбороты.СуммаНДСУпрОборот КАК СуммаДоходовБезНДС,
	|	0 КАК СуммаЗатрат,
	|	0 КАК СуммаРасходовБезНДС,
	|	уатДоходыОбороты.СуммаУпрОборот КАК Прибыль,
	|	уатДоходыОбороты.СуммаУпрОборот - уатДоходыОбороты.СуммаНДСУпрОборот КАК ПрибыльБезНДС,
	|	уатДоходыОбороты.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатДоходыОбороты.Период, ГОД) КАК ПериодГод
	|ПОМЕСТИТЬ ВРТ_Регистры
	|ИЗ
	|	РегистрНакопления.уатДоходы.Обороты(
	|			&ДатаС,
	|			&ДатаПо,
	|			Регистратор,
	|			ВЫБОР
	|				КОГДА &ФильтроватьПоОрганизации
	|					ТОГДА Организация = &ОтборПоОрганизации
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК уатДоходыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРасходыОбороты.СтатьяРасходов,
	|	уатРасходыОбороты.Организация,
	|	уатРасходыОбороты.Подразделение,
	|	уатРасходыОбороты.ТС,
	|	уатРасходыОбороты.Заказ,
	|	уатРасходыОбороты.Контрагент,
	|	уатРасходыОбороты.ОбъектСтроительства,
	|	уатРасходыОбороты.Маршрут,
	|	уатРасходыОбороты.ВидПеревозки,
	|	уатРасходыОбороты.Регистратор,
	|	0,
	|	0,
	|	уатРасходыОбороты.СуммаУпрОборот,
	|	уатРасходыОбороты.СуммаУпрОборот - уатРасходыОбороты.СуммаНДСУпрОборот,
	|	-уатРасходыОбороты.СуммаУпрОборот,
	|	-уатРасходыОбороты.СуммаУпрОборот + уатРасходыОбороты.СуммаНДСУпрОборот,
	|	уатРасходыОбороты.Период,
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, НЕДЕЛЯ),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, ДЕКАДА),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, КВАРТАЛ),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, ПОЛУГОДИЕ),
	|	НАЧАЛОПЕРИОДА(уатРасходыОбороты.Период, ГОД)
	|ИЗ
	|	РегистрНакопления.уатРасходы.Обороты(
	|			&ДатаС,
	|			&ДатаПо,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА &ФильтроватьПоОрганизации
	|						ТОГДА Организация = &ОтборПоОрганизации
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &РаспределятьНаРБП = ""Да""
	|						ТОГДА СтатьяРасходов.РаспределятьНаРБП
	|					КОГДА &РаспределятьНаРБП = ""Нет""
	|						ТОГДА НЕ СтатьяРасходов.РаспределятьНаРБП
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК уатРасходыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатФинансовыеРезультатыДоходы.СтатьяДоходов,
	|	уатФинансовыеРезультатыДоходы.Организация,
	|	уатФинансовыеРезультатыДоходы.Подразделение,
	|	уатФинансовыеРезультатыДоходы.ТС,
	|	уатФинансовыеРезультатыДоходы.Заказ,
	|	уатФинансовыеРезультатыДоходы.Контрагент,
	|	уатФинансовыеРезультатыДоходы.ОбъектСтроительства,
	|	уатФинансовыеРезультатыДоходы.Маршрут,
	|	уатФинансовыеРезультатыДоходы.ВидПеревозки,
	|	уатФинансовыеРезультатыДоходы.Регистратор,
	|	уатФинансовыеРезультатыДоходы.СуммаДоходовУпрОборот,
	|	уатФинансовыеРезультатыДоходы.СуммаДоходовБезНДСУпрОборот,
	|	0,
	|	0,
	|	уатФинансовыеРезультатыДоходы.СуммаДоходовУпрОборот,
	|	уатФинансовыеРезультатыДоходы.СуммаДоходовБезНДСУпрОборот,
	|	уатФинансовыеРезультатыДоходы.Период,
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, НЕДЕЛЯ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, ДЕКАДА),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, КВАРТАЛ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, ПОЛУГОДИЕ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыДоходы.Период, ГОД)
	|ИЗ
	|	РегистрНакопления.уатФинансовыеРезультаты.Обороты(
	|			&ДатаС,
	|			&ДатаПо,
	|			Регистратор,
	|			ВЫБОР
	|				КОГДА &ФильтроватьПоОрганизации
	|					ТОГДА Организация = &ОтборПоОрганизации
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК уатФинансовыеРезультатыДоходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатФинансовыеРезультатыРасходы.СтатьяРасходов,
	|	уатФинансовыеРезультатыРасходы.Организация,
	|	уатФинансовыеРезультатыРасходы.Подразделение,
	|	уатФинансовыеРезультатыРасходы.ТС,
	|	уатФинансовыеРезультатыРасходы.Заказ,
	|	уатФинансовыеРезультатыРасходы.Контрагент,
	|	уатФинансовыеРезультатыРасходы.ОбъектСтроительства,
	|	уатФинансовыеРезультатыРасходы.Маршрут,
	|	уатФинансовыеРезультатыРасходы.ВидПеревозки,
	|	уатФинансовыеРезультатыРасходы.Регистратор,
	|	0,
	|	0,
	|	уатФинансовыеРезультатыРасходы.СуммаРасходовУпрОборот,
	|	уатФинансовыеРезультатыРасходы.СуммаРасходовБезНДСУпрОборот,
	|	-уатФинансовыеРезультатыРасходы.СуммаРасходовУпрОборот,
	|	-уатФинансовыеРезультатыРасходы.СуммаРасходовБезНДСУпрОборот,
	|	уатФинансовыеРезультатыРасходы.Период,
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, НЕДЕЛЯ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, ДЕКАДА),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, КВАРТАЛ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, ПОЛУГОДИЕ),
	|	НАЧАЛОПЕРИОДА(уатФинансовыеРезультатыРасходы.Период, ГОД)
	|ИЗ
	|	РегистрНакопления.уатФинансовыеРезультаты.Обороты(
	|			&ДатаС,
	|			&ДатаПо,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА &ФильтроватьПоОрганизации
	|						ТОГДА Организация = &ОтборПоОрганизации
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &РаспределятьНаРБП = ""Да""
	|						ТОГДА СтатьяРасходов.РаспределятьНаРБП
	|					КОГДА &РаспределятьНаРБП = ""Нет""
	|						ТОГДА НЕ СтатьяРасходов.РаспределятьНаРБП
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК уатФинансовыеРезультатыРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_ЗаказыДляСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВРТ.Заказ КАК Заказ
	|	ИЗ
	|		ВРТ_Регистры КАК ВРТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|	ИЗ
	|		РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|	ГДЕ
	|		уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В
	|				(ВЫБРАТЬ
	|					ВРТ.Заказ
	|				ИЗ
	|					ВРТ_Регистры КАК ВРТ)) КАК ТабЗаказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабСтатусы_осн.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТабСтатусы_осн.Заказ.Мультимодальный
	|				И НЕ ТабСтатусы_осн.Заказ.ЭтоЭтап
	|			ТОГДА ВЫБОР
	|					КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ТабСтатусы_доп.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|					ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ТабСтатусы_доп.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|				КОНЕЦ
	|		ИНАЧЕ ТабСтатусы_осн.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВРТ_Статусы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВРТ.Заказ КАК Заказ,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		ВТ_ЗаказыДляСтатусов КАК ВРТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|					&ДатаПо,
	|					Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказы.Заказ
	|						ИЗ
	|							ВТ_ЗаказыДляСтатусов КАК ВТ_Заказы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|			ПО ВРТ.Заказ = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВРТ.Заказ) КАК ТабСтатусы_осн
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВРТ.Заказ КАК Заказ,
	|			ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ КАК Статус
	|		ИЗ
	|			ВТ_ЗаказыДляСтатусов КАК ВРТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|						&ДатаПо,
	|						Заказ В
	|							(ВЫБРАТЬ
	|								ВТ_Заказы.Заказ
	|							ИЗ
	|								ВТ_ЗаказыДляСтатусов КАК ВТ_Заказы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|				ПО ВРТ.Заказ = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВРТ.Заказ) КАК ТабСтатусы_доп
	|		ПО ТабСтатусы_осн.Заказ.Ссылка = ТабСтатусы_доп.Заказ.РодительскийЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабСтатусы_осн.Заказ,
	|	ТабСтатусы_осн.Статус,
	|	ТабСтатусы_осн.Заказ.Мультимодальный,
	|	ТабСтатусы_осн.Заказ.ЭтоЭтап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_Регистры.Статья КАК Статья,
	|	ВРТ_Регистры.Организация КАК Организация,
	|	ВРТ_Регистры.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(уатТС.Ссылка, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) КАК ТС,
	|	ВРТ_Регистры.Заказ КАК Заказ,
	|	ВРТ_Регистры.Контрагент КАК Контрагент,
	|	ВРТ_Регистры.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ВРТ_Регистры.Маршрут КАК Маршрут,
	|	ВРТ_Регистры.ВидПеревозки КАК ВидПеревозки,
	|	ВРТ_Регистры.Регистратор КАК Регистратор,
	|	СУММА(ВРТ_Регистры.СуммаДоходов) КАК СуммаДоходов,
	|	СУММА(ВРТ_Регистры.СуммаЗатрат) КАК СуммаЗатрат,
	|	СУММА(ВРТ_Регистры.Прибыль) КАК Прибыль,
	|	СУММА(ВРТ_Регистры.СуммаДоходовБезНДС) КАК СуммаДоходовБезНДС,
	|	СУММА(ВРТ_Регистры.СуммаРасходовБезНДС) КАК СуммаЗатратБезНДС,
	|	СУММА(ВРТ_Регистры.ПрибыльБезНДС) КАК ПрибыльБезНДС,
	|	ВРТ_Регистры.Период КАК Период,
	|	ВРТ_Регистры.ПериодДень КАК ПериодДень,
	|	ВРТ_Регистры.ПериодНеделя КАК ПериодНеделя,
	|	ВРТ_Регистры.ПериодДекада КАК ПериодДекада,
	|	ВРТ_Регистры.ПериодМесяц КАК ПериодМесяц,
	|	ВРТ_Регистры.ПериодКвартал КАК ПериодКвартал,
	|	ВРТ_Регистры.ПериодПолугодие КАК ПериодПолугодие,
	|	ВРТ_Регистры.ПериодГод КАК ПериодГод,
	|	ВРТ_Статусы.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА уатТС.ПринадлежностьТС ЕСТЬ NULL
	|			ТОГДА ""Общие показатели""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|			ТОГДА ""Привлеченные ТС""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|			ТОГДА ""Привлеченные ТС""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ТОГДА ""Собственные ТС""
	|		ИНАЧЕ ""Общие показатели""
	|	КОНЕЦ КАК АналитикаТС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВРТ_Регистры.Заказ = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ВсегоЗаказов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВРТ_Статусы.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Закрыт)
	|					ИЛИ ВРТ_Статусы.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Доставлен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоВыполненоЗаказов,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|				ИЛИ уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоАвтотранспорт,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|				ИЛИ уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование)
	|			ТОГДА ЕСТЬNULL(уатСоставТС.ВСоставе, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|		ИНАЧЕ ВРТ_Регистры.ТС
	|	КОНЕЦ КАК Тягач,
	|	ВЫБОР
	|		КОГДА ВРТ_Регистры.Заказ.Мультимодальный
	|				И ВРТ_Регистры.Заказ.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|		ИНАЧЕ ВРТ_Регистры.Заказ
	|	КОНЕЦ КАК РодительскийЗаказ,
	|	ВЫБОР
	|		КОГДА ВРТ_Регистры.Заказ.Мультимодальный
	|			ТОГДА ВРТ_Регистры.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	КОНЕЦ КАК ЭтапЗаказа
	|ИЗ
	|	ВРТ_Регистры КАК ВРТ_Регистры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|			ПО (уатСоставТС.ТС = уатТС.Ссылка)
	|		ПО ВРТ_Регистры.ТС = уатТС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВРТ_Статусы КАК ВРТ_Статусы
	|		ПО ВРТ_Регистры.Заказ = ВРТ_Статусы.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ПО ВРТ_Регистры.Заказ = уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Регистры.Статья,
	|	ВРТ_Регистры.Организация,
	|	ВРТ_Регистры.Подразделение,
	|	ЕСТЬNULL(уатТС.Ссылка, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)),
	|	ВРТ_Регистры.Заказ,
	|	ВРТ_Регистры.Контрагент,
	|	ВРТ_Регистры.ОбъектСтроительства,
	|	ВРТ_Регистры.Маршрут,
	|	ВРТ_Регистры.ВидПеревозки,
	|	ВРТ_Регистры.Регистратор,
	|	ВРТ_Регистры.Период,
	|	ВРТ_Регистры.ПериодДень,
	|	ВРТ_Регистры.ПериодНеделя,
	|	ВРТ_Регистры.ПериодДекада,
	|	ВРТ_Регистры.ПериодМесяц,
	|	ВРТ_Регистры.ПериодКвартал,
	|	ВРТ_Регистры.ПериодПолугодие,
	|	ВРТ_Регистры.ПериодГод,
	|	ВРТ_Статусы.Статус,
	|	ВЫБОР
	|		КОГДА уатТС.ПринадлежностьТС ЕСТЬ NULL
	|			ТОГДА ""Общие показатели""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|			ТОГДА ""Привлеченные ТС""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|			ТОГДА ""Привлеченные ТС""
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ТОГДА ""Собственные ТС""
	|		ИНАЧЕ ""Общие показатели""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|				ИЛИ уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|				ИЛИ уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование)
	|			ТОГДА ЕСТЬNULL(уатСоставТС.ВСоставе, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|		ИНАЧЕ ВРТ_Регистры.ТС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВРТ_Регистры.Заказ.Мультимодальный
	|				И ВРТ_Регистры.Заказ.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|		ИНАЧЕ ВРТ_Регистры.Заказ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВРТ_Регистры.Заказ.Мультимодальный
	|			ТОГДА ВРТ_Регистры.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	КОНЕЦ";
	
	Если ВыборкаДляМонитора Тогда 
		Запрос.Текст = Запрос.Текст + "
			|ИТОГИ
			|	СУММА(СуммаДоходов),
			|	СУММА(СуммаДоходовБезНДС),
			|	СУММА(СуммаЗатрат),
			|	СУММА(СуммаЗатратБезНДС),
			|	СУММА(Прибыль),
			|	СУММА(ПрибыльБезНДС),
			|	СУММА(ВсегоЗаказов)
			|ПО
			|	АналитикаТС";
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого УровеньАналитики Из Результат.Строки Цикл 
			УровеньАналитики.ВсегоЗаказов = 0;
			УровеньАналитики.ВсегоВыполненоЗаказов = 0;
			мсвЗаказы = Новый Массив();
			
			Для Каждого ТекСтрока Из УровеньАналитики.Строки Цикл 
				Если мсвЗаказы.Найти(ТекСтрока.Заказ) = Неопределено Тогда 
					мсвЗаказы.Добавить(ТекСтрока.Заказ);
				Иначе 
					ТекСтрока.ВсегоЗаказов = 0;
					ТекСтрока.ВсегоВыполненоЗаказов = 0;
				КонецЕсли;
				
				УровеньАналитики.ВсегоЗаказов = УровеньАналитики.ВсегоЗаказов + ТекСтрока.ВсегоЗаказов;
				УровеньАналитики.ВсегоВыполненоЗаказов = УровеньАналитики.ВсегоВыполненоЗаказов + ТекСтрока.ВсегоВыполненоЗаказов;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе 
		ТабДанных = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТабДанных.Колонки.Добавить("ПредставлениеСцепки", Новый ОписаниеТипов("Строка"));
		
		мсвЗаказы = Новый Массив;
		
		// вспомогательные переменные
		кэшСцепки = Новый Соответствие;
		тблСцепки = ТабДанных.Скопировать();
		тблСцепки.Свернуть("Тягач, ТС, ЭтоАвтотранспорт");
		
		Для Каждого ТекСтрока Из ТабДанных Цикл 
			Если мсвЗаказы.Найти(ТекСтрока.Заказ) = Неопределено Тогда 
				мсвЗаказы.Добавить(ТекСтрока.Заказ);
			Иначе 
				ТекСтрока.ВсегоЗаказов = 0;
				ТекСтрока.ВсегоВыполненоЗаказов = 0;
			КонецЕсли;
			
			ПредставлениеСцепки = кэшСцепки.Получить(ТекСтрока.Тягач);
			Если ПредставлениеСцепки = Неопределено Тогда
				СтрокиСоставаСцепки = тблСцепки.НайтиСтроки(Новый Структура("Тягач, ЭтоАвтотранспорт", ТекСтрока.Тягач, Ложь));
				ПредставлениеСцепки = Строка(ТекСтрока.Тягач);
				Для Каждого ТекСостав Из СтрокиСоставаСцепки Цикл 
					ПредставлениеСцепки = ПредставлениеСцепки + ", " + Строка(ТекСостав.ТС);
				КонецЦикла;
				
				кэшСцепки.Вставить(ТекСтрока.ТС, ПредставлениеСцепки);
			КонецЕсли;
			
			ТекСтрока.ПредставлениеСцепки = ПредставлениеСцепки;
		КонецЦикла;
		
		Возврат ТабДанных;
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеОРентабельностиЗаказовИТС()

// Возвращает адрес склада по данным регистра сведений Адреса складов (уэ)
//
Функция АдресСклада(Склад) Экспорт
	Запрос = Новый Запрос
	("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАдресаСкладов_уэ.Адрес
	|ИЗ
	|	РегистрСведений.уатАдресаСкладов_уэ КАК уатАдресаСкладов_уэ
	|ГДЕ
	|	уатАдресаСкладов_уэ.Склад = &Склад");
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает список всех водителей указанного контрагента-владельца ТС
//
Функция ВодителиКонтрагента(ВладелецТС) Экспорт
	СписокФизЛиц = Новый СписокЗначений;
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСотрудникиКонтрагентов.ФизЛицо,
	|	уатСотрудникиКонтрагентов.ФизЛицо.ФИО КАК ФИО
	|ИЗ
	|	РегистрСведений.уатСотрудникиКонтрагентов КАК уатСотрудникиКонтрагентов
	|ГДЕ
	|	уатСотрудникиКонтрагентов.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", ВладелецТС); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокФизЛиц.Добавить(Выборка.ФизЛицо, Выборка.ФИО); 
	КонецЦикла;
	
	Возврат СписокФизЛиц;
КонецФункции

// Функция предназначена для получения списка всех грузов по FTL заказу для формы подбора заказов.
//
Функция ПолучитьСписокГрузовПоFTLЗаказуДляМаршрутногоЛиста(ЗаказГрузоотправителя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяЗаказы.Ссылка КАК Заказ,
	|	уатЗаказГрузоотправителяЗаказы.ГрузовоеМесто КАК Номенклатура,
	|	уатЗаказГрузоотправителяЗаказы.ВидУпаковки КАК ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяЗаказы.КоличествоМест КАК Количество,
	|	уатЗаказГрузоотправителяЗаказы.ВесБрутто КАК Вес,
	|	уатЗаказГрузоотправителяЗаказы.Объем КАК Объем,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент = 0
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент
	|	КОНЕЦ КАК КоличествоМест,
	|	уатЗаказГрузоотправителяЗаказы.НомерСтроки КАК НомерСтроки,
	|	0 КАК НомерПунктаОт,
	|	0 КАК НомерПунктаДо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяЗаказы.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяЗаказы.КоличествоМест > 0
	|	И уатЗаказГрузоотправителяЗаказы.Ссылка = &ВыбЗаказ
	|	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатЗаказГрузоотправителяЗаказы.Ссылка,
	|	уатЗаказГрузоотправителяЗаказы.Номенклатура,
	|	уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяЗаказы.Количество,
	|	уатЗаказГрузоотправителяЗаказы.ВесБрутто,
	|	уатЗаказГрузоотправителяЗаказы.Объем,
	|	уатЗаказГрузоотправителяЗаказы.КоличествоМест,
	|	уатЗаказГрузоотправителяЗаказы.НомерСтроки,
	|	0,
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяЗаказы.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяЗаказы.Количество > 0
	|	И уатЗаказГрузоотправителяЗаказы.Ссылка = &ВыбЗаказ
	|	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)";
	
	Запрос.УстановитьПараметр("ВыбЗаказ", ЗаказГрузоотправителя);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокГрузовПоОстаткамДляПодбора()

Процедура СоздатьЭтапыМультимодальногоЗаказаДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт
	
	ТекстОшибки = "";
	
	Если ТипЗнч(ПараметрыПроцедуры) = Тип("Структура")
		И ПараметрыПроцедуры.Свойство("МультимодальныйРодительскийЗаказ")
		И ПараметрыПроцедуры.Свойство("МассивЭтапов") Тогда
	
		Для Каждого ПараметрыЭтапа Из ПараметрыПроцедуры.МассивЭтапов Цикл
			ДокОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
			ДокОбъект.ДополнительныеСвойства.Вставить("ПараметрыЭтапа", ПараметрыЭтапа);
			ДокОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеЭтапаПоРодительскомуЗаказу", Истина);
			ДокОбъект.Заполнить(ПараметрыПроцедуры.МультимодальныйРодительскийЗаказ);
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("ТекстОшибки", ТекстОшибки), АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает флаг "Есть расхождения" в Заказах на ТС.
// Изменяются только те заказы, для которых флаг поменялся с "Ложь" на "Истина".
Процедура УстановитьФлагЕстьРасхожденияВЗаказахНаТС(ЗаказыСРасхождениями) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.ЕстьРасхождения = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.Ссылка В (&ЗаказыСРасхождениями)");
	Запрос.УстановитьПараметр("ЗаказыСРасхождениями", ЗаказыСРасхождениями);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаказОбъект.ЕстьРасхождения = Истина;
		// Устанавливается один флаг, который ни на что не влияет. Не требуется выполнять обработчики записи/проведения.
		ЗаказОбъект.ОбменДанными.Загрузка = Истина;
		ЗаказОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует структуру настроек АРМ Логиста с установкой требуемых для оптимизации маршрутов настроек
Функция ПолучитьНастройкиМаршрутизацииДляОптимизацииМаршрута() Экспорт
	
	РежимОптимизацииПоРасстоянию = 1;
	НастройкаВремяВыездаОбщий = 1;
	
	НастройкиМаршрутизации = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
	
	НастройкиМаршрутизации.НастройкаЧасовойПояс = 0;
	НастройкиМаршрутизации.НастройкаРежимОптимизации = РежимОптимизацииПоРасстоянию;
	НастройкиМаршрутизации.НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации = Ложь;
	НастройкиМаршрутизации.НастройкаВремяВыездаИзГаража = НастройкаВремяВыездаОбщий;
	НастройкиМаршрутизации.НастройкаВремяВыездаТранспортныхСредств = '00010101000000';
	НастройкиМаршрутизации.НастройкаВремяВозвратаТранспортныхСредств = '00010101235959';
	НастройкиМаршрутизации.НастройкаСжиматьЗаказы = Ложь;
	НастройкиМаршрутизации.НастройкиВнешнийМаршрутизатор = Новый Структура();
	НастройкиМаршрутизации.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу = 0;
	НастройкиМаршрутизации.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 0;
	
	НастройкиМаршрутизации.НастройкаАлгоритмОптимизации                          = "Очередей";
	НастройкиМаршрутизации.НастройкиОптимизацииВнешнийМаршрутизатор              = "";
	НастройкиМаршрутизации.Оптимизация_НастройкаЧасовойПояс                      = 3;
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВыездаИзГаража              = 1;
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств = '00010101235959';
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВыездаТранспортныхСредств   = '00010101000000';
	НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам           = Ложь;
	НастройкиМаршрутизации.Оптимизация_НастройкаСжиматьЗаказы                    = Ложь;
	НастройкиМаршрутизации.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу   = 100;
	НастройкиМаршрутизации.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 100; 
	НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации                 = 0;  
	НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме      = Ложь;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		Возврат НастройкиМаршрутизации;
	КонецЕсли;
	
	СтруктураНастроек = Неопределено;
	ВариантНастройки  = Константы.уатОсновнойШаблонМаршрутизации.Получить();
	
	Если ЗначениеЗаполнено(ВариантНастройки) Тогда 
		СпрОб = ВариантНастройки.ПолучитьОбъект();
		Если Не СпрОб.ПометкаУдаления Тогда 
			ХранилищеНастроек = СпрОб.НастройкиХранилище.Получить();
			Если Не ХранилищеНастроек = Неопределено Тогда 
				СтруктураНастроек = ХранилищеНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураНастроек = Неопределено 
		И ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Свойство("НастройкаАлгоритмОптимизации", НастройкиМаршрутизации.НастройкаАлгоритмОптимизации);
	КонецЕсли;
	
	Возврат НастройкиМаршрутизации;
		
КонецФункции

#Область РедакторЦепочкиДокументов

Функция ТребуетсяОткрытьРедакторЦепочкиДокументов(СтруктураДокументаНовая, СтруктураДокументаСтарая) Экспорт
	
	Результат = Ложь;
	
	Если Не СтруктураДокументаНовая.НеОткрыватьРедакторЦепочкиДокументов
		И ПравоДоступа("Просмотр", Метаданные.Обработки.уатРедакторЦепочкиДокументов_уэ)
		И ПолучитьФункциональнуюОпцию("уатИспользоватьРедакторЦепочкиДокументов_уэ")
		И СтруктураДокументаНовая.Проведен И Не СтруктураДокументаНовая.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязанныеДокументы.Ссылка КАК СвязанныйДокумент
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
		|ГДЕ
		|	СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Ссылка", СтруктураДокументаНовая.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьСвязанныеДокументы = Не РезультатЗапроса.Пустой();
		Если ЕстьСвязанныеДокументы Тогда
			
			// Изменения в реквизитах шапки
			ПроверяемыеРеквизиты = Новый Массив;
			ИзмененныеРеквизиты = Новый Массив;
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Организация);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Подразделение);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Контрагент);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.ДоговорКонтрагента);
			
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.FTL);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.ДетализацияЗакрытия);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.НаправлениеПеревозки);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.СтоянкаПунктНазначения);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.СтоянкаПунктОтправления);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.АдресНазначения);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.АдресОтправления);
			
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.ВидПеревозки);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Маршрут);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.НаправлениеПеревозки);
			ПроверяемыеРеквизиты.Добавить(Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.ОбъектСтроительства);
			
			Для Каждого ТекРеквизит Из ПроверяемыеРеквизиты Цикл
				Если СтруктураДокументаНовая[ТекРеквизит.Имя] <> СтруктураДокументаСтарая[ТекРеквизит.Имя] Тогда
					ИзмененныеРеквизиты.Добавить(ТекРеквизит);
				КонецЕсли;
			КонецЦикла;
			
			Если ИзмененныеРеквизиты.Количество() Тогда
				Результат = Истина;
			КонецЕсли;
			
			// Изменения в реквизитах табличных частей
			Если Не Результат И ИзмененыПунктыFTLЗаказа(СтруктураДокументаНовая, СтруктураДокументаСтарая) Тогда
				Результат = Истина;
			КонецЕсли;
			
			Если Не Результат И ИзмененыГрузыПоЗаказу(СтруктураДокументаНовая, СтруктураДокументаСтарая) Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает Истина, если для заказа флаг FTL был установлен и не изменялся,
// а таблица Промежуточные пункты изменилась. Иначе функция возвращает Ложь.
Функция ИзмененыПунктыFTLЗаказа(СтруктураДокументаНовая, СтруктураДокументаСтарая) Экспорт
	
	ИзмененыПунктыFTLЗаказа = Ложь;
	
	Если СтруктураДокументаСтарая.FTL И СтруктураДокументаНовая.FTL Тогда
		Если СтруктураДокументаНовая.ПромежуточныеПункты.Количество() <> СтруктураДокументаСтарая.ПромежуточныеПункты.Количество() Тогда
			ИзмененыПунктыFTLЗаказа = Истина;
		Иначе
			Для НомерСтроки = 1 По СтруктураДокументаНовая.ПромежуточныеПункты.Количество() Цикл
				НоваяСтрока = СтруктураДокументаНовая.ПромежуточныеПункты[НомерСтроки-1];
				СтараяСтрока = СтруктураДокументаСтарая.ПромежуточныеПункты[НомерСтроки-1];
				Если НоваяСтрока.Пункт <> СтараяСтрока.Пункт
					Или НоваяСтрока.ТипТочкиМаршрута <> СтараяСтрока.ТипТочкиМаршрута
					Или НоваяСтрока.Стоянка <> СтараяСтрока.Стоянка
					Или НоваяСтрока.Ожидание <> СтараяСтрока.Ожидание Тогда
					ИзмененыПунктыFTLЗаказа = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИзмененыПунктыFTLЗаказа;
	
КонецФункции

Функция ИзмененыГрузыПоЗаказу(СтруктураДокументаНовая, СтруктураДокументаСтарая) Экспорт
	
	Результат = Ложь;
	
	Если СтруктураДокументаНовая.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ИмяТабличнойЧасти = "ГрузовойСостав";
	ИначеЕсли СтруктураДокументаНовая.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ИмяТабличнойЧасти = "Товары";
	Иначе
		// Детализация по заказу в целом.
		Возврат Результат;
	КонецЕсли;
	
	// Измененные табличные части
	КоличествоСтрокНовое = 0;
	Если ТипЗнч(СтруктураДокументаНовая[ИмяТабличнойЧасти]) = Тип("Массив") Тогда
		НовыеСтроки = СтруктураДокументаНовая[ИмяТабличнойЧасти];
		КоличествоСтрокНовое = НовыеСтроки.Количество();
	КонецЕсли;
	КоличествоСтрокСтарое = 0;
	Если ТипЗнч(СтруктураДокументаСтарая[ИмяТабличнойЧасти]) = Тип("Массив") Тогда
		СтарыеСтроки = СтруктураДокументаСтарая[ИмяТабличнойЧасти];
		КоличествоСтрокСтарое = СтарыеСтроки.Количество();
	КонецЕсли;
	
	Если КоличествоСтрокНовое = 0 И КоличествоСтрокСтарое = 0 Тогда
		// Грузов нет.
		Результат = Ложь;
	ИначеЕсли КоличествоСтрокНовое <> КоличествоСтрокСтарое Тогда
		// Количество строк грузов изменилось
		Результат = Истина;
	Иначе
		Для НомерСтроки = 1 По КоличествоСтрокНовое Цикл
			СтрокаИзменена = Ложь;
			Для Каждого РеквизитИЗначение Из СтарыеСтроки[НомерСтроки-1] Цикл
				Реквизит = РеквизитИЗначение.Ключ;
				СтароеЗначениеРеквизита = РеквизитИЗначение.Значение;
				НовоеЗначениеРеквизита = НовыеСтроки[НомерСтроки-1][Реквизит];
				Если НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита
					И (ЗначениеЗаполнено(НовоеЗначениеРеквизита) Или ЗначениеЗаполнено(СтароеЗначениеРеквизита)) Тогда
					СтрокаИзменена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИзменена Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОптимизацияМаршрутногоЛиста

// Функция проверяет корректность списка оптимизируемых заказов и подготавливает данные для передачи в маршрутизатор.
//
// Параметры:
//  МаршрутныйЛист - ДокументСсылка.уатМаршрутныйЛист 
//						или ДокументОбъект.уатМаршрутныйЛист или ДанныеФормыСтруктура - Маршрутный лист
// 
// Возвращаемое значение:
//  Структура - Параметры для запуска маршрутизации.
//    * ОписаниеОшибки - Строка - Если строка пустая, то ошибок нет и разрешен запуск оптимизации маршрута.
//    * ХарактеристикиСцепки - Структура
//    * ДанныеПоЗаказам - Структура
//    * НастройкиМаршрутизации - Структура
//    * мсвДопАдреса - Массив
//    * КоличествоПунктов - Число
//    * АлгоритмОптимальногоПерестроения - Число
//
Функция ПодготовитьПараметрыОптимизации(МаршрутныйЛист) Экспорт
	
	Результат = Новый Структура("ОписаниеОшибки", "");
	
	Если МаршрутныйЛист.Заказы.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("en='List of orders not filled.';ru='Список заказов не заполнен.'");
		Возврат Результат;
	КонецЕсли;
	
	ХарактеристикиСцепки = ПолучитьСуммарныеХарактеристикиСцепки(МаршрутныйЛист);
    ХарактеристикиСцепки.Вставить("ТС", МаршрутныйЛист.ТС); 
	
	НастройкиМаршрутизации = Документы.уатМаршрутныйЛист.ПолучитьНастройкиМаршрутизации(,МаршрутныйЛист.ШаблонНастроек);
	ДанныеПоЗаказам = ПолучитьДанныеПоЗаказам(МаршрутныйЛист, НастройкиМаршрутизации.НастройкаАлгоритмОптимизации);
	
	мсвОшибки    = Новый Массив();
	мсвДопАдреса = Новый Массив();
	мсвПунктов   = Новый Массив();
	
	// Проверки корректности данных для оптимизации
	Если НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "Яндекс" Тогда
		Для Каждого СтрокаЗаказа Из ДанныеПоЗаказам.Заказы Цикл 
			Если ТипЗнч(СтрокаЗаказа.ПунктРазгрузки) = Тип("Строка")
				ИЛИ (СтрокаЗаказа.ПунктРазгрузкиЛат = 0
				И СтрокаЗаказа.ПунктРазгрузкиЛон = 0) Тогда 
				Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Пункт %1 не геокодирован.'"), СтрокаЗаказа.ПунктРазгрузки);
				Возврат Результат;
			КонецЕсли;
			Если ТипЗнч(СтрокаЗаказа.ПунктПогрузки) = Тип("Строка")
				ИЛИ (СтрокаЗаказа.ПунктПогрузкиЛат = 0
				И СтрокаЗаказа.ПунктПогрузкиЛон = 0) Тогда 
				Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Пункт %1 не геокодирован.'"), СтрокаЗаказа.ПунктПогрузки);
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
		Если ДанныеПоЗаказам.Гараж = Неопределено Тогда 
			Результат.ОписаниеОшибки = НСтр("ru='Первый пункт маршрута должен быть гаражом'");
			Возврат Результат;
		КонецЕсли;
		
		Для Каждого СтрокаЗаказа Из ДанныеПоЗаказам.Заказы Цикл 
			Если Не СтрокаЗаказа.ПунктПогрузки = ДанныеПоЗаказам.Гараж Тогда 
				Результат.ОписаниеОшибки = НСтр("ru='Все заказы маршрута должны быть из одного пункта.'");
				Возврат Результат;
			КонецЕсли;
			Если ТипЗнч(СтрокаЗаказа.ПунктРазгрузки) = Тип("Строка")
				ИЛИ (СтрокаЗаказа.ПунктРазгрузкиЛат = 0
				И СтрокаЗаказа.ПунктРазгрузкиЛон = 0) Тогда 
				Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Пункт %1 не геокодирован.'"), СтрокаЗаказа.ПунктРазгрузки);
				Возврат Результат;
			КонецЕсли;
			Если ТипЗнч(СтрокаЗаказа.ПунктПогрузки) = Тип("Строка")
				ИЛИ (СтрокаЗаказа.ПунктПогрузкиЛат = 0
				И СтрокаЗаказа.ПунктПогрузкиЛон = 0) Тогда 
				Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Пункт %1 не геокодирован.'"), СтрокаЗаказа.ПунктПогрузки);
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ДанныеПоЗаказам.Гараж = Неопределено Тогда 
			мсвДопАдреса.Добавить(ДанныеПоЗаказам.Гараж);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекЗаказ Из ДанныеПоЗаказам.Заказы Цикл 
		Если Не НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "Яндекс"
			И Не НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
			мсвДопАдреса.Добавить(ТекЗаказ.ПунктПогрузки);
			мсвДопАдреса.Добавить(ТекЗаказ.ПунктРазгрузки);
		КонецЕсли;
		
		Если (ТекЗаказ.ВесБрутто > ХарактеристикиСцепки.Грузоподъемность)
				Или (ТекЗаказ.Объем > ХарактеристикиСцепки.ОбъемКузова)
				Или (Не НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "Яндекс"
				И Не НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP"
				И Не ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок = 0 
				И ТекЗаказ.КоличествоУпаковок > ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок) Тогда 
			GUIDСтроки = ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Получить(ТекЗаказ.Ссылка).Получить("Погрузка");
			НайдСтроки = МаршрутныйЛист.Заказы.НайтиСтроки(Новый Структура("GUIDСтроки", GUIDСтроки));
			Если НайдСтроки.Количество() Тогда 
				Если мсвОшибки.Найти(НайдСтроки[0].ЗаказГрузоотправителя) = Неопределено Тогда 
					мсвОшибки.Добавить(НайдСтроки[0].ЗаказГрузоотправителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Если мсвПунктов.Найти(ТекЗаказ.ПунктПогрузки) = Неопределено Тогда
				мсвПунктов.Добавить(ТекЗаказ.ПунктПогрузки);
			КонецЕсли;
			Если мсвПунктов.Найти(ТекЗаказ.ПунктРазгрузки) = Неопределено Тогда
				мсвПунктов.Добавить(ТекЗаказ.ПунктРазгрузки);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если мсвОшибки.Количество() > 0 Тогда
		ТекстОшибки = НСтр("en='Rebuild orders is not possible.'; ru = 'Перестроение заказов невозможно.'");
		Для Каждого ТекОшибка Из мсвОшибки Цикл
			ТекстНСтр = НСтр("en='Weight-volume characteristics on order ""%1"" exceeds the characteristics of coupling.';ru='Весообъемные характеристики по заказу ""%1"" превышают характеристики сцепки.'");
			ТекстНСтр = СтрШаблон(ТекстНСтр, ТекОшибка);
			ТекстОшибки = СтрШаблон("%1
				|%2", ТекстОшибки, ТекстНСтр);
		КонецЦикла;
		Результат.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("ХарактеристикиСцепки",             ХарактеристикиСцепки);
	Результат.Вставить("ДанныеПоЗаказам",                  ДанныеПоЗаказам);
	Результат.Вставить("НастройкиМаршрутизации",           НастройкиМаршрутизации);
	Результат.Вставить("мсвДопАдреса",                     мсвДопАдреса);
	Результат.Вставить("КоличествоПунктов",                мсвПунктов.Количество());
	Результат.Вставить("АлгоритмОптимальногоПерестроения", НастройкиМаршрутизации.НастройкаАлгоритмОптимизации);
	
	Возврат Результат;
	
КонецФункции

// Функция переводит данные Маршрутного листа в формат, необходимый для запуска маршрутизации
//
// Параметры:
//  МаршрутныйЛист - ДокументСсылка.уатМаршрутныйЛист 
//						или ДокументОбъект.уатМаршрутныйЛист или ДанныеФормыСтруктура - Маршрутный лист
// 
// Возвращаемое значение:
//  Структура - данные по заказам Маршрутного листа. Поля структуры:
//    * Заказы - Массив
//    * СтрокиЗаказаВДокументе - Соответствие
//    * Гараж - СправочникСсылка.уатПунктыНазначения
//    * УчитыватьГаражВозвращения - Булево
//    * ДатаВыезда - Дата и время
//
Функция ПолучитьДанныеПоЗаказам(МаршрутныйЛист, НастройкаАлгоритмОптимизации)
	
	Если (ЗначениеЗаполнено(МаршрутныйЛист.ЭтапМаршрутизации) И МаршрутныйЛист.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = МаршрутныйЛист.ТС.ТипТС;
	КонецЕсли;

	ДанныеПоЗаказам = Новый Структура(
		"Заказы, МассивПромежуточныхТочек, СтрокиЗаказаВДокументе, Гараж, УчитыватьГаражВозвращения, ГаражВозвращения, ДатаВыезда, КоличествоЗаказов",
		Новый Массив(),
		Новый Массив(),
		Новый Соответствие(),
		Неопределено,
		Ложь,
		Неопределено,
		НачалоДня(ТекущаяДата()) + 86400,
		0
	);
	
	Если МаршрутныйЛист.Заказы.Количество() Тогда 
		ПервыйПункт = МаршрутныйЛист.Заказы[0];
		Если ТипЗнч(ПервыйПункт.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
			И ЗначениеЗаполнено(ПервыйПункт.Пункт)
			И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ПервыйПункт.Пункт.Гараж) Тогда 
			ДанныеПоЗаказам.Гараж = ПервыйПункт.Пункт;
		КонецЕсли;
		
		ПоследнийПункт = МаршрутныйЛист.Заказы[МаршрутныйЛист.Заказы.Количество()-1];
		Если ТипЗнч(ПоследнийПункт.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ЗначениеЗаполнено(ПоследнийПункт.Пункт)
				И НЕ ЗначениеЗаполнено(ПоследнийПункт.ЗаказГрузоотправителя) 
				И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ПоследнийПункт.Пункт.Гараж) Тогда 
			ДанныеПоЗаказам.УчитыватьГаражВозвращения = Истина;
			ДанныеПоЗаказам.ГаражВозвращения          = ПоследнийПункт.Пункт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МаршрутныйЛист.Заказы[0].ПрибытиеПлан) Тогда 
			ДанныеПоЗаказам.ДатаВыезда = МаршрутныйЛист.Заказы[0].ПрибытиеПлан;
		КонецЕсли;
	КонецЕсли;
	
	мсвОбработанныеFTLЗаказы = Новый Массив();
	мсвОбработанныеНеFTLЗаказы = Новый Массив;
	МассивПромежуточныхТочек   = Новый Массив();
	
	Индекс = 0;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.FTL Тогда 
			Если мсвОбработанныеFTLЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда 
				мсвОбработанныеFTLЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
				
				СсылкаПакета = Новый УникальныйИдентификатор();
				
				ДанныеЗаказа = Новый Структура();
				ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
				ДанныеЗаказа.Вставить("ВесБрутто",                  ТекСтрока.ЗаказГрузоотправителя.ВесБрутто);
				ДанныеЗаказа.Вставить("Объем",                      ТекСтрока.ЗаказГрузоотправителя.Объем);
				ДанныеЗаказа.Вставить("КоличествоУпаковок",         ТекСтрока.ЗаказГрузоотправителя.КоличествоМест);
				ДанныеЗаказа.Вставить("ПунктПогрузки",              ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
				ДанныеЗаказа.Вставить("ПунктРазгрузки",             ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресОтправления) = Тип("Строка") Тогда
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛат",       0);
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛон",       0);
				Иначе
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛат",       ТекСтрока.ЗаказГрузоотправителя.АдресОтправления.Лат);
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛон",       ТекСтрока.ЗаказГрузоотправителя.АдресОтправления.Лон);
				КонецЕсли;
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресНазначения) = Тип("Строка") Тогда
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",       0);
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",       0);
				Иначе
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",       ТекСтрока.ЗаказГрузоотправителя.АдресНазначения.Лат);
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",       ТекСтрока.ЗаказГрузоотправителя.АдресНазначения.Лон);
				КонецЕсли;
				ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    ТекСтрока.ЗаказГрузоотправителя.СтоянкаПунктОтправления);
				ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",     ТекСтрока.ЗаказГрузоотправителя.СтоянкаПунктНазначения);
				ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.ЗаказГрузоотправителя.АдресОтправления, ТипТС));
				ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения",  уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.ЗаказГрузоотправителя.АдресНазначения, ТипТС));
				ДанныеЗаказа.Вставить("Приоритет",                  ТекСтрока.ЗаказГрузоотправителя.Приоритет);
				ДанныеЗаказа.Вставить("FTL",                        ТекСтрока.ЗаказГрузоотправителя.FTL);
				ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС)));
				ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо)));
				ДанныеЗаказа.Вставить("ДоставкаС",                  '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаС)));
				ДанныеЗаказа.Вставить("ДоставкаПо",                 '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо)));
				ДанныеЗаказа.Вставить("Заказ",                      ТекСтрока.ЗаказГрузоотправителя);
				ДанныеЗаказа.Вставить("Груз",                       ТекСтрока.Номенклатура);
				
				НомерСтроки = 0;
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
						НомерСтроки = 0;
						Для Каждого ТекСтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.Товары Цикл 
							НомерСтроки = НомерСтроки + 1;
							Если ТекСтрокаГруза.Номенклатура = ТекСтрока.Номенклатура Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						НомерСтроки = 0;
						Для Каждого ТекСтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.ГрузовойСостав Цикл 
							НомерСтроки = НомерСтроки + 1;
							Если ТекСтрокаГруза.ГрузовоеМесто = ТекСтрока.Номенклатура Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ДанныеЗаказа.Вставить("НомерСтроки",                НомерСтроки);
				ДанныеЗаказа.Вставить("Количество",                 ТекСтрока.Количество);
				ДанныеЗаказа.Вставить("GUID",                       СсылкаПакета);

				ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
				
				ВсеСтрокиЗаказа = Новый Массив();
				
				Для Каждого СтрокаFTL Из МаршрутныйЛист.Заказы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаFTL.GUIDСтроки) Тогда 
						СтрокаFTL.GUIDСтроки = Новый УникальныйИдентификатор();
					КонецЕсли;
					
					Если СтрокаFTL.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя Тогда 
						ВсеСтрокиЗаказа.Добавить(СтрокаFTL.GUIDСтроки);
					КонецЕсли;
				КонецЦикла;
				
				СоотСтрокиДокумента = Новый Соответствие();
				СоотСтрокиДокумента.Вставить("Погрузка",        ТекСтрока.GUIDСтроки);
				СоотСтрокиДокумента.Вставить("ВсеСтрокиЗаказа", ВсеСтрокиЗаказа);
				
				ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
			КонецЕсли;
			
		Иначе 
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				
				Если мсвОбработанныеНеFTLЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда 
					мсвОбработанныеНеFTLЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
				КонецЕсли;
				
				СсылкаПакета = Новый УникальныйИдентификатор();
				
				ДанныеЗаказа = Новый Структура();
				ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
				ДанныеЗаказа.Вставить("ВесБрутто",                  ТекСтрока.ВесБрутто);
				ДанныеЗаказа.Вставить("Объем",                      ТекСтрока.Объем);
				ДанныеЗаказа.Вставить("КоличествоУпаковок",         ТекСтрока.КоличествоМест);
				ДанныеЗаказа.Вставить("ПунктПогрузки",              ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
				ДанныеЗаказа.Вставить("ПунктРазгрузки",             ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресОтправления) = Тип("Строка") Тогда
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛат",       0);
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛон",       0);
				Иначе
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛат",       ТекСтрока.ЗаказГрузоотправителя.АдресОтправления.Лат);
					ДанныеЗаказа.Вставить("ПунктПогрузкиЛон",       ТекСтрока.ЗаказГрузоотправителя.АдресОтправления.Лон);
				КонецЕсли;
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресНазначения) = Тип("Строка") Тогда
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",       0);
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",       0);
				Иначе
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",       ТекСтрока.ЗаказГрузоотправителя.АдресНазначения.Лат);
					ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",       ТекСтрока.ЗаказГрузоотправителя.АдресНазначения.Лон);
				КонецЕсли;
				ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    ТекСтрока.ЗаказГрузоотправителя.СтоянкаПунктОтправления);
				ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",     ТекСтрока.ЗаказГрузоотправителя.СтоянкаПунктНазначения);
				ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.ЗаказГрузоотправителя.АдресОтправления, ТипТС));
				ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения",  уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.ЗаказГрузоотправителя.АдресНазначения, ТипТС));
				ДанныеЗаказа.Вставить("Приоритет",                  ТекСтрока.ЗаказГрузоотправителя.Приоритет);
				ДанныеЗаказа.Вставить("FTL",                        ТекСтрока.ЗаказГрузоотправителя.FTL);
				ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС)));
				ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо)));
				ДанныеЗаказа.Вставить("ДоставкаС",                  '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаС)));
				ДанныеЗаказа.Вставить("ДоставкаПо",                 '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо)));
				ДанныеЗаказа.Вставить("Заказ",                      ТекСтрока.ЗаказГрузоотправителя);
				ДанныеЗаказа.Вставить("Груз",                       ТекСтрока.Номенклатура); 
				
				НомерСтроки = 0;
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
						НомерСтроки = 0;
						Для Каждого ТекСтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.Товары Цикл 
							НомерСтроки = НомерСтроки + 1;
							Если ТекСтрокаГруза.Номенклатура = ТекСтрока.Номенклатура Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						НомерСтроки = 0;
						Для Каждого ТекСтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.ГрузовойСостав Цикл 
							НомерСтроки = НомерСтроки + 1;
							Если ТекСтрокаГруза.ГрузовоеМесто = ТекСтрока.Номенклатура Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ДанныеЗаказа.Вставить("НомерСтроки",                НомерСтроки); 
				ДанныеЗаказа.Вставить("Количество",                 ТекСтрока.Количество);
				ДанныеЗаказа.Вставить("GUID",                       СсылкаПакета);
				
				ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
				
				Для Каждого СтрокаРазгрузка Из МаршрутныйЛист.Заказы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаРазгрузка.GUIDСтроки) Тогда 
						СтрокаРазгрузка.GUIDСтроки = Новый УникальныйИдентификатор();
					КонецЕсли;
					
					Если СтрокаРазгрузка.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя
							И СтрокаРазгрузка.Номенклатура = ТекСтрока.Номенклатура
							И СтрокаРазгрузка.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения
							И СтрокаРазгрузка.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмеренияПоЗаказу
							И СтрокаРазгрузка.Количество = ТекСтрока.Количество
							И СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда 
						СоотСтрокиДокумента = Новый Соответствие();
						СоотСтрокиДокумента.Вставить("Погрузка",  ТекСтрока.GUIDСтроки);
						СоотСтрокиДокумента.Вставить("Разгрузка", СтрокаРазгрузка.GUIDСтроки);
						
						ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
				И Индекс <> МаршрутныйЛист.Заказы.Количество() - 1
				И Индекс <> 0 Тогда
				СсылкаПакета = Новый УникальныйИдентификатор();
				МассивПромежуточныхТочек.Добавить(Новый Структура("Ссылка, GUID", ТекСтрока.Пункт, СсылкаПакета)); 
					
				СоотСтрокиДокумента = Новый Соответствие();
				СоотСтрокиДокумента.Вставить("Погрузка",  "");
				СоотСтрокиДокумента.Вставить("Разгрузка", ТекСтрока.GUIDСтроки);
				ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
			КонецЕсли;
		КонецЕсли; 
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДанныеПоЗаказам.КоличествоЗаказов = мсвОбработанныеFTLЗаказы.Количество() + мсвОбработанныеНеFTLЗаказы.Количество();
	ДанныеПоЗаказам.МассивПромежуточныхТочек = МассивПромежуточныхТочек;
	
	Возврат ДанныеПоЗаказам;
	
КонецФункции

// Функция возвращает суммарные характеристики ТС с прицепами по Маршрутному листу
//
// Параметры:
//  МаршрутныйЛист - ДокументСсылка.уатМаршрутныйЛист 
//						или ДокументОбъект.уатМаршрутныйЛист или ДанныеФормыСтруктура - Маршрутный лист
// 
// Возвращаемое значение:
//  Структура - весо-объемные характеристики сцепки
//    * Грузоподъемность - Число
//    * ОбъемКузова - Число
//    * МаксимальноеКоличествоУпаковок - Число
//    * ТипТС;
Функция ПолучитьСуммарныеХарактеристикиСцепки(МаршрутныйЛист)
	
	Если ТипЗнч(МаршрутныйЛист) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		МаршрутныйЛистСсылка = МаршрутныйЛист;
		ДанныеМаршрутногоЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛистСсылка, "ТС, Прицеп1, Прицеп2");
		ТС      = ДанныеМаршрутногоЛиста.ТС;
		Прицеп1 = ДанныеМаршрутногоЛиста.Прицеп1;
		Прицеп2 = ДанныеМаршрутногоЛиста.Прицеп2;
	Иначе
		ТС      = МаршрутныйЛист.ТС;
		Прицеп1 = МаршрутныйЛист.Прицеп1;
		Прицеп2 = МаршрутныйЛист.Прицеп2;
	КонецЕсли;
	
	ХарактеристикиСцепки = Новый Структура("Грузоподъемность, ОбъемКузова, МаксимальноеКоличествоУпаковок, ТипТС", 0, 0, 0, Неопределено);
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(ТС);
	мсвТС.Добавить(Прицеп1);
	мсвТС.Добавить(Прицеп2);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1);
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕстьNULL(СУММА(уатМоделиТС.Грузоподъемность * &КоэфГрузоподъемности), 0) КАК Грузоподъемность,
	|	ЕстьNULL(СУММА(уатМоделиТС.ОбъемКузова * &КоэфОбъемаКузова), 0) КАК ОбъемКузова,
	|	ЕстьNULL(СУММА(уатМоделиТС.МаксимальноеКоличествоУпаковок), 0) КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|		ПО уатТС.Модель = уатМоделиТС.Ссылка
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ХарактеристикиСцепки.Грузоподъемность               = Выборка.Грузоподъемность;
		ХарактеристикиСцепки.ОбъемКузова                    = Выборка.ОбъемКузова;
		ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок = Выборка.МаксимальноеКоличествоУпаковок;
	КонецЕсли;
	
	ХарактеристикиСцепки.ТипТС = ТС.ТипТС;
	Если Не ЗначениеЗаполнено(ХарактеристикиСцепки.ТипТС) Тогда 
		ХарактеристикиСцепки.ТипТС = ТС.Модель.ТипТС;
	КонецЕсли;
	
	Возврат ХарактеристикиСцепки;
	
КонецФункции

// Процедура - Выполнить распределение сервер
//
// Параметры:
//  ДокОбъект - ДокументОбъект.уатМаршрутныйЛист или ДанныеФормыСтруктура - Маршрутный лист
//  ДанныеПоЗаказам		 - 	 - 
//  РаспредЗаказов		 - 	 - 
//  ТекстПредупреждения	 - 	 - 
//
&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДокОбъект, ДанныеПоЗаказам, РаспредЗаказов, ТекстПредупреждения = "") Экспорт
	
	флВнешняяМаршрутизация = РаспредЗаказов.Свойство("ВнешняяМаршрутизация");
	
	Если флВнешняяМаршрутизация Тогда
		
		ТипыТочекМаршрута_Разгрузка   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		ТипыТочекМаршрута_Погрузка    = Перечисления.уатТипыТочекМаршрута.Погрузка;
		МассивЗаказовДляПерезаписи    = Новый Массив();
		
		СтрокаСвойствТочки = "Адрес, Заказ, Груз, Количество, Операция, Ожидание, Стоянка, Время, Расстояние, СтоянкиНеИспользуются, GUID";
		
		НовМаршрут = Новый Массив();
		
		МассивИдентификоторовСтрокЗаказа = Новый Соответствие();
		СтруктураТочкиПогрузки  = Новый Структура(СтрокаСвойствТочки);
		ТочкаПогрузкиОпределена = Ложь;
		ТочкаПогрузкиИндекс     = 0;
		Счетчик                 = 0;
		
		ТекПул = РаспредЗаказов.пул;
		
		Для Каждого ТекЭлемент Из ТекПул.маршрут Цикл 
			
			Если ТекЭлемент.Тип = "drop_off" Тогда
				ТочкаПогрузкиОпределена = Истина;
				Операция                = ТипыТочекМаршрута_Разгрузка;
				Для Каждого ТекСтрока Из МассивИдентификоторовСтрокЗаказа Цикл
					
					ТекСтрокаЗначение = ТекСтрока.Значение;
					
					СтруктураТочки = Новый Структура(
					СтрокаСвойствТочки,
					ТекЭлемент.Адрес, 
					ТекСтрокаЗначение.Заказ,
					ТекСтрокаЗначение.Груз,
					ТекСтрокаЗначение.Количество,
					ТипыТочекМаршрута_Разгрузка,
					ТекЭлемент.Ожидание,
					ТекЭлемент.Стоянка,
					ТекЭлемент.ВремяВПути,
					ТекЭлемент.Расстояние,
					Истина,
					ТекСтрокаЗначение.GUID);
					
					НовМаршрут.Добавить(СтруктураТочки);
					МассивЗаказовДляПерезаписи.Добавить(Новый Структура("Заказ, АдресНазначения", ТекСтрокаЗначение.Заказ, ТекЭлемент.Адрес));
				КонецЦикла;
			Иначе
				СтруктураТочки = Новый Структура(
				СтрокаСвойствТочки,
				ТекЭлемент.Адрес, 
				ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"),
				ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
				0,
				ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПустаяСсылка"),
				ТекЭлемент.Ожидание,
				ТекЭлемент.Стоянка,
				ТекЭлемент.ВремяВПути,
				ТекЭлемент.Расстояние,
				?(ТекЭлемент.Тип = "garage", Истина, Ложь),
				ТекЭлемент.Заказ);
				Для Каждого ИсходСтрока Из ДанныеПоЗаказам.Заказы Цикл 
					Если Строка(ИсходСтрока.GUID) = ТекЭлемент.Заказ Тогда
						СтруктураТочки.Заказ      = ИсходСтрока.Заказ;
						СтруктураТочки.Груз       = ИсходСтрока.Груз;
						СтруктураТочки.Количество = ИсходСтрока.Количество;
						СтруктураТочки.GUID       = ИсходСтрока.GUID;
						
						Если ТекЭлемент.Тип = "delivery" Тогда
							Операция = ТипыТочекМаршрута_Разгрузка;
							Если МассивИдентификоторовСтрокЗаказа.Получить(ИсходСтрока.GUID) = Неопределено Тогда
								
								ТекСтруктураТочкиПогрузки = Новый Структура(СтрокаСвойствТочки);
								ЗаполнитьЗначенияСвойств(ТекСтруктураТочкиПогрузки, СтруктураТочкиПогрузки);
								ТекСтруктураТочкиПогрузки.Заказ      = ИсходСтрока.Заказ;
								ТекСтруктураТочкиПогрузки.Операция   = ТипыТочекМаршрута_Погрузка;
								ТекСтруктураТочкиПогрузки.Груз       = ИсходСтрока.Груз;
								ТекСтруктураТочкиПогрузки.Количество = ИсходСтрока.Количество;
								ТекСтруктураТочкиПогрузки.GUID       = ИсходСтрока.GUID;
								
								Если НЕ ТочкаПогрузкиОпределена Тогда
									ТекСтруктураТочкиПогрузки.Адрес = ИсходСтрока.ПунктПогрузки;
									Если РаспредЗаказов.пул.Свойство("ВремяВПутиОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Время = РаспредЗаказов.пул.ВремяВПутиОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("РасстояниеОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Расстояние = РаспредЗаказов.пул.РасстояниеОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("ОжиданиеОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Ожидание = РаспредЗаказов.пул.ОжиданиеОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("СтоянкаОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Стоянка = РаспредЗаказов.пул.СтоянкаОтГаража;
									КонецЕсли;
									НовМаршрут.Вставить(0, ТекСтруктураТочкиПогрузки); 
									ТочкаПогрузкиИндекс = 0;
								Иначе
									НовМаршрут.Вставить(ТочкаПогрузкиИндекс + 1, ТекСтруктураТочкиПогрузки);
									ТочкаПогрузкиИндекс = ТочкаПогрузкиИндекс + 1;
								КонецЕсли; 
								ТочкаПогрузкиОпределена = Истина;
							КонецЕсли;
						Иначе
							Операция = ТипыТочекМаршрута_Погрузка;
							МассивИдентификоторовСтрокЗаказа.Вставить(ИсходСтрока.GUID, СтруктураТочки);
						КонецЕсли;
						СтруктураТочки.Операция   = Операция;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ИсходСтрока Из ДанныеПоЗаказам.МассивПромежуточныхТочек Цикл
					Если Строка(ИсходСтрока.GUID) = ТекЭлемент.Заказ Тогда
						СтруктураТочки.GUID  = ИсходСтрока.GUID;
						СтруктураТочки.Адрес = ИсходСтрока.Ссылка;
						
						Если ТекЭлемент.Тип = "delivery" Тогда
							Операция = ТипыТочекМаршрута_Разгрузка;
						Иначе
							Операция = ТипыТочекМаршрута_Погрузка;
							МассивИдентификоторовСтрокЗаказа.Вставить(ИсходСтрока.GUID, СтруктураТочки);
						КонецЕсли;
						СтруктураТочки.Операция   = Операция;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НовМаршрут.Добавить(СтруктураТочки);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтруктураТочки.Операция)
				И НЕ ТочкаПогрузкиОпределена Тогда
				ЗаполнитьЗначенияСвойств(СтруктураТочкиПогрузки, СтруктураТочки);
				ТочкаПогрузкиИндекс = Счетчик;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ТекПул.маршрут.Очистить();
		
		СоответвиеРазгрузок = Новый Соответствие();
		Для Каждого ТекСтрока Из НовМаршрут Цикл
			
			Количество = 0;
			Если ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
				Если ТекКоличество = Неопределено Тогда
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекСтрока.Количество);
					Количество = ТекСтрока.Количество;
				Иначе
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество + ТекСтрока.Количество);
					Количество = ТекКоличество + ТекСтрока.Количество;
				КонецЕсли;
			ИначеЕсли ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
				Если ТекКоличество = Неопределено Тогда
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, - ТекСтрока.Количество);
					Количество = ТекСтрока.Количество;
				Иначе
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество - ТекСтрока.Количество);
					Количество = ТекКоличество - ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если Количество = Неопределено
				ИЛИ Количество >= 0 Тогда
				ТекПул.маршрут.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекПул.Свойство("ВремяНачалаМаршрута") Тогда 
			ТекПул.Вставить("ВремяВыездаНаМаршрут", НачалоДня(ДанныеПоЗаказам.ДатаВыезда) + ТекПул.ВремяНачалаМаршрута);
		КонецЕсли;
		
	КонецЕсли;
	
	ТабЗаказы = ДокОбъект.Заказы.Выгрузить();
	ДокОбъект.Заказы.Очистить();
	
	НераспределенныеЗаказы = Новый Массив();
	Для Каждого ИсходныйЗаказ Из ДанныеПоЗаказам.Заказы Цикл 
		флПерераспределен = Ложь;
		Для Каждого СтрокаРезультат Из РаспредЗаказов.пул.маршрут Цикл
			GUIDЗаказа  = ?(СтрокаРезультат.Свойство("GUID"), СтрокаРезультат.GUID, СтрокаРезультат.заказ.Ссылка);
			Если ИсходныйЗаказ.Ссылка = GUIDЗаказа Тогда 
				флПерераспределен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не флПерераспределен Тогда 
			GUIDЗаказа = ИсходныйЗаказ.Ссылка;
			GUIDСтроки = ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Получить(GUIDЗаказа).Получить("Погрузка");
			
			СтрокаЗаказа = ТабЗаказы.Найти(GUIDСтроки, "GUIDСтроки");
			
			НераспределенныеЗаказы.Добавить(СтрокаЗаказа.ЗаказГрузоотправителя);
			
			РаспредЗаказов.пул.маршрут.Добавить(
				Новый Структура("заказ,пункт,Операция,Ожидание", ИсходныйЗаказ, ИсходныйЗаказ.ПунктПогрузки, ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"), 0)
			);
			РаспредЗаказов.пул.маршрут.Добавить(
				Новый Структура("заказ,пункт,Операция,Ожидание", ИсходныйЗаказ, ИсходныйЗаказ.ПунктРазгрузки, ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"), 0)
			);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабЗаказы.Количество()
		И ТабЗаказы[0].ТипТочкиМаршрута <> Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
		ПунктГараж = ТабЗаказы[0].Пункт;
	Иначе
		ПунктГараж = Неопределено;
	КонецЕсли;
	
	Если НЕ ДанныеПоЗаказам.Гараж = Неопределено И ДанныеПоЗаказам.Гараж = ПунктГараж Тогда 
		СтрокаГаражВыезд = ДокОбъект.Заказы.Добавить();
		СтрокаГаражВыезд.Пункт            = ДанныеПоЗаказам.Гараж;
		СтрокаГаражВыезд.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		
		Если РаспредЗаказов.пул.Свойство("ВремяВПутиОтГаража") Тогда 
			СтрокаГаражВыезд.Время = РаспредЗаказов.пул.ВремяВПутиОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("РасстояниеОтГаража") Тогда 
			СтрокаГаражВыезд.Расстояние = РаспредЗаказов.пул.РасстояниеОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("ОжиданиеОтГаража") Тогда 
			СтрокаГаражВыезд.Ожидание = РаспредЗаказов.пул.ОжиданиеОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("СтоянкаОтГаража") Тогда 
			СтрокаГаражВыезд.СтоянкаИзПункта = РаспредЗаказов.пул.СтоянкаОтГаража;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрокаРезультат Из РаспредЗаказов.пул.маршрут Цикл 
		GUIDЗаказа  = ?(ТекСтрокаРезультат.Свойство("GUID"), ТекСтрокаРезультат.GUID, ТекСтрокаРезультат.заказ.Ссылка);
		ДанныеСтрок = ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Получить(GUIDЗаказа);
		Если ДанныеСтрок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриемник = Неопределено;
		
		Если ДанныеСтрок.Получить("ВсеСтрокиЗаказа") <> Неопределено Тогда 
			Если ТекСтрокаРезультат.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
				Для Каждого СтрокаFTL Из ДанныеСтрок.Получить("ВсеСтрокиЗаказа") Цикл 
					СтрокаИсточник = ТабЗаказы.Найти(СтрокаFTL, "GUIDСтроки");
					СтрокаПриемник = ДокОбъект.Заказы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
				КонецЦикла;
			КонецЕсли;
			
		Иначе 
			Если ТекСтрокаРезультат.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
				GUIDСтроки = ДанныеСтрок.Получить("Погрузка");
			Иначе 
				GUIDСтроки = ДанныеСтрок.Получить("Разгрузка");
			КонецЕсли;
			
			СтрокаИсточник = ТабЗаказы.Найти(GUIDСтроки, "GUIDСтроки"); 
			Если СтрокаИсточник = Неопределено Тогда
				Продолжить;
			Конецесли;
			СтрокаПриемник = ДокОбъект.Заказы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		КонецЕсли;
		
		Если Не СтрокаПриемник = Неопределено Тогда 
			Если ТекСтрокаРезультат.Свойство("Ожидание") Тогда 
				СтрокаПриемник.Ожидание = ТекСтрокаРезультат.Ожидание;
			КонецЕсли;
			
			Если ТекСтрокаРезультат.Свойство("Время") Тогда 
				СтрокаПриемник.Время = ТекСтрокаРезультат.Время;
			КонецЕсли;
			
			Если ТекСтрокаРезультат.Свойство("Расстояние") Тогда 
				СтрокаПриемник.Расстояние = ТекСтрокаРезультат.Расстояние;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоЗаказам.УчитыватьГаражВозвращения
		И НЕ ДанныеПоЗаказам.ГаражВозвращения = Неопределено Тогда 
		СтрокаГаражВозврат = ДокОбъект.Заказы.Добавить();
		СтрокаГаражВозврат.Пункт            = ДанныеПоЗаказам.ГаражВозвращения;
		СтрокаГаражВозврат.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
	КонецЕсли;
	
	Если ДокОбъект.Заказы.Количество() Тогда 
		ПредПункт    = ДокОбъект.Заказы[0].Пункт;
		СтоянкаПункт = ДокОбъект.Заказы[0].СтоянкаИзПункта;
		
		Для Каждого ТекСтрока Из ДокОбъект.Заказы Цикл 
			Если Не ТекСтрока.Пункт = ПредПункт Тогда 
				Прервать;
			КонецЕсли;
			
			СтоянкаПункт = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПункт, ТекСтрока.Стоянка);
		КонецЦикла;
		
		Если РаспредЗаказов.пул.Свойство("ВремяВыездаНаМаршрут") Тогда 
			ДокОбъект.Заказы[0].ПрибытиеПлан = РаспредЗаказов.пул.ВремяВыездаНаМаршрут;
		Иначе 
			ДокОбъект.Заказы[0].ПрибытиеПлан = ДанныеПоЗаказам.ДатаВыезда;
		КонецЕсли;
		
		ДокОбъект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДокОбъект.Заказы[0].ПрибытиеПлан, СтоянкаПункт);
	КонецЕсли;
	
	Если НераспределенныеЗаказы.Количество() Тогда 
		ТекстПредупреждения = НСтр("en='Allocation of orders is completed.';ru='Распределение заказов завершено.'");
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='Failed to allocate the following orders:';ru='Не удалось распределить следующие заказы:'");
		
		Для Каждого ТекЗаказ Из НераспределенныеЗаказы Цикл 
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Строка(ТекЗаказ);
		КонецЦикла;
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='These orders added to the end of routing list.';ru='Указанные заказы добавлены в конец маршрутного листа.'");
		
	Иначе 
		ТекстПредупреждения = НСтр("en='Redistribution of orders completed successfully.';ru='Перераспределение заказов выполнено успешно.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Функция получает структуру параметров для получения договора покупки
//
// Возвращаемое значение:
//   Структура   – Структура со значением вида договора "С поставщиком"
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()

// Формирует структуру параметров для получения договора продажи со значениями по умолчанию.
//
// Возвращаемое значение:
//   Структура – структура параметров для получения договора продажи.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()

// Функция возвращает основной договор контрагента
//
// Параметры
//  Контрагент  – Ссылка на справочник контрагентов
//	ВидДоговора - значение перечисления или массив/список значений
//
// Возвращаемое значение:
//   Ссылка на справочник договоры контрагентов
//
Функция ПолучитьОсновнойДоговорКонтрагента(Контрагент, Знач ВидДоговора = Неопределено,
	Знач Организация = Неопределено, Знач Валюта = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК ДоступныйДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
	|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
	|			И ДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДоговорыКонтрагентов.Организация = &Организация)
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	|	И (&Валюта = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
	
	мсвВидДоговора = Новый Массив;
	Если ВидДоговора = Неопределено Тогда
		Для Каждого ТекВидДоговора Из Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления Цикл
			мсвВидДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов[ТекВидДоговора.Имя]);
		КонецЦикла;
	Иначе
		Если ТипЗнч(ВидДоговора) = Тип("Массив") ИЛИ ТипЗнч(ВидДоговора) = Тип("СписокЗначений") Тогда
			мсвВидДоговора = ВидДоговора;
		Иначе
			Если ТипЗнч(ВидДоговора) = Тип("Строка") Тогда
				мсвВидДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов[ВидДоговора]);
			Иначе
				мсвВидДоговора.Добавить(ВидДоговора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДоговора", мсвВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоступныйДоговорКонтрагента;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьОсновнойДоговорКонтрагента()

#КонецОбласти

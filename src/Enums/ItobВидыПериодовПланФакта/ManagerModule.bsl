#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует структуру данных подбора периода
// 
// Возвращаемое значение:
//  Структура
//
Функция ДанныеПодбораПериода() Экспорт
	
	ДанныеПодбораПериода = Новый Структура;
	ДанныеПодбораПериода.Вставить("ВидИсточникаПериода", Перечисления.ItobВидыПериодовПланФакта.ПлановыеОкна);	
	ДанныеПодбораПериода.Вставить("ДатаВыезда");	
	ДанныеПодбораПериода.Вставить("ДатаВозвращения");	
	ДанныеПодбораПериода.Вставить("ДатаВыездаФактРасчетная");
	ДанныеПодбораПериода.Вставить("ДатаВозвращенияФактРасчетная");	
	ДанныеПодбораПериода.Вставить("ДатаВыездаФактРучнойВвод");
	ДанныеПодбораПериода.Вставить("ДатаВозвращенияФактРучнойВвод");
	
	
	Возврат ДанныеПодбораПериода;
	
КонецФункции

// Функция - Выбрать корректные границы периода для расчета фактического маршрута
// 
//
// Параметры:
//  ДанныеПодбораПериода - Структура:
//     * ВидИсточникаПериода - ПеречислениеСсылка.ItobВидыПериодовПланФакта
//     * ДатаВыезда						- Дата
//     * ДатаВозвращения				- Дата
//     * ДатаВыездаФактРасчетная		- Дата
//     * ДатаВозвращенияФактРасчетная	- Дата
//     * ДатаВыездаФактРучнойВвод		- Дата
//     * ДатаВозвращенияФактРучнойВвод	- Дата
// 
// Возвращаемое значение:
//  - Структура:
//     * НачалоПериода	- Дата
//     * КонецПериода	- Дата
//  - Неопределено
//
Функция ВыбратьКорректныеГраницыПериодаДляРасчетаФактическогоМаршрута(ДанныеПодбораПериода) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеПодбораПериода.ВидИсточникаПериода) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.НеРассчитывать Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
 	Если НЕ ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВыезда)
		 ИЛИ НЕ ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВозвращения) Тогда
		 
		Возврат Неопределено;
	КонецЕсли; 
	
	Результат = Новый Структура("НачалоПериода, КонецПериода");
	
	ОбщийМодульПланФактПовтИсп = ОбщегоНазначения.ОбщийМодуль("ItobПланФактПовтИсп");
	СдвигДатыВыездаВлево = ОбщийМодульПланФактПовтИсп.ОтклонениеОтНачалаПлановогоОкна();
	СдвигДатыВозвращенияВправо = ОбщийМодульПланФактПовтИсп.ОтклонениеОтОкончанияПлановогоОкна();
	
	Если ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.ПлановыеОкна Тогда
		Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыезда - СдвигДатыВыездаВлево;
		Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращения + СдвигДатыВозвращенияВправо;
		
	ИначеЕсли ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.ФактРассчитанныеЗатемПлановыеОкна Тогда 
		Если ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВыездаФактРасчетная)
			 И ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВозвращенияФактРасчетная) Тогда
			 
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыездаФактРасчетная;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращенияФактРасчетная;
		Иначе
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыезда - СдвигДатыВыездаВлево;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращения + СдвигДатыВозвращенияВправо;
		КонецЕсли; 
		
	ИначеЕсли ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.ФактВведенныеЗатемПлановыеОкна Тогда 
		Если ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВыездаФактРучнойВвод)
			 И ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВозвращенияФактРучнойВвод) Тогда
			 
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыездаФактРучнойВвод;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращенияФактРучнойВвод;
		Иначе
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыезда - СдвигДатыВыездаВлево;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращения + СдвигДатыВозвращенияВправо;
		КонецЕсли;
				
	ИначеЕсли ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.Авто Тогда 
		Если ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВыездаФактРучнойВвод)
			 И ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВозвращенияФактРучнойВвод) Тогда
			 
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыездаФактРучнойВвод;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращенияФактРучнойВвод;
		ИначеЕсли ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВыездаФактРасчетная)
			 И ЗначениеЗаполнено(ДанныеПодбораПериода.ДатаВозвращенияФактРасчетная) Тогда
			 
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыездаФактРасчетная;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращенияФактРасчетная;	
		Иначе
			Результат.НачалоПериода = ДанныеПодбораПериода.ДатаВыезда - СдвигДатыВыездаВлево;
			Результат.КонецПериода = ДанныеПодбораПериода.ДатаВозвращения + СдвигДатыВозвращенияВправо;
		КонецЕсли;
		
	ИначеЕсли ДанныеПодбораПериода.ВидИсточникаПериода = Перечисления.ItobВидыПериодовПланФакта.ВзятьИзНастройкиВизуализацииФактМаршрута Тогда 
		ЗначениеНастройки = ОбщийМодульПланФактПовтИсп.ИсточникПериодаПриВизуализацииФактМаршрута();
		Если ЗначениеНастройки = Перечисления.ItobВидыПериодовПланФакта.ВзятьИзНастройкиВизуализацииФактМаршрута Тогда
			// Защита от зацикливания - сюда никогда попадать не должны.
			Возврат Неопределено;
		КонецЕсли; 
		
		ДанныеВторойИтерацииРасчетаМаршрута = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПодбораПериода); 
		ДанныеВторойИтерацииРасчетаМаршрута.ВидИсточникаПериода = ЗначениеНастройки;
		Результат = ВыбратьКорректныеГраницыПериодаДляРасчетаФактическогоМаршрута(ДанныеВторойИтерацииРасчетаМаршрута);
	Иначе
		Результат = Неопределено;
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

// Функция - Перечень выбора для настройки визуализации
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ItobВидыПериодовПланФакта 
//
Функция ПереченьВыбораДляНастройкиВизуализации() Экспорт
	
	ПереченьВыбора = Новый Массив;
	ПереченьВыбора.Добавить(Перечисления.ItobВидыПериодовПланФакта.Авто);
	ПереченьВыбора.Добавить(Перечисления.ItobВидыПериодовПланФакта.ФактРассчитанныеЗатемПлановыеОкна);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПереченьВыбора, ОбязательныйПереченьВыбора());
	
	
	Возврат ПереченьВыбора;
	
КонецФункции

// Функция - Перечень выбора для настройки ядра подсистемы
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ItobВидыПериодовПланФакта 
//
Функция ПереченьВыбораДляНастройкиЯдраПодсистемы() Экспорт
		
	Возврат ОбязательныйПереченьВыбора();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбязательныйПереченьВыбора()
	
	ПереченьВыбора = Новый Массив;
	ПереченьВыбора.Добавить(Перечисления.ItobВидыПериодовПланФакта.ФактВведенныеЗатемПлановыеОкна);
	ПереченьВыбора.Добавить(Перечисления.ItobВидыПериодовПланФакта.ПлановыеОкна);
	
	
	Возврат ПереченьВыбора;
	
КонецФункции
 
#КонецОбласти

#КонецЕсли
